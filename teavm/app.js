"use strict";
(function(module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(exports);
        });
    } else if (typeof exports === 'object' && exports !== null && typeof exports.nodeName !== 'string') {
        module(exports);
    } else {
        module(typeof self !== 'undefined' ? self : this);
}
}(function($rt_exports) {
let $rt_seed = 2463534242,
$rt_nextId = () => {
    let x = $rt_seed;
    x ^= x << 13;
    x ^= x >>> 17;
    x ^= x << 5;
    $rt_seed = x;
    return x;
},
$rt_wrapFunction0 = f => function() {
    return f(this);
},
$rt_wrapFunction1 = f => function(p1) {
    return f(this, p1);
},
$rt_wrapFunction2 = f => function(p1, p2) {
    return f(this, p1, p2);
},
$rt_wrapFunction3 = f => function(p1, p2, p3) {
    return f(this, p1, p2, p3, p3);
},
$rt_wrapFunction4 = f => function(p1, p2, p3, p4) {
    return f(this, p1, p2, p3, p4);
},
$rt_mainStarter = f => (args, callback) => {
    if (!args) {
        args = [];
    }
    let javaArgs = $rt_createArray($rt_objcls(), args.length);
    for (let i = 0;i < args.length;++i) {
        javaArgs.data[i] = $rt_str(args[i]);
    }
    $rt_startThread(() => {
        f.call(null, javaArgs);
    }, callback);
},
$rt_eraseClinit = target => target.$clinit = () => {
},
$dbg_class = obj => {
    let cls = obj.constructor;
    let arrayDegree = 0;
    while (cls.$meta && cls.$meta.item) {
        ++arrayDegree;
        cls = cls.$meta.item;
    }
    let clsName = "";
    if (cls.$meta.primitive) {
        clsName = cls.$meta.name;
    } else {
        clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
    }
    while (arrayDegree-- > 0) {
        clsName += "[]";
    }
    return clsName;
},
$rt_classWithoutFields = superclass => {
    if (superclass === 0) {
        return function() {
        };
    }
    if (superclass === void 0) {
        superclass = $rt_objcls();
    }
    return function() {
        superclass.call(this);
    };
},
$rt_cls = cls => jl_Class_getClass(cls),
$rt_objcls = () => jl_Object,
$rt_getThread = () => {
    {
        return jl_Thread_currentThread0();
    }
},
$rt_setThread = t => {
    {
        return jl_Thread_setCurrentThread(t);
    }
},
$rt_callWithReceiver = f => function() {
    return f.apply(null, [this].concat(Array.prototype.slice.call(arguments)));
},
$rt_createcls = () => {
    return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
},
$rt_createPrimitiveCls = (name, binaryName) => {
    let cls = $rt_createcls();
    cls.$meta.primitive = true;
    cls.$meta.name = name;
    cls.$meta.binaryName = binaryName;
    cls.$meta.enum = false;
    cls.$meta.item = null;
    cls.$meta.simpleName = null;
    cls.$meta.declaringClass = null;
    cls.$meta.enclosingClass = null;
    return cls;
},
$rt_booleancls = $rt_createPrimitiveCls("boolean", "Z"),
$rt_charcls = $rt_createPrimitiveCls("char", "C"),
$rt_bytecls = $rt_createPrimitiveCls("byte", "B"),
$rt_shortcls = $rt_createPrimitiveCls("short", "S"),
$rt_intcls = $rt_createPrimitiveCls("int", "I"),
$rt_longcls = $rt_createPrimitiveCls("long", "J"),
$rt_floatcls = $rt_createPrimitiveCls("float", "F"),
$rt_doublecls = $rt_createPrimitiveCls("double", "D"),
$rt_voidcls = $rt_createPrimitiveCls("void", "V"),
$rt_numberConversionBuffer = new ArrayBuffer(16),
$rt_numberConversionFloatArray = new Float32Array($rt_numberConversionBuffer),
$rt_numberConversionDoubleArray = new Float64Array($rt_numberConversionBuffer),
$rt_numberConversionIntArray = new Int32Array($rt_numberConversionBuffer),
$rt_numberConversionLongArray = new BigInt64Array($rt_numberConversionBuffer),
$rt_doubleToRawLongBits = n => {
    $rt_numberConversionDoubleArray[0] = n;
    return $rt_numberConversionLongArray[0];
},
$rt_longBitsToDouble = n => {
    $rt_numberConversionLongArray[0] = n;
    return $rt_numberConversionDoubleArray[0];
},
$rt_floatToRawIntBits = n => {
    $rt_numberConversionFloatArray[0] = n;
    return $rt_numberConversionIntArray[0];
},
$rt_intBitsToFloat = n => {
    $rt_numberConversionIntArray[0] = n;
    return $rt_numberConversionFloatArray[0];
},
$rt_compare = (a, b) => a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1,
$rt_imul = Math.imul || function(a, b) {
    let ah = a >>> 16 & 0xFFFF;
    let al = a & 0xFFFF;
    let bh = b >>> 16 & 0xFFFF;
    let bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
},
$rt_udiv = (a, b) => (a >>> 0) / (b >>> 0) >>> 0,
$rt_umod = (a, b) => (a >>> 0) % (b >>> 0) >>> 0,
$rt_ucmp = (a, b) => {
    a >>>= 0;
    b >>>= 0;
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_ZERO = BigInt(0),
Long_create = (lo, hi) => BigInt.asIntN(64, BigInt.asUintN(64, BigInt(lo)) | BigInt.asUintN(64, BigInt(hi) << BigInt(32))),
Long_fromInt = val => BigInt.asIntN(64, BigInt(val | 0)),
Long_fromNumber = val => BigInt.asIntN(64, BigInt(val >= 0 ? Math.floor(val) : Math.ceil(val))),
Long_toNumber = val => Number(val),
Long_hi = val => Number(BigInt.asIntN(64, val >> BigInt(32))) | 0,
Long_lo = val => Number(BigInt.asIntN(32, val)) | 0,
Long_eq = (a, b) => a === b,
Long_ne = (a, b) => a !== b;
let Long_gt = (a, b) => a > b,
Long_ge = (a, b) => a >= b,
Long_lt = (a, b) => a < b,
Long_le = (a, b) => a <= b,
Long_add = (a, b) => BigInt.asIntN(64, a + b),
Long_neg = a => BigInt.asIntN(64,  -a),
Long_sub = (a, b) => BigInt.asIntN(64, a - b),
Long_compare = (a, b) => a < b ?  -1 : a > b ? 1 : 0,
Long_ucompare = (a, b) => {
    a = BigInt.asUintN(64, a);
    b = BigInt.asUintN(64, b);
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_mul = (a, b) => BigInt.asIntN(64, a * b),
Long_div = (a, b) => BigInt.asIntN(64, a / b),
Long_udiv = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) / BigInt.asUintN(64, b)),
Long_rem = (a, b) => BigInt.asIntN(64, a % b),
Long_urem = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) % BigInt.asUintN(64, b)),
Long_and = (a, b) => BigInt.asIntN(64, a & b),
Long_or = (a, b) => BigInt.asIntN(64, a | b),
Long_xor = (a, b) => BigInt.asIntN(64, a ^ b),
Long_shl = (a, b) => BigInt.asIntN(64, a << BigInt(b & 63)),
Long_shr = (a, b) => BigInt.asIntN(64, a >> BigInt(b & 63)),
Long_shru = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) >> BigInt(b & 63)),
$rt_createArray = (cls, sz) => {
    let data = new Array(sz);
    data.fill(null);
    return new ($rt_arraycls(cls))(data);
},
$rt_wrapArray = (cls, data) => new ($rt_arraycls(cls))(data),
$rt_createLongArray = sz => new $rt_longArrayCls(new BigInt64Array(sz)),
$rt_createLongArrayFromData = data => {
    let buffer = new BigInt64Array(data.length);
    buffer.set(data);
    return new $rt_longArrayCls(buffer);
},
$rt_createCharArray = sz => new $rt_charArrayCls(new Uint16Array(sz)),
$rt_createCharArrayFromData = data => {
    let buffer = new Uint16Array(data.length);
    buffer.set(data);
    return new $rt_charArrayCls(buffer);
},
$rt_createByteArray = sz => new $rt_byteArrayCls(new Int8Array(sz)),
$rt_createByteArrayFromData = data => {
    let buffer = new Int8Array(data.length);
    buffer.set(data);
    return new $rt_byteArrayCls(buffer);
},
$rt_createShortArray = sz => new $rt_shortArrayCls(new Int16Array(sz)),
$rt_createShortArrayFromData = data => {
    let buffer = new Int16Array(data.length);
    buffer.set(data);
    return new $rt_shortArrayCls(buffer);
},
$rt_createIntArray = sz => new $rt_intArrayCls(new Int32Array(sz)),
$rt_createIntArrayFromData = data => {
    let buffer = new Int32Array(data.length);
    buffer.set(data);
    return new $rt_intArrayCls(buffer);
},
$rt_createBooleanArray = sz => new $rt_booleanArrayCls(new Int8Array(sz)),
$rt_createFloatArray = sz => new $rt_floatArrayCls(new Float32Array(sz)),
$rt_createFloatArrayFromData = data => {
    let buffer = new Float32Array(data.length);
    buffer.set(data);
    return new $rt_floatArrayCls(buffer);
},
$rt_createDoubleArray = sz => new $rt_doubleArrayCls(new Float64Array(sz)),
$rt_arraycls = cls => {
    let result = cls.$array;
    if (result === null) {
        function JavaArray(data) {
            ($rt_objcls()).call(this);
            this.data = data;
        }
        JavaArray.prototype = Object.create(($rt_objcls()).prototype);
        JavaArray.prototype.type = cls;
        JavaArray.prototype.constructor = JavaArray;
        JavaArray.prototype.toString = function() {
            let str = "[";
            for (let i = 0;i < this.data.length;++i) {
                if (i > 0) {
                    str += ", ";
                }
                str += this.data[i].toString();
            }
            str += "]";
            return str;
        };
        JavaArray.prototype.$clone0 = function() {
            let dataCopy;
            if ('slice' in this.data) {
                dataCopy = this.data.slice();
            } else {
                dataCopy = new this.data.constructor(this.data.length);
                for (let i = 0;i < dataCopy.length;++i) {
                    dataCopy[i] = this.data[i];
                }
            }
            return new ($rt_arraycls(this.type))(dataCopy);
        };
        let name = "[" + cls.$meta.binaryName;
        JavaArray.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
        JavaArray.classObject = null;
        JavaArray.$array = null;
        result = JavaArray;
        cls.$array = JavaArray;
    }
    return result;
},
$rt_stringPool_instance,
$rt_stringPool = strings => {
    $rt_stringClassInit();
    $rt_stringPool_instance = new Array(strings.length);
    for (let i = 0;i < strings.length;++i) {
        $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
    }
},
$rt_s = index => $rt_stringPool_instance[index],
$rt_charArrayToString = (array, offset, count) => {
    let result = "";
    let limit = offset + count;
    for (let i = offset;i < limit;i = i + 1024 | 0) {
        let next = Math.min(limit, i + 1024 | 0);
        result += String.fromCharCode.apply(null, array.subarray(i, next));
    }
    return result;
},
$rt_fullArrayToString = array => $rt_charArrayToString(array, 0, array.length),
$rt_stringToCharArray = (string, begin, dst, dstBegin, count) => {
    for (let i = 0;i < count;i = i + 1 | 0) {
        dst[dstBegin + i] = string.charCodeAt(begin + i);
    }
},
$rt_fastStringToCharArray = string => {
    let array = new Uint16Array(string.length);
    for (let i = 0;i < array.length;++i) {
        array[i] = string.charCodeAt(i);
    }
    return new $rt_charArrayCls(array);
},
$rt_str = str => str === null ? null : jl_String__init_1(str),
$rt_ustr = str => str === null ? null : str.$nativeString,
$rt_stringClassInit = () => (() => {})(),
$rt_intern;
{
    $rt_intern = str => str;
}
let $rt_isInstance = (obj, cls) => obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls),
$rt_isAssignable = (from, to) => {
    if (from === to) {
        return true;
    }
    let map = from.$meta.assignableCache;
    if (typeof map === 'undefined') {
        map = new Map();
        from.$meta.assignableCache = map;
    }
    let cachedResult = map.get(to);
    if (typeof cachedResult !== 'undefined') {
        return cachedResult;
    }
    if (to.$meta.item !== null) {
        let result = from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        map.set(to, result);
        return result;
    }
    let supertypes = from.$meta.supertypes;
    for (let i = 0;i < supertypes.length;i = i + 1 | 0) {
        if ($rt_isAssignable(supertypes[i], to)) {
            map.set(to, true);
            return true;
        }
    }
    map.set(to, false);
    return false;
},
$rt_throw = ex => {
    throw $rt_exception(ex);
},
$rt_javaExceptionProp = Symbol("javaException"),
$rt_exception = ex => {
    if (!ex.$jsException) {
        $rt_fillNativeException(ex);
    }
    return ex.$jsException;
},
$rt_fillNativeException = ex => {
    let javaCause = $rt_throwableCause(ex);
    let jsCause = javaCause !== null ? javaCause.$jsException : void 0;
    let cause = typeof jsCause === "object" ? { cause : jsCause } : void 0;
    let err = new JavaError("Java exception thrown", cause);
    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(err);
    }
    err[$rt_javaExceptionProp] = ex;
    ex.$jsException = err;
    $rt_fillStack(err, ex);
},
$rt_fillStack = (err, ex) => {
    if (typeof $rt_decodeStack === "function" && err.stack) {
        let stack = $rt_decodeStack(err.stack);
        let javaStack = $rt_createArray($rt_stecls(), stack.length);
        let elem;
        let noStack = false;
        for (let i = 0;i < stack.length;++i) {
            let element = stack[i];
            elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
            if (elem == null) {
                noStack = true;
                break;
            }
            javaStack.data[i] = elem;
        }
        if (!noStack) {
            $rt_setStack(ex, javaStack);
        }
    }
},
JavaError;
if (typeof Reflect === 'object') {
    let defaultMessage = Symbol("defaultMessage");
    JavaError = function JavaError(message, cause) {
        let self = Reflect.construct(Error, [void 0, cause], JavaError);
        Object.setPrototypeOf(self, JavaError.prototype);
        self[defaultMessage] = message;
        return self;
    }
    ;
    JavaError.prototype = Object.create(Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get() {
        try {
            let javaException = this[$rt_javaExceptionProp];
            if (typeof javaException === 'object') {
                let javaMessage = $rt_throwableMessage(javaException);
                if (typeof javaMessage === "object") {
                    return javaMessage !== null ? javaMessage.toString() : null;
                }
            }
            return this[defaultMessage];
        } catch (e){
            return "Exception occurred trying to extract Java exception message: " + e;
        }
    } } });
} else {
    JavaError = Error;
}
let $rt_javaException = e => e instanceof Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null,
$rt_wrapException = err => {
    let ex = err[$rt_javaExceptionProp];
    if (!ex) {
        ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
        err[$rt_javaExceptionProp] = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return ex;
},
$rt_createException = message => jl_RuntimeException__init_1(message),
$rt_throwableMessage = t => jl_Throwable_getMessage(t),
$rt_throwableCause = t => jl_Throwable_getCause(t),
$rt_stecls = () => $rt_objcls(),
$rt_createStackElement = (className, methodName, fileName, lineNumber) => {
    {
        return null;
    }
},
$rt_setStack = (e, stack) => {
},
$rt_createOutputFunction = outputFunction => {
    let buffer = "";
    return msg => {
        let index = 0;
        while (true) {
            let next = msg.indexOf('\n', index);
            if (next < 0) {
                break;
            }
            outputFunction(buffer + msg.substring(index, next));
            buffer = "";
            index = next + 1;
        }
        buffer += msg.substring(index);
    };
},
$rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.info(msg)) : () => {
},
$rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.error(msg)) : () => {
},
$rt_packageData = null,
$rt_packages = data => {
    let i = 0;
    let packages = new Array(data.length);
    for (let j = 0;j < data.length;++j) {
        let prefixIndex = data[i++];
        let prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
        packages[j] = prefix + data[i++] + ".";
    }
    $rt_packageData = packages;
},
$rt_metadata = data => {
    let packages = $rt_packageData;
    let i = 0;
    while (i < data.length) {
        let cls = data[i++];
        cls.$meta = {  };
        let m = cls.$meta;
        let className = data[i++];
        m.name = className !== 0 ? className : null;
        if (m.name !== null) {
            let packageIndex = data[i++];
            if (packageIndex >= 0) {
                m.name = packages[packageIndex] + m.name;
            }
        }
        m.binaryName = "L" + m.name + ";";
        let superclass = data[i++];
        m.superclass = superclass !== 0 ? superclass : null;
        m.supertypes = data[i++];
        if (m.superclass) {
            m.supertypes.push(m.superclass);
            cls.prototype = Object.create(m.superclass.prototype);
        } else {
            cls.prototype = {  };
        }
        let flags = data[i++];
        m.enum = (flags & 8) !== 0;
        m.flags = flags;
        m.primitive = false;
        m.item = null;
        cls.prototype.constructor = cls;
        cls.classObject = null;
        m.accessLevel = data[i++];
        let innerClassInfo = data[i++];
        if (innerClassInfo === 0) {
            m.simpleName = null;
            m.declaringClass = null;
            m.enclosingClass = null;
        } else {
            let enclosingClass = innerClassInfo[0];
            m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
            let declaringClass = innerClassInfo[1];
            m.declaringClass = declaringClass !== 0 ? declaringClass : null;
            let simpleName = innerClassInfo[2];
            m.simpleName = simpleName !== 0 ? simpleName : null;
        }
        let clinit = data[i++];
        cls.$clinit = clinit !== 0 ? clinit : function() {
        };
        let virtualMethods = data[i++];
        if (virtualMethods !== 0) {
            for (let j = 0;j < virtualMethods.length;j += 2) {
                let name = virtualMethods[j];
                let func = virtualMethods[j + 1];
                if (typeof name === 'string') {
                    name = [name];
                }
                for (let k = 0;k < name.length;++k) {
                    cls.prototype[name[k]] = func;
                }
            }
        }
        cls.$array = null;
    }
};
function TeaVMThread(runner) {
    this.status = 3;
    this.stack = [];
    this.suspendCallback = null;
    this.runner = runner;
    this.attribute = null;
    this.completeCallback = null;
}
TeaVMThread.prototype.push = function() {
    for (let i = 0;i < arguments.length;++i) {
        this.stack.push(arguments[i]);
    }
    return this;
};
TeaVMThread.prototype.s = TeaVMThread.prototype.push;
TeaVMThread.prototype.pop = function() {
    return this.stack.pop();
};
TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
TeaVMThread.prototype.isResuming = function() {
    return this.status === 2;
};
TeaVMThread.prototype.isSuspending = function() {
    return this.status === 1;
};
TeaVMThread.prototype.suspend = function(callback) {
    this.suspendCallback = callback;
    this.status = 1;
};
TeaVMThread.prototype.start = function(callback) {
    if (this.status !== 3) {
        throw new Error("Thread already started");
    }
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 0;
    this.completeCallback = callback ? callback : result => {
        if (result instanceof Error) {
            throw result;
        }
    };
    this.run();
};
TeaVMThread.prototype.resume = function() {
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 2;
    this.run();
};
TeaVMThread.prototype.run = function() {
    $rt_currentNativeThread = this;
    let result;
    try {
        result = this.runner();
    } catch (e){
        result = e;
    } finally {
        $rt_currentNativeThread = null;
    }
    if (this.suspendCallback !== null) {
        let self = this;
        let callback = this.suspendCallback;
        this.suspendCallback = null;
        callback(() => self.resume());
    } else if (this.status === 0) {
        this.completeCallback(result);
    }
};
let $rt_suspending = () => {
    let thread = $rt_nativeThread();
    return thread != null && thread.isSuspending();
},
$rt_resuming = () => {
    let thread = $rt_nativeThread();
    return thread != null && thread.isResuming();
},
$rt_requireNativeThread = () => {
    let nativeThread = $rt_nativeThread();
    if (nativeThread === null) {
        throw new Error("Suspension point reached from non-threading context " + "(perhaps, from native JS method). See https://teavm.org/docs/runtime/coroutines.html " + "('Interaction with JavaScript' section)");
    }
    return nativeThread;
},
$rt_startThread = (runner, callback) => (new TeaVMThread(runner)).start(callback),
$rt_currentNativeThread = null,
$rt_nativeThread = () => $rt_currentNativeThread,
$rt_invalidPointer = () => {
    throw new Error("Invalid recorded state");
};
function jl_Object() {
    this.$monitor = null;
    this.$id$ = 0;
}
let jl_Object_monitorEnterSync = $o => {
    let var$2;
    if (jl_Thread_currentThread === null)
        return;
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    $o = $o.$monitor;
    var$2 = $o.$owner;
    if (var$2 === null)
        $o.$owner = jl_Thread_currentThread;
    else if (var$2 !== jl_Thread_currentThread) {
        var$2 = new jl_IllegalStateException;
        jl_Exception__init_(var$2, $rt_s(0));
        $rt_throw(var$2);
    }
    $o.$count = $o.$count + 1 | 0;
},
jl_Object_monitorExitSync = $o => {
    let var$2, var$3;
    if (jl_Thread_currentThread === null)
        return;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (!var$3)
                var$2.$owner = null;
            jl_Object_isEmptyMonitor($o);
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_($o);
    $rt_throw($o);
},
jl_Object_monitorEnter = $o => {
    let var$2, var$3, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        let $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$o = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$2 = 1;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$3 = $o.$monitor;
        if (var$3.$owner === null)
            var$3.$owner = jl_Thread_currentThread;
        if (var$3.$owner === jl_Thread_currentThread) {
            var$3.$count = var$3.$count + var$2 | 0;
            return;
        }
        $ptr = 1;
    case 1:
        jl_Object_monitorEnterWait$_asyncCall_$($o, var$2);
        if ($rt_suspending()) {
            break main;
        }
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($o, var$2, var$3, $ptr);
},
jl_Object_createMonitor = $o => {
    $o.$monitor = jl_Object$Monitor__init_0();
},
jl_Object_monitorEnterWait = ($o, $count, $callback) => {
    let $thread_0, $monitor, var$6;
    $thread_0 = jl_Thread_currentThread;
    $monitor = $o.$monitor;
    if ($monitor === null) {
        jl_Object_createMonitor($o);
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        $o = null;
        otpp_AsyncCallbackWrapper_complete($callback, $o);
        return;
    }
    if ($monitor.$owner === null) {
        $monitor.$owner = $thread_0;
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        $o = null;
        otpp_AsyncCallbackWrapper_complete($callback, $o);
        return;
    }
    if ($monitor.$enteringThreads === null)
        $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
    $monitor = $monitor.$enteringThreads;
    var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
    var$6.$_04 = $thread_0;
    var$6.$_13 = $o;
    var$6.$_22 = $count;
    var$6.$_31 = $callback;
    $callback = var$6;
    $monitor.push($callback);
},
jl_Object_monitorExit = $o => {
    let var$2, var$3;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (var$3 <= 0) {
                var$2.$owner = null;
                var$2 = var$2.$enteringThreads;
                if (var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2)) {
                    var$2 = new jl_Object$monitorExit$lambda$_8_0;
                    var$2.$_016 = $o;
                    otp_Platform_schedule(var$2, 0);
                } else
                    jl_Object_isEmptyMonitor($o);
            }
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_($o);
    $rt_throw($o);
},
jl_Object_isEmptyMonitor = $this => {
    let $monitor, var$2;
    $monitor = $this.$monitor;
    if ($monitor === null)
        return 1;
    a: {
        if ($monitor.$owner === null) {
            var$2 = $monitor.$enteringThreads;
            if (!(var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2))) {
                $monitor = $monitor.$notifyListeners;
                if ($monitor === null)
                    break a;
                if (otp_PlatformQueue_isEmpty$static($monitor))
                    break a;
            }
        }
        return 0;
    }
    $this.$monitor = null;
    return 1;
},
jl_Object__init_ = $this => {
    return;
},
jl_Object__init_0 = () => {
    let var_0 = new jl_Object();
    jl_Object__init_(var_0);
    return var_0;
},
jl_Object_getClass = $this => {
    return jl_Class_getClass($this.constructor);
},
jl_Object_hashCode = $this => {
    return jl_Object_identity($this);
},
jl_Object_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
},
jl_Object_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_Class_getName(jl_Object_getClass($this));
    var$2 = jl_Integer_toHexString(jl_Object_identity($this));
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append2(var$3, 64);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jl_Object_identity = $this => {
    let $platformThis;
    $platformThis = $this;
    if (!$platformThis.$id$)
        $platformThis.$id$ = $rt_nextId();
    return $this.$id$;
},
jl_Object_clone = $this => {
    let $result, var$2, var$3;
    if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
        $result = new jl_CloneNotSupportedException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $result = otp_Platform_clone($this);
    var$2 = $result;
    var$3 = $rt_nextId();
    var$2.$id$ = var$3;
    return $result;
},
jl_Object_monitorEnterWait$_asyncCall_$ = (var$1, var$2) => {
    let thread = $rt_requireNativeThread();
    let javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        let result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    let callback = function() {
    };
    callback.$complete = val => {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error0 = e => {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    thread.suspend(() => {
        try {
            jl_Object_monitorEnterWait(var$1, var$2, callback);
            ;
        } catch ($e){
            callback.$error0($e);
        }
    });
    return null;
},
cbgu_Pool$Poolable = $rt_classWithoutFields(0);
function cbggg_GlyphLayout() {
    let a = this; jl_Object.call(a);
    a.$runs = null;
    a.$colors = null;
    a.$glyphCount = 0;
    a.$width8 = 0.0;
    a.$height3 = 0.0;
}
let cbggg_GlyphLayout_glyphRunPool = null,
cbggg_GlyphLayout_colorStack = null,
cbggg_GlyphLayout_$callClinit = () => {
    cbggg_GlyphLayout_$callClinit = $rt_eraseClinit(cbggg_GlyphLayout);
    cbggg_GlyphLayout__clinit_();
},
cbggg_GlyphLayout__init_ = $this => {
    cbggg_GlyphLayout_$callClinit();
    $this.$runs = cbgu_Array__init_0(1);
    $this.$colors = cbgu_IntArray__init_2(2);
},
cbggg_GlyphLayout__init_0 = () => {
    let var_0 = new cbggg_GlyphLayout();
    cbggg_GlyphLayout__init_(var_0);
    return var_0;
},
cbggg_GlyphLayout_setText = ($this, $font, $str, $start, $end, $color, $targetWidth, $halign, $wrap, $truncate) => {
    let $fontData, $wrapOrTruncate, $currentColor, var$13, var$14, $i, $markupEnabled, $isLastRun, $y, $down, $lineRun, $lastGlyph, var$22, $runStart, $newline, $runEnd, $length, $run, $runWidth, $wrapIndex;
    cbggg_GlyphLayout_reset($this);
    $fontData = $font.$data5;
    if ($start == $end) {
        $this.$height3 = $fontData.$capHeight;
        return;
    }
    if ($wrap)
        $targetWidth = jl_Math_max0($targetWidth, $fontData.$spaceXadvance * 3.0);
    $wrapOrTruncate = !$wrap && $truncate === null ? 0 : 1;
    $currentColor = cbgg_Color_toIntBits($color);
    $font = $this.$colors;
    var$13 = $font.$items1;
    var$14 = var$13.data;
    $i = $font.$size1;
    if (($i + 1 | 0) >= var$14.length)
        var$13 = cbgu_IntArray_resize($font, jl_Math_max(8, $i * 1.75 | 0));
    var$13 = var$13.data;
    $wrap = $font.$size1;
    var$13[$wrap] = 0;
    var$13[$wrap + 1 | 0] = $currentColor;
    $font.$size1 = $wrap + 2 | 0;
    $markupEnabled = $fontData.$markupEnabled;
    if ($markupEnabled)
        cbgu_IntArray_add(cbggg_GlyphLayout_colorStack, $currentColor);
    $isLastRun = 0;
    $y = 0.0;
    $down = $fontData.$down;
    $lineRun = null;
    $lastGlyph = null;
    var$22 = $currentColor;
    $runStart = $start;
    a: {
        b: while (true) {
            c: {
                $newline = 0;
                if ($start == $end) {
                    if ($runStart == $end)
                        break b;
                    $isLastRun = 1;
                    $runEnd = $end;
                } else {
                    d: {
                        $wrap = $start + 1 | 0;
                        switch ($str.$charAt($start)) {
                            case 10:
                                $runEnd = $wrap - 1 | 0;
                                $newline = 1;
                                $start = $wrap;
                                break c;
                            case 91:
                                if (!$markupEnabled) {
                                    $start = $wrap;
                                    break d;
                                }
                                $length = cbggg_GlyphLayout_parseColorMarkup($this, $str, $wrap, $end);
                                if ($length >= 0) {
                                    $runEnd = $wrap - 1 | 0;
                                    $start = $wrap + ($length + 1 | 0) | 0;
                                    if ($start == $end) {
                                        $isLastRun = 1;
                                        break c;
                                    }
                                    $currentColor = cbgu_IntArray_peek(cbggg_GlyphLayout_colorStack);
                                    break c;
                                }
                                if ($length != (-2)) {
                                    $start = $wrap;
                                    break d;
                                }
                                $start = $wrap + 1 | 0;
                                break d;
                            default:
                        }
                        $start = $wrap;
                    }
                    continue b;
                }
            }
            $run = cbgu_Pool_obtain(cbggg_GlyphLayout_glyphRunPool);
            $run.$x5 = 0.0;
            $run.$y6 = $y;
            cbggg_BitmapFont$BitmapFontData_getGlyphs($fontData, $run, $str, $runStart, $runEnd, $lastGlyph);
            $this.$glyphCount = $this.$glyphCount + $run.$glyphs.$size0 | 0;
            if ($currentColor != var$22) {
                $font = $this.$colors;
                $wrap = cbgu_IntArray_get($font, $font.$size1 - 2 | 0);
                $i = $this.$glyphCount;
                if ($wrap != $i) {
                    cbgu_IntArray_add($this.$colors, $i);
                    cbgu_IntArray_add($this.$colors, $currentColor);
                } else {
                    $font = $this.$colors;
                    cbgu_IntArray_set($font, $font.$size1 - 1 | 0, $currentColor);
                }
                var$22 = $currentColor;
            }
            e: {
                if (!$run.$glyphs.$size0) {
                    cbgu_Pool_free(cbggg_GlyphLayout_glyphRunPool, $run);
                    if ($lineRun === null)
                        break e;
                } else if ($lineRun !== null) {
                    cbggg_GlyphLayout$GlyphRun_appendRun($lineRun, $run);
                    cbgu_Pool_free(cbggg_GlyphLayout_glyphRunPool, $run);
                } else {
                    cbgu_Array_add($this.$runs, $run);
                    $lineRun = $run;
                }
                if (!$newline && !$isLastRun)
                    $lastGlyph = cbgu_Array_peek($lineRun.$glyphs);
                else {
                    cbggg_GlyphLayout_setLastGlyphXAdvance($this, $fontData, $lineRun);
                    $lastGlyph = null;
                }
                if ($wrapOrTruncate && $lineRun.$glyphs.$size0 && !(!$newline && !$isLastRun)) {
                    $runWidth = cbgu_FloatArray_first($lineRun.$xAdvances) + cbgu_FloatArray_get($lineRun.$xAdvances, 1);
                    $i = 2;
                    while ($i < $lineRun.$xAdvances.$size2) {
                        $font = $lineRun.$glyphs;
                        $wrap = $i - 1 | 0;
                        if ($runWidth + cbggg_GlyphLayout_getGlyphWidth($this, cbgu_Array_get($font, $wrap), $fontData) - 9.999999747378752E-5 <= $targetWidth)
                            $runWidth = $runWidth + $lineRun.$xAdvances.$items0.data[$i];
                        else {
                            if ($truncate !== null) {
                                cbggg_GlyphLayout_truncate($this, $fontData, $lineRun, $targetWidth, $truncate);
                                break a;
                            }
                            $wrapIndex = cbggg_BitmapFont$BitmapFontData_getWrapIndex($fontData, $lineRun.$glyphs, $i);
                            if (!(!$wrapIndex && $lineRun.$x5 === 0.0) && $wrapIndex < $lineRun.$glyphs.$size0)
                                $wrap = $wrapIndex;
                            $lineRun = cbggg_GlyphLayout_wrap($this, $fontData, $lineRun, $wrap);
                            if ($lineRun === null)
                                break e;
                            cbgu_Array_add($this.$runs, $lineRun);
                            $y = $y + $down;
                            $lineRun.$x5 = 0.0;
                            $lineRun.$y6 = $y;
                            $runWidth = cbgu_FloatArray_first($lineRun.$xAdvances) + cbgu_FloatArray_get($lineRun.$xAdvances, 1);
                            $i = 1;
                        }
                        $i = $i + 1 | 0;
                    }
                }
            }
            if ($newline) {
                $lineRun = null;
                $lastGlyph = null;
                $y = $runEnd != $runStart ? $y + $down : $y + $down * $fontData.$blankLineScale;
            }
            $runStart = $start;
        }
    }
    f: {
        $this.$height3 = $fontData.$capHeight + jl_Math_abs($y);
        cbggg_GlyphLayout_calculateWidths($this, $fontData);
        if (!($halign & 8)) {
            $start = !($halign & 1) ? 0 : 1;
            $font = $this.$runs;
            var$13 = $font.$items;
            $end = 0;
            $halign = $font.$size0;
            while (true) {
                if ($end >= $halign)
                    break f;
                $font = var$13.data[$end];
                $font.$x5 = $font.$x5 + (!$start ? $targetWidth - $font.$width6 : 0.5 * ($targetWidth - $font.$width6));
                $end = $end + 1 | 0;
            }
        }
    }
    if ($markupEnabled)
        cbgu_IntArray_clear(cbggg_GlyphLayout_colorStack);
},
cbggg_GlyphLayout_calculateWidths = ($this, $fontData) => {
    let $width, $run, $runsItems, $i, $n, $xAdvances, $runWidth, $max, $glyph, $glyphs, $ii, $nn;
    $width = 0.0;
    $run = $this.$runs;
    $runsItems = $run.$items;
    $i = 0;
    $n = $run.$size0;
    while ($i < $n) {
        $run = $runsItems.data[$i];
        $xAdvances = $run.$xAdvances.$items0.data;
        $runWidth = $run.$x5 + $xAdvances[0];
        $max = 0.0;
        $glyph = $run.$glyphs;
        $glyphs = $glyph.$items;
        $ii = 0;
        $nn = $glyph.$size0;
        while ($ii < $nn) {
            $max = jl_Math_max0($max, $runWidth + cbggg_GlyphLayout_getGlyphWidth($this, $glyphs.data[$ii], $fontData));
            $ii = $ii + 1 | 0;
            $runWidth = $runWidth + $xAdvances[$ii];
        }
        $runWidth = jl_Math_max0($runWidth, $max);
        $max = $run.$x5;
        $runWidth = $runWidth - $max;
        $run.$width6 = $runWidth;
        $width = jl_Math_max0($width, $max + $runWidth);
        $i = $i + 1 | 0;
    }
    $this.$width8 = $width;
},
cbggg_GlyphLayout_truncate = ($this, $fontData, $run, $targetWidth, $truncate) => {
    let $glyphCount, $truncateRun, $truncateWidth, var$8, $xAdvances, $i, $n, $count, $width, $xAdvances_0, $droppedGlyphCount;
    $glyphCount = $run.$glyphs.$size0;
    cbggg_GlyphLayout_$callClinit();
    $truncateRun = cbgu_Pool_obtain(cbggg_GlyphLayout_glyphRunPool);
    cbggg_BitmapFont$BitmapFontData_getGlyphs($fontData, $truncateRun, $truncate, 0, $truncate.$length(), null);
    $truncateWidth = 0.0;
    if ($truncateRun.$xAdvances.$size2 > 0) {
        cbggg_GlyphLayout_setLastGlyphXAdvance($this, $fontData, $truncateRun);
        var$8 = $truncateRun.$xAdvances;
        $xAdvances = var$8.$items0;
        $i = 1;
        $n = var$8.$size2;
        while ($i < $n) {
            $truncateWidth = $truncateWidth + $xAdvances.data[$i];
            $i = $i + 1 | 0;
        }
    }
    $targetWidth = $targetWidth - $truncateWidth;
    $count = 0;
    $width = $run.$x5;
    var$8 = $run.$xAdvances;
    $xAdvances_0 = var$8.$items0;
    a: {
        while (true) {
            if ($count >= var$8.$size2)
                break a;
            $width = $width + $xAdvances_0.data[$count];
            if ($width > $targetWidth)
                break;
            $count = $count + 1 | 0;
        }
    }
    if ($count <= 1) {
        cbgu_Array_clear($run.$glyphs);
        cbgu_FloatArray_clear($run.$xAdvances);
        cbgu_FloatArray_addAll0($run.$xAdvances, $truncateRun.$xAdvances);
    } else {
        cbgu_Array_truncate($run.$glyphs, $count - 1 | 0);
        cbgu_FloatArray_truncate($run.$xAdvances, $count);
        cbggg_GlyphLayout_setLastGlyphXAdvance($this, $fontData, $run);
        var$8 = $truncateRun.$xAdvances;
        $droppedGlyphCount = var$8.$size2;
        if ($droppedGlyphCount > 0)
            cbgu_FloatArray_addAll1($run.$xAdvances, var$8, 1, $droppedGlyphCount - 1 | 0);
    }
    b: {
        $droppedGlyphCount = $glyphCount - $run.$glyphs.$size0 | 0;
        if ($droppedGlyphCount > 0) {
            $this.$glyphCount = $this.$glyphCount - $droppedGlyphCount | 0;
            if ($fontData.$markupEnabled)
                while (true) {
                    $fontData = $this.$colors;
                    $droppedGlyphCount = $fontData.$size1;
                    if ($droppedGlyphCount <= 2)
                        break b;
                    if (cbgu_IntArray_get($fontData, $droppedGlyphCount - 2 | 0) < $this.$glyphCount)
                        break b;
                    $fontData = $this.$colors;
                    $fontData.$size1 = $fontData.$size1 - 2 | 0;
                }
        }
    }
    cbgu_Array_addAll($run.$glyphs, $truncateRun.$glyphs);
    $this.$glyphCount = $this.$glyphCount + $truncate.$length() | 0;
    cbgu_Pool_free(cbggg_GlyphLayout_glyphRunPool, $truncateRun);
},
cbggg_GlyphLayout_wrap = ($this, $fontData, $first, $secondStart) => {
    let $glyphs2, $glyphCount, $xAdvances2, $firstEnd, $firstGlyphCount, $second, $droppedGlyphCount, $glyphs1, $lastColor, $secondGlyphCount, $reductionThreshold, var$15, $colorChangeIndex, $xAdvances1, var$18, $i;
    $glyphs2 = $first.$glyphs;
    $glyphCount = $glyphs2.$size0;
    $xAdvances2 = $first.$xAdvances;
    $firstEnd = $secondStart;
    a: {
        while (true) {
            if ($firstEnd <= 0)
                break a;
            if (!cbggg_BitmapFont$BitmapFontData_isWhitespace($fontData, (cbgu_Array_get($glyphs2, $firstEnd - 1 | 0)).$id & 65535))
                break;
            $firstEnd = $firstEnd + (-1) | 0;
        }
    }
    b: {
        while (true) {
            $firstGlyphCount = $rt_compare($secondStart, $glyphCount);
            if ($firstGlyphCount >= 0)
                break b;
            if (!cbggg_BitmapFont$BitmapFontData_isWhitespace($fontData, (cbgu_Array_get($glyphs2, $secondStart)).$id & 65535))
                break;
            $secondStart = $secondStart + 1 | 0;
        }
    }
    $second = null;
    if ($firstGlyphCount >= 0) {
        cbgu_Array_truncate($glyphs2, $firstEnd);
        cbgu_FloatArray_truncate($xAdvances2, $firstEnd + 1 | 0);
        $droppedGlyphCount = $secondStart - $firstEnd | 0;
        if ($droppedGlyphCount > 0) {
            $this.$glyphCount = $this.$glyphCount - $droppedGlyphCount | 0;
            if ($fontData.$markupEnabled) {
                $glyphs1 = $this.$colors;
                if (cbgu_IntArray_get($glyphs1, $glyphs1.$size1 - 2 | 0) > $this.$glyphCount) {
                    $lastColor = cbgu_IntArray_peek($this.$colors);
                    while (true) {
                        $glyphs1 = $this.$colors;
                        $secondStart = cbgu_IntArray_get($glyphs1, $glyphs1.$size1 - 2 | 0);
                        $firstGlyphCount = $this.$glyphCount;
                        if ($secondStart <= $firstGlyphCount)
                            break;
                        $glyphs1 = $this.$colors;
                        $glyphs1.$size1 = $glyphs1.$size1 - 2 | 0;
                    }
                    $glyphs1 = $this.$colors;
                    cbgu_IntArray_set($glyphs1, $glyphs1.$size1 - 2 | 0, $firstGlyphCount);
                    $glyphs1 = $this.$colors;
                    cbgu_IntArray_set($glyphs1, $glyphs1.$size1 - 1 | 0, $lastColor);
                }
            }
        }
    } else {
        cbggg_GlyphLayout_$callClinit();
        $second = cbgu_Pool_obtain(cbggg_GlyphLayout_glyphRunPool);
        $glyphs1 = $second.$glyphs;
        if ((0 + $firstEnd | 0) > $glyphs2.$size0) {
            $fontData = new jl_IllegalArgumentException;
            $first = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($first);
            jl_AbstractStringBuilder_append0($first, $rt_s(1));
            jl_AbstractStringBuilder_append1($first, 0);
            jl_AbstractStringBuilder_append0($first, $rt_s(2));
            jl_AbstractStringBuilder_append1($first, $firstEnd);
            jl_AbstractStringBuilder_append0($first, $rt_s(3));
            jl_AbstractStringBuilder_append1($first, $glyphs2.$size0);
            jl_Exception__init_($fontData, jl_AbstractStringBuilder_toString($first));
            $rt_throw($fontData);
        }
        cbgu_Array_addAll0($glyphs1, $glyphs2.$items, 0, $firstEnd);
        $secondGlyphCount = $secondStart - 1 | 0;
        $reductionThreshold = $glyphs2.$size0;
        if ($secondGlyphCount >= $reductionThreshold) {
            $fontData = new jl_IndexOutOfBoundsException;
            $first = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($first);
            jl_AbstractStringBuilder_append0($first, $rt_s(4));
            jl_AbstractStringBuilder_append1($first, $secondGlyphCount);
            jl_AbstractStringBuilder_append0($first, $rt_s(5));
            jl_AbstractStringBuilder_append1($first, $glyphs2.$size0);
            jl_Exception__init_($fontData, jl_AbstractStringBuilder_toString($first));
            $rt_throw($fontData);
        }
        if (0 > $secondGlyphCount) {
            $fontData = new jl_IndexOutOfBoundsException;
            $first = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($first);
            jl_AbstractStringBuilder_append0($first, $rt_s(6));
            jl_AbstractStringBuilder_append1($first, 0);
            jl_AbstractStringBuilder_append0($first, $rt_s(7));
            jl_AbstractStringBuilder_append1($first, $secondGlyphCount);
            jl_Exception__init_($fontData, jl_AbstractStringBuilder_toString($first));
            $rt_throw($fontData);
        }
        var$15 = $glyphs2.$items;
        $droppedGlyphCount = ($secondGlyphCount - 0 | 0) + 1 | 0;
        $colorChangeIndex = $reductionThreshold - $droppedGlyphCount | 0;
        if ($glyphs2.$ordered) {
            $secondGlyphCount = 0 + $droppedGlyphCount | 0;
            jl_System_fastArraycopy(var$15, $secondGlyphCount, var$15, 0, $reductionThreshold - $secondGlyphCount | 0);
        } else {
            $secondGlyphCount = jl_Math_max($colorChangeIndex, $secondGlyphCount + 1 | 0);
            jl_System_fastArraycopy(var$15, $secondGlyphCount, var$15, 0, $reductionThreshold - $secondGlyphCount | 0);
        }
        $firstGlyphCount = $colorChangeIndex;
        while ($firstGlyphCount < $reductionThreshold) {
            var$15.data[$firstGlyphCount] = null;
            $firstGlyphCount = $firstGlyphCount + 1 | 0;
        }
        $glyphs2.$size0 = $colorChangeIndex;
        $first.$glyphs = $glyphs1;
        $second.$glyphs = $glyphs2;
        $xAdvances1 = $second.$xAdvances;
        cbgu_FloatArray_addAll1($xAdvances1, $xAdvances2, 0, $firstEnd + 1 | 0);
        cbgu_FloatArray_removeRange($xAdvances2, 1, $secondStart);
        var$15 = $xAdvances2.$items0;
        $glyphs1 = cbgu_Array_first($glyphs2);
        var$18 = $glyphs1.$fixedWidth ? 0.0 : ( -$glyphs1.$xoffset | 0) * $fontData.$scaleX;
        c: {
            var$15.data[0] = var$18 - $fontData.$padLeft;
            $first.$xAdvances = $xAdvances1;
            $second.$xAdvances = $xAdvances2;
            $firstGlyphCount = $first.$glyphs.$size0;
            $secondGlyphCount = $second.$glyphs.$size0;
            $droppedGlyphCount = ($glyphCount - $firstGlyphCount | 0) - $secondGlyphCount | 0;
            $secondStart = $this.$glyphCount - $droppedGlyphCount | 0;
            $this.$glyphCount = $secondStart;
            if ($fontData.$markupEnabled && $droppedGlyphCount > 0) {
                $reductionThreshold = $secondStart - $secondGlyphCount | 0;
                $i = $this.$colors.$size1 - 2 | 0;
                while (true) {
                    if ($i < 2)
                        break c;
                    $colorChangeIndex = cbgu_IntArray_get($this.$colors, $i);
                    if ($colorChangeIndex <= $reductionThreshold)
                        break;
                    cbgu_IntArray_set($this.$colors, $i, $colorChangeIndex - $droppedGlyphCount | 0);
                    $i = $i + (-2) | 0;
                }
            }
        }
    }
    if ($firstEnd)
        cbggg_GlyphLayout_setLastGlyphXAdvance($this, $fontData, $first);
    else {
        cbggg_GlyphLayout_$callClinit();
        cbgu_Pool_free(cbggg_GlyphLayout_glyphRunPool, $first);
        cbgu_Array_pop($this.$runs);
    }
    return $second;
},
cbggg_GlyphLayout_setLastGlyphXAdvance = ($this, $fontData, $run) => {
    let $last;
    $last = cbgu_Array_peek($run.$glyphs);
    if (!$last.$fixedWidth) {
        $run = $run.$xAdvances;
        $run.$items0.data[$run.$size2 - 1 | 0] = cbggg_GlyphLayout_getGlyphWidth($this, $last, $fontData);
    }
},
cbggg_GlyphLayout_getGlyphWidth = ($this, $glyph, $fontData) => {
    return ($glyph.$fixedWidth ? $glyph.$xadvance : $glyph.$width + $glyph.$xoffset | 0) * $fontData.$scaleX - $fontData.$padRight;
},
cbggg_GlyphLayout_parseColorMarkup = ($this, $str, $start, $end) => {
    let $color, $i, $ch, var$7, $color_0;
    if ($start == $end)
        return (-1);
    switch ($str.$charAt($start)) {
        case 35:
            $color = 0;
            $i = $start + 1 | 0;
            a: {
                while (true) {
                    if ($i >= $end)
                        break a;
                    $ch = $str.$charAt($i);
                    if ($ch == 93)
                        break;
                    var$7 = ($color << 4) + $ch | 0;
                    if ($ch >= 48 && $ch <= 57)
                        $color = var$7 + (-48) | 0;
                    else if ($ch >= 65 && $ch <= 70)
                        $color = var$7 + (-55) | 0;
                    else {
                        if ($ch < 97)
                            break a;
                        if ($ch > 102)
                            break a;
                        $color = var$7 + (-87) | 0;
                    }
                    $i = $i + 1 | 0;
                }
                if ($i >= ($start + 2 | 0) && $i <= ($start + 9 | 0)) {
                    $start = $i - $start | 0;
                    if ($start < 8)
                        $color = $color << ((9 - $start | 0) << 2) | 255;
                    cbggg_GlyphLayout_$callClinit();
                    $str = cbggg_GlyphLayout_colorStack;
                    $end = (($color & (-16711936)) >>> 8 | 0) | ($color & 16711935) << 8;
                    cbgu_IntArray_add($str, ($end >>> 16 | 0) | $end << 16);
                    return $start;
                }
            }
            return (-1);
        case 91:
            break;
        case 93:
            cbggg_GlyphLayout_$callClinit();
            $str = cbggg_GlyphLayout_colorStack;
            $start = $str.$size1;
            if ($start > 1)
                $str.$size1 = $start - 1 | 0;
            return 0;
        default:
            $i = $start + 1 | 0;
            while ($i < $end) {
                if ($str.$charAt($i) == 93) {
                    $color_0 = $str.$subSequence($start, $i);
                    cbgg_Colors_$callClinit();
                    $color_0 = cbgu_ObjectMap_get(cbgg_Colors_map, $color_0);
                    if ($color_0 === null)
                        return (-1);
                    cbggg_GlyphLayout_$callClinit();
                    cbgu_IntArray_add(cbggg_GlyphLayout_colorStack, cbgg_Color_toIntBits($color_0));
                    return $i - $start | 0;
                }
                $i = $i + 1 | 0;
            }
            return (-1);
    }
    return (-2);
},
cbggg_GlyphLayout_reset = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7;
    cbggg_GlyphLayout_$callClinit();
    var$1 = cbggg_GlyphLayout_glyphRunPool;
    var$2 = $this.$runs;
    if (var$2 === null) {
        var$1 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$1, $rt_s(8));
        $rt_throw(var$1);
    }
    var$3 = var$1.$freeObjects;
    var$4 = var$1.$max2;
    var$5 = 0;
    var$6 = var$2.$size0;
    while (var$5 < var$6) {
        var$7 = cbgu_Array_get(var$2, var$5);
        if (var$7 !== null) {
            if (var$3.$size0 >= var$4)
                cbgu_Pool_reset(var$1, var$7);
            else {
                cbgu_Array_add(var$3, var$7);
                cbgu_Pool_reset(var$1, var$7);
            }
        }
        var$5 = var$5 + 1 | 0;
    }
    var$1.$peak = jl_Math_max(var$1.$peak, var$3.$size0);
    cbgu_Array_clear($this.$runs);
    cbgu_IntArray_clear($this.$colors);
    $this.$glyphCount = 0;
    $this.$width8 = 0.0;
    $this.$height3 = 0.0;
},
cbggg_GlyphLayout_toString = $this => {
    let $buffer, $i, $n;
    if (!$this.$runs.$size0)
        return $rt_s(9);
    $buffer = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($buffer, 128);
    jl_StringBuilder_append1($buffer, $this.$width8);
    jl_AbstractStringBuilder_append2($buffer, 120);
    jl_StringBuilder_append1($buffer, $this.$height3);
    jl_AbstractStringBuilder_append2($buffer, 10);
    $i = 0;
    $n = $this.$runs.$size0;
    while ($i < $n) {
        jl_AbstractStringBuilder_append0($buffer, cbggg_GlyphLayout$GlyphRun_toString(cbgu_Array_get($this.$runs, $i)));
        jl_AbstractStringBuilder_append2($buffer, 10);
        $i = $i + 1 | 0;
    }
    $buffer.$length1 = $buffer.$length1 - 1 | 0;
    return jl_AbstractStringBuilder_toString($buffer);
},
cbggg_GlyphLayout__clinit_ = () => {
    cbggg_GlyphLayout_glyphRunPool = cbgu_Pools_get(new cbggg_GlyphLayout$_clinit_$lambda$_17_0);
    cbggg_GlyphLayout_colorStack = cbgu_IntArray__init_2(4);
};
function cbggg_TextureRegion() {
    let a = this; jl_Object.call(a);
    a.$texture = null;
    a.$u = 0.0;
    a.$v = 0.0;
    a.$u2 = 0.0;
    a.$v2 = 0.0;
    a.$regionWidth = 0;
    a.$regionHeight = 0;
}
let cbggg_TextureRegion__init_0 = $this => {
    return;
},
cbggg_TextureRegion__init_2 = () => {
    let var_0 = new cbggg_TextureRegion();
    cbggg_TextureRegion__init_0(var_0);
    return var_0;
},
cbggg_TextureRegion__init_1 = ($this, $texture) => {
    if ($texture === null) {
        $texture = new jl_IllegalArgumentException;
        jl_Exception__init_($texture, $rt_s(10));
        $rt_throw($texture);
    }
    $this.$texture = $texture;
    cbggg_TextureRegion_setRegion($this, 0, 0, cbgg_Texture_getWidth($texture), cbgg_Texture_getHeight($texture));
},
cbggg_TextureRegion__init_ = var_0 => {
    let var_1 = new cbggg_TextureRegion();
    cbggg_TextureRegion__init_1(var_1, var_0);
    return var_1;
},
cbggg_TextureRegion_setRegion = ($this, $x, $y, $width, $height) => {
    let $invTexWidth, $invTexHeight;
    $invTexWidth = 1.0 / cbgg_Texture_getWidth($this.$texture);
    $invTexHeight = 1.0 / cbgg_Texture_getHeight($this.$texture);
    cbggg_TextureRegion_setRegion0($this, $x * $invTexWidth, $y * $invTexHeight, ($x + $width | 0) * $invTexWidth, ($y + $height | 0) * $invTexHeight);
    $this.$regionWidth = jl_Math_abs0($width);
    $this.$regionHeight = jl_Math_abs0($height);
},
cbggg_TextureRegion_setRegion0 = ($this, $u, $v, $u2, $v2) => {
    let $texWidth, $texHeight, $adjustX, $adjustY, var$9, var$10;
    $texWidth = cbgg_Texture_getWidth($this.$texture);
    $texHeight = cbgg_Texture_getHeight($this.$texture);
    $adjustX = jl_Math_abs($u2 - $u);
    $adjustY = $texWidth;
    $this.$regionWidth = jl_Math_round($adjustX * $adjustY);
    $adjustX = jl_Math_abs($v2 - $v);
    var$9 = $texHeight;
    var$10 = jl_Math_round($adjustX * var$9);
    $this.$regionHeight = var$10;
    if ($this.$regionWidth == 1 && var$10 == 1) {
        $adjustX = 0.25 / $adjustY;
        $u = $u + $adjustX;
        $u2 = $u2 - $adjustX;
        $adjustY = 0.25 / var$9;
        $v = $v + $adjustY;
        $v2 = $v2 - $adjustY;
    }
    $this.$u = $u;
    $this.$v = $v;
    $this.$u2 = $u2;
    $this.$v2 = $v2;
},
cbggg_TextureRegion_getTexture = $this => {
    return $this.$texture;
},
cbggg_TextureRegion_getRegionWidth = $this => {
    return $this.$regionWidth;
},
cbggg_TextureRegion_getRegionHeight = $this => {
    return $this.$regionHeight;
};
function cbggg_Sprite() {
    let a = this; cbggg_TextureRegion.call(a);
    a.$vertices2 = null;
    a.$color8 = null;
    a.$packedColor = 0.0;
    a.$scaleX1 = 0.0;
    a.$scaleY1 = 0.0;
    a.$dirty0 = 0;
}
let cbggg_Sprite__init_ = $this => {
    let var$1, var$2, var$3;
    $this.$vertices2 = $rt_createFloatArray(20);
    var$1 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$color8 = var$1;
    $this.$packedColor = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$scaleX1 = 1.0;
    $this.$scaleY1 = 1.0;
    $this.$dirty0 = 1;
    cbgg_Color_set(var$1, 1.0, 1.0, 1.0, 1.0);
    var$2 = cbgg_Color_toFloatBits($this.$color8);
    $this.$packedColor = var$2;
    var$3 = $this.$vertices2.data;
    var$3[2] = var$2;
    var$3[7] = var$2;
    var$3[12] = var$2;
    var$3[17] = var$2;
},
cbggg_Sprite__init_0 = () => {
    let var_0 = new cbggg_Sprite();
    cbggg_Sprite__init_(var_0);
    return var_0;
},
cbgu_Disposable = $rt_classWithoutFields(0);
function cbggg_BitmapFont() {
    let a = this; jl_Object.call(a);
    a.$data5 = null;
    a.$regions = null;
    a.$cache = null;
    a.$flipped0 = 0;
    a.$integer0 = 0;
    a.$ownsTexture = 0;
}
let cbggg_BitmapFont__init_0 = $this => {
    let var$1, var$2;
    var$1 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(11));
    var$2 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(12));
    cbggg_BitmapFont__init_($this, cbggg_BitmapFont$BitmapFontData__init_0(var$1, 0), cbggg_TextureRegion__init_(cbgg_Texture__init_1(var$2, 0)), 1);
    $this.$ownsTexture = 1;
},
cbggg_BitmapFont__init_4 = () => {
    let var_0 = new cbggg_BitmapFont();
    cbggg_BitmapFont__init_0(var_0);
    return var_0;
},
cbggg_BitmapFont__init_1 = ($this, $fontFile, $region) => {
    cbggg_BitmapFont__init_($this, cbggg_BitmapFont$BitmapFontData__init_0($fontFile, 0), $region, 1);
},
cbggg_BitmapFont__init_2 = (var_0, var_1) => {
    let var_2 = new cbggg_BitmapFont();
    cbggg_BitmapFont__init_1(var_2, var_0, var_1);
    return var_2;
},
cbggg_BitmapFont__init_ = ($this, $data, $region, $integer) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    if ($region === null)
        var$4 = null;
    else {
        var$5 = $rt_createArray(cbggg_TextureRegion, 1);
        var$6 = var$5.data;
        var$6[0] = $region;
        var$4 = new cbgu_Array;
        var$7 = var$6.length;
        var$8 = 0 + var$7 | 0;
        var$5 = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass(var$5)), var$8 - 0 | 0);
        var$9 = 0;
        while (var$9 < var$8) {
            var$5.data[var$9 - 0 | 0] = var$6[var$9];
            var$9 = var$9 + 1 | 0;
        }
        var$4.$items = var$5;
        var$4.$ordered = 1;
        var$4.$size0 = var$7;
    }
    $this.$flipped0 = $data.$flipped;
    $this.$data5 = $data;
    $this.$integer0 = $integer;
    if (var$4 !== null && var$4.$size0) {
        $this.$regions = var$4;
        $this.$ownsTexture = 0;
    } else {
        var$5 = $data.$imagePaths;
        if (var$5 === null) {
            $data = new jl_IllegalArgumentException;
            jl_Exception__init_($data, $rt_s(13));
            $rt_throw($data);
        }
        var$9 = var$5.data.length;
        $this.$regions = cbgu_Array__init_0(var$9);
        var$10 = 0;
        while (var$10 < var$9) {
            $region = $data.$fontFile;
            if ($region === null) {
                $region = cbg_Gdx_files;
                var$4 = $data.$imagePaths.data[var$10];
                $region = cgxgbt_TeaFiles_internal($region, var$4);
            } else {
                var$4 = cbg_Gdx_files;
                var$11 = $data.$imagePaths.data[var$10];
                var$12 = $region.$type0;
                $region = cgxgbt_TeaFiles_getFileHandle(var$4, var$11, var$12);
            }
            cbgu_Array_add($this.$regions, cbggg_TextureRegion__init_(cbgg_Texture__init_1($region, 0)));
            var$10 = var$10 + 1 | 0;
        }
        $this.$ownsTexture = 1;
    }
    $region = new cbggg_BitmapFontCache;
    $integer = $this.$integer0;
    $region.$layouts = cbgu_Array__init_0(1);
    $region.$pooledLayouts = cbgu_Array__init_0(0);
    $region.$color7 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $region.$font = $this;
    $region.$integer = $integer;
    $integer = $this.$regions.$size0;
    if (!$integer) {
        $data = new jl_IllegalArgumentException;
        jl_Exception__init_($data, $rt_s(14));
        $rt_throw($data);
    }
    a: {
        $region.$pageVertices = $rt_createArray($rt_arraycls($rt_floatcls), $integer);
        $region.$idx = $rt_createIntArray($integer);
        if ($integer > 1) {
            var$5 = $rt_createArray(cbgu_IntArray, $integer);
            var$13 = var$5.data;
            $region.$pageGlyphIndices = var$5;
            var$9 = 0;
            var$10 = var$13.length;
            while (true) {
                if (var$9 >= var$10)
                    break a;
                $region.$pageGlyphIndices.data[var$9] = cbgu_IntArray__init_();
                var$9 = var$9 + 1 | 0;
            }
        }
    }
    $region.$tempGlyphCount = $rt_createIntArray($integer);
    $this.$cache = $region;
    var$5 = $data.$glyphs0.data;
    $integer = var$5.length;
    var$9 = 0;
    while (var$9 < $integer) {
        b: {
            var$13 = var$5[var$9];
            if (var$13 !== null) {
                var$13 = var$13.data;
                var$10 = var$13.length;
                var$14 = 0;
                while (true) {
                    if (var$14 >= var$10)
                        break b;
                    $region = var$13[var$14];
                    if ($region !== null)
                        cbggg_BitmapFont$BitmapFontData_setGlyphRegion($data, $region, cbgu_Array_get($this.$regions, $region.$page));
                    var$14 = var$14 + 1 | 0;
                }
            }
        }
        var$9 = var$9 + 1 | 0;
    }
    $region = $data.$missingGlyph;
    if ($region !== null)
        cbggg_BitmapFont$BitmapFontData_setGlyphRegion($data, $region, cbgu_Array_get($this.$regions, $region.$page));
},
cbggg_BitmapFont__init_3 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_BitmapFont();
    cbggg_BitmapFont__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_BitmapFont_draw0 = ($this, $batch, $str, $x, $y) => {
    let $layout;
    cbggg_BitmapFontCache_clear($this.$cache);
    $layout = cbggg_BitmapFontCache_addText($this.$cache, $str, $x, $y, 0, $str.$nativeString.length, 0.0, 8, 0, null);
    cbggg_BitmapFontCache_draw($this.$cache, $batch);
    return $layout;
},
cbggg_BitmapFont_draw = ($this, $batch, $str, $x, $y, $targetWidth, $halign, $wrap) => {
    let $layout;
    cbggg_BitmapFontCache_clear($this.$cache);
    $layout = cbggg_BitmapFontCache_addText($this.$cache, $str, $x, $y, 0, $str.$length(), $targetWidth, $halign, $wrap, null);
    cbggg_BitmapFontCache_draw($this.$cache, $batch);
    return $layout;
},
cbggg_BitmapFont_setColor = ($this, $r, $g, $b, $a) => {
    cbgg_Color_set($this.$cache.$color7, $r, $g, $b, $a);
},
cbggg_BitmapFont_getCapHeight = $this => {
    return $this.$data5.$capHeight;
},
cbggg_BitmapFont_dispose = $this => {
    let $i, var$2;
    a: {
        if ($this.$ownsTexture) {
            $i = 0;
            while (true) {
                var$2 = $this.$regions;
                if ($i >= var$2.$size0)
                    break a;
                cbgg_Texture_dispose((cbgu_Array_get(var$2, $i)).$texture);
                $i = $i + 1 | 0;
            }
        }
    }
},
cbggg_NinePatch = $rt_classWithoutFields(),
cbggg_NinePatch_tmpDrawColor = null,
cbggg_NinePatch__clinit_ = () => {
    cbggg_NinePatch_tmpDrawColor = new cbgg_Color;
};
function cbgg_Color() {
    let a = this; jl_Object.call(a);
    a.$r = 0.0;
    a.$g = 0.0;
    a.$b = 0.0;
    a.$a = 0.0;
}
let cbgg_Color_WHITE = null,
cbgg_Color_LIGHT_GRAY = null,
cbgg_Color_GRAY = null,
cbgg_Color_DARK_GRAY = null,
cbgg_Color_BLACK = null,
cbgg_Color_WHITE_FLOAT_BITS = 0.0,
cbgg_Color_CLEAR = null,
cbgg_Color_CLEAR_WHITE = null,
cbgg_Color_BLUE = null,
cbgg_Color_NAVY = null,
cbgg_Color_ROYAL = null,
cbgg_Color_SLATE = null,
cbgg_Color_SKY = null,
cbgg_Color_CYAN = null,
cbgg_Color_TEAL = null,
cbgg_Color_GREEN = null,
cbgg_Color_CHARTREUSE = null,
cbgg_Color_LIME = null,
cbgg_Color_FOREST = null,
cbgg_Color_OLIVE = null,
cbgg_Color_YELLOW = null,
cbgg_Color_GOLD = null,
cbgg_Color_GOLDENROD = null,
cbgg_Color_ORANGE = null,
cbgg_Color_BROWN = null,
cbgg_Color_TAN = null,
cbgg_Color_FIREBRICK = null,
cbgg_Color_RED = null,
cbgg_Color_SCARLET = null,
cbgg_Color_CORAL = null,
cbgg_Color_SALMON = null,
cbgg_Color_PINK = null,
cbgg_Color_MAGENTA = null,
cbgg_Color_PURPLE = null,
cbgg_Color_VIOLET = null,
cbgg_Color_MAROON = null,
cbgg_Color__init_1 = $this => {
    return;
},
cbgg_Color__init_4 = () => {
    let var_0 = new cbgg_Color();
    cbgg_Color__init_1(var_0);
    return var_0;
},
cbgg_Color__init_3 = ($this, $rgba8888) => {
    $this.$r = (($rgba8888 & (-16777216)) >>> 24 | 0) / 255.0;
    $this.$g = (($rgba8888 & 16711680) >>> 16 | 0) / 255.0;
    $this.$b = (($rgba8888 & 65280) >>> 8 | 0) / 255.0;
    $this.$a = ($rgba8888 & 255) / 255.0;
},
cbgg_Color__init_ = var_0 => {
    let var_1 = new cbgg_Color();
    cbgg_Color__init_3(var_1, var_0);
    return var_1;
},
cbgg_Color__init_2 = ($this, $r, $g, $b, $a) => {
    $this.$r = $r;
    $this.$g = $g;
    $this.$b = $b;
    $this.$a = $a;
    cbgg_Color_clamp($this);
},
cbgg_Color__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgg_Color();
    cbgg_Color__init_2(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgg_Color_clamp = $this => {
    let var$1, var$2;
    var$1 = $this.$r;
    if (var$1 < 0.0)
        $this.$r = 0.0;
    else if (var$1 > 1.0)
        $this.$r = 1.0;
    var$2 = $this.$g;
    if (var$2 < 0.0)
        $this.$g = 0.0;
    else if (var$2 > 1.0)
        $this.$g = 1.0;
    var$2 = $this.$b;
    if (var$2 < 0.0)
        $this.$b = 0.0;
    else if (var$2 > 1.0)
        $this.$b = 1.0;
    var$2 = $this.$a;
    if (var$2 < 0.0)
        $this.$a = 0.0;
    else if (var$2 > 1.0)
        $this.$a = 1.0;
    return $this;
},
cbgg_Color_set = ($this, $r, $g, $b, $a) => {
    $this.$r = $r;
    $this.$g = $g;
    $this.$b = $b;
    $this.$a = $a;
    return cbgg_Color_clamp($this);
},
cbgg_Color_equals = ($this, $o) => {
    let $color;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $color = $o;
        return cbgg_Color_toIntBits($this) != cbgg_Color_toIntBits($color) ? 0 : 1;
    }
    return 0;
},
cbgg_Color_hashCode = $this => {
    let var$1, $result, var$3;
    var$1 = $this.$r;
    $result = 31 * (var$1 === 0.0 ? 0 : jl_Float_floatToIntBits(var$1)) | 0;
    var$1 = $this.$g;
    $result = 31 * ($result + (var$1 === 0.0 ? 0 : jl_Float_floatToIntBits(var$1)) | 0) | 0;
    var$3 = $this.$b;
    $result = 31 * ($result + (var$3 === 0.0 ? 0 : jl_Float_floatToIntBits(var$3)) | 0) | 0;
    var$3 = $this.$a;
    return $result + (var$3 === 0.0 ? 0 : jl_Float_floatToIntBits(var$3)) | 0;
},
cbgg_Color_toFloatBits = $this => {
    return cbgu_NumberUtils_intToFloatColor((255.0 * $this.$a | 0) << 24 | (255.0 * $this.$b | 0) << 16 | (255.0 * $this.$g | 0) << 8 | 255.0 * $this.$r | 0);
},
cbgg_Color_toIntBits = $this => {
    return (255.0 * $this.$a | 0) << 24 | (255.0 * $this.$b | 0) << 16 | (255.0 * $this.$g | 0) << 8 | 255.0 * $this.$r | 0;
},
cbgg_Color_toString = $this => {
    let $value, var$2;
    $value = jl_Integer_toHexString((255.0 * $this.$r | 0) << 24 | (255.0 * $this.$g | 0) << 16 | (255.0 * $this.$b | 0) << 8 | 255.0 * $this.$a | 0);
    while ($value.$nativeString.length < 8) {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(15));
        jl_AbstractStringBuilder_append0(var$2, $value);
        $value = jl_AbstractStringBuilder_toString(var$2);
    }
    return $value;
},
cbgg_Color__clinit_ = () => {
    cbgg_Color_WHITE = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    cbgg_Color_LIGHT_GRAY = cbgg_Color__init_((-1077952513));
    cbgg_Color_GRAY = cbgg_Color__init_(2139062271);
    cbgg_Color_DARK_GRAY = cbgg_Color__init_(1061109759);
    cbgg_Color_BLACK = cbgg_Color__init_0(0.0, 0.0, 0.0, 1.0);
    cbgg_Color_WHITE_FLOAT_BITS = cbgg_Color_toFloatBits(cbgg_Color_WHITE);
    cbgg_Color_CLEAR = cbgg_Color__init_0(0.0, 0.0, 0.0, 0.0);
    cbgg_Color_CLEAR_WHITE = cbgg_Color__init_0(1.0, 1.0, 1.0, 0.0);
    cbgg_Color_BLUE = cbgg_Color__init_0(0.0, 0.0, 1.0, 1.0);
    cbgg_Color_NAVY = cbgg_Color__init_0(0.0, 0.0, 0.5, 1.0);
    cbgg_Color_ROYAL = cbgg_Color__init_(1097458175);
    cbgg_Color_SLATE = cbgg_Color__init_(1887473919);
    cbgg_Color_SKY = cbgg_Color__init_((-2016482305));
    cbgg_Color_CYAN = cbgg_Color__init_0(0.0, 1.0, 1.0, 1.0);
    cbgg_Color_TEAL = cbgg_Color__init_0(0.0, 0.5, 0.5, 1.0);
    cbgg_Color_GREEN = cbgg_Color__init_(16711935);
    cbgg_Color_CHARTREUSE = cbgg_Color__init_(2147418367);
    cbgg_Color_LIME = cbgg_Color__init_(852308735);
    cbgg_Color_FOREST = cbgg_Color__init_(579543807);
    cbgg_Color_OLIVE = cbgg_Color__init_(1804477439);
    cbgg_Color_YELLOW = cbgg_Color__init_((-65281));
    cbgg_Color_GOLD = cbgg_Color__init_((-2686721));
    cbgg_Color_GOLDENROD = cbgg_Color__init_((-626712321));
    cbgg_Color_ORANGE = cbgg_Color__init_((-5963521));
    cbgg_Color_BROWN = cbgg_Color__init_((-1958407169));
    cbgg_Color_TAN = cbgg_Color__init_((-759919361));
    cbgg_Color_FIREBRICK = cbgg_Color__init_((-1306385665));
    cbgg_Color_RED = cbgg_Color__init_((-16776961));
    cbgg_Color_SCARLET = cbgg_Color__init_((-13361921));
    cbgg_Color_CORAL = cbgg_Color__init_((-8433409));
    cbgg_Color_SALMON = cbgg_Color__init_((-92245249));
    cbgg_Color_PINK = cbgg_Color__init_((-9849601));
    cbgg_Color_MAGENTA = cbgg_Color__init_0(1.0, 0.0, 1.0, 1.0);
    cbgg_Color_PURPLE = cbgg_Color__init_((-1608453889));
    cbgg_Color_VIOLET = cbgg_Color__init_((-293409025));
    cbgg_Color_MAROON = cbgg_Color__init_((-1339006721));
};
function cbgg_GLTexture() {
    let a = this; jl_Object.call(a);
    a.$glTarget = 0;
    a.$glHandle = 0;
    a.$minFilter0 = null;
    a.$magFilter = null;
    a.$uWrap = null;
    a.$vWrap = null;
    a.$anisotropicFilterLevel = 0.0;
}
let cbgg_GLTexture_maxAnisotropicFilterLevel = 0.0,
cbgg_GLTexture_bind0 = $this => {
    cbg_Gdx_gl.$glBindTexture($this.$glTarget, $this.$glHandle);
},
cbgg_GLTexture_bind = ($this, $unit) => {
    cbg_Gdx_gl.$glActiveTexture(33984 + $unit | 0);
    cbg_Gdx_gl.$glBindTexture($this.$glTarget, $this.$glHandle);
},
cbgg_GLTexture_getTextureObjectHandle = $this => {
    return $this.$glHandle;
},
cbgg_GLTexture_setWrap = ($this, $u, $v) => {
    $this.$uWrap = $u;
    $this.$vWrap = $v;
    cbgg_GLTexture_bind0($this);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10242, $u.$glEnum0);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10243, $v.$glEnum0);
},
cbgg_GLTexture_setFilter = ($this, $minFilter, $magFilter) => {
    $this.$minFilter0 = $minFilter;
    $this.$magFilter = $magFilter;
    cbgg_GLTexture_bind0($this);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10241, $minFilter.$glEnum);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10240, $magFilter.$glEnum);
},
cbgg_GLTexture_getMaxAnisotropicFilterLevel = () => {
    let var$1, $buffer, var$3;
    var$1 = cbgg_GLTexture_maxAnisotropicFilterLevel;
    if (var$1 > 0.0)
        return var$1;
    if (!cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(16))) {
        cbgg_GLTexture_maxAnisotropicFilterLevel = 1.0;
        return 1.0;
    }
    $buffer = cbgu_BufferUtils_newFloatBuffer(16);
    var$3 = $buffer;
    jn_Buffer_position(var$3, 0);
    jn_Buffer_limit(var$3, $buffer.$capacityImpl());
    cbg_Gdx_gl20.$glGetFloatv(34047, $buffer);
    var$1 = jn_FloatBufferImpl_get($buffer, 0);
    cbgg_GLTexture_maxAnisotropicFilterLevel = var$1;
    return var$1;
},
cbgg_GLTexture__clinit_ = () => {
    cbgg_GLTexture_maxAnisotropicFilterLevel = 0.0;
};
function cbgg_Texture() {
    cbgg_GLTexture.call(this);
    this.$data2 = null;
}
let cbgg_Texture_managedTextures = null,
cbgg_Texture_$callClinit = () => {
    cbgg_Texture_$callClinit = $rt_eraseClinit(cbgg_Texture);
    cbgg_Texture__clinit_();
},
cbgg_Texture__init_3 = ($this, $file, $useMipMaps) => {
    cbgg_Texture_$callClinit();
    cbgg_Texture__init_0($this, $file, null, $useMipMaps);
},
cbgg_Texture__init_1 = (var_0, var_1) => {
    let var_2 = new cbgg_Texture();
    cbgg_Texture__init_3(var_2, var_0, var_1);
    return var_2;
},
cbgg_Texture__init_0 = ($this, $file, $format, $useMipMaps) => {
    let var$4, var$5;
    cbgg_Texture_$callClinit();
    if ($file === null)
        var$4 = null;
    else {
        var$4 = new cbggg_FileTextureData;
        var$5 = cbgg_Pixmap__init_0($file);
        var$4.$width5 = 0;
        var$4.$height5 = 0;
        var$4.$isPrepared0 = 0;
        var$4.$file0 = $file;
        var$4.$pixmap = var$5;
        var$4.$format8 = $format;
        var$4.$useMipMaps1 = $useMipMaps;
        $file = cbggg_FileTextureData_ensurePot(var$4, var$5);
        var$4.$pixmap = $file;
        var$4.$width5 = cbgg_Pixmap_getWidth($file);
        var$4.$height5 = cbgg_Pixmap_getHeight(var$4.$pixmap);
        if ($format === null)
            var$4.$format8 = cbgg_Pixmap_getFormat(var$4.$pixmap);
    }
    cbgg_Texture__init_($this, var$4);
},
cbgg_Texture__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture();
    cbgg_Texture__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture__init_ = ($this, $data) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    cbgg_Texture_$callClinit();
    var$2 = cgxgbt_TeaGL20_glGenTexture(cbg_Gdx_gl);
    var$3 = cbgg_Texture$TextureFilter_Nearest;
    $this.$minFilter0 = var$3;
    $this.$magFilter = var$3;
    var$3 = cbgg_Texture$TextureWrap_ClampToEdge;
    $this.$uWrap = var$3;
    $this.$vWrap = var$3;
    $this.$anisotropicFilterLevel = 1.0;
    $this.$glTarget = 3553;
    $this.$glHandle = var$2;
    if ($this.$data2 !== null && $data.$isManaged() != $this.$data2.$isManaged()) {
        $data = new cbgu_GdxRuntimeException;
        jl_Exception__init_($data, $rt_s(17));
        $rt_throw($data);
    }
    $this.$data2 = $data;
    if (!$data.$isPrepared())
        $data.$prepare();
    var$4 = $this;
    cbgg_GLTexture_bind0(var$4);
    if (!$data.$isPrepared())
        $data.$prepare();
    if ($data.$getType() === cbgg_TextureData$TextureDataType_Custom)
        $data.$consumeCustomData(3553);
    else {
        var$5 = $data.$consumePixmap();
        var$6 = $data.$disposePixmap();
        if ($data.$getFormat() === cbgg_Pixmap_getFormat(var$5))
            var$7 = var$5;
        else {
            var$7 = cbgg_Pixmap__init_(cbgg_Pixmap_getWidth(var$5), cbgg_Pixmap_getHeight(var$5), $data.$getFormat());
            cbgg_Pixmap_setBlending(var$7, cbgg_Pixmap$Blending_None);
            cbgg_Pixmap_drawPixmap(var$7, var$5, 0, 0, 0, 0, cbgg_Pixmap_getWidth(var$5), cbgg_Pixmap_getHeight(var$5));
            if ($data.$disposePixmap())
                cbgg_Pixmap_dispose(var$5);
            var$6 = 1;
        }
        cbg_Gdx_gl.$glPixelStorei(3317, 1);
        if (!$data.$useMipMaps())
            cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
        else {
            var$2 = cbgg_Pixmap_getWidth(var$7);
            var$8 = cbgg_Pixmap_getHeight(var$7);
            if (!cbggg_MipMapGenerator_useHWMipMap)
                cbggg_MipMapGenerator_generateMipMapCPU(3553, var$7, var$2, var$8);
            else {
                var$5 = cbg_Application$ApplicationType_WebGL;
                if (var$5 !== cbg_Application$ApplicationType_Android && var$5 !== var$5 && var$5 !== cbg_Application$ApplicationType_iOS) {
                    if (!cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(18)) && !cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(19)) && !jl_String_equals(jl_Class_getName(jl_Object_getClass(cbg_Gdx_gl20)), $rt_s(20)) && cbg_Gdx_gl30 === null)
                        cbggg_MipMapGenerator_generateMipMapCPU(3553, var$7, var$2, var$8);
                    else {
                        cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
                        cbg_Gdx_gl20.$glGenerateMipmap(3553);
                    }
                } else {
                    cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
                    cbg_Gdx_gl20.$glGenerateMipmap(3553);
                }
            }
        }
        if (var$6)
            cbgg_Pixmap_dispose(var$7);
    }
    var$3 = $this.$minFilter0;
    var$5 = $this.$magFilter;
    if (var$3 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10241, var$3.$glEnum);
        var$4.$minFilter0 = var$3;
    }
    if (var$5 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10240, var$5.$glEnum);
        var$4.$magFilter = var$5;
    }
    var$3 = $this.$uWrap;
    var$5 = $this.$vWrap;
    if (var$3 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10242, var$3.$glEnum0);
        var$4.$uWrap = var$3;
    }
    if (var$5 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10243, var$5.$glEnum0);
        var$4.$vWrap = var$5;
    }
    var$9 = $this.$anisotropicFilterLevel;
    var$10 = cbgg_GLTexture_getMaxAnisotropicFilterLevel();
    if (var$10 !== 1.0) {
        var$9 = jl_Math_min0(var$9, var$10);
        cbg_Gdx_gl20.$glTexParameterf(3553, 34046, var$9);
        var$4.$anisotropicFilterLevel = var$9;
    }
    cbg_Gdx_gl.$glBindTexture($this.$glTarget, 0);
    if ($data.$isManaged()) {
        $data = cbg_Gdx_app;
        var$3 = ju_HashMap_get(cbgg_Texture_managedTextures, $data);
        if (var$3 === null)
            var$3 = cbgu_Array__init_();
        cbgu_Array_add(var$3, $this);
        ju_HashMap_put(cbgg_Texture_managedTextures, $data, var$3);
    }
},
cbgg_Texture__init_4 = var_0 => {
    let var_1 = new cbgg_Texture();
    cbgg_Texture__init_(var_1, var_0);
    return var_1;
},
cbgg_Texture_getWidth = $this => {
    return $this.$data2.$getWidth();
},
cbgg_Texture_getHeight = $this => {
    return $this.$data2.$getHeight();
},
cbgg_Texture_dispose = $this => {
    let var$1, var$2, var$3;
    if (!$this.$glHandle)
        return;
    var$1 = $this;
    var$2 = var$1.$glHandle;
    if (var$2) {
        cgxgbt_TeaGL20_glDeleteTexture(cbg_Gdx_gl, var$2);
        var$1.$glHandle = 0;
    }
    if ($this.$data2.$isManaged()) {
        cbgg_Texture_$callClinit();
        var$3 = cbgg_Texture_managedTextures;
        var$1 = cbg_Gdx_app;
        if (ju_HashMap_get(var$3, var$1) !== null) {
            var$1 = cbgg_Texture_managedTextures;
            var$3 = cbg_Gdx_app;
            cbgu_Array_removeValue(ju_HashMap_get(var$1, var$3), $this, 1);
        }
    }
},
cbgg_Texture_toString = $this => {
    let var$1;
    var$1 = $this.$data2;
    if (!(var$1 instanceof cbggg_FileTextureData))
        return jl_Object_toString($this);
    return jl_Object_toString(var$1);
},
cbgg_Texture__clinit_ = () => {
    cbgg_Texture_managedTextures = ju_HashMap__init_();
},
jl_Iterable = $rt_classWithoutFields(0);
function cbgu_Array() {
    let a = this; jl_Object.call(a);
    a.$items = null;
    a.$size0 = 0;
    a.$ordered = 0;
    a.$iterable = null;
}
let cbgu_Array__init_3 = $this => {
    cbgu_Array__init_4($this, 1, 16);
},
cbgu_Array__init_ = () => {
    let var_0 = new cbgu_Array();
    cbgu_Array__init_3(var_0);
    return var_0;
},
cbgu_Array__init_6 = ($this, $capacity) => {
    cbgu_Array__init_4($this, 1, $capacity);
},
cbgu_Array__init_0 = var_0 => {
    let var_1 = new cbgu_Array();
    cbgu_Array__init_6(var_1, var_0);
    return var_1;
},
cbgu_Array__init_4 = ($this, $ordered, $capacity) => {
    cbgu_Array__init_5($this, $ordered, $capacity, cbgu_ArraySupplier_ANY);
},
cbgu_Array__init_1 = (var_0, var_1) => {
    let var_2 = new cbgu_Array();
    cbgu_Array__init_4(var_2, var_0, var_1);
    return var_2;
},
cbgu_Array__init_5 = ($this, $ordered, $capacity, $arraySupplier) => {
    $this.$ordered = $ordered;
    $this.$items = $arraySupplier.$get1($capacity);
},
cbgu_Array__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new cbgu_Array();
    cbgu_Array__init_5(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgu_Array_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items;
    var$3 = $items.data;
    var$4 = $this.$size0;
    if (var$4 == var$3.length)
        $items = cbgu_Array_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size0;
    $this.$size0 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_Array_addAll = ($this, $array) => {
    cbgu_Array_addAll0($this, $array.$items, 0, $array.$size0);
},
cbgu_Array_addAll0 = ($this, $array, $start, $count) => {
    let $items, var$5, $sizeNeeded;
    $items = $this.$items;
    var$5 = $items.data;
    $sizeNeeded = $this.$size0 + $count | 0;
    if ($sizeNeeded > var$5.length)
        $items = cbgu_Array_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size0 * 1.75 | 0));
    jl_System_fastArraycopy($array, $start, $items, $this.$size0, $count);
    $this.$size0 = $sizeNeeded;
},
cbgu_Array_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size0)
        return $this.$items.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(21));
    jl_AbstractStringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(5));
    jl_AbstractStringBuilder_append1(var$3, $this.$size0);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
cbgu_Array_removeValue = ($this, $value, $identity) => {
    let $items, $i, $n;
    a: {
        $items = $this.$items;
        if (!(!$identity && $value !== null)) {
            $i = 0;
            $n = $this.$size0;
            while ($i < $n) {
                if ($items.data[$i] === $value) {
                    cbgu_Array_removeIndex($this, $i);
                    return 1;
                }
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            $n = $this.$size0;
            while (true) {
                if ($i >= $n)
                    break a;
                if ($value.$equals($items.data[$i])) {
                    cbgu_Array_removeIndex($this, $i);
                    return 1;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return 0;
},
cbgu_Array_removeIndex = ($this, $index) => {
    let var$2, var$3, $value, $items, var$6;
    var$2 = $this.$size0;
    if ($index >= var$2) {
        var$3 = new jl_IndexOutOfBoundsException;
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_AbstractStringBuilder_append0($value, $rt_s(21));
        jl_AbstractStringBuilder_append1($value, $index);
        jl_AbstractStringBuilder_append0($value, $rt_s(5));
        jl_AbstractStringBuilder_append1($value, $this.$size0);
        jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString($value));
        $rt_throw(var$3);
    }
    $items = $this.$items;
    var$6 = $items.data;
    $value = var$6[$index];
    var$2 = var$2 - 1 | 0;
    $this.$size0 = var$2;
    if (!$this.$ordered)
        var$6[$index] = var$6[var$2];
    else
        jl_System_fastArraycopy($items, $index + 1 | 0, $items, $index, var$2 - $index | 0);
    var$6[$this.$size0] = null;
    return $value;
},
cbgu_Array_pop = $this => {
    let var$1, $item, var$3, var$4;
    var$1 = $this.$size0;
    if (!var$1) {
        $item = new jl_IllegalStateException;
        jl_Exception__init_($item, $rt_s(22));
        $rt_throw($item);
    }
    var$3 = var$1 - 1 | 0;
    $this.$size0 = var$3;
    var$4 = $this.$items.data;
    $item = var$4[var$3];
    var$4[var$3] = null;
    return $item;
},
cbgu_Array_peek = $this => {
    let var$1, var$2;
    var$1 = $this.$size0;
    if (var$1)
        return $this.$items.data[var$1 - 1 | 0];
    var$2 = new jl_IllegalStateException;
    jl_Exception__init_(var$2, $rt_s(22));
    $rt_throw(var$2);
},
cbgu_Array_first = $this => {
    let var$1;
    if ($this.$size0)
        return $this.$items.data[0];
    var$1 = new jl_IllegalStateException;
    jl_Exception__init_(var$1, $rt_s(22));
    $rt_throw(var$1);
},
cbgu_Array_clear = $this => {
    ju_Arrays_fill0($this.$items, 0, $this.$size0, null);
    $this.$size0 = 0;
},
cbgu_Array_ensureCapacity = ($this, $additionalCapacity) => {
    let var$2, var$3, $sizeNeeded;
    if ($additionalCapacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(23));
        jl_AbstractStringBuilder_append1(var$3, $additionalCapacity);
        jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    $sizeNeeded = $this.$size0 + $additionalCapacity | 0;
    if ($sizeNeeded > $this.$items.data.length)
        cbgu_Array_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size0 * 1.75 | 0));
    return $this.$items;
},
cbgu_Array_resize = ($this, $newSize) => {
    let var$2;
    var$2 = ju_Arrays_copyOf($this.$items, $newSize);
    $this.$items = var$2;
    return var$2;
},
cbgu_Array_sort = ($this, $comparator) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    if (cbgu_Sort_instance === null)
        cbgu_Sort_instance = new cbgu_Sort;
    var$2 = cbgu_Sort_instance;
    var$3 = $this.$items;
    var$4 = 0;
    var$5 = $this.$size0;
    if (var$2.$timSort === null)
        var$2.$timSort = cbgu_TimSort__init_0();
    var$6 = var$3.data;
    var$2 = var$2.$timSort;
    var$2.$stackSize = 0;
    var$7 = var$6.length;
    if (var$4 > var$5) {
        $comparator = new jl_IllegalArgumentException;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(24));
        jl_AbstractStringBuilder_append1(var$2, var$4);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(25));
        jl_AbstractStringBuilder_append1(var$2, var$5);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(26));
        jl_Exception__init_($comparator, jl_AbstractStringBuilder_toString(var$2));
        $rt_throw($comparator);
    }
    if (var$5 > var$7)
        $rt_throw(jl_ArrayIndexOutOfBoundsException__init_1(var$5));
    var$8 = var$5 - var$4 | 0;
    if (var$8 >= 2) {
        if (var$8 < 32)
            cbgu_TimSort_binarySort(var$3, var$4, var$5, var$4 + cbgu_TimSort_countRunAndMakeAscending(var$3, var$4, var$5, $comparator) | 0, $comparator);
        else {
            var$2.$a0 = var$3;
            var$2.$c = $comparator;
            var$2.$tmpCount = 0;
            var$9 = 0;
            var$10 = var$8;
            while (var$10 >= 32) {
                var$9 = var$9 | var$10 & 1;
                var$10 = var$10 >> 1;
            }
            var$10 = var$10 + var$9 | 0;
            while (true) {
                var$7 = cbgu_TimSort_countRunAndMakeAscending(var$3, var$4, var$5, $comparator);
                if (var$7 >= var$10)
                    var$11 = var$7;
                else {
                    var$11 = var$8 > var$10 ? var$10 : var$8;
                    cbgu_TimSort_binarySort(var$3, var$4, var$4 + var$11 | 0, var$4 + var$7 | 0, $comparator);
                }
                var$6 = var$2.$runBase.data;
                var$9 = var$2.$stackSize;
                var$6[var$9] = var$4;
                var$2.$runLen.data[var$9] = var$11;
                var$2.$stackSize = var$9 + 1 | 0;
                a: {
                    b: while (true) {
                        var$7 = var$2.$stackSize;
                        if (var$7 <= 1)
                            break a;
                        c: {
                            d: {
                                e: {
                                    var$12 = var$7 - 2 | 0;
                                    if (var$12 >= 1) {
                                        var$6 = var$2.$runLen.data;
                                        if (var$6[var$12 - 1 | 0] <= (var$6[var$12] + var$6[var$12 + 1 | 0] | 0))
                                            break e;
                                    }
                                    if (var$12 < 2)
                                        break d;
                                    var$6 = var$2.$runLen.data;
                                    if (var$6[var$12 - 2 | 0] > (var$6[var$12] + var$6[var$12 - 1 | 0] | 0))
                                        break d;
                                }
                                var$6 = var$2.$runLen.data;
                                if (var$6[var$12 - 1 | 0] >= var$6[var$12 + 1 | 0])
                                    break c;
                                var$12 = var$12 + (-1) | 0;
                                break c;
                            }
                            var$6 = var$2.$runLen.data;
                            if (var$6[var$12] > var$6[var$12 + 1 | 0])
                                break b;
                        }
                        cbgu_TimSort_mergeAt(var$2, var$12);
                    }
                }
                var$4 = var$4 + var$11 | 0;
                var$8 = var$8 - var$11 | 0;
                if (!var$8)
                    break;
            }
            while (true) {
                var$9 = var$2.$stackSize;
                if (var$9 <= 1)
                    break;
                var$9 = var$9 - 2 | 0;
                if (var$9 > 0) {
                    var$3 = var$2.$runLen.data;
                    if (var$3[var$9 - 1 | 0] < var$3[var$9 + 1 | 0])
                        var$9 = var$9 + (-1) | 0;
                }
                cbgu_TimSort_mergeAt(var$2, var$9);
            }
            var$2.$a0 = null;
            var$2.$c = null;
            var$3 = var$2.$tmp;
            var$4 = 0;
            var$9 = var$2.$tmpCount;
            while (var$4 < var$9) {
                var$3.data[var$4] = null;
                var$4 = var$4 + 1 | 0;
            }
        }
    }
},
cbgu_Array_iterator = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = cbgu_Collections_allocateIterators;
    if (var$1)
        return cbgu_Array$ArrayIterator__init_($this, 1);
    if ($this.$iterable === null) {
        var$2 = new cbgu_Array$ArrayIterable;
        var$2.$array3 = $this;
        var$2.$allowRemove = 1;
        $this.$iterable = var$2;
    }
    var$2 = $this.$iterable;
    if (var$1)
        var$3 = cbgu_Array$ArrayIterator__init_(var$2.$array3, var$2.$allowRemove);
    else {
        if (var$2.$iterator11 === null) {
            var$2.$iterator11 = cbgu_Array$ArrayIterator__init_(var$2.$array3, var$2.$allowRemove);
            var$2.$iterator20 = cbgu_Array$ArrayIterator__init_(var$2.$array3, var$2.$allowRemove);
        }
        var$4 = var$2.$iterator11;
        if (var$4.$valid) {
            var$3 = var$2.$iterator20;
            var$3.$index3 = 0;
            var$3.$valid = 1;
            var$4.$valid = 0;
        } else {
            var$4.$index3 = 0;
            var$4.$valid = 1;
            var$2.$iterator20.$valid = 0;
            var$3 = var$4;
        }
    }
    return var$3;
},
cbgu_Array_truncate = ($this, $newSize) => {
    let var$2, var$3, var$4, $i;
    if ($newSize < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(27));
        jl_AbstractStringBuilder_append1(var$3, $newSize);
        jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    var$4 = $this.$size0;
    if (var$4 <= $newSize)
        return;
    $i = $newSize;
    while ($i < var$4) {
        $this.$items.data[$i] = null;
        $i = $i + 1 | 0;
    }
    $this.$size0 = $newSize;
},
cbgu_Array_toArray = ($this, $arraySupplier) => {
    let $result;
    $result = $arraySupplier.$get1($this.$size0);
    jl_System_fastArraycopy($this.$items, 0, $result, 0, $this.$size0);
    return $result;
},
cbgu_Array_hashCode = $this => {
    let $items, $h, $i, $n, var$5, $item;
    if (!$this.$ordered)
        return jl_Object_identity($this);
    $items = $this.$items;
    $h = 1;
    $i = 0;
    $n = $this.$size0;
    while ($i < $n) {
        var$5 = $items.data;
        $h = $h * 31 | 0;
        $item = var$5[$i];
        if ($item !== null)
            $h = $h + $item.$hashCode() | 0;
        $i = $i + 1 | 0;
    }
    return $h;
},
cbgu_Array_equals = ($this, $object) => {
    let $array, $n, $items1, $items2, $i, var$7, $o1, $o2;
    if ($object === $this)
        return 1;
    if (!$this.$ordered)
        return 0;
    if (!($object instanceof cbgu_Array))
        return 0;
    $array = $object;
    if (!$array.$ordered)
        return 0;
    $n = $this.$size0;
    if ($n != $array.$size0)
        return 0;
    $items1 = $this.$items;
    $items2 = $array.$items;
    $i = 0;
    a: {
        while ($i < $n) {
            b: {
                var$7 = $items2.data;
                $o1 = $items1.data[$i];
                $o2 = var$7[$i];
                if ($o1 !== null) {
                    if ($o1.$equals($o2))
                        break b;
                    else
                        break a;
                }
                if ($o2 !== null)
                    break a;
            }
            $i = $i + 1 | 0;
        }
        return 1;
    }
    return 0;
},
cbgu_Array_toString = $this => {
    let $items, $buffer, $i;
    if (!$this.$size0)
        return $rt_s(28);
    $items = $this.$items.data;
    $buffer = cbgu_StringBuilder__init_0(32);
    cbgu_StringBuilder_append0($buffer, 91);
    cbgu_StringBuilder_append1($buffer, $items[0]);
    $i = 1;
    while ($i < $this.$size0) {
        cbgu_StringBuilder_append00($buffer, $rt_s(29));
        cbgu_StringBuilder_append1($buffer, $items[$i]);
        $i = $i + 1 | 0;
    }
    cbgu_StringBuilder_append0($buffer, 93);
    return cbgu_StringBuilder_toString($buffer);
};
function cbgu_Json() {
    let a = this; jl_Object.call(a);
    a.$reader0 = null;
    a.$typeName = null;
    a.$usePrototypes = 0;
    a.$outputType = null;
    a.$enumNames = 0;
    a.$typeToFields = null;
    a.$tagToClass = null;
    a.$classToTag = null;
    a.$classToSerializer = null;
    a.$classToDefaultValues = null;
    a.$equals10 = null;
    a.$equals2 = null;
}
let cbgu_Json__init_ = $this => {
    let var$1;
    $this.$reader0 = cbgu_JsonReader__init_0();
    $this.$typeName = $rt_s(30);
    $this.$usePrototypes = 1;
    $this.$enumNames = 1;
    $this.$typeToFields = cbgu_ObjectMap__init_();
    $this.$tagToClass = cbgu_ObjectMap__init_();
    $this.$classToTag = cbgu_ObjectMap__init_();
    $this.$classToSerializer = cbgu_ObjectMap__init_();
    $this.$classToDefaultValues = cbgu_ObjectMap__init_();
    var$1 = $rt_createArray(jl_Object, 1);
    var$1.data[0] = null;
    $this.$equals10 = var$1;
    var$1 = $rt_createArray(jl_Object, 1);
    var$1.data[0] = null;
    $this.$equals2 = var$1;
    cbgu_JsonWriter$OutputType_$callClinit();
    $this.$outputType = cbgu_JsonWriter$OutputType_minimal;
},
cbgu_Json__init_0 = () => {
    let var_0 = new cbgu_Json();
    cbgu_Json__init_(var_0);
    return var_0;
};
function cbgu_ObjectMap() {
    let a = this; jl_Object.call(a);
    a.$size6 = 0;
    a.$keyTable = null;
    a.$valueTable = null;
    a.$loadFactor2 = 0.0;
    a.$threshold = 0;
    a.$shift2 = 0;
    a.$mask = 0;
    a.$keys1 = null;
    a.$keys2 = null;
}
let cbgu_ObjectMap_dummy = null,
cbgu_ObjectMap__init_0 = $this => {
    cbgu_ObjectMap__init_1($this, 51, 0.800000011920929);
},
cbgu_ObjectMap__init_ = () => {
    let var_0 = new cbgu_ObjectMap();
    cbgu_ObjectMap__init_0(var_0);
    return var_0;
},
cbgu_ObjectMap__init_1 = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor2 = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask = $initialCapacity;
        $this.$shift2 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable = $rt_createArray(jl_Object, $tableSize);
        $this.$valueTable = $rt_createArray(jl_Object, $tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(31));
    jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_ObjectMap__init_2 = (var_0, var_1) => {
    let var_2 = new cbgu_ObjectMap();
    cbgu_ObjectMap__init_1(var_2, var_0, var_1);
    return var_2;
},
cbgu_ObjectMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item.$hashCode()), Long_create(2135587861, 2654435769)), $this.$shift2));
},
cbgu_ObjectMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Exception__init_($other, $rt_s(32));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable;
    $i = cbgu_ObjectMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return  -($i + 1 | 0) | 0;
        if ($other.$equals($key))
            break;
        $i = ($i + 1 | 0) & $this.$mask;
    }
    return $i;
},
cbgu_ObjectMap_put = ($this, $key, $value) => {
    let $i, var$4, $oldValue;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    if ($i >= 0) {
        var$4 = $this.$valueTable.data;
        $oldValue = var$4[$i];
        var$4[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable.data;
    var$4[$i] = $key;
    $this.$valueTable.data[$i] = $value;
    $i = $this.$size6 + 1 | 0;
    $this.$size6 = $i;
    if ($i >= $this.$threshold)
        cbgu_ObjectMap_resize($this, var$4.length << 1);
    return null;
},
cbgu_ObjectMap_get = ($this, $key) => {
    let $i;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    return $i < 0 ? null : $this.$valueTable.data[$i];
},
cbgu_ObjectMap_clear = $this => {
    if (!$this.$size6)
        return;
    $this.$size6 = 0;
    ju_Arrays_fill1($this.$keyTable, null);
    ju_Arrays_fill1($this.$valueTable, null);
},
cbgu_ObjectMap_containsKey = ($this, $key) => {
    return cbgu_ObjectMap_locateKey($this, $key) < 0 ? 0 : 1;
},
cbgu_ObjectMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable.data.length;
        $this.$threshold = $newSize * $this.$loadFactor2 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask = var$3;
        $this.$shift2 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable;
        $oldValueTable = $this.$valueTable;
        $this.$keyTable = $rt_createArray(jl_Object, $newSize);
        $this.$valueTable = $rt_createArray(jl_Object, $newSize);
        if ($this.$size6 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key !== null) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable;
                    $newSize = cbgu_ObjectMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (var$10[$newSize] === null)
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
cbgu_ObjectMap_keys = $this => {
    let var$1;
    if (cbgu_Collections_allocateIterators)
        return cbgu_ObjectMap$Keys__init_($this);
    if ($this.$keys1 === null) {
        $this.$keys1 = cbgu_ObjectMap$Keys__init_($this);
        $this.$keys2 = cbgu_ObjectMap$Keys__init_($this);
    }
    var$1 = $this.$keys1;
    if (!var$1.$valid0) {
        cbgu_ObjectMap$Keys_reset(var$1);
        var$1 = $this.$keys1;
        var$1.$valid0 = 1;
        $this.$keys2.$valid0 = 0;
        return var$1;
    }
    cbgu_ObjectMap$Keys_reset($this.$keys2);
    var$1 = $this.$keys2;
    var$1.$valid0 = 1;
    $this.$keys1.$valid0 = 0;
    return var$1;
},
cbgu_ObjectMap__clinit_ = () => {
    cbgu_ObjectMap_dummy = new jl_Object;
};
function cbgu_OrderedMap() {
    cbgu_ObjectMap.call(this);
    this.$keys0 = null;
}
let cbgu_OrderedMap__init_ = $this => {
    cbgu_ObjectMap__init_0($this);
    $this.$keys0 = cbgu_Array__init_();
},
cbgu_OrderedMap__init_0 = () => {
    let var_0 = new cbgu_OrderedMap();
    cbgu_OrderedMap__init_(var_0);
    return var_0;
},
cbgu_OrderedMap_put = ($this, $key, $value) => {
    let $i, var$4, $oldValue;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    if ($i >= 0) {
        var$4 = $this.$valueTable.data;
        $oldValue = var$4[$i];
        var$4[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    $this.$keyTable.data[$i] = $key;
    $this.$valueTable.data[$i] = $value;
    cbgu_Array_add($this.$keys0, $key);
    $i = $this.$size6 + 1 | 0;
    $this.$size6 = $i;
    if ($i >= $this.$threshold)
        cbgu_ObjectMap_resize($this, $this.$keyTable.data.length << 1);
    return null;
};
function cbgu_Queue() {
    let a = this; jl_Object.call(a);
    a.$values10 = null;
    a.$head0 = 0;
    a.$tail0 = 0;
    a.$size13 = 0;
}
let cbgu_Queue__init_ = $this => {
    $this.$head0 = 0;
    $this.$tail0 = 0;
    $this.$size13 = 0;
    $this.$values10 = $rt_createArray(jl_Object, 16);
},
cbgu_Queue__init_0 = () => {
    let var_0 = new cbgu_Queue();
    cbgu_Queue__init_(var_0);
    return var_0;
},
cbgu_Predicate = $rt_classWithoutFields(0);
function cbgg_VertexAttribute() {
    let a = this; jl_Object.call(a);
    a.$usage4 = 0;
    a.$numComponents = 0;
    a.$normalized = 0;
    a.$type3 = 0;
    a.$offset0 = 0;
    a.$alias = null;
    a.$unit0 = 0;
    a.$usageIndex = 0;
}
let cbgg_VertexAttribute__init_0 = ($this, $usage, $numComponents, $alias) => {
    let var$4, var$5;
    var$4 = $rt_compare($usage, 4);
    var$5 = var$4 ? 5126 : 5121;
    var$4 = var$4 ? 0 : 1;
    $this.$usage4 = $usage;
    $this.$numComponents = $numComponents;
    $this.$type3 = var$5;
    $this.$normalized = var$4;
    $this.$alias = $alias;
    $this.$unit0 = 0;
    $this.$usageIndex = jl_Integer_numberOfTrailingZeros($usage);
},
cbgg_VertexAttribute__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_VertexAttribute();
    cbgg_VertexAttribute__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbg_Net = $rt_classWithoutFields(0);
function cbgm_MapObject() {
    let a = this; jl_Object.call(a);
    a.$name6 = null;
    a.$opacity = 0.0;
    a.$visible = 0;
    a.$properties0 = null;
    a.$color9 = null;
}
let cbgm_MapObject__init_ = $this => {
    let var$1, var$2;
    $this.$name6 = $rt_s(9);
    $this.$opacity = 1.0;
    $this.$visible = 1;
    $this.$properties0 = cbgm_MapProperties__init_0();
    var$1 = cbgg_Color_WHITE;
    var$2 = new cbgg_Color;
    var$2.$r = var$1.$r;
    var$2.$g = var$1.$g;
    var$2.$b = var$1.$b;
    var$2.$a = var$1.$a;
    $this.$color9 = var$2;
},
cbgm_MapObject__init_0 = () => {
    let var_0 = new cbgm_MapObject();
    cbgm_MapObject__init_(var_0);
    return var_0;
},
cbgggp_ResourceData$Configurable = $rt_classWithoutFields(0);
function cbgggp_ParticleEffect() {
    jl_Object.call(this);
    this.$controllers = null;
}
let cbgggp_ParticleEffect__init_ = $this => {
    $this.$controllers = cbgu_Array__init_2(1, 3, new cbgggp_ParticleEffect$_init_$lambda$_0_0);
},
cbgggp_ParticleEffect__init_0 = () => {
    let var_0 = new cbgggp_ParticleEffect();
    cbgggp_ParticleEffect__init_(var_0);
    return var_0;
},
cbgu_Json$Serializable = $rt_classWithoutFields(0);
function cbgggp_ParticleController() {
    let a = this; jl_Object.call(a);
    a.$influencers = null;
    a.$transform = null;
    a.$scale3 = null;
    a.$deltaTime0 = 0.0;
    a.$deltaTimeSqr = 0.0;
}
let cbgggp_ParticleController__init_ = $this => {
    $this.$transform = cbgm_Matrix4__init_();
    $this.$scale3 = cbgm_Vector3__init_0(1.0, 1.0, 1.0);
    $this.$influencers = cbgu_Array__init_2(1, 3, new cbgggp_ParticleController$_init_$lambda$_0_0);
    $this.$deltaTime0 = 0.01666666753590107;
    $this.$deltaTimeSqr = 2.7777781360782683E-4;
},
cbgggp_ParticleController__init_0 = () => {
    let var_0 = new cbgggp_ParticleController();
    cbgggp_ParticleController__init_(var_0);
    return var_0;
};
function cbgggp_ResourceData() {
    let a = this; jl_Object.call(a);
    a.$uniqueData = null;
    a.$data12 = null;
    a.$sharedAssets = null;
    a.$currentLoadIndex = 0;
}
let cbgggp_ResourceData__init_ = $this => {
    $this.$uniqueData = cbgu_ObjectMap__init_();
    $this.$data12 = cbgu_Array__init_2(1, 3, new cbgggp_ResourceData$_init_$lambda$_0_0);
    $this.$sharedAssets = cbgu_Array__init_();
    $this.$currentLoadIndex = 0;
},
cbgggp_ResourceData__init_0 = () => {
    let var_0 = new cbgggp_ResourceData();
    cbgggp_ResourceData__init_(var_0);
    return var_0;
},
cbgggp_ParallelArray = $rt_classWithoutFields(),
cbgm_Interpolation = $rt_classWithoutFields(),
cbgm_Interpolation_linear = null,
cbgm_Interpolation_smooth = null,
cbgm_Interpolation_smooth2 = null,
cbgm_Interpolation_smoother = null,
cbgm_Interpolation_fade = null,
cbgm_Interpolation_pow2 = null,
cbgm_Interpolation_pow2In = null,
cbgm_Interpolation_slowFast = null,
cbgm_Interpolation_pow2Out = null,
cbgm_Interpolation_fastSlow = null,
cbgm_Interpolation_pow2InInverse = null,
cbgm_Interpolation_pow2OutInverse = null,
cbgm_Interpolation_pow3 = null,
cbgm_Interpolation_pow3In = null,
cbgm_Interpolation_pow3Out = null,
cbgm_Interpolation_pow3InInverse = null,
cbgm_Interpolation_pow3OutInverse = null,
cbgm_Interpolation_pow4 = null,
cbgm_Interpolation_pow4In = null,
cbgm_Interpolation_pow4Out = null,
cbgm_Interpolation_pow5 = null,
cbgm_Interpolation_pow5In = null,
cbgm_Interpolation_pow5Out = null,
cbgm_Interpolation_sine = null,
cbgm_Interpolation_sineIn = null,
cbgm_Interpolation_sineOut = null,
cbgm_Interpolation_exp10 = null,
cbgm_Interpolation_exp10In = null,
cbgm_Interpolation_exp10Out = null,
cbgm_Interpolation_exp5 = null,
cbgm_Interpolation_exp5In = null,
cbgm_Interpolation_exp5Out = null,
cbgm_Interpolation_circle = null,
cbgm_Interpolation_circleIn = null,
cbgm_Interpolation_circleOut = null,
cbgm_Interpolation_elastic = null,
cbgm_Interpolation_elasticIn = null,
cbgm_Interpolation_elasticOut = null,
cbgm_Interpolation_swing = null,
cbgm_Interpolation_swingIn = null,
cbgm_Interpolation_swingOut = null,
cbgm_Interpolation_bounce = null,
cbgm_Interpolation_bounceIn = null,
cbgm_Interpolation_bounceOut = null,
cbgm_Interpolation_$callClinit = () => {
    cbgm_Interpolation_$callClinit = $rt_eraseClinit(cbgm_Interpolation);
    cbgm_Interpolation__clinit_();
},
cbgm_Interpolation__init_ = $this => {
    cbgm_Interpolation_$callClinit();
};
let cbgm_Interpolation__clinit_ = () => {
    let var$1;
    var$1 = new cbgm_Interpolation$1;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_linear = var$1;
    var$1 = new cbgm_Interpolation$2;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smooth = var$1;
    var$1 = new cbgm_Interpolation$3;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smooth2 = var$1;
    var$1 = new cbgm_Interpolation$4;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smoother = var$1;
    cbgm_Interpolation_fade = var$1;
    cbgm_Interpolation_pow2 = cbgm_Interpolation$Pow__init_0(2);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 2);
    cbgm_Interpolation_pow2In = var$1;
    cbgm_Interpolation_slowFast = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 2);
    cbgm_Interpolation_pow2Out = var$1;
    cbgm_Interpolation_fastSlow = var$1;
    var$1 = new cbgm_Interpolation$5;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow2InInverse = var$1;
    var$1 = new cbgm_Interpolation$6;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow2OutInverse = var$1;
    cbgm_Interpolation_pow3 = cbgm_Interpolation$Pow__init_0(3);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 3);
    cbgm_Interpolation_pow3In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 3);
    cbgm_Interpolation_pow3Out = var$1;
    var$1 = new cbgm_Interpolation$7;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow3InInverse = var$1;
    var$1 = new cbgm_Interpolation$8;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow3OutInverse = var$1;
    cbgm_Interpolation_pow4 = cbgm_Interpolation$Pow__init_0(4);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 4);
    cbgm_Interpolation_pow4In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 4);
    cbgm_Interpolation_pow4Out = var$1;
    cbgm_Interpolation_pow5 = cbgm_Interpolation$Pow__init_0(5);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 5);
    cbgm_Interpolation_pow5In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 5);
    cbgm_Interpolation_pow5Out = var$1;
    var$1 = new cbgm_Interpolation$9;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sine = var$1;
    var$1 = new cbgm_Interpolation$10;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sineIn = var$1;
    var$1 = new cbgm_Interpolation$11;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sineOut = var$1;
    cbgm_Interpolation_exp10 = cbgm_Interpolation$Exp__init_0(2.0, 10.0);
    var$1 = new cbgm_Interpolation$ExpIn;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 10.0);
    cbgm_Interpolation_exp10In = var$1;
    var$1 = new cbgm_Interpolation$ExpOut;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 10.0);
    cbgm_Interpolation_exp10Out = var$1;
    cbgm_Interpolation_exp5 = cbgm_Interpolation$Exp__init_0(2.0, 5.0);
    var$1 = new cbgm_Interpolation$ExpIn;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 5.0);
    cbgm_Interpolation_exp5In = var$1;
    var$1 = new cbgm_Interpolation$ExpOut;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 5.0);
    cbgm_Interpolation_exp5Out = var$1;
    var$1 = new cbgm_Interpolation$12;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circle = var$1;
    var$1 = new cbgm_Interpolation$13;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circleIn = var$1;
    var$1 = new cbgm_Interpolation$14;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circleOut = var$1;
    cbgm_Interpolation_elastic = cbgm_Interpolation$Elastic__init_0(2.0, 10.0, 7, 1.0);
    var$1 = new cbgm_Interpolation$ElasticIn;
    cbgm_Interpolation$Elastic__init_(var$1, 2.0, 10.0, 6, 1.0);
    cbgm_Interpolation_elasticIn = var$1;
    var$1 = new cbgm_Interpolation$ElasticOut;
    cbgm_Interpolation$Elastic__init_(var$1, 2.0, 10.0, 7, 1.0);
    cbgm_Interpolation_elasticOut = var$1;
    var$1 = new cbgm_Interpolation$Swing;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale5 = 3.0;
    cbgm_Interpolation_swing = var$1;
    var$1 = new cbgm_Interpolation$SwingIn;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale6 = 2.0;
    cbgm_Interpolation_swingIn = var$1;
    var$1 = new cbgm_Interpolation$SwingOut;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale2 = 2.0;
    cbgm_Interpolation_swingOut = var$1;
    var$1 = new cbgm_Interpolation$Bounce;
    cbgm_Interpolation$BounceOut__init_(var$1, 4);
    cbgm_Interpolation_bounce = var$1;
    var$1 = new cbgm_Interpolation$BounceIn;
    cbgm_Interpolation$BounceOut__init_(var$1, 4);
    cbgm_Interpolation_bounceIn = var$1;
    cbgm_Interpolation_bounceOut = cbgm_Interpolation$BounceOut__init_0(4);
},
jlr_AnnotatedElement = $rt_classWithoutFields(0),
jlr_Type = $rt_classWithoutFields(0);
function jl_Class() {
    let a = this; jl_Object.call(a);
    a.$name1 = null;
    a.$simpleName = null;
    a.$platformClass = null;
}
let jl_Class_getClass = $cls => {
    let $result;
    if ($cls === null)
        return null;
    $result = $cls.classObject;
    if ($result === null) {
        $result = new jl_Class;
        $result.$platformClass = $cls;
        $cls.classObject = $result;
    }
    return $result;
},
jl_Class_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = (!($this.$platformClass.$meta.flags & 2) ? 0 : 1) ? $rt_s(33) : !jl_Class_isPrimitive($this) ? $rt_s(34) : $rt_s(9);
    var$2 = jl_Class_getName($this);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jl_Class_getName = $this => {
    if ($this.$name1 === null)
        $this.$name1 = otp_Platform_getName($this.$platformClass);
    return $this.$name1;
},
jl_Class_getSimpleName = $this => {
    let $simpleName, var$2, $lastDollar, $lastDot;
    $simpleName = $this.$simpleName;
    if ($simpleName === null) {
        if (otp_Platform_getArrayItem($this.$platformClass) === null ? 0 : 1) {
            $simpleName = jl_Class_getSimpleName(jl_Class_getComponentType($this));
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_AbstractStringBuilder_append(var$2, $simpleName);
            jl_AbstractStringBuilder_append(var$2, $rt_s(28));
            $simpleName = jl_AbstractStringBuilder_toString(var$2);
        } else {
            $simpleName = $this.$platformClass.$meta.enclosingClass;
            if (($simpleName === null ? null : jl_Class_getClass($simpleName)) !== null) {
                $simpleName = $rt_str($this.$platformClass.$meta.simpleName);
                if ($simpleName === null)
                    $simpleName = $rt_s(9);
            } else {
                $simpleName = otp_Platform_getName($this.$platformClass);
                $lastDollar = jl_String_lastIndexOf($simpleName, 36);
                if ($lastDollar == (-1)) {
                    $lastDot = jl_String_lastIndexOf($simpleName, 46);
                    if ($lastDot != (-1))
                        $simpleName = jl_String_substring0($simpleName, $lastDot + 1 | 0);
                } else {
                    $simpleName = jl_String_substring0($simpleName, $lastDollar + 1 | 0);
                    if (jl_String_charAt($simpleName, 0) >= 48 && jl_String_charAt($simpleName, 0) <= 57)
                        $simpleName = $rt_s(9);
                }
            }
        }
        $this.$simpleName = $simpleName;
    }
    return $simpleName;
},
jl_Class_isPrimitive = $this => {
    return $this.$platformClass.$meta.primitive ? 1 : 0;
},
jl_Class_getComponentType = $this => {
    return jl_Class_getClass(otp_Platform_getArrayItem($this.$platformClass));
},
jl_Class_forName = $name => {
    let $cls;
    $cls = otp_Platform_lookupClass($name);
    if ($cls !== null)
        return jl_Class_getClass($cls);
    $name = new jl_ClassNotFoundException;
    jl_Throwable__init_($name);
    $rt_throw($name);
},
jl_Class_newInstance = $this => {
    let $instance;
    $instance = $this.$platformClass;
    if (!otp_Platform_newInstancePrepared) {
        otp_Platform_prepareNewInstance();
        otp_Platform_newInstancePrepared = 1;
    }
    $instance = otp_Platform_newInstanceImpl($instance);
    if ($instance !== null)
        return $instance;
    $instance = new jl_InstantiationException;
    jl_Throwable__init_($instance);
    $rt_throw($instance);
},
otji_JS = $rt_classWithoutFields(),
otji_JS__init_ = $this => {
    return;
},
otji_JS__init_0 = () => {
    let var_0 = new otji_JS();
    otji_JS__init_(var_0);
    return var_0;
},
otji_JS_wrap = $array => {
    let var$2, $result, $i, var$5;
    if ($array === null)
        return null;
    $array = $array.data;
    var$2 = $array.length;
    $result = new Int8Array(var$2);
    $i = 0;
    while ($i < var$2) {
        var$5 = $array[$i];
        $result[$i] = var$5;
        $i = $i + 1 | 0;
    }
    return $result;
},
otji_JS_function = (var$1, var$2) => {
    let name = 'jso$functor$' + var$2;
    let result = var$1[name];
    if (typeof result !== 'function') {
        let fn = function() {
            return var$1[var$2].apply(var$1, arguments);
        };
        result = () => fn;
        var$1[name] = result;
    }
    return result();
},
otji_JS_functionAsObject = (var$1, var$2) => {
    if (typeof var$1 !== 'function') return var$1;
    let result = {  };
    result[var$2] = var$1;
    return result;
},
otp_Platform = $rt_classWithoutFields(),
otp_Platform_newInstancePrepared = 0,
otp_Platform__init_ = $this => {
    return;
},
otp_Platform__init_0 = () => {
    let var_0 = new otp_Platform();
    otp_Platform__init_(var_0);
    return var_0;
},
otp_Platform_clone = var$1 => {
    let copy = new var$1.constructor();
    for (let field in var$1) {
        if (var$1.hasOwnProperty(field)) {
            copy[field] = var$1[field];
        }
    }
    return copy;
},
otp_Platform_isAssignable = (var$1, $to) => {
    let $supertypes, $i;
    if (var$1 === $to)
        return 1;
    $supertypes = var$1.$meta.supertypes;
    $i = 0;
    while ($i < $supertypes.length) {
        if (otp_Platform_isAssignable($supertypes[$i], $to))
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
},
otp_Platform_prepareNewInstance = () => {
    let c = '$$constructor$$';
    jl_String[c] = jl_String__init_4;
    jl_Object[c] = jl_Object__init_;
    jl_RuntimeException[c] = jl_RuntimeException__init_;
    jl_ClassCastException[c] = jl_ClassCastException__init_;
    jl_StringBuilder[c] = jl_StringBuilder__init_0;
    jl_Exception[c] = jl_Exception__init_0;
    cbggg_GlyphLayout[c] = cbggg_GlyphLayout__init_;
    cbggg_TextureRegion[c] = cbggg_TextureRegion__init_0;
    cbggg_Sprite[c] = cbggg_Sprite__init_;
    cbggg_BitmapFont[c] = cbggg_BitmapFont__init_0;
    cbgg_Color[c] = cbgg_Color__init_1;
    cbgu_Array[c] = cbgu_Array__init_3;
    cbgu_Json[c] = cbgu_Json__init_;
    cbgu_ObjectMap[c] = cbgu_ObjectMap__init_0;
    cbgu_OrderedMap[c] = cbgu_OrderedMap__init_;
    cbgu_Queue[c] = cbgu_Queue__init_;
    cbgm_MapObject[c] = cbgm_MapObject__init_;
    cbgggp_ParticleEffect[c] = cbgggp_ParticleEffect__init_;
    cbgggp_ParticleController[c] = cbgggp_ParticleController__init_;
    cbgggp_ResourceData[c] = cbgggp_ResourceData__init_;
    otji_JS[c] = otji_JS__init_;
    otp_Platform[c] = otp_Platform__init_;
    jl_Throwable[c] = jl_Throwable__init_;
    jl_AbstractStringBuilder[c] = jl_AbstractStringBuilder__init_;
    otcir_FieldInfo[c] = otcir_FieldInfo__init_;
    otcir_MethodInfo[c] = otcir_MethodInfo__init_;
    otcir_ClassList[c] = otcir_ClassList__init_;
    pst_TeaVMLauncher[c] = pst_TeaVMLauncher__init_;
    ps_Adapter[c] = ps_Adapter__init_;
    cbggg_GlyphLayout$_clinit_$lambda$_17_0[c] = cbggg_GlyphLayout$_clinit_$lambda$_17_0__init_;
    cbgu_IntArray[c] = cbgu_IntArray__init_1;
    ju_HashMap[c] = ju_HashMap__init_2;
    cbgm_Interpolation$1[c] = cbgm_Interpolation$1__init_;
    cbgm_Interpolation$2[c] = cbgm_Interpolation$2__init_;
    cbgm_Interpolation$3[c] = cbgm_Interpolation$3__init_;
    cbgm_Interpolation$4[c] = cbgm_Interpolation$4__init_;
    cbgm_Interpolation$5[c] = cbgm_Interpolation$5__init_;
    cbgm_Interpolation$6[c] = cbgm_Interpolation$6__init_;
    cbgm_Interpolation$7[c] = cbgm_Interpolation$7__init_;
    cbgm_Interpolation$8[c] = cbgm_Interpolation$8__init_;
    cbgm_Interpolation$9[c] = cbgm_Interpolation$9__init_;
    cbgm_Interpolation$10[c] = cbgm_Interpolation$10__init_;
    cbgm_Interpolation$11[c] = cbgm_Interpolation$11__init_;
    cbgm_Interpolation$12[c] = cbgm_Interpolation$12__init_;
    cbgm_Interpolation$13[c] = cbgm_Interpolation$13__init_;
    cbgm_Interpolation$14[c] = cbgm_Interpolation$14__init_;
    jl_String$_clinit_$lambda$_115_0[c] = jl_String$_clinit_$lambda$_115_0__init_;
    otci_IntegerUtil[c] = otci_IntegerUtil__init_;
    cgxgbtu_TeaDefaultBaseUrlProvider[c] = cgxgbtu_TeaDefaultBaseUrlProvider__init_;
    cbgu_Pools[c] = cbgu_Pools__init_;
    jl_IllegalArgumentException[c] = jl_IllegalArgumentException__init_0;
    cgxgbtdi_TeaWindow[c] = cgxgbtdi_TeaWindow__init_;
    cgxgbt_TeaNet[c] = cgxgbt_TeaNet__init_;
    cgxgbt_TeaApplicationLogger[c] = cgxgbt_TeaApplicationLogger__init_;
    cgxgbt_TeaClipboard[c] = cgxgbt_TeaClipboard__init_;
    cgxgbt_DefaultTeaAudio[c] = cgxgbt_DefaultTeaAudio__init_;
    jl_Math[c] = jl_Math__init_;
    ju_Objects[c] = ju_Objects__init_;
    jl_IndexOutOfBoundsException[c] = jl_IndexOutOfBoundsException__init_;
    cgxgbta_TeaWebAgent[c] = cgxgbta_TeaWebAgent__init_;
    jl_System[c] = jl_System__init_;
    ju_Properties[c] = ju_Properties__init_;
    cgxgbta_AssetInstance[c] = cgxgbta_AssetInstance__init_;
    ju_HashSet[c] = ju_HashSet__init_;
    cgxjc_JMultiplatform[c] = cgxjc_JMultiplatform__init_;
    cgxjc_JPlatformMap[c] = cgxjc_JPlatformMap__init_;
    cbgu_IntMap[c] = cbgu_IntMap__init_0;
    cbgu_IntSet[c] = cbgu_IntSet__init_;
    cgxgbtft_InternalStorage[c] = cgxgbtft_InternalStorage__init_;
    cgxgbtf_MemoryFileStorage[c] = cgxgbtf_MemoryFileStorage__init_;
    cgxgbtft_ClasspathStorage[c] = cgxgbtft_ClasspathStorage__init_;
    cbg_Gdx[c] = cbg_Gdx__init_;
    cgxgbtwh_HowlerAudioManager[c] = cgxgbtwh_HowlerAudioManager__init_;
    cbgu_ObjectSet[c] = cbgu_ObjectSet__init_0;
    cbgu_ArraySupplier$_clinit_$lambda$_3_0[c] = cbgu_ArraySupplier$_clinit_$lambda$_3_0__init_;
    cbgm_MathUtils[c] = cbgm_MathUtils__init_;
    ju_Hashtable[c] = ju_Hashtable__init_;
    cbgm_RandomXS128[c] = cbgm_RandomXS128__init_;
    ju_Random[c] = ju_Random__init_;
    ju_Hashtable$1[c] = ju_Hashtable$1__init_;
    ju_Hashtable$2[c] = ju_Hashtable$2__init_;
    jur_Pattern[c] = jur_Pattern__init_;
    jl_IllegalStateException[c] = jl_IllegalStateException__init_0;
    jl_NullPointerException[c] = jl_NullPointerException__init_;
    jl_NumberFormatException[c] = jl_NumberFormatException__init_;
    ju_ArrayList[c] = ju_ArrayList__init_1;
    jur_AheadFSet[c] = jur_AheadFSet__init_;
    jur_FinalSet[c] = jur_FinalSet__init_;
    jur_NonCapJointSet[c] = jur_NonCapJointSet__init_;
    jur_JointSet[c] = jur_JointSet__init_0;
    ju_Arrays[c] = ju_Arrays__init_;
    jl_ArrayStoreException[c] = jl_ArrayStoreException__init_;
    jur_CharClass[c] = jur_CharClass__init_0;
    jlr_Array[c] = jlr_Array__init_;
    jur_FSet$PossessiveFSet[c] = jur_FSet$PossessiveFSet__init_;
    ju_BitSet[c] = ju_BitSet__init_;
    jur_SOLSet[c] = jur_SOLSet__init_;
    jur_PreviousMatch[c] = jur_PreviousMatch__init_;
    jur_EOISet[c] = jur_EOISet__init_;
    jur_DotAllSet[c] = jur_DotAllSet__init_;
    jl_StringBuffer[c] = jl_StringBuffer__init_;
    jur_AbstractCharClass$PredefinedCharacterClasses[c] = jur_AbstractCharClass$PredefinedCharacterClasses__init_;
    jur_AbstractLineTerminator$1[c] = jur_AbstractLineTerminator$1__init_;
    jur_AbstractLineTerminator$2[c] = jur_AbstractLineTerminator$2__init_;
    jur_AbstractCharClass$LazySpace[c] = jur_AbstractCharClass$LazySpace__init_;
    jur_AbstractCharClass$LazyDigit[c] = jur_AbstractCharClass$LazyDigit__init_;
    jur_AbstractCharClass$LazyLower[c] = jur_AbstractCharClass$LazyLower__init_;
    jur_AbstractCharClass$LazyUpper[c] = jur_AbstractCharClass$LazyUpper__init_;
    jur_AbstractCharClass$LazyASCII[c] = jur_AbstractCharClass$LazyASCII__init_;
    jur_AbstractCharClass$LazyAlpha[c] = jur_AbstractCharClass$LazyAlpha__init_;
    jur_AbstractCharClass$LazyAlnum[c] = jur_AbstractCharClass$LazyAlnum__init_;
    jur_AbstractCharClass$LazyPunct[c] = jur_AbstractCharClass$LazyPunct__init_;
    jur_AbstractCharClass$LazyGraph[c] = jur_AbstractCharClass$LazyGraph__init_;
    jur_AbstractCharClass$LazyPrint[c] = jur_AbstractCharClass$LazyPrint__init_;
    jur_AbstractCharClass$LazyBlank[c] = jur_AbstractCharClass$LazyBlank__init_;
    jur_AbstractCharClass$LazyCntrl[c] = jur_AbstractCharClass$LazyCntrl__init_;
    jur_AbstractCharClass$LazyXDigit[c] = jur_AbstractCharClass$LazyXDigit__init_;
    jur_AbstractCharClass$LazyJavaLowerCase[c] = jur_AbstractCharClass$LazyJavaLowerCase__init_;
    jur_AbstractCharClass$LazyJavaUpperCase[c] = jur_AbstractCharClass$LazyJavaUpperCase__init_;
    jur_AbstractCharClass$LazyJavaWhitespace[c] = jur_AbstractCharClass$LazyJavaWhitespace__init_;
    jur_AbstractCharClass$LazyJavaMirrored[c] = jur_AbstractCharClass$LazyJavaMirrored__init_;
    jur_AbstractCharClass$LazyJavaDefined[c] = jur_AbstractCharClass$LazyJavaDefined__init_;
    jur_AbstractCharClass$LazyJavaDigit[c] = jur_AbstractCharClass$LazyJavaDigit__init_;
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable[c] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_;
    jur_AbstractCharClass$LazyJavaISOControl[c] = jur_AbstractCharClass$LazyJavaISOControl__init_;
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart[c] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_;
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart[c] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_;
    jur_AbstractCharClass$LazyJavaLetter[c] = jur_AbstractCharClass$LazyJavaLetter__init_;
    jur_AbstractCharClass$LazyJavaLetterOrDigit[c] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_;
    jur_AbstractCharClass$LazyJavaSpaceChar[c] = jur_AbstractCharClass$LazyJavaSpaceChar__init_;
    jur_AbstractCharClass$LazyJavaTitleCase[c] = jur_AbstractCharClass$LazyJavaTitleCase__init_;
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart[c] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_;
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart[c] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_;
    jur_AbstractCharClass$LazyWord[c] = jur_AbstractCharClass$LazyWord__init_;
    jur_AbstractCharClass$LazyNonWord[c] = jur_AbstractCharClass$LazyNonWord__init_;
    jur_AbstractCharClass$LazyNonSpace[c] = jur_AbstractCharClass$LazyNonSpace__init_;
    jur_AbstractCharClass$LazyNonDigit[c] = jur_AbstractCharClass$LazyNonDigit__init_;
    jur_AbstractCharClass$LazySpecialsBlock[c] = jur_AbstractCharClass$LazySpecialsBlock__init_;
    jl_NegativeArraySizeException[c] = jl_NegativeArraySizeException__init_;
    otpp_ResourceAccessor[c] = otpp_ResourceAccessor__init_;
    otciu_UnicodeHelper[c] = otciu_UnicodeHelper__init_;
    otci_Base46[c] = otci_Base46__init_;
    jl_StringIndexOutOfBoundsException[c] = jl_StringIndexOutOfBoundsException__init_;
    jl_IllegalMonitorStateException[c] = jl_IllegalMonitorStateException__init_;
    cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1[c] = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1__init_;
    cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2[c] = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2__init_;
    cbgu_NumberUtils[c] = cbgu_NumberUtils__init_;
    cbggg_GlyphLayout$GlyphRun[c] = cbggg_GlyphLayout$GlyphRun__init_;
    jl_Thread[c] = jl_Thread__init_;
    jl_Object$Monitor[c] = jl_Object$Monitor__init_;
    otcic_JSStderrPrintStream[c] = otcic_JSStderrPrintStream__init_;
    cbgu_FloatArray[c] = cbgu_FloatArray__init_0;
    cgxgbtu_KeyCodes[c] = cgxgbtu_KeyCodes__init_;
    cbgu_TimeUtils[c] = cbgu_TimeUtils__init_;
    jl_DefaultUncaughtExceptionHandler[c] = jl_DefaultUncaughtExceptionHandler__init_;
    otjc_JSObjects[c] = otjc_JSObjects__init_;
    otji_JSWrapper$Helper[c] = otji_JSWrapper$Helper__init_;
    otji_JSWrapper$Helper$_clinit_$lambda$_3_0[c] = otji_JSWrapper$Helper$_clinit_$lambda$_3_0__init_;
    otji_JSWrapper$Helper$_clinit_$lambda$_3_1[c] = otji_JSWrapper$Helper$_clinit_$lambda$_3_1__init_;
    otcic_JSStdoutPrintStream[c] = otcic_JSStdoutPrintStream__init_;
    cbgu_Collections[c] = cbgu_Collections__init_;
    cgxgbtdt_TypedArrays[c] = cgxgbtdt_TypedArrays__init_;
    jl_CloneNotSupportedException[c] = jl_CloneNotSupportedException__init_;
    ju_NoSuchElementException[c] = ju_NoSuchElementException__init_;
    pss_Profile[c] = pss_Profile__init_;
    cbggg_TextureAtlas[c] = cbggg_TextureAtlas__init_;
    ccve_BloomEffect[c] = ccve_BloomEffect__init_;
    ccve_FxaaEffect[c] = ccve_FxaaEffect__init_;
    pss_Audio[c] = pss_Audio__init_;
    ju_ConcurrentModificationException[c] = ju_ConcurrentModificationException__init_;
    cbggg_PolygonSpriteBatch[c] = cbggg_PolygonSpriteBatch__init_0;
    cbgm_Matrix4[c] = cbgm_Matrix4__init_0;
    pss_TitleSection[c] = pss_TitleSection__init_;
    pss_Control[c] = pss_Control__init_;
    cbgm_Polygon[c] = cbgm_Polygon__init_0;
    cbgm_Vector2[c] = cbgm_Vector2__init_0;
    ccvf_VfxPingPongWrapper[c] = ccvf_VfxPingPongWrapper__init_;
    ccveu_CopyEffect[c] = ccveu_CopyEffect__init_;
    ccve_GaussianBlurEffect[c] = ccve_GaussianBlurEffect__init_;
    ccveu_CombineEffect[c] = ccveu_CombineEffect__init_;
    cbgf_FileHandle[c] = cbgf_FileHandle__init_;
    psm_MainMenu[c] = psm_MainMenu__init_;
    psm_OverviewMenu[c] = psm_OverviewMenu__init_;
    pse_S01E01Episode[c] = pse_S01E01Episode__init_;
    ccvf_VfxFrameBufferRenderer[c] = ccvf_VfxFrameBufferRenderer__init_;
    ccvu_PrioritizedArray[c] = ccvu_PrioritizedArray__init_;
    ccvg_VfxGLUtils[c] = ccvg_VfxGLUtils__init_;
    cbggg_BitmapFont$BitmapFontData[c] = cbggg_BitmapFont$BitmapFontData__init_;
    psm_Menu$RepeatControl[c] = psm_Menu$RepeatControl__init_;
    psm_EpisodesMenu[c] = psm_EpisodesMenu__init_;
    psm_GuideMenu[c] = psm_GuideMenu__init_;
    psm_SettingsMenu[c] = psm_SettingsMenu__init_;
    cbgu_I18NBundle[c] = cbgu_I18NBundle__init_;
    ju_ArrayDeque[c] = ju_ArrayDeque__init_;
    cbgc_Controllers[c] = cbgc_Controllers__init_;
    cbgm_Quaternion[c] = cbgm_Quaternion__init_0;
    cbgm_Vector3[c] = cbgm_Vector3__init_1;
    ccvu_PrioritizedArray$WrapperComparator[c] = ccvu_PrioritizedArray$WrapperComparator__init_;
    ccvu_ValueArrayMap[c] = ccvu_ValueArrayMap__init_;
    ccvf_VfxFrameBufferPool[c] = ccvf_VfxFrameBufferPool__init_0;
    ccvg_VfxGlViewport[c] = ccvg_VfxGlViewport__init_;
    ccvg_DefaultVfxGlExtension[c] = ccvg_DefaultVfxGlExtension__init_;
    cbgu_ObjectIntMap[c] = cbgu_ObjectIntMap__init_0;
    ccvf_VfxFrameBuffer$RendererManager[c] = ccvf_VfxFrameBuffer$RendererManager__init_;
    cbggg_TextureAtlas$TextureAtlasData[c] = cbggg_TextureAtlas$TextureAtlasData__init_;
    cbggg_BitmapFont$Glyph[c] = cbggg_BitmapFont$Glyph__init_0;
    psl_ChimeraLogic[c] = psl_ChimeraLogic__init_;
    cbgc_ControllerManagerStub[c] = cbgc_ControllerManagerStub__init_;
    ccvu_ViewportQuadMesh[c] = ccvu_ViewportQuadMesh__init_;
    cbgu_BufferUtils[c] = cbgu_BufferUtils__init_;
    cbgur_ClassReflection[c] = cbgur_ClassReflection__init_;
    cbgur_ReflectionException[c] = cbgur_ReflectionException__init_;
    cbgg_OrthographicCamera[c] = cbgg_OrthographicCamera__init_;
    cbggg_SpriteBatch[c] = cbggg_SpriteBatch__init_0;
    cgxgbt_TeaTool[c] = cgxgbt_TeaTool__init_;
    jl_ClassNotFoundException[c] = jl_ClassNotFoundException__init_;
    jl_ReflectiveOperationException[c] = jl_ReflectiveOperationException__init_;
    jl_InstantiationException[c] = jl_InstantiationException__init_;
    jl_IllegalAccessException[c] = jl_IllegalAccessException__init_;
    cbgm_EarClippingTriangulator[c] = cbgm_EarClippingTriangulator__init_;
    cbgm_GeometryUtils[c] = cbgm_GeometryUtils__init_;
    cbgm_Frustum[c] = cbgm_Frustum__init_;
    cbgmc_Ray[c] = cbgmc_Ray__init_;
    cbgu_ShortArray[c] = cbgu_ShortArray__init_;
    otciu_CLDRHelper[c] = otciu_CLDRHelper__init_;
    cbgm_Plane[c] = cbgm_Plane__init_;
    cbgg_TextureData$Factory[c] = cbgg_TextureData$Factory__init_;
    cbgu_StreamUtils[c] = cbgu_StreamUtils__init_;
    ji_IOException[c] = ji_IOException__init_;
    cbgu_StringBuilder[c] = cbgu_StringBuilder__init_;
    jn_JSBufferHelper[c] = jn_JSBufferHelper__init_;
    jn_ReadOnlyBufferException[c] = jn_ReadOnlyBufferException__init_;
    jn_BufferUnderflowException[c] = jn_BufferUnderflowException__init_;
    ccvu_PrioritizedArray$Wrapper[c] = ccvu_PrioritizedArray$Wrapper__init_;
    cbggg_TextureAtlas$TextureAtlasData$Region[c] = cbggg_TextureAtlas$TextureAtlasData$Region__init_;
    cbggg_TextureAtlas$TextureAtlasData$Page[c] = cbggg_TextureAtlas$TextureAtlasData$Page__init_;
    cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0[c] = cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0__init_;
    cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1[c] = cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1__init_;
    cbgu_JsonReader[c] = cbgu_JsonReader__init_;
    cbgm_MapProperties[c] = cbgm_MapProperties__init_;
    cbgggp_ParticleEffect$_init_$lambda$_0_0[c] = cbgggp_ParticleEffect$_init_$lambda$_0_0__init_;
    cbgggp_ParticleController$_init_$lambda$_0_0[c] = cbgggp_ParticleController$_init_$lambda$_0_0__init_;
    cbgggp_ResourceData$_init_$lambda$_0_0[c] = cbgggp_ResourceData$_init_$lambda$_0_0__init_;
    jl_UnsupportedOperationException[c] = jl_UnsupportedOperationException__init_;
    cbgu_PropertiesUtils[c] = cbgu_PropertiesUtils__init_;
    jt_DecimalFormat[c] = jt_DecimalFormat__init_0;
    jt_DecimalFormatSymbols[c] = jt_DecimalFormatSymbols__init_0;
    jt_SimpleDateFormat[c] = jt_SimpleDateFormat__init_1;
    otcin_Buffers[c] = otcin_Buffers__init_;
    jl_AbstractStringBuilder$Constants[c] = jl_AbstractStringBuilder$Constants__init_;
    otcit_FloatAnalyzer[c] = otcit_FloatAnalyzer__init_;
    otcit_FloatAnalyzer$Result[c] = otcit_FloatAnalyzer$Result__init_;
    cgxgbtf_HEXCoder[c] = cgxgbtf_HEXCoder__init_;
    ccvu_PrioritizedArray$Wrapper$1[c] = ccvu_PrioritizedArray$Wrapper$1__init_;
    jnci_UTF8Charset[c] = jnci_UTF8Charset__init_;
    otcit_FloatSynthesizer[c] = otcit_FloatSynthesizer__init_;
    jt_DateFormatSymbols[c] = jt_DateFormatSymbols__init_0;
    otcit_DoubleAnalyzer$Result[c] = otcit_DoubleAnalyzer$Result__init_;
    cbggg_MipMapGenerator[c] = cbggg_MipMapGenerator__init_;
    jl_AssertionError[c] = jl_AssertionError__init_;
    jnc_CharacterCodingException[c] = jnc_CharacterCodingException__init_;
    jl_Error[c] = jl_Error__init_;
    otcic_CurrencyHelper[c] = otcic_CurrencyHelper__init_;
    ju_GregorianCalendar[c] = ju_GregorianCalendar__init_0;
    jn_BufferOverflowException[c] = jn_BufferOverflowException__init_;
    jnc_BufferUnderflowException[c] = jnc_BufferUnderflowException__init_;
    jnc_BufferOverflowException[c] = jnc_BufferOverflowException__init_;
    cbgu_Sort[c] = cbgu_Sort__init_;
    jt_DecimalFormatParser[c] = jt_DecimalFormatParser__init_;
    ji_ByteArrayOutputStream[c] = ji_ByteArrayOutputStream__init_0;
    cbgggp_ResourceData$SaveData[c] = cbgggp_ResourceData$SaveData__init_;
    cbgm_MathUtils$Sin[c] = cbgm_MathUtils$Sin__init_;
    cbgu_TimSort[c] = cbgu_TimSort__init_;
    cbggg_FrameBuffer[c] = cbggg_FrameBuffer__init_;
    jt_DecimalFormat$MinusField[c] = jt_DecimalFormat$MinusField__init_;
    cbgm_Matrix3[c] = cbgm_Matrix3__init_;
    otcit_DoubleSynthesizer[c] = otcit_DoubleSynthesizer__init_;
    otcit_DoubleAnalyzer[c] = otcit_DoubleAnalyzer__init_;
    ji_UnsupportedEncodingException[c] = ji_UnsupportedEncodingException__init_;
    ju_Date[c] = ju_Date__init_;
    jm_Multiplication[c] = jm_Multiplication__init_;
    jnc_Charset$Charsets[c] = jnc_Charset$Charsets__init_;
    jnc_StandardCharsets[c] = jnc_StandardCharsets__init_;
    jnci_AsciiCharset[c] = jnci_AsciiCharset__init_;
    jnci_Iso8859Charset[c] = jnci_Iso8859Charset__init_;
    psl_BulletLogic[c] = psl_BulletLogic__init_;
    jt_DecimalFormat$PerMillField[c] = jt_DecimalFormat$PerMillField__init_;
    jt_DecimalFormat$CurrencyField[c] = jt_DecimalFormat$CurrencyField__init_;
    jt_DecimalFormat$PercentField[c] = jt_DecimalFormat$PercentField__init_;
    jl_ArithmeticException[c] = jl_ArithmeticException__init_;
    jl_ArrayIndexOutOfBoundsException[c] = jl_ArrayIndexOutOfBoundsException__init_;
    pss_ChimeraShape[c] = pss_ChimeraShape__init_;
    jm_BitLevel[c] = jm_BitLevel__init_;
    ses_ShapeUtils[c] = ses_ShapeUtils__init_;
    pss_BulletShape[c] = pss_BulletShape__init_;
    cbggg_BitmapFontCache$addText$lambda$_31_0[c] = cbggg_BitmapFontCache$addText$lambda$_31_0__init_;
    jm_Elementary[c] = jm_Elementary__init_;
    jm_Division[c] = jm_Division__init_;
    jt_DecimalFormat$Constants[c] = jt_DecimalFormat$Constants__init_;
    ses_Joiner[c] = ses_Joiner__init_;
    otc_PlatformDetector[c] = otc_PlatformDetector__init_;
    ccvu_CommonUtils[c] = ccvu_CommonUtils__init_;
    jm_Conversion[c] = jm_Conversion__init_;
    cbgg_Colors[c] = cbgg_Colors__init_;
},
otp_Platform_newInstanceImpl = var$1 => {
    let thread = $rt_nativeThread();
    if ($rt_resuming()) {
        let r = thread.pop();
        var$1.$$constructor$$(r);
        if ($rt_suspending()) {
            return thread.push(r);
        }
        return r;
    }
    if (!var$1.hasOwnProperty("$$constructor$$")) {
        return null;
    }
    let r = new var$1();
    var$1.$$constructor$$(r);
    if ($rt_suspending()) {
        thread.push(r);
    }
    return r;
},
otp_Platform_lookupClass = var$1 => {
    switch ($rt_ustr(var$1)) {
        case "com.badlogic.gdx.graphics.g2d.GlyphLayout": cbggg_GlyphLayout.$clinit(); return cbggg_GlyphLayout;
        case "java.lang.Object": jl_Object.$clinit(); return jl_Object;
        case "com.badlogic.gdx.utils.Pool$Poolable": cbgu_Pool$Poolable.$clinit(); return cbgu_Pool$Poolable;
        case "com.badlogic.gdx.graphics.g2d.TextureRegion": cbggg_TextureRegion.$clinit(); return cbggg_TextureRegion;
        case "com.badlogic.gdx.graphics.g2d.Sprite": cbggg_Sprite.$clinit(); return cbggg_Sprite;
        case "com.badlogic.gdx.graphics.g2d.BitmapFont": cbggg_BitmapFont.$clinit(); return cbggg_BitmapFont;
        case "com.badlogic.gdx.utils.Disposable": cbgu_Disposable.$clinit(); return cbgu_Disposable;
        case "com.badlogic.gdx.graphics.g2d.NinePatch": cbggg_NinePatch.$clinit(); return cbggg_NinePatch;
        case "com.badlogic.gdx.graphics.Color": cbgg_Color.$clinit(); return cbgg_Color;
        case "com.badlogic.gdx.graphics.Texture": cbgg_Texture.$clinit(); return cbgg_Texture;
        case "com.badlogic.gdx.graphics.GLTexture": cbgg_GLTexture.$clinit(); return cbgg_GLTexture;
        case "com.badlogic.gdx.utils.Array": cbgu_Array.$clinit(); return cbgu_Array;
        case "java.lang.Iterable": jl_Iterable.$clinit(); return jl_Iterable;
        case "com.badlogic.gdx.utils.Json": cbgu_Json.$clinit(); return cbgu_Json;
        case "com.badlogic.gdx.utils.ObjectMap": cbgu_ObjectMap.$clinit(); return cbgu_ObjectMap;
        case "com.badlogic.gdx.utils.OrderedMap": cbgu_OrderedMap.$clinit(); return cbgu_OrderedMap;
        case "com.badlogic.gdx.utils.Queue": cbgu_Queue.$clinit(); return cbgu_Queue;
        case "com.badlogic.gdx.utils.Predicate": cbgu_Predicate.$clinit(); return cbgu_Predicate;
        case "com.badlogic.gdx.graphics.VertexAttribute": cbgg_VertexAttribute.$clinit(); return cbgg_VertexAttribute;
        case "com.badlogic.gdx.Net": cbg_Net.$clinit(); return cbg_Net;
        case "com.badlogic.gdx.maps.MapObject": cbgm_MapObject.$clinit(); return cbgm_MapObject;
        case "com.badlogic.gdx.graphics.g3d.particles.ParticleEffect": cbgggp_ParticleEffect.$clinit(); return cbgggp_ParticleEffect;
        case "com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable": cbgggp_ResourceData$Configurable.$clinit(); return cbgggp_ResourceData$Configurable;
        case "com.badlogic.gdx.graphics.g3d.particles.ParticleController": cbgggp_ParticleController.$clinit(); return cbgggp_ParticleController;
        case "com.badlogic.gdx.utils.Json$Serializable": cbgu_Json$Serializable.$clinit(); return cbgu_Json$Serializable;
        case "com.badlogic.gdx.graphics.g3d.particles.ResourceData": cbgggp_ResourceData.$clinit(); return cbgggp_ResourceData;
        case "com.badlogic.gdx.graphics.g3d.particles.ParallelArray": cbgggp_ParallelArray.$clinit(); return cbgggp_ParallelArray;
        case "com.badlogic.gdx.math.Interpolation": cbgm_Interpolation.$clinit(); return cbgm_Interpolation;
        case "java.lang.Class": jl_Class.$clinit(); return jl_Class;
        case "java.lang.reflect.AnnotatedElement": jlr_AnnotatedElement.$clinit(); return jlr_AnnotatedElement;
        case "java.lang.reflect.Type": jlr_Type.$clinit(); return jlr_Type;
        case "org.teavm.jso.impl.JS": otji_JS.$clinit(); return otji_JS;
        case "org.teavm.platform.Platform": otp_Platform.$clinit(); return otp_Platform;
        case "java.lang.ClassCastException": jl_ClassCastException.$clinit(); return jl_ClassCastException;
        case "java.lang.RuntimeException": jl_RuntimeException.$clinit(); return jl_RuntimeException;
        case "java.lang.Exception": jl_Exception.$clinit(); return jl_Exception;
        case "java.lang.Throwable": jl_Throwable.$clinit(); return jl_Throwable;
        case "java.lang.String": jl_String.$clinit(); return jl_String;
        case "java.io.Serializable": ji_Serializable.$clinit(); return ji_Serializable;
        case "java.lang.Comparable": jl_Comparable.$clinit(); return jl_Comparable;
        case "java.lang.CharSequence": jl_CharSequence.$clinit(); return jl_CharSequence;
        case "java.lang.Integer": jl_Integer.$clinit(); return jl_Integer;
        case "java.lang.Number": jl_Number.$clinit(); return jl_Number;
        case "java.lang.StringBuilder": jl_StringBuilder.$clinit(); return jl_StringBuilder;
        case "java.lang.AbstractStringBuilder": jl_AbstractStringBuilder.$clinit(); return jl_AbstractStringBuilder;
        case "java.lang.Appendable": jl_Appendable.$clinit(); return jl_Appendable;
        case "org.teavm.classlib.impl.reflection.FieldInfo": otcir_FieldInfo.$clinit(); return otcir_FieldInfo;
        case "org.teavm.classlib.impl.reflection.MethodInfo": otcir_MethodInfo.$clinit(); return otcir_MethodInfo;
        case "org.teavm.classlib.impl.reflection.ClassList": otcir_ClassList.$clinit(); return otcir_ClassList;
        case "polygon_burst.survivor01.teavm.TeaVMLauncher": pst_TeaVMLauncher.$clinit(); return pst_TeaVMLauncher;
        case "org.teavm.classlib.impl.IntegerUtil": otci_IntegerUtil.$clinit(); return otci_IntegerUtil;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplicationConfiguration": cgxgbt_TeaApplicationConfiguration.$clinit(); return cgxgbt_TeaApplicationConfiguration;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication": cgxgbt_TeaApplication.$clinit(); return cgxgbt_TeaApplication;
        case "com.badlogic.gdx.Application": cbg_Application.$clinit(); return cbg_Application;
        case "java.lang.Runnable": jl_Runnable.$clinit(); return jl_Runnable;
        case "polygon_burst.survivor01.Adapter": ps_Adapter.$clinit(); return ps_Adapter;
        case "com.badlogic.gdx.ApplicationAdapter": cbg_ApplicationAdapter.$clinit(); return cbg_ApplicationAdapter;
        case "com.badlogic.gdx.ApplicationListener": cbg_ApplicationListener.$clinit(); return cbg_ApplicationListener;
        case "com.badlogic.gdx.graphics.g2d.GlyphLayout$<clinit>$lambda$_17_0": cbggg_GlyphLayout$_clinit_$lambda$_17_0.$clinit(); return cbggg_GlyphLayout$_clinit_$lambda$_17_0;
        case "com.badlogic.gdx.utils.DefaultPool$PoolSupplier": cbgu_DefaultPool$PoolSupplier.$clinit(); return cbgu_DefaultPool$PoolSupplier;
        case "com.badlogic.gdx.utils.Pools": cbgu_Pools.$clinit(); return cbgu_Pools;
        case "com.badlogic.gdx.utils.IntArray": cbgu_IntArray.$clinit(); return cbgu_IntArray;
        case "java.util.HashMap": ju_HashMap.$clinit(); return ju_HashMap;
        case "java.util.AbstractMap": ju_AbstractMap.$clinit(); return ju_AbstractMap;
        case "java.util.Map": ju_Map.$clinit(); return ju_Map;
        case "java.lang.Cloneable": jl_Cloneable.$clinit(); return jl_Cloneable;
        case "com.badlogic.gdx.math.Interpolation$1": cbgm_Interpolation$1.$clinit(); return cbgm_Interpolation$1;
        case "com.badlogic.gdx.math.Interpolation$2": cbgm_Interpolation$2.$clinit(); return cbgm_Interpolation$2;
        case "com.badlogic.gdx.math.Interpolation$3": cbgm_Interpolation$3.$clinit(); return cbgm_Interpolation$3;
        case "com.badlogic.gdx.math.Interpolation$4": cbgm_Interpolation$4.$clinit(); return cbgm_Interpolation$4;
        case "com.badlogic.gdx.math.Interpolation$Pow": cbgm_Interpolation$Pow.$clinit(); return cbgm_Interpolation$Pow;
        case "com.badlogic.gdx.math.Interpolation$PowIn": cbgm_Interpolation$PowIn.$clinit(); return cbgm_Interpolation$PowIn;
        case "com.badlogic.gdx.math.Interpolation$PowOut": cbgm_Interpolation$PowOut.$clinit(); return cbgm_Interpolation$PowOut;
        case "com.badlogic.gdx.math.Interpolation$5": cbgm_Interpolation$5.$clinit(); return cbgm_Interpolation$5;
        case "com.badlogic.gdx.math.Interpolation$6": cbgm_Interpolation$6.$clinit(); return cbgm_Interpolation$6;
        case "com.badlogic.gdx.math.Interpolation$7": cbgm_Interpolation$7.$clinit(); return cbgm_Interpolation$7;
        case "com.badlogic.gdx.math.Interpolation$8": cbgm_Interpolation$8.$clinit(); return cbgm_Interpolation$8;
        case "com.badlogic.gdx.math.Interpolation$9": cbgm_Interpolation$9.$clinit(); return cbgm_Interpolation$9;
        case "com.badlogic.gdx.math.Interpolation$10": cbgm_Interpolation$10.$clinit(); return cbgm_Interpolation$10;
        case "com.badlogic.gdx.math.Interpolation$11": cbgm_Interpolation$11.$clinit(); return cbgm_Interpolation$11;
        case "com.badlogic.gdx.math.Interpolation$Exp": cbgm_Interpolation$Exp.$clinit(); return cbgm_Interpolation$Exp;
        case "com.badlogic.gdx.math.Interpolation$ExpIn": cbgm_Interpolation$ExpIn.$clinit(); return cbgm_Interpolation$ExpIn;
        case "com.badlogic.gdx.math.Interpolation$ExpOut": cbgm_Interpolation$ExpOut.$clinit(); return cbgm_Interpolation$ExpOut;
        case "com.badlogic.gdx.math.Interpolation$12": cbgm_Interpolation$12.$clinit(); return cbgm_Interpolation$12;
        case "com.badlogic.gdx.math.Interpolation$13": cbgm_Interpolation$13.$clinit(); return cbgm_Interpolation$13;
        case "com.badlogic.gdx.math.Interpolation$14": cbgm_Interpolation$14.$clinit(); return cbgm_Interpolation$14;
        case "com.badlogic.gdx.math.Interpolation$Elastic": cbgm_Interpolation$Elastic.$clinit(); return cbgm_Interpolation$Elastic;
        case "com.badlogic.gdx.math.Interpolation$ElasticIn": cbgm_Interpolation$ElasticIn.$clinit(); return cbgm_Interpolation$ElasticIn;
        case "com.badlogic.gdx.math.Interpolation$ElasticOut": cbgm_Interpolation$ElasticOut.$clinit(); return cbgm_Interpolation$ElasticOut;
        case "com.badlogic.gdx.math.Interpolation$Swing": cbgm_Interpolation$Swing.$clinit(); return cbgm_Interpolation$Swing;
        case "com.badlogic.gdx.math.Interpolation$SwingIn": cbgm_Interpolation$SwingIn.$clinit(); return cbgm_Interpolation$SwingIn;
        case "com.badlogic.gdx.math.Interpolation$SwingOut": cbgm_Interpolation$SwingOut.$clinit(); return cbgm_Interpolation$SwingOut;
        case "com.badlogic.gdx.math.Interpolation$Bounce": cbgm_Interpolation$Bounce.$clinit(); return cbgm_Interpolation$Bounce;
        case "com.badlogic.gdx.math.Interpolation$BounceOut": cbgm_Interpolation$BounceOut.$clinit(); return cbgm_Interpolation$BounceOut;
        case "com.badlogic.gdx.math.Interpolation$BounceIn": cbgm_Interpolation$BounceIn.$clinit(); return cbgm_Interpolation$BounceIn;
        case "java.lang.String$<clinit>$lambda$_115_0": jl_String$_clinit_$lambda$_115_0.$clinit(); return jl_String$_clinit_$lambda$_115_0;
        case "java.util.Comparator": ju_Comparator.$clinit(); return ju_Comparator;
        case "java.lang.Character": jl_Character.$clinit(); return jl_Character;
        case "com.github.xpenatan.gdx.backends.teavm.utils.TeaDefaultBaseUrlProvider": cgxgbtu_TeaDefaultBaseUrlProvider.$clinit(); return cgxgbtu_TeaDefaultBaseUrlProvider;
        case "com.github.xpenatan.gdx.backends.teavm.utils.TeaBaseUrlProvider": cgxgbtu_TeaBaseUrlProvider.$clinit(); return cgxgbtu_TeaBaseUrlProvider;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$AppState": cgxgbt_TeaApplication$AppState.$clinit(); return cgxgbt_TeaApplication$AppState;
        case "java.lang.Enum": jl_Enum.$clinit(); return jl_Enum;
        case "com.github.xpenatan.gdx.backends.teavm.dom.impl.TeaWindow": cgxgbtdi_TeaWindow.$clinit(); return cgxgbtdi_TeaWindow;
        case "com.github.xpenatan.gdx.backends.teavm.dom.WindowWrapper": cgxgbtd_WindowWrapper.$clinit(); return cgxgbtd_WindowWrapper;
        case "org.teavm.jso.browser.AnimationFrameCallback": otjb_AnimationFrameCallback.$clinit(); return otjb_AnimationFrameCallback;
        case "org.teavm.jso.JSObject": otj_JSObject.$clinit(); return otj_JSObject;
        case "java.lang.Math": jl_Math.$clinit(); return jl_Math;
        case "java.lang.IllegalArgumentException": jl_IllegalArgumentException.$clinit(); return jl_IllegalArgumentException;
        case "java.util.Objects": ju_Objects.$clinit(); return ju_Objects;
        case "org.teavm.jso.impl.JSWrapper": otji_JSWrapper.$clinit(); return otji_JSWrapper;
        case "com.github.xpenatan.gdx.backends.teavm.agent.TeaWebAgent": cgxgbta_TeaWebAgent.$clinit(); return cgxgbta_TeaWebAgent;
        case "java.lang.System": jl_System.$clinit(); return jl_System;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGraphics": cgxgbt_TeaGraphics.$clinit(); return cgxgbt_TeaGraphics;
        case "com.badlogic.gdx.Graphics": cbg_Graphics.$clinit(); return cbg_Graphics;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl": cgxgbta_AssetDownloadImpl.$clinit(); return cgxgbta_AssetDownloadImpl;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloader": cgxgbta_AssetDownloader.$clinit(); return cgxgbta_AssetDownloader;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetInstance": cgxgbta_AssetInstance.$clinit(); return cgxgbta_AssetInstance;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl": cgxgbta_AssetLoadImpl.$clinit(); return cgxgbta_AssetLoadImpl;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoader": cgxgbta_AssetLoader.$clinit(); return cgxgbta_AssetLoader;
        case "com.github.xpenatan.jmultiplatform.core.JMultiplatform": cgxjc_JMultiplatform.$clinit(); return cgxjc_JMultiplatform;
        case "com.github.xpenatan.jmultiplatform.core.JPlatformMap": cgxjc_JPlatformMap.$clinit(); return cgxjc_JPlatformMap;
        case "com.github.xpenatan.gdx.backends.teavm.TeaInput": cgxgbt_TeaInput.$clinit(); return cgxgbt_TeaInput;
        case "com.badlogic.gdx.AbstractInput": cbg_AbstractInput.$clinit(); return cbg_AbstractInput;
        case "com.badlogic.gdx.Input": cbg_Input.$clinit(); return cbg_Input;
        case "com.github.xpenatan.gdx.backends.teavm.dom.EventListenerWrapper": cgxgbtd_EventListenerWrapper.$clinit(); return cgxgbtd_EventListenerWrapper;
        case "com.github.xpenatan.gdx.backends.teavm.TeaFiles": cgxgbt_TeaFiles.$clinit(); return cgxgbt_TeaFiles;
        case "com.badlogic.gdx.Files": cbg_Files.$clinit(); return cbg_Files;
        case "com.github.xpenatan.gdx.backends.teavm.TeaNet": cgxgbt_TeaNet.$clinit(); return cgxgbt_TeaNet;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplicationLogger": cgxgbt_TeaApplicationLogger.$clinit(); return cgxgbt_TeaApplicationLogger;
        case "com.badlogic.gdx.ApplicationLogger": cbg_ApplicationLogger.$clinit(); return cbg_ApplicationLogger;
        case "com.github.xpenatan.gdx.backends.teavm.TeaClipboard": cgxgbt_TeaClipboard.$clinit(); return cgxgbt_TeaClipboard;
        case "com.badlogic.gdx.utils.Clipboard": cbgu_Clipboard.$clinit(); return cbgu_Clipboard;
        case "com.badlogic.gdx.Gdx": cbg_Gdx.$clinit(); return cbg_Gdx;
        case "com.github.xpenatan.gdx.backends.teavm.DefaultTeaAudio": cgxgbt_DefaultTeaAudio.$clinit(); return cgxgbt_DefaultTeaAudio;
        case "com.github.xpenatan.gdx.backends.teavm.TeaAudio": cgxgbt_TeaAudio.$clinit(); return cgxgbt_TeaAudio;
        case "com.badlogic.gdx.Audio": cbg_Audio.$clinit(); return cbg_Audio;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$1": cgxgbt_TeaApplication$1.$clinit(); return cgxgbt_TeaApplication$1;
        case "org.teavm.jso.dom.events.EventListener": otjde_EventListener.$clinit(); return otjde_EventListener;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$2": cgxgbt_TeaApplication$2.$clinit(); return cgxgbt_TeaApplication$2;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$3": cgxgbt_TeaApplication$3.$clinit(); return cgxgbt_TeaApplication$3;
        case "com.badlogic.gdx.utils.Pool": cbgu_Pool.$clinit(); return cbgu_Pool;
        case "com.badlogic.gdx.utils.DefaultPool": cbgu_DefaultPool.$clinit(); return cbgu_DefaultPool;
        case "java.lang.IndexOutOfBoundsException": jl_IndexOutOfBoundsException.$clinit(); return jl_IndexOutOfBoundsException;
        case "com.badlogic.gdx.utils.ArraySupplier": cbgu_ArraySupplier.$clinit(); return cbgu_ArraySupplier;
        case "com.badlogic.gdx.utils.ObjectSet": cbgu_ObjectSet.$clinit(); return cbgu_ObjectSet;
        case "java.lang.Long": jl_Long.$clinit(); return jl_Long;
        case "com.github.xpenatan.gdx.backends.teavm.gl.WebGLContextAttributesWrapper": cgxgbtg_WebGLContextAttributesWrapper.$clinit(); return cgxgbtg_WebGLContextAttributesWrapper;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGL30": cgxgbt_TeaGL30.$clinit(); return cgxgbt_TeaGL30;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGL20": cgxgbt_TeaGL20.$clinit(); return cgxgbt_TeaGL20;
        case "com.badlogic.gdx.graphics.GL20": cbgg_GL20.$clinit(); return cbgg_GL20;
        case "com.badlogic.gdx.graphics.GL30": cbgg_GL30.$clinit(); return cbgg_GL30;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGL30Debug": cgxgbt_TeaGL30Debug.$clinit(); return cgxgbt_TeaGL30Debug;
        case "com.badlogic.gdx.graphics.glutils.GLVersion": cbggg_GLVersion.$clinit(); return cbggg_GLVersion;
        case "com.badlogic.gdx.Application$ApplicationType": cbg_Application$ApplicationType.$clinit(); return cbg_Application$ApplicationType;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGraphics$1": cgxgbt_TeaGraphics$1.$clinit(); return cgxgbt_TeaGraphics$1;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGraphics$FullscreenChanged": cgxgbt_TeaGraphics$FullscreenChanged.$clinit(); return cgxgbt_TeaGraphics$FullscreenChanged;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGL20Debug": cgxgbt_TeaGL20Debug.$clinit(); return cgxgbt_TeaGL20Debug;
        case "java.util.HashSet": ju_HashSet.$clinit(); return ju_HashSet;
        case "java.util.AbstractSet": ju_AbstractSet.$clinit(); return ju_AbstractSet;
        case "java.util.AbstractCollection": ju_AbstractCollection.$clinit(); return ju_AbstractCollection;
        case "java.util.Collection": ju_Collection.$clinit(); return ju_Collection;
        case "java.util.Set": ju_Set.$clinit(); return ju_Set;
        case "com.badlogic.gdx.utils.IntMap": cbgu_IntMap.$clinit(); return cbgu_IntMap;
        case "com.badlogic.gdx.utils.IntSet": cbgu_IntSet.$clinit(); return cbgu_IntSet;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.InternalStorage": cgxgbtft_InternalStorage.$clinit(); return cgxgbtft_InternalStorage;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.MemoryFileStorage": cgxgbtf_MemoryFileStorage.$clinit(); return cgxgbtf_MemoryFileStorage;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.FileDB": cgxgbtf_FileDB.$clinit(); return cgxgbtf_FileDB;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.ClasspathStorage": cgxgbtft_ClasspathStorage.$clinit(); return cgxgbtft_ClasspathStorage;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage": cgxgbtft_LocalDBStorage.$clinit(); return cgxgbtft_LocalDBStorage;
        case "com.github.xpenatan.gdx.backends.teavm.TeaClipboard$ClipboardWriteHandler": cgxgbt_TeaClipboard$ClipboardWriteHandler.$clinit(); return cgxgbt_TeaClipboard$ClipboardWriteHandler;
        case "com.github.xpenatan.gdx.backends.teavm.TeaPermissions$TeaPermissionResult": cgxgbt_TeaPermissions$TeaPermissionResult.$clinit(); return cgxgbt_TeaPermissions$TeaPermissionResult;
        case "com.github.xpenatan.gdx.backends.teavm.TeaClipboard$<init>$lambda$_0_0": cgxgbt_TeaClipboard$_init_$lambda$_0_0.$clinit(); return cgxgbt_TeaClipboard$_init_$lambda$_0_0;
        case "com.github.xpenatan.gdx.backends.teavm.TeaClipboard$<init>$lambda$_0_1": cgxgbt_TeaClipboard$_init_$lambda$_0_1.$clinit(); return cgxgbt_TeaClipboard$_init_$lambda$_0_1;
        case "com.github.xpenatan.gdx.backends.teavm.TeaClipboard$<init>$lambda$_0_2": cgxgbt_TeaClipboard$_init_$lambda$_0_2.$clinit(); return cgxgbt_TeaClipboard$_init_$lambda$_0_2;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$4": cgxgbt_TeaApplication$4.$clinit(); return cgxgbt_TeaApplication$4;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoaderListener": cgxgbta_AssetLoaderListener.$clinit(); return cgxgbta_AssetLoaderListener;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$5": cgxgbt_TeaApplication$5.$clinit(); return cgxgbt_TeaApplication$5;
        case "com.github.xpenatan.gdx.backends.teavm.webaudio.howler.HowlerAudioManager": cgxgbtwh_HowlerAudioManager.$clinit(); return cgxgbtwh_HowlerAudioManager;
        case "com.badlogic.gdx.LifecycleListener": cbg_LifecycleListener.$clinit(); return cbg_LifecycleListener;
        case "com.badlogic.gdx.math.MathUtils": cbgm_MathUtils.$clinit(); return cbgm_MathUtils;
        case "java.util.Properties": ju_Properties.$clinit(); return ju_Properties;
        case "java.util.Hashtable": ju_Hashtable.$clinit(); return ju_Hashtable;
        case "java.util.Dictionary": ju_Dictionary.$clinit(); return ju_Dictionary;
        case "com.github.xpenatan.gdx.backends.teavm.TeaGL20$CustomIntMap": cgxgbt_TeaGL20$CustomIntMap.$clinit(); return cgxgbt_TeaGL20$CustomIntMap;
        case "com.badlogic.gdx.graphics.glutils.GLVersion$Type": cbggg_GLVersion$Type.$clinit(); return cbggg_GLVersion$Type;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$1": cgxgbta_AssetLoadImpl$1.$clinit(); return cgxgbta_AssetLoadImpl$1;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$2": cgxgbta_AssetLoadImpl$2.$clinit(); return cgxgbta_AssetLoadImpl$2;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$3": cgxgbta_AssetLoadImpl$3.$clinit(); return cgxgbta_AssetLoadImpl$3;
        case "com.badlogic.gdx.utils.ArraySupplier$<clinit>$lambda$_3_0": cbgu_ArraySupplier$_clinit_$lambda$_3_0.$clinit(); return cbgu_ArraySupplier$_clinit_$lambda$_3_0;
        case "java.util.regex.Pattern": jur_Pattern.$clinit(); return jur_Pattern;
        case "java.util.regex.Matcher": jur_Matcher.$clinit(); return jur_Matcher;
        case "java.util.regex.MatchResult": jur_MatchResult.$clinit(); return jur_MatchResult;
        case "org.teavm.jso.indexeddb.IDBFactory": otji_IDBFactory.$clinit(); return otji_IDBFactory;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$setupIndexedDB$lambda$_1_0": cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0.$clinit(); return cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$setupIndexedDB$lambda$_1_1": cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1.$clinit(); return cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1;
        case "org.teavm.jso.indexeddb.EventHandler": otji_EventHandler.$clinit(); return otji_EventHandler;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$setupIndexedDB$lambda$_1_2": cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2.$clinit(); return cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2;
        case "com.badlogic.gdx.math.RandomXS128": cbgm_RandomXS128.$clinit(); return cbgm_RandomXS128;
        case "java.util.Random": ju_Random.$clinit(); return ju_Random;
        case "java.util.random.RandomGenerator": jur_RandomGenerator.$clinit(); return jur_RandomGenerator;
        case "java.util.Hashtable$1": ju_Hashtable$1.$clinit(); return ju_Hashtable$1;
        case "java.util.Enumeration": ju_Enumeration.$clinit(); return ju_Enumeration;
        case "java.util.Hashtable$2": ju_Hashtable$2.$clinit(); return ju_Hashtable$2;
        case "java.util.Iterator": ju_Iterator.$clinit(); return ju_Iterator;
        case "java.util.regex.MatchResultImpl": jur_MatchResultImpl.$clinit(); return jur_MatchResultImpl;
        case "java.lang.NumberFormatException": jl_NumberFormatException.$clinit(); return jl_NumberFormatException;
        case "java.lang.IllegalStateException": jl_IllegalStateException.$clinit(); return jl_IllegalStateException;
        case "java.lang.NullPointerException": jl_NullPointerException.$clinit(); return jl_NullPointerException;
        case "java.util.regex.AbstractSet": jur_AbstractSet.$clinit(); return jur_AbstractSet;
        case "java.util.Hashtable$Entry": ju_Hashtable$Entry.$clinit(); return ju_Hashtable$Entry;
        case "java.util.MapEntry": ju_MapEntry.$clinit(); return ju_MapEntry;
        case "java.util.Map$Entry": ju_Map$Entry.$clinit(); return ju_Map$Entry;
        case "java.util.regex.FSet": jur_FSet.$clinit(); return jur_FSet;
        case "java.util.regex.Lexer": jur_Lexer.$clinit(); return jur_Lexer;
        case "java.util.regex.PatternSyntaxException": jur_PatternSyntaxException.$clinit(); return jur_PatternSyntaxException;
        case "java.util.Arrays": ju_Arrays.$clinit(); return ju_Arrays;
        case "java.util.ArrayList": ju_ArrayList.$clinit(); return ju_ArrayList;
        case "java.util.AbstractList": ju_AbstractList.$clinit(); return ju_AbstractList;
        case "java.util.List": ju_List.$clinit(); return ju_List;
        case "java.util.SequencedCollection": ju_SequencedCollection.$clinit(); return ju_SequencedCollection;
        case "java.util.RandomAccess": ju_RandomAccess.$clinit(); return ju_RandomAccess;
        case "java.util.regex.NonCapFSet": jur_NonCapFSet.$clinit(); return jur_NonCapFSet;
        case "java.util.regex.AheadFSet": jur_AheadFSet.$clinit(); return jur_AheadFSet;
        case "java.util.regex.BehindFSet": jur_BehindFSet.$clinit(); return jur_BehindFSet;
        case "java.util.regex.AtomicFSet": jur_AtomicFSet.$clinit(); return jur_AtomicFSet;
        case "java.util.regex.FinalSet": jur_FinalSet.$clinit(); return jur_FinalSet;
        case "java.util.regex.EmptySet": jur_EmptySet.$clinit(); return jur_EmptySet;
        case "java.util.regex.LeafSet": jur_LeafSet.$clinit(); return jur_LeafSet;
        case "java.util.regex.NonCapJointSet": jur_NonCapJointSet.$clinit(); return jur_NonCapJointSet;
        case "java.util.regex.JointSet": jur_JointSet.$clinit(); return jur_JointSet;
        case "java.util.regex.PositiveLookAhead": jur_PositiveLookAhead.$clinit(); return jur_PositiveLookAhead;
        case "java.util.regex.AtomicJointSet": jur_AtomicJointSet.$clinit(); return jur_AtomicJointSet;
        case "java.util.regex.NegativeLookAhead": jur_NegativeLookAhead.$clinit(); return jur_NegativeLookAhead;
        case "java.util.regex.PositiveLookBehind": jur_PositiveLookBehind.$clinit(); return jur_PositiveLookBehind;
        case "java.util.regex.NegativeLookBehind": jur_NegativeLookBehind.$clinit(); return jur_NegativeLookBehind;
        case "java.util.regex.SingleSet": jur_SingleSet.$clinit(); return jur_SingleSet;
        case "java.lang.reflect.Array": jlr_Array.$clinit(); return jlr_Array;
        case "java.lang.ArrayStoreException": jl_ArrayStoreException.$clinit(); return jl_ArrayStoreException;
        case "java.util.regex.AbstractCharClass": jur_AbstractCharClass.$clinit(); return jur_AbstractCharClass;
        case "java.util.regex.SpecialToken": jur_SpecialToken.$clinit(); return jur_SpecialToken;
        case "java.util.MissingResourceException": ju_MissingResourceException.$clinit(); return ju_MissingResourceException;
        case "java.util.regex.CharClass": jur_CharClass.$clinit(); return jur_CharClass;
        case "java.util.regex.LeafQuantifierSet": jur_LeafQuantifierSet.$clinit(); return jur_LeafQuantifierSet;
        case "java.util.regex.QuantifierSet": jur_QuantifierSet.$clinit(); return jur_QuantifierSet;
        case "java.util.regex.CompositeQuantifierSet": jur_CompositeQuantifierSet.$clinit(); return jur_CompositeQuantifierSet;
        case "java.util.regex.GroupQuantifierSet": jur_GroupQuantifierSet.$clinit(); return jur_GroupQuantifierSet;
        case "java.util.regex.AltQuantifierSet": jur_AltQuantifierSet.$clinit(); return jur_AltQuantifierSet;
        case "java.util.regex.UnifiedQuantifierSet": jur_UnifiedQuantifierSet.$clinit(); return jur_UnifiedQuantifierSet;
        case "java.util.regex.AbstractCharClass$PredefinedCharacterClasses": jur_AbstractCharClass$PredefinedCharacterClasses.$clinit(); return jur_AbstractCharClass$PredefinedCharacterClasses;
        case "java.util.regex.AbstractCharClass$LazyCharClass": jur_AbstractCharClass$LazyCharClass.$clinit(); return jur_AbstractCharClass$LazyCharClass;
        case "java.util.regex.Quantifier": jur_Quantifier.$clinit(); return jur_Quantifier;
        case "java.util.regex.FSet$PossessiveFSet": jur_FSet$PossessiveFSet.$clinit(); return jur_FSet$PossessiveFSet;
        case "java.util.BitSet": ju_BitSet.$clinit(); return ju_BitSet;
        case "java.util.regex.LowHighSurrogateRangeSet": jur_LowHighSurrogateRangeSet.$clinit(); return jur_LowHighSurrogateRangeSet;
        case "java.util.regex.CompositeRangeSet": jur_CompositeRangeSet.$clinit(); return jur_CompositeRangeSet;
        case "java.util.regex.UCISupplRangeSet": jur_UCISupplRangeSet.$clinit(); return jur_UCISupplRangeSet;
        case "java.util.regex.SupplRangeSet": jur_SupplRangeSet.$clinit(); return jur_SupplRangeSet;
        case "java.util.regex.UCIRangeSet": jur_UCIRangeSet.$clinit(); return jur_UCIRangeSet;
        case "java.util.regex.RangeSet": jur_RangeSet.$clinit(); return jur_RangeSet;
        case "java.util.regex.HangulDecomposedCharSet": jur_HangulDecomposedCharSet.$clinit(); return jur_HangulDecomposedCharSet;
        case "java.util.regex.CharSet": jur_CharSet.$clinit(); return jur_CharSet;
        case "java.util.regex.UCICharSet": jur_UCICharSet.$clinit(); return jur_UCICharSet;
        case "java.util.regex.CICharSet": jur_CICharSet.$clinit(); return jur_CICharSet;
        case "java.util.regex.DecomposedCharSet": jur_DecomposedCharSet.$clinit(); return jur_DecomposedCharSet;
        case "java.util.regex.UCIDecomposedCharSet": jur_UCIDecomposedCharSet.$clinit(); return jur_UCIDecomposedCharSet;
        case "java.util.regex.CIDecomposedCharSet": jur_CIDecomposedCharSet.$clinit(); return jur_CIDecomposedCharSet;
        case "java.util.regex.PossessiveGroupQuantifierSet": jur_PossessiveGroupQuantifierSet.$clinit(); return jur_PossessiveGroupQuantifierSet;
        case "java.util.regex.PosPlusGroupQuantifierSet": jur_PosPlusGroupQuantifierSet.$clinit(); return jur_PosPlusGroupQuantifierSet;
        case "java.util.regex.PosAltGroupQuantifierSet": jur_PosAltGroupQuantifierSet.$clinit(); return jur_PosAltGroupQuantifierSet;
        case "java.util.regex.AltGroupQuantifierSet": jur_AltGroupQuantifierSet.$clinit(); return jur_AltGroupQuantifierSet;
        case "java.util.regex.PosCompositeGroupQuantifierSet": jur_PosCompositeGroupQuantifierSet.$clinit(); return jur_PosCompositeGroupQuantifierSet;
        case "java.util.regex.CompositeGroupQuantifierSet": jur_CompositeGroupQuantifierSet.$clinit(); return jur_CompositeGroupQuantifierSet;
        case "java.util.regex.ReluctantGroupQuantifierSet": jur_ReluctantGroupQuantifierSet.$clinit(); return jur_ReluctantGroupQuantifierSet;
        case "java.util.regex.RelAltGroupQuantifierSet": jur_RelAltGroupQuantifierSet.$clinit(); return jur_RelAltGroupQuantifierSet;
        case "java.util.regex.RelCompositeGroupQuantifierSet": jur_RelCompositeGroupQuantifierSet.$clinit(); return jur_RelCompositeGroupQuantifierSet;
        case "java.util.regex.DotAllQuantifierSet": jur_DotAllQuantifierSet.$clinit(); return jur_DotAllQuantifierSet;
        case "java.util.regex.DotQuantifierSet": jur_DotQuantifierSet.$clinit(); return jur_DotQuantifierSet;
        case "java.util.regex.AbstractLineTerminator": jur_AbstractLineTerminator.$clinit(); return jur_AbstractLineTerminator;
        case "java.util.regex.PossessiveQuantifierSet": jur_PossessiveQuantifierSet.$clinit(); return jur_PossessiveQuantifierSet;
        case "java.util.regex.PossessiveAltQuantifierSet": jur_PossessiveAltQuantifierSet.$clinit(); return jur_PossessiveAltQuantifierSet;
        case "java.util.regex.PossessiveCompositeQuantifierSet": jur_PossessiveCompositeQuantifierSet.$clinit(); return jur_PossessiveCompositeQuantifierSet;
        case "java.util.regex.ReluctantQuantifierSet": jur_ReluctantQuantifierSet.$clinit(); return jur_ReluctantQuantifierSet;
        case "java.util.regex.ReluctantAltQuantifierSet": jur_ReluctantAltQuantifierSet.$clinit(); return jur_ReluctantAltQuantifierSet;
        case "java.util.regex.ReluctantCompositeQuantifierSet": jur_ReluctantCompositeQuantifierSet.$clinit(); return jur_ReluctantCompositeQuantifierSet;
        case "java.util.regex.SOLSet": jur_SOLSet.$clinit(); return jur_SOLSet;
        case "java.util.regex.WordBoundary": jur_WordBoundary.$clinit(); return jur_WordBoundary;
        case "java.util.regex.PreviousMatch": jur_PreviousMatch.$clinit(); return jur_PreviousMatch;
        case "java.util.regex.EOLSet": jur_EOLSet.$clinit(); return jur_EOLSet;
        case "java.util.regex.EOISet": jur_EOISet.$clinit(); return jur_EOISet;
        case "java.util.regex.MultiLineSOLSet": jur_MultiLineSOLSet.$clinit(); return jur_MultiLineSOLSet;
        case "java.util.regex.DotAllSet": jur_DotAllSet.$clinit(); return jur_DotAllSet;
        case "java.util.regex.DotSet": jur_DotSet.$clinit(); return jur_DotSet;
        case "java.util.regex.UEOLSet": jur_UEOLSet.$clinit(); return jur_UEOLSet;
        case "java.util.regex.UMultiLineEOLSet": jur_UMultiLineEOLSet.$clinit(); return jur_UMultiLineEOLSet;
        case "java.util.regex.MultiLineEOLSet": jur_MultiLineEOLSet.$clinit(); return jur_MultiLineEOLSet;
        case "java.util.regex.BackReferenceSet": jur_BackReferenceSet.$clinit(); return jur_BackReferenceSet;
        case "java.util.regex.CIBackReferenceSet": jur_CIBackReferenceSet.$clinit(); return jur_CIBackReferenceSet;
        case "java.util.regex.UCIBackReferenceSet": jur_UCIBackReferenceSet.$clinit(); return jur_UCIBackReferenceSet;
        case "java.lang.StringBuffer": jl_StringBuffer.$clinit(); return jl_StringBuffer;
        case "java.util.regex.SequenceSet": jur_SequenceSet.$clinit(); return jur_SequenceSet;
        case "java.util.regex.UCISequenceSet": jur_UCISequenceSet.$clinit(); return jur_UCISequenceSet;
        case "java.util.regex.CISequenceSet": jur_CISequenceSet.$clinit(); return jur_CISequenceSet;
        case "java.util.regex.UCISupplCharSet": jur_UCISupplCharSet.$clinit(); return jur_UCISupplCharSet;
        case "java.util.regex.LowSurrogateCharSet": jur_LowSurrogateCharSet.$clinit(); return jur_LowSurrogateCharSet;
        case "java.util.regex.HighSurrogateCharSet": jur_HighSurrogateCharSet.$clinit(); return jur_HighSurrogateCharSet;
        case "java.util.regex.SupplCharSet": jur_SupplCharSet.$clinit(); return jur_SupplCharSet;
        case "java.util.regex.AbstractLineTerminator$1": jur_AbstractLineTerminator$1.$clinit(); return jur_AbstractLineTerminator$1;
        case "java.util.regex.AbstractLineTerminator$2": jur_AbstractLineTerminator$2.$clinit(); return jur_AbstractLineTerminator$2;
        case "java.util.regex.SequenceSet$IntHash": jur_SequenceSet$IntHash.$clinit(); return jur_SequenceSet$IntHash;
        case "java.util.regex.AbstractCharClass$LazySpace": jur_AbstractCharClass$LazySpace.$clinit(); return jur_AbstractCharClass$LazySpace;
        case "java.util.regex.AbstractCharClass$LazyDigit": jur_AbstractCharClass$LazyDigit.$clinit(); return jur_AbstractCharClass$LazyDigit;
        case "java.util.regex.AbstractCharClass$LazyLower": jur_AbstractCharClass$LazyLower.$clinit(); return jur_AbstractCharClass$LazyLower;
        case "java.util.regex.AbstractCharClass$LazyUpper": jur_AbstractCharClass$LazyUpper.$clinit(); return jur_AbstractCharClass$LazyUpper;
        case "java.util.regex.AbstractCharClass$LazyASCII": jur_AbstractCharClass$LazyASCII.$clinit(); return jur_AbstractCharClass$LazyASCII;
        case "java.util.regex.AbstractCharClass$LazyAlpha": jur_AbstractCharClass$LazyAlpha.$clinit(); return jur_AbstractCharClass$LazyAlpha;
        case "java.util.regex.AbstractCharClass$LazyAlnum": jur_AbstractCharClass$LazyAlnum.$clinit(); return jur_AbstractCharClass$LazyAlnum;
        case "java.util.regex.AbstractCharClass$LazyPunct": jur_AbstractCharClass$LazyPunct.$clinit(); return jur_AbstractCharClass$LazyPunct;
        case "java.util.regex.AbstractCharClass$LazyGraph": jur_AbstractCharClass$LazyGraph.$clinit(); return jur_AbstractCharClass$LazyGraph;
        case "java.util.regex.AbstractCharClass$LazyPrint": jur_AbstractCharClass$LazyPrint.$clinit(); return jur_AbstractCharClass$LazyPrint;
        case "java.util.regex.AbstractCharClass$LazyBlank": jur_AbstractCharClass$LazyBlank.$clinit(); return jur_AbstractCharClass$LazyBlank;
        case "java.util.regex.AbstractCharClass$LazyCntrl": jur_AbstractCharClass$LazyCntrl.$clinit(); return jur_AbstractCharClass$LazyCntrl;
        case "java.util.regex.AbstractCharClass$LazyXDigit": jur_AbstractCharClass$LazyXDigit.$clinit(); return jur_AbstractCharClass$LazyXDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaLowerCase": jur_AbstractCharClass$LazyJavaLowerCase.$clinit(); return jur_AbstractCharClass$LazyJavaLowerCase;
        case "java.util.regex.AbstractCharClass$LazyJavaUpperCase": jur_AbstractCharClass$LazyJavaUpperCase.$clinit(); return jur_AbstractCharClass$LazyJavaUpperCase;
        case "java.util.regex.AbstractCharClass$LazyJavaWhitespace": jur_AbstractCharClass$LazyJavaWhitespace.$clinit(); return jur_AbstractCharClass$LazyJavaWhitespace;
        case "java.util.regex.AbstractCharClass$LazyJavaMirrored": jur_AbstractCharClass$LazyJavaMirrored.$clinit(); return jur_AbstractCharClass$LazyJavaMirrored;
        case "java.util.regex.AbstractCharClass$LazyJavaDefined": jur_AbstractCharClass$LazyJavaDefined.$clinit(); return jur_AbstractCharClass$LazyJavaDefined;
        case "java.util.regex.AbstractCharClass$LazyJavaDigit": jur_AbstractCharClass$LazyJavaDigit.$clinit(); return jur_AbstractCharClass$LazyJavaDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaIdentifierIgnorable": jur_AbstractCharClass$LazyJavaIdentifierIgnorable.$clinit(); return jur_AbstractCharClass$LazyJavaIdentifierIgnorable;
        case "java.util.regex.AbstractCharClass$LazyJavaISOControl": jur_AbstractCharClass$LazyJavaISOControl.$clinit(); return jur_AbstractCharClass$LazyJavaISOControl;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierPart": jur_AbstractCharClass$LazyJavaJavaIdentifierPart.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierPart;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierStart": jur_AbstractCharClass$LazyJavaJavaIdentifierStart.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierStart;
        case "java.util.regex.AbstractCharClass$LazyJavaLetter": jur_AbstractCharClass$LazyJavaLetter.$clinit(); return jur_AbstractCharClass$LazyJavaLetter;
        case "java.util.regex.AbstractCharClass$LazyJavaLetterOrDigit": jur_AbstractCharClass$LazyJavaLetterOrDigit.$clinit(); return jur_AbstractCharClass$LazyJavaLetterOrDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaSpaceChar": jur_AbstractCharClass$LazyJavaSpaceChar.$clinit(); return jur_AbstractCharClass$LazyJavaSpaceChar;
        case "java.util.regex.AbstractCharClass$LazyJavaTitleCase": jur_AbstractCharClass$LazyJavaTitleCase.$clinit(); return jur_AbstractCharClass$LazyJavaTitleCase;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierPart": jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierStart": jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart;
        case "java.util.regex.AbstractCharClass$LazyWord": jur_AbstractCharClass$LazyWord.$clinit(); return jur_AbstractCharClass$LazyWord;
        case "java.util.regex.AbstractCharClass$LazyNonWord": jur_AbstractCharClass$LazyNonWord.$clinit(); return jur_AbstractCharClass$LazyNonWord;
        case "java.util.regex.AbstractCharClass$LazyNonSpace": jur_AbstractCharClass$LazyNonSpace.$clinit(); return jur_AbstractCharClass$LazyNonSpace;
        case "java.util.regex.AbstractCharClass$LazyNonDigit": jur_AbstractCharClass$LazyNonDigit.$clinit(); return jur_AbstractCharClass$LazyNonDigit;
        case "java.util.regex.AbstractCharClass$LazyRange": jur_AbstractCharClass$LazyRange.$clinit(); return jur_AbstractCharClass$LazyRange;
        case "java.util.regex.AbstractCharClass$LazySpecialsBlock": jur_AbstractCharClass$LazySpecialsBlock.$clinit(); return jur_AbstractCharClass$LazySpecialsBlock;
        case "java.util.regex.AbstractCharClass$LazyCategory": jur_AbstractCharClass$LazyCategory.$clinit(); return jur_AbstractCharClass$LazyCategory;
        case "java.util.regex.AbstractCharClass$LazyCategoryScope": jur_AbstractCharClass$LazyCategoryScope.$clinit(); return jur_AbstractCharClass$LazyCategoryScope;
        case "java.lang.NegativeArraySizeException": jl_NegativeArraySizeException.$clinit(); return jl_NegativeArraySizeException;
        case "java.util.regex.IntHash": jur_IntHash.$clinit(); return jur_IntHash;
        case "org.teavm.platform.plugin.ResourceAccessor": otpp_ResourceAccessor.$clinit(); return otpp_ResourceAccessor;
        case "org.teavm.classlib.impl.unicode.UnicodeHelper": otciu_UnicodeHelper.$clinit(); return otciu_UnicodeHelper;
        case "org.teavm.classlib.impl.unicode.CharMapping": otciu_CharMapping.$clinit(); return otciu_CharMapping;
        case "org.teavm.classlib.impl.unicode.UnicodeHelper$Range": otciu_UnicodeHelper$Range.$clinit(); return otciu_UnicodeHelper$Range;
        case "org.teavm.classlib.impl.CharFlow": otci_CharFlow.$clinit(); return otci_CharFlow;
        case "org.teavm.classlib.impl.Base46": otci_Base46.$clinit(); return otci_Base46;
        case "com.badlogic.gdx.utils.NumberUtils": cbgu_NumberUtils.$clinit(); return cbgu_NumberUtils;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit": cgxgbtd_StyleWrapper$Unit.$clinit(); return cgxgbtd_StyleWrapper$Unit;
        case "java.util.HashMap$HashEntry": ju_HashMap$HashEntry.$clinit(); return ju_HashMap$HashEntry;
        case "java.lang.StringIndexOutOfBoundsException": jl_StringIndexOutOfBoundsException.$clinit(); return jl_StringIndexOutOfBoundsException;
        case "java.util.regex.AbstractCharClass$1": jur_AbstractCharClass$1.$clinit(); return jur_AbstractCharClass$1;
        case "java.util.regex.AbstractCharClass$2": jur_AbstractCharClass$2.$clinit(); return jur_AbstractCharClass$2;
        case "java.util.regex.CharClass$18": jur_CharClass$18.$clinit(); return jur_CharClass$18;
        case "java.util.regex.CharClass$1": jur_CharClass$1.$clinit(); return jur_CharClass$1;
        case "java.util.regex.CharClass$3": jur_CharClass$3.$clinit(); return jur_CharClass$3;
        case "java.util.regex.CharClass$2": jur_CharClass$2.$clinit(); return jur_CharClass$2;
        case "java.util.regex.CharClass$5": jur_CharClass$5.$clinit(); return jur_CharClass$5;
        case "java.util.regex.CharClass$4": jur_CharClass$4.$clinit(); return jur_CharClass$4;
        case "java.util.regex.CharClass$7": jur_CharClass$7.$clinit(); return jur_CharClass$7;
        case "java.util.regex.CharClass$6": jur_CharClass$6.$clinit(); return jur_CharClass$6;
        case "java.util.regex.CharClass$9": jur_CharClass$9.$clinit(); return jur_CharClass$9;
        case "java.util.regex.CharClass$8": jur_CharClass$8.$clinit(); return jur_CharClass$8;
        case "java.util.regex.CharClass$11": jur_CharClass$11.$clinit(); return jur_CharClass$11;
        case "java.util.regex.CharClass$10": jur_CharClass$10.$clinit(); return jur_CharClass$10;
        case "java.util.regex.CharClass$13": jur_CharClass$13.$clinit(); return jur_CharClass$13;
        case "java.util.regex.CharClass$12": jur_CharClass$12.$clinit(); return jur_CharClass$12;
        case "java.util.regex.CharClass$15": jur_CharClass$15.$clinit(); return jur_CharClass$15;
        case "java.util.regex.CharClass$14": jur_CharClass$14.$clinit(); return jur_CharClass$14;
        case "java.util.regex.CharClass$17": jur_CharClass$17.$clinit(); return jur_CharClass$17;
        case "java.util.regex.CharClass$16": jur_CharClass$16.$clinit(); return jur_CharClass$16;
        case "java.lang.Thread": jl_Thread.$clinit(); return jl_Thread;
        case "java.lang.Object$Monitor": jl_Object$Monitor.$clinit(); return jl_Object$Monitor;
        case "java.lang.IllegalMonitorStateException": jl_IllegalMonitorStateException.$clinit(); return jl_IllegalMonitorStateException;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$downloadDroppedFile$lambda$_3_0": cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0.$clinit(); return cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0;
        case "org.teavm.jso.function.JSMapping": otjf_JSMapping.$clinit(); return otjf_JSMapping;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$downloadDroppedFile$lambda$_3_1": cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1.$clinit(); return cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$downloadDroppedFile$lambda$_3_2": cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2.$clinit(); return cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2;
        case "org.teavm.jso.function.JSSupplier": otjf_JSSupplier.$clinit(); return otjf_JSSupplier;
        case "java.lang.Float": jl_Float.$clinit(); return jl_Float;
        case "com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun": cbggg_GlyphLayout$GlyphRun.$clinit(); return cbggg_GlyphLayout$GlyphRun;
        case "com.github.xpenatan.gdx.backends.teavm.utils.KeyCodes": cgxgbtu_KeyCodes.$clinit(); return cgxgbtu_KeyCodes;
        case "com.badlogic.gdx.utils.TimeUtils": cbgu_TimeUtils.$clinit(); return cbgu_TimeUtils;
        case "org.teavm.platform.PlatformQueue": otp_PlatformQueue.$clinit(); return otp_PlatformQueue;
        case "java.lang.Object$monitorExit$lambda$_8_0": jl_Object$monitorExit$lambda$_8_0.$clinit(); return jl_Object$monitorExit$lambda$_8_0;
        case "org.teavm.platform.PlatformRunnable": otp_PlatformRunnable.$clinit(); return otp_PlatformRunnable;
        case "com.github.xpenatan.gdx.backends.teavm.TeaWindowListener": cgxgbt_TeaWindowListener.$clinit(); return cgxgbt_TeaWindowListener;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$getFile$lambda$_2_0": cgxgbta_AssetLoadImpl$getFile$lambda$_2_0.$clinit(); return cgxgbta_AssetLoadImpl$getFile$lambda$_2_0;
        case "org.teavm.jso.core.JSPromise$Executor": otjc_JSPromise$Executor.$clinit(); return otjc_JSPromise$Executor;
        case "org.teavm.jso.indexeddb.IDBObjectStoreParameters": otji_IDBObjectStoreParameters.$clinit(); return otji_IDBObjectStoreParameters;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$readAllFilesAsync$lambda$_4_0": cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0.$clinit(); return cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$readAllFilesAsync$lambda$_4_1": cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1.$clinit(); return cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$readAllFilesAsync$lambda$_4_2": cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2.$clinit(); return cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2;
        case "org.teavm.classlib.impl.console.JSStderrPrintStream": otcic_JSStderrPrintStream.$clinit(); return otcic_JSStderrPrintStream;
        case "org.teavm.classlib.impl.console.JsConsolePrintStream": otcic_JsConsolePrintStream.$clinit(); return otcic_JsConsolePrintStream;
        case "java.io.PrintStream": ji_PrintStream.$clinit(); return ji_PrintStream;
        case "java.io.FilterOutputStream": ji_FilterOutputStream.$clinit(); return ji_FilterOutputStream;
        case "java.io.OutputStream": ji_OutputStream.$clinit(); return ji_OutputStream;
        case "java.io.Closeable": ji_Closeable.$clinit(); return ji_Closeable;
        case "java.lang.AutoCloseable": jl_AutoCloseable.$clinit(); return jl_AutoCloseable;
        case "java.io.Flushable": ji_Flushable.$clinit(); return ji_Flushable;
        case "com.badlogic.gdx.utils.FloatArray": cbgu_FloatArray.$clinit(); return cbgu_FloatArray;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$1": cgxgbtd_StyleWrapper$Unit$1.$clinit(); return cgxgbtd_StyleWrapper$Unit$1;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$2": cgxgbtd_StyleWrapper$Unit$2.$clinit(); return cgxgbtd_StyleWrapper$Unit$2;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$3": cgxgbtd_StyleWrapper$Unit$3.$clinit(); return cgxgbtd_StyleWrapper$Unit$3;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$4": cgxgbtd_StyleWrapper$Unit$4.$clinit(); return cgxgbtd_StyleWrapper$Unit$4;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$5": cgxgbtd_StyleWrapper$Unit$5.$clinit(); return cgxgbtd_StyleWrapper$Unit$5;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$6": cgxgbtd_StyleWrapper$Unit$6.$clinit(); return cgxgbtd_StyleWrapper$Unit$6;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$7": cgxgbtd_StyleWrapper$Unit$7.$clinit(); return cgxgbtd_StyleWrapper$Unit$7;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$8": cgxgbtd_StyleWrapper$Unit$8.$clinit(); return cgxgbtd_StyleWrapper$Unit$8;
        case "com.github.xpenatan.gdx.backends.teavm.dom.StyleWrapper$Unit$9": cgxgbtd_StyleWrapper$Unit$9.$clinit(); return cgxgbtd_StyleWrapper$Unit$9;
        case "java.lang.DefaultUncaughtExceptionHandler": jl_DefaultUncaughtExceptionHandler.$clinit(); return jl_DefaultUncaughtExceptionHandler;
        case "java.lang.Thread$UncaughtExceptionHandler": jl_Thread$UncaughtExceptionHandler.$clinit(); return jl_Thread$UncaughtExceptionHandler;
        case "java.nio.charset.Charset": jnc_Charset.$clinit(); return jnc_Charset;
        case "org.teavm.platform.plugin.AsyncCallbackWrapper": otpp_AsyncCallbackWrapper.$clinit(); return otpp_AsyncCallbackWrapper;
        case "org.teavm.interop.AsyncCallback": oti_AsyncCallback.$clinit(); return oti_AsyncCallback;
        case "java.lang.Object$monitorEnterWait$lambda$_6_0": jl_Object$monitorEnterWait$lambda$_6_0.$clinit(); return jl_Object$monitorEnterWait$lambda$_6_0;
        case "org.teavm.jso.core.JSObjects": otjc_JSObjects.$clinit(); return otjc_JSObjects;
        case "org.teavm.jso.impl.JSWrapper$Helper": otji_JSWrapper$Helper.$clinit(); return otji_JSWrapper$Helper;
        case "org.teavm.jso.core.JSUndefined": otjc_JSUndefined.$clinit(); return otjc_JSUndefined;
        case "org.teavm.jso.core.JSWeakRef": otjc_JSWeakRef.$clinit(); return otjc_JSWeakRef;
        case "org.teavm.jso.impl.JSWrapper$Helper$<clinit>$lambda$_3_0": otji_JSWrapper$Helper$_clinit_$lambda$_3_0.$clinit(); return otji_JSWrapper$Helper$_clinit_$lambda$_3_0;
        case "org.teavm.jso.core.JSFinalizationRegistryConsumer": otjc_JSFinalizationRegistryConsumer.$clinit(); return otjc_JSFinalizationRegistryConsumer;
        case "org.teavm.jso.impl.JSWrapper$Helper$<clinit>$lambda$_3_1": otji_JSWrapper$Helper$_clinit_$lambda$_3_1.$clinit(); return otji_JSWrapper$Helper$_clinit_$lambda$_3_1;
        case "java.util.regex.BackReferencedSingleSet": jur_BackReferencedSingleSet.$clinit(); return jur_BackReferencedSingleSet;
        case "com.github.xpenatan.gdx.backends.teavm.TeaApplication$6": cgxgbt_TeaApplication$6.$clinit(); return cgxgbt_TeaApplication$6;
        case "java.util.regex.AbstractCharClass$LazyJavaLowerCase$1": jur_AbstractCharClass$LazyJavaLowerCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaLowerCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUpperCase$1": jur_AbstractCharClass$LazyJavaUpperCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaUpperCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaWhitespace$1": jur_AbstractCharClass$LazyJavaWhitespace$1.$clinit(); return jur_AbstractCharClass$LazyJavaWhitespace$1;
        case "java.util.regex.AbstractCharClass$LazyJavaMirrored$1": jur_AbstractCharClass$LazyJavaMirrored$1.$clinit(); return jur_AbstractCharClass$LazyJavaMirrored$1;
        case "java.util.regex.AbstractCharClass$LazyJavaDefined$1": jur_AbstractCharClass$LazyJavaDefined$1.$clinit(); return jur_AbstractCharClass$LazyJavaDefined$1;
        case "java.util.regex.AbstractCharClass$LazyJavaDigit$1": jur_AbstractCharClass$LazyJavaDigit$1.$clinit(); return jur_AbstractCharClass$LazyJavaDigit$1;
        case "java.util.regex.AbstractCharClass$LazyJavaIdentifierIgnorable$1": jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1.$clinit(); return jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
        case "java.util.regex.AbstractCharClass$LazyJavaISOControl$1": jur_AbstractCharClass$LazyJavaISOControl$1.$clinit(); return jur_AbstractCharClass$LazyJavaISOControl$1;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierPart$1": jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierStart$1": jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaLetter$1": jur_AbstractCharClass$LazyJavaLetter$1.$clinit(); return jur_AbstractCharClass$LazyJavaLetter$1;
        case "java.util.regex.AbstractCharClass$LazyJavaLetterOrDigit$1": jur_AbstractCharClass$LazyJavaLetterOrDigit$1.$clinit(); return jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
        case "java.util.regex.AbstractCharClass$LazyJavaSpaceChar$1": jur_AbstractCharClass$LazyJavaSpaceChar$1.$clinit(); return jur_AbstractCharClass$LazyJavaSpaceChar$1;
        case "java.util.regex.AbstractCharClass$LazyJavaTitleCase$1": jur_AbstractCharClass$LazyJavaTitleCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaTitleCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierPart$1": jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierStart$1": jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
        case "java.util.regex.UnicodeCategory": jur_UnicodeCategory.$clinit(); return jur_UnicodeCategory;
        case "java.util.regex.UnicodeCategoryScope": jur_UnicodeCategoryScope.$clinit(); return jur_UnicodeCategoryScope;
        case "java.util.AbstractList$1": ju_AbstractList$1.$clinit(); return ju_AbstractList$1;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$2": cgxgbta_AssetDownloadImpl$2.$clinit(); return cgxgbta_AssetDownloadImpl$2;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$loadScript$lambda$_5_0": cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0.$clinit(); return cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0;
        case "com.badlogic.gdx.utils.Collections": cbgu_Collections.$clinit(); return cbgu_Collections;
        case "com.badlogic.gdx.utils.Array$ArrayIterator": cbgu_Array$ArrayIterator.$clinit(); return cbgu_Array$ArrayIterator;
        case "com.badlogic.gdx.utils.Array$ArrayIterable": cbgu_Array$ArrayIterable.$clinit(); return cbgu_Array$ArrayIterable;
        case "org.teavm.classlib.impl.console.JSStdoutPrintStream": otcic_JSStdoutPrintStream.$clinit(); return otcic_JSStdoutPrintStream;
        case "com.github.xpenatan.gdx.backends.teavm.dom.FileReaderWrapper": cgxgbtd_FileReaderWrapper.$clinit(); return cgxgbtd_FileReaderWrapper;
        case "com.github.xpenatan.gdx.backends.teavm.dom.EventTargetWrapper": cgxgbtd_EventTargetWrapper.$clinit(); return cgxgbtd_EventTargetWrapper;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$4": cgxgbta_AssetLoadImpl$4.$clinit(); return cgxgbta_AssetLoadImpl$4;
        case "com.github.xpenatan.gdx.backends.teavm.dom.typedarray.TypedArrays": cgxgbtdt_TypedArrays.$clinit(); return cgxgbtdt_TypedArrays;
        case "java.util.regex.IntArrHash": jur_IntArrHash.$clinit(); return jur_IntArrHash;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.FileData": cgxgbtf_FileData.$clinit(); return cgxgbtf_FileData;
        case "org.teavm.jso.typedarrays.Int8Array": otjt_Int8Array.$clinit(); return otjt_Int8Array;
        case "org.teavm.jso.typedarrays.TypedArray": otjt_TypedArray.$clinit(); return otjt_TypedArray;
        case "org.teavm.jso.typedarrays.ArrayBufferView": otjt_ArrayBufferView.$clinit(); return otjt_ArrayBufferView;
        case "com.badlogic.gdx.utils.GdxRuntimeException": cbgu_GdxRuntimeException.$clinit(); return cbgu_GdxRuntimeException;
        case "java.lang.CloneNotSupportedException": jl_CloneNotSupportedException.$clinit(); return jl_CloneNotSupportedException;
        case "polygon_burst.survivor01.sections.Section": pss_Section.$clinit(); return pss_Section;
        case "java.util.NoSuchElementException": ju_NoSuchElementException.$clinit(); return ju_NoSuchElementException;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$5": cgxgbta_AssetLoadImpl$5.$clinit(); return cgxgbta_AssetLoadImpl$5;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetType": cgxgbta_AssetType.$clinit(); return cgxgbta_AssetType;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.indexeddb.IndexedDBFileData": cgxgbtfi_IndexedDBFileData.$clinit(); return cgxgbtfi_IndexedDBFileData;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$putFile$lambda$_2_0": cgxgbtft_LocalDBStorage$putFile$lambda$_2_0.$clinit(); return cgxgbtft_LocalDBStorage$putFile$lambda$_2_0;
        case "com.crashinvaders.vfx.VfxManager": ccv_VfxManager.$clinit(); return ccv_VfxManager;
        case "java.util.ConcurrentModificationException": ju_ConcurrentModificationException.$clinit(); return ju_ConcurrentModificationException;
        case "polygon_burst.survivor01.sections.Profile": pss_Profile.$clinit(); return pss_Profile;
        case "polygon_burst.survivor01.sections.Audio": pss_Audio.$clinit(); return pss_Audio;
        case "com.badlogic.gdx.graphics.Cursor$SystemCursor": cbgg_Cursor$SystemCursor.$clinit(); return cbgg_Cursor$SystemCursor;
        case "com.badlogic.gdx.graphics.Pixmap$Format": cbgg_Pixmap$Format.$clinit(); return cbgg_Pixmap$Format;
        case "com.crashinvaders.vfx.effects.FxaaEffect": ccve_FxaaEffect.$clinit(); return ccve_FxaaEffect;
        case "com.crashinvaders.vfx.effects.ShaderVfxEffect": ccve_ShaderVfxEffect.$clinit(); return ccve_ShaderVfxEffect;
        case "com.crashinvaders.vfx.effects.AbstractVfxEffect": ccve_AbstractVfxEffect.$clinit(); return ccve_AbstractVfxEffect;
        case "com.crashinvaders.vfx.effects.VfxEffect": ccve_VfxEffect.$clinit(); return ccve_VfxEffect;
        case "com.crashinvaders.vfx.effects.ChainVfxEffect": ccve_ChainVfxEffect.$clinit(); return ccve_ChainVfxEffect;
        case "com.crashinvaders.vfx.effects.BloomEffect": ccve_BloomEffect.$clinit(); return ccve_BloomEffect;
        case "com.crashinvaders.vfx.effects.CompositeVfxEffect": ccve_CompositeVfxEffect.$clinit(); return ccve_CompositeVfxEffect;
        case "com.crashinvaders.vfx.effects.BloomEffect$Settings": ccve_BloomEffect$Settings.$clinit(); return ccve_BloomEffect$Settings;
        case "com.crashinvaders.vfx.effects.MotionBlurEffect": ccve_MotionBlurEffect.$clinit(); return ccve_MotionBlurEffect;
        case "com.crashinvaders.vfx.effects.util.MixEffect$Method": ccveu_MixEffect$Method.$clinit(); return ccveu_MixEffect$Method;
        case "com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch": cbggg_PolygonSpriteBatch.$clinit(); return cbggg_PolygonSpriteBatch;
        case "com.badlogic.gdx.graphics.g2d.PolygonBatch": cbggg_PolygonBatch.$clinit(); return cbggg_PolygonBatch;
        case "com.badlogic.gdx.graphics.g2d.Batch": cbggg_Batch.$clinit(); return cbggg_Batch;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas": cbggg_TextureAtlas.$clinit(); return cbggg_TextureAtlas;
        case "space.earlygrey.shapedrawer.ShapeDrawer": ses_ShapeDrawer.$clinit(); return ses_ShapeDrawer;
        case "space.earlygrey.shapedrawer.AbstractShapeDrawer": ses_AbstractShapeDrawer.$clinit(); return ses_AbstractShapeDrawer;
        case "polygon_burst.survivor01.shapes.Shape": pss_Shape.$clinit(); return pss_Shape;
        case "polygon_burst.survivor01.menus.Menu": psm_Menu.$clinit(); return psm_Menu;
        case "polygon_burst.survivor01.episodes.Episode": pse_Episode.$clinit(); return pse_Episode;
        case "polygon_burst.survivor01.sections.TitleSection": pss_TitleSection.$clinit(); return pss_TitleSection;
        case "polygon_burst.survivor01.sections.Control": pss_Control.$clinit(); return pss_Control;
        case "com.badlogic.gdx.InputProcessor": cbg_InputProcessor.$clinit(); return cbg_InputProcessor;
        case "com.badlogic.gdx.controllers.ControllerListener": cbgc_ControllerListener.$clinit(); return cbgc_ControllerListener;
        case "com.badlogic.gdx.math.Vector2": cbgm_Vector2.$clinit(); return cbgm_Vector2;
        case "com.badlogic.gdx.math.Vector": cbgm_Vector.$clinit(); return cbgm_Vector;
        case "com.badlogic.gdx.math.Polygon": cbgm_Polygon.$clinit(); return cbgm_Polygon;
        case "com.badlogic.gdx.math.Shape2D": cbgm_Shape2D.$clinit(); return cbgm_Shape2D;
        case "com.badlogic.gdx.math.Matrix4": cbgm_Matrix4.$clinit(); return cbgm_Matrix4;
        case "com.badlogic.gdx.audio.Sound": cbga_Sound.$clinit(); return cbga_Sound;
        case "com.badlogic.gdx.audio.Music": cbga_Music.$clinit(); return cbga_Music;
        case "com.crashinvaders.vfx.gl.VfxGLUtils": ccvg_VfxGLUtils.$clinit(); return ccvg_VfxGLUtils;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect$BlurType": ccve_GaussianBlurEffect$BlurType.$clinit(); return ccve_GaussianBlurEffect$BlurType;
        case "com.crashinvaders.vfx.effects.util.CopyEffect": ccveu_CopyEffect.$clinit(); return ccveu_CopyEffect;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect": ccve_GaussianBlurEffect.$clinit(); return ccve_GaussianBlurEffect;
        case "com.crashinvaders.vfx.effects.util.GammaThresholdEffect": ccveu_GammaThresholdEffect.$clinit(); return ccveu_GammaThresholdEffect;
        case "com.crashinvaders.vfx.effects.util.GammaThresholdEffect$Type": ccveu_GammaThresholdEffect$Type.$clinit(); return ccveu_GammaThresholdEffect$Type;
        case "com.crashinvaders.vfx.effects.util.CombineEffect": ccveu_CombineEffect.$clinit(); return ccveu_CombineEffect;
        case "com.crashinvaders.vfx.effects.util.MixEffect": ccveu_MixEffect.$clinit(); return ccveu_MixEffect;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBufferQueue": ccvf_VfxFrameBufferQueue.$clinit(); return ccvf_VfxFrameBufferQueue;
        case "polygon_burst.survivor01.menus.MainMenu": psm_MainMenu.$clinit(); return psm_MainMenu;
        case "polygon_burst.survivor01.menus.OverviewMenu": psm_OverviewMenu.$clinit(); return psm_OverviewMenu;
        case "polygon_burst.survivor01.episodes.S01E01Episode": pse_S01E01Episode.$clinit(); return pse_S01E01Episode;
        case "com.badlogic.gdx.controllers.Controllers": cbgc_Controllers.$clinit(); return cbgc_Controllers;
        case "com.crashinvaders.vfx.framebuffer.VfxPingPongWrapper": ccvf_VfxPingPongWrapper.$clinit(); return ccvf_VfxPingPongWrapper;
        case "com.crashinvaders.vfx.VfxRenderContext": ccv_VfxRenderContext.$clinit(); return ccv_VfxRenderContext;
        case "com.crashinvaders.vfx.utils.PrioritizedArray": ccvu_PrioritizedArray.$clinit(); return ccvu_PrioritizedArray;
        case "com.badlogic.gdx.graphics.glutils.ShaderProgram": cbggg_ShaderProgram.$clinit(); return cbggg_ShaderProgram;
        case "com.badlogic.gdx.graphics.Texture$TextureWrap": cbgg_Texture$TextureWrap.$clinit(); return cbgg_Texture$TextureWrap;
        case "com.badlogic.gdx.graphics.Texture$TextureFilter": cbgg_Texture$TextureFilter.$clinit(); return cbgg_Texture$TextureFilter;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBuffer": ccvf_VfxFrameBuffer.$clinit(); return ccvf_VfxFrameBuffer;
        case "com.badlogic.gdx.files.FileHandle": cbgf_FileHandle.$clinit(); return cbgf_FileHandle;
        case "space.earlygrey.shapedrawer.BatchManager": ses_BatchManager.$clinit(); return ses_BatchManager;
        case "space.earlygrey.shapedrawer.FilledPolygonDrawer$BatchFilledPolygonDrawer": ses_FilledPolygonDrawer$BatchFilledPolygonDrawer.$clinit(); return ses_FilledPolygonDrawer$BatchFilledPolygonDrawer;
        case "space.earlygrey.shapedrawer.FilledPolygonDrawer": ses_FilledPolygonDrawer.$clinit(); return ses_FilledPolygonDrawer;
        case "space.earlygrey.shapedrawer.DrawerTemplate": ses_DrawerTemplate.$clinit(); return ses_DrawerTemplate;
        case "space.earlygrey.shapedrawer.PolygonBatchManager": ses_PolygonBatchManager.$clinit(); return ses_PolygonBatchManager;
        case "space.earlygrey.shapedrawer.FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer": ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer.$clinit(); return ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer;
        case "space.earlygrey.shapedrawer.LineDrawer": ses_LineDrawer.$clinit(); return ses_LineDrawer;
        case "space.earlygrey.shapedrawer.PathDrawer": ses_PathDrawer.$clinit(); return ses_PathDrawer;
        case "space.earlygrey.shapedrawer.PolygonDrawer": ses_PolygonDrawer.$clinit(); return ses_PolygonDrawer;
        case "com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData": cbggg_BitmapFont$BitmapFontData.$clinit(); return cbggg_BitmapFont$BitmapFontData;
        case "polygon_burst.survivor01.menus.Menu$RepeatControl": psm_Menu$RepeatControl.$clinit(); return psm_Menu$RepeatControl;
        case "polygon_burst.survivor01.menus.EpisodesMenu": psm_EpisodesMenu.$clinit(); return psm_EpisodesMenu;
        case "polygon_burst.survivor01.menus.GuideMenu": psm_GuideMenu.$clinit(); return psm_GuideMenu;
        case "polygon_burst.survivor01.menus.SettingsMenu": psm_SettingsMenu.$clinit(); return psm_SettingsMenu;
        case "com.badlogic.gdx.utils.I18NBundle": cbgu_I18NBundle.$clinit(); return cbgu_I18NBundle;
        case "polygon_burst.survivor01.menus.Menu$LabelButton": psm_Menu$LabelButton.$clinit(); return psm_Menu$LabelButton;
        case "polygon_burst.survivor01.menus.Menu$CursorBox": psm_Menu$CursorBox.$clinit(); return psm_Menu$CursorBox;
        case "polygon_burst.survivor01.menus.Menu$Box": psm_Menu$Box.$clinit(); return psm_Menu$Box;
        case "java.util.ArrayDeque": ju_ArrayDeque.$clinit(); return ju_ArrayDeque;
        case "java.util.Deque": ju_Deque.$clinit(); return ju_Deque;
        case "java.util.Queue": ju_Queue.$clinit(); return ju_Queue;
        case "polygon_burst.survivor01.logic.ChimeraLogic": psl_ChimeraLogic.$clinit(); return psl_ChimeraLogic;
        case "polygon_burst.survivor01.menus.Menu$IconButton": psm_Menu$IconButton.$clinit(); return psm_Menu$IconButton;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBufferRenderer": ccvf_VfxFrameBufferRenderer.$clinit(); return ccvf_VfxFrameBufferRenderer;
        case "com.badlogic.gdx.math.Quaternion": cbgm_Quaternion.$clinit(); return cbgm_Quaternion;
        case "com.badlogic.gdx.math.Vector3": cbgm_Vector3.$clinit(); return cbgm_Vector3;
        case "com.crashinvaders.vfx.utils.PrioritizedArray$WrapperComparator": ccvu_PrioritizedArray$WrapperComparator.$clinit(); return ccvu_PrioritizedArray$WrapperComparator;
        case "com.crashinvaders.vfx.utils.ValueArrayMap": ccvu_ValueArrayMap.$clinit(); return ccvu_ValueArrayMap;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBufferPool": ccvf_VfxFrameBufferPool.$clinit(); return ccvf_VfxFrameBufferPool;
        case "java.nio.ByteBuffer": jn_ByteBuffer.$clinit(); return jn_ByteBuffer;
        case "java.nio.Buffer": jn_Buffer.$clinit(); return jn_Buffer;
        case "java.nio.ByteOrder": jn_ByteOrder.$clinit(); return jn_ByteOrder;
        case "com.badlogic.gdx.utils.BufferUtils": cbgu_BufferUtils.$clinit(); return cbgu_BufferUtils;
        case "com.crashinvaders.vfx.gl.VfxGlViewport": ccvg_VfxGlViewport.$clinit(); return ccvg_VfxGlViewport;
        case "com.crashinvaders.vfx.gl.DefaultVfxGlExtension": ccvg_DefaultVfxGlExtension.$clinit(); return ccvg_DefaultVfxGlExtension;
        case "com.crashinvaders.vfx.gl.VfxGlExtension": ccvg_VfxGlExtension.$clinit(); return ccvg_VfxGlExtension;
        case "com.badlogic.gdx.utils.reflect.ClassReflection": cbgur_ClassReflection.$clinit(); return cbgur_ClassReflection;
        case "com.badlogic.gdx.utils.reflect.ReflectionException": cbgur_ReflectionException.$clinit(); return cbgur_ReflectionException;
        case "com.badlogic.gdx.utils.ObjectIntMap": cbgu_ObjectIntMap.$clinit(); return cbgu_ObjectIntMap;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect$Tap": ccve_GaussianBlurEffect$Tap.$clinit(); return ccve_GaussianBlurEffect$Tap;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBuffer$RendererManager": ccvf_VfxFrameBuffer$RendererManager.$clinit(); return ccvf_VfxFrameBuffer$RendererManager;
        case "com.crashinvaders.vfx.framebuffer.VfxFrameBuffer$Renderer": ccvf_VfxFrameBuffer$Renderer.$clinit(); return ccvf_VfxFrameBuffer$Renderer;
        case "com.badlogic.gdx.graphics.Mesh$VertexDataType": cbgg_Mesh$VertexDataType.$clinit(); return cbgg_Mesh$VertexDataType;
        case "com.badlogic.gdx.graphics.Mesh": cbgg_Mesh.$clinit(); return cbgg_Mesh;
        case "com.badlogic.gdx.graphics.g2d.SpriteBatch": cbggg_SpriteBatch.$clinit(); return cbggg_SpriteBatch;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData": cbggg_TextureAtlas$TextureAtlasData.$clinit(); return cbggg_TextureAtlas$TextureAtlasData;
        case "com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph": cbggg_BitmapFont$Glyph.$clinit(); return cbggg_BitmapFont$Glyph;
        case "polygon_burst.survivor01.menus.Menu$PagesBox": psm_Menu$PagesBox.$clinit(); return psm_Menu$PagesBox;
        case "polygon_burst.survivor01.menus.Menu$TextButton": psm_Menu$TextButton.$clinit(); return psm_Menu$TextButton;
        case "polygon_burst.survivor01.menus.Menu$BarBox$Units": psm_Menu$BarBox$Units.$clinit(); return psm_Menu$BarBox$Units;
        case "polygon_burst.survivor01.menus.Menu$BarBox": psm_Menu$BarBox.$clinit(); return psm_Menu$BarBox;
        case "java.util.Locale": ju_Locale.$clinit(); return ju_Locale;
        case "com.badlogic.gdx.controllers.Controllers$1": cbgc_Controllers$1.$clinit(); return cbgc_Controllers$1;
        case "com.badlogic.gdx.controllers.ControllerManager": cbgc_ControllerManager.$clinit(); return cbgc_ControllerManager;
        case "com.badlogic.gdx.controllers.ControllerManagerStub": cbgc_ControllerManagerStub.$clinit(); return cbgc_ControllerManagerStub;
        case "com.badlogic.gdx.controllers.AbstractControllerManager": cbgc_AbstractControllerManager.$clinit(); return cbgc_AbstractControllerManager;
        case "com.crashinvaders.vfx.utils.ViewportQuadMesh": ccvu_ViewportQuadMesh.$clinit(); return ccvu_ViewportQuadMesh;
        case "java.nio.ByteBufferJsImpl": jn_ByteBufferJsImpl.$clinit(); return jn_ByteBufferJsImpl;
        case "java.nio.ArrayBufferViewProvider": jn_ArrayBufferViewProvider.$clinit(); return jn_ArrayBufferViewProvider;
        case "com.github.xpenatan.gdx.backends.teavm.TeaTool": cgxgbt_TeaTool.$clinit(); return cgxgbt_TeaTool;
        case "java.lang.ClassNotFoundException": jl_ClassNotFoundException.$clinit(); return jl_ClassNotFoundException;
        case "java.lang.ReflectiveOperationException": jl_ReflectiveOperationException.$clinit(); return jl_ReflectiveOperationException;
        case "java.lang.InstantiationException": jl_InstantiationException.$clinit(); return jl_InstantiationException;
        case "java.lang.IllegalAccessException": jl_IllegalAccessException.$clinit(); return jl_IllegalAccessException;
        case "java.nio.IntBuffer": jn_IntBuffer.$clinit(); return jn_IntBuffer;
        case "java.nio.FloatBuffer": jn_FloatBuffer.$clinit(); return jn_FloatBuffer;
        case "com.badlogic.gdx.graphics.OrthographicCamera": cbgg_OrthographicCamera.$clinit(); return cbgg_OrthographicCamera;
        case "com.badlogic.gdx.graphics.Camera": cbgg_Camera.$clinit(); return cbgg_Camera;
        case "com.badlogic.gdx.graphics.VertexAttributes": cbgg_VertexAttributes.$clinit(); return cbgg_VertexAttributes;
        case "com.badlogic.gdx.math.GeometryUtils": cbgm_GeometryUtils.$clinit(); return cbgm_GeometryUtils;
        case "com.badlogic.gdx.graphics.Mesh$1": cbgg_Mesh$1.$clinit(); return cbgg_Mesh$1;
        case "com.badlogic.gdx.graphics.glutils.VertexBufferObject": cbggg_VertexBufferObject.$clinit(); return cbggg_VertexBufferObject;
        case "com.badlogic.gdx.graphics.glutils.VertexData": cbggg_VertexData.$clinit(); return cbggg_VertexData;
        case "com.badlogic.gdx.graphics.glutils.IndexBufferObject": cbggg_IndexBufferObject.$clinit(); return cbggg_IndexBufferObject;
        case "com.badlogic.gdx.graphics.glutils.IndexData": cbggg_IndexData.$clinit(); return cbggg_IndexData;
        case "com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData": cbggg_VertexBufferObjectSubData.$clinit(); return cbggg_VertexBufferObjectSubData;
        case "com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData": cbggg_IndexBufferObjectSubData.$clinit(); return cbggg_IndexBufferObjectSubData;
        case "com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO": cbggg_VertexBufferObjectWithVAO.$clinit(); return cbggg_VertexBufferObjectWithVAO;
        case "com.badlogic.gdx.graphics.glutils.VertexArray": cbggg_VertexArray.$clinit(); return cbggg_VertexArray;
        case "com.badlogic.gdx.graphics.glutils.IndexArray": cbggg_IndexArray.$clinit(); return cbggg_IndexArray;
        case "com.badlogic.gdx.math.EarClippingTriangulator": cbgm_EarClippingTriangulator.$clinit(); return cbgm_EarClippingTriangulator;
        case "org.teavm.classlib.impl.unicode.CLDRHelper": otciu_CLDRHelper.$clinit(); return otciu_CLDRHelper;
        case "java.nio.IntBufferOverTypedArray": jn_IntBufferOverTypedArray.$clinit(); return jn_IntBufferOverTypedArray;
        case "java.nio.IntBufferImpl": jn_IntBufferImpl.$clinit(); return jn_IntBufferImpl;
        case "org.teavm.jso.typedarrays.Int32Array": otjt_Int32Array.$clinit(); return otjt_Int32Array;
        case "java.nio.FloatBufferOverTypedArray": jn_FloatBufferOverTypedArray.$clinit(); return jn_FloatBufferOverTypedArray;
        case "java.nio.FloatBufferImpl": jn_FloatBufferImpl.$clinit(); return jn_FloatBufferImpl;
        case "org.teavm.jso.typedarrays.Float32Array": otjt_Float32Array.$clinit(); return otjt_Float32Array;
        case "com.badlogic.gdx.math.Frustum": cbgm_Frustum.$clinit(); return cbgm_Frustum;
        case "com.badlogic.gdx.math.collision.Ray": cbgmc_Ray.$clinit(); return cbgmc_Ray;
        case "java.nio.ShortBuffer": jn_ShortBuffer.$clinit(); return jn_ShortBuffer;
        case "com.badlogic.gdx.utils.ShortArray": cbgu_ShortArray.$clinit(); return cbgu_ShortArray;
        case "com.badlogic.gdx.graphics.TextureData$Factory": cbgg_TextureData$Factory.$clinit(); return cbgg_TextureData$Factory;
        case "com.badlogic.gdx.utils.StreamUtils": cbgu_StreamUtils.$clinit(); return cbgu_StreamUtils;
        case "java.io.IOException": ji_IOException.$clinit(); return ji_IOException;
        case "com.badlogic.gdx.math.Plane": cbgm_Plane.$clinit(); return cbgm_Plane;
        case "com.badlogic.gdx.graphics.glutils.FileTextureData": cbggg_FileTextureData.$clinit(); return cbggg_FileTextureData;
        case "com.badlogic.gdx.graphics.TextureData": cbgg_TextureData.$clinit(); return cbgg_TextureData;
        case "com.badlogic.gdx.graphics.Pixmap": cbgg_Pixmap.$clinit(); return cbgg_Pixmap;
        case "com.badlogic.gdx.graphics.g2d.PixmapNativeInterface": cbggg_PixmapNativeInterface.$clinit(); return cbggg_PixmapNativeInterface;
        case "com.badlogic.gdx.utils.TextFormatter": cbgu_TextFormatter.$clinit(); return cbgu_TextFormatter;
        case "com.badlogic.gdx.utils.StringBuilder": cbgu_StringBuilder.$clinit(); return cbgu_StringBuilder;
        case "com.badlogic.gdx.graphics.Pixmap$Blending": cbgg_Pixmap$Blending.$clinit(); return cbgg_Pixmap$Blending;
        case "com.badlogic.gdx.graphics.Pixmap$Filter": cbgg_Pixmap$Filter.$clinit(); return cbgg_Pixmap$Filter;
        case "com.badlogic.gdx.graphics.g2d.Gdx2DPixmap": cbggg_Gdx2DPixmap.$clinit(); return cbggg_Gdx2DPixmap;
        case "java.text.MessageFormat": jt_MessageFormat.$clinit(); return jt_MessageFormat;
        case "java.text.Format": jt_Format.$clinit(); return jt_Format;
        case "java.io.InputStream": ji_InputStream.$clinit(); return ji_InputStream;
        case "com.badlogic.gdx.graphics.g2d.Gdx2DPixmapNative": cbggg_Gdx2DPixmapNative.$clinit(); return cbggg_Gdx2DPixmapNative;
        case "java.nio.ShortBufferOverTypedArray": jn_ShortBufferOverTypedArray.$clinit(); return jn_ShortBufferOverTypedArray;
        case "java.nio.ShortBufferImpl": jn_ShortBufferImpl.$clinit(); return jn_ShortBufferImpl;
        case "org.teavm.jso.typedarrays.Int16Array": otjt_Int16Array.$clinit(); return otjt_Int16Array;
        case "java.nio.JSBufferHelper": jn_JSBufferHelper.$clinit(); return jn_JSBufferHelper;
        case "java.nio.IntBufferOverDataView": jn_IntBufferOverDataView.$clinit(); return jn_IntBufferOverDataView;
        case "java.nio.ReadOnlyBufferException": jn_ReadOnlyBufferException.$clinit(); return jn_ReadOnlyBufferException;
        case "java.lang.UnsupportedOperationException": jl_UnsupportedOperationException.$clinit(); return jl_UnsupportedOperationException;
        case "java.nio.BufferUnderflowException": jn_BufferUnderflowException.$clinit(); return jn_BufferUnderflowException;
        case "java.nio.FloatBufferOverDataView": jn_FloatBufferOverDataView.$clinit(); return jn_FloatBufferOverDataView;
        case "java.nio.ShortBufferOverDataView": jn_ShortBufferOverDataView.$clinit(); return jn_ShortBufferOverDataView;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$1": cgxgbta_AssetDownloadImpl$1.$clinit(); return cgxgbta_AssetDownloadImpl$1;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$3": cgxgbta_AssetDownloadImpl$3.$clinit(); return cgxgbta_AssetDownloadImpl$3;
        case "com.github.xpenatan.gdx.backends.teavm.TeaCursor": cgxgbt_TeaCursor.$clinit(); return cgxgbt_TeaCursor;
        case "com.badlogic.gdx.graphics.Cursor": cbgg_Cursor.$clinit(); return cbgg_Cursor;
        case "com.github.xpenatan.gdx.backends.teavm.TeaFileHandle": cgxgbt_TeaFileHandle.$clinit(); return cgxgbt_TeaFileHandle;
        case "com.badlogic.gdx.Files$FileType": cbg_Files$FileType.$clinit(); return cbg_Files$FileType;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion": cbggg_TextureAtlas$AtlasRegion.$clinit(); return cbggg_TextureAtlas$AtlasRegion;
        case "space.earlygrey.shapedrawer.JoinType": ses_JoinType.$clinit(); return ses_JoinType;
        case "com.badlogic.gdx.Preferences": cbg_Preferences.$clinit(); return cbg_Preferences;
        case "org.teavm.jso.browser.Storage": otjb_Storage.$clinit(); return otjb_Storage;
        case "com.github.xpenatan.gdx.backends.teavm.TeaPreferences": cgxgbt_TeaPreferences.$clinit(); return cgxgbt_TeaPreferences;
        case "java.util.HashMap$HashMapEntrySet": ju_HashMap$HashMapEntrySet.$clinit(); return ju_HashMap$HashMapEntrySet;
        case "com.crashinvaders.vfx.utils.PrioritizedArray$Wrapper": ccvu_PrioritizedArray$Wrapper.$clinit(); return ccvu_PrioritizedArray$Wrapper;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect$Convolve2DEffect": ccve_GaussianBlurEffect$Convolve2DEffect.$clinit(); return ccve_GaussianBlurEffect$Convolve2DEffect;
        case "java.io.BufferedReader": ji_BufferedReader.$clinit(); return ji_BufferedReader;
        case "java.io.Reader": ji_Reader.$clinit(); return ji_Reader;
        case "java.lang.Readable": jl_Readable.$clinit(); return jl_Readable;
        case "java.io.InputStreamReader": ji_InputStreamReader.$clinit(); return ji_InputStreamReader;
        case "java.util.StringTokenizer": ju_StringTokenizer.$clinit(); return ju_StringTokenizer;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$1": cbggg_TextureAtlas$TextureAtlasData$1.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$1;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Field": cbggg_TextureAtlas$TextureAtlasData$Field.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$Field;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$2": cbggg_TextureAtlas$TextureAtlasData$2.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$2;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$3": cbggg_TextureAtlas$TextureAtlasData$3.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$3;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$4": cbggg_TextureAtlas$TextureAtlasData$4.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$4;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$5": cbggg_TextureAtlas$TextureAtlasData$5.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$5;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$6": cbggg_TextureAtlas$TextureAtlasData$6.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$6;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$7": cbggg_TextureAtlas$TextureAtlasData$7.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$7;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$8": cbggg_TextureAtlas$TextureAtlasData$8.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$8;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$9": cbggg_TextureAtlas$TextureAtlasData$9.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$9;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$10": cbggg_TextureAtlas$TextureAtlasData$10.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$10;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$11": cbggg_TextureAtlas$TextureAtlasData$11.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$11;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$12": cbggg_TextureAtlas$TextureAtlasData$12.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$12;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$13": cbggg_TextureAtlas$TextureAtlasData$13.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$13;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$14": cbggg_TextureAtlas$TextureAtlasData$14.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$14;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region": cbggg_TextureAtlas$TextureAtlasData$Region.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$Region;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page": cbggg_TextureAtlas$TextureAtlasData$Page.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$Page;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$load$lambda$_2_0": cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0;
        case "com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$load$lambda$_2_1": cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1.$clinit(); return cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1;
        case "com.badlogic.gdx.graphics.g2d.BitmapFontCache": cbggg_BitmapFontCache.$clinit(); return cbggg_BitmapFontCache;
        case "com.badlogic.gdx.utils.JsonReader": cbgu_JsonReader.$clinit(); return cbgu_JsonReader;
        case "com.badlogic.gdx.utils.BaseJsonReader": cbgu_BaseJsonReader.$clinit(); return cbgu_BaseJsonReader;
        case "com.badlogic.gdx.utils.JsonWriter$OutputType": cbgu_JsonWriter$OutputType.$clinit(); return cbgu_JsonWriter$OutputType;
        case "com.badlogic.gdx.maps.MapProperties": cbgm_MapProperties.$clinit(); return cbgm_MapProperties;
        case "com.badlogic.gdx.graphics.g3d.particles.ParticleEffect$<init>$lambda$_0_0": cbgggp_ParticleEffect$_init_$lambda$_0_0.$clinit(); return cbgggp_ParticleEffect$_init_$lambda$_0_0;
        case "com.badlogic.gdx.graphics.g3d.particles.ParticleController$<init>$lambda$_0_0": cbgggp_ParticleController$_init_$lambda$_0_0.$clinit(); return cbgggp_ParticleController$_init_$lambda$_0_0;
        case "com.badlogic.gdx.graphics.g3d.particles.ResourceData$<init>$lambda$_0_0": cbgggp_ResourceData$_init_$lambda$_0_0.$clinit(); return cbgggp_ResourceData$_init_$lambda$_0_0;
        case "com.badlogic.gdx.utils.PropertiesUtils": cbgu_PropertiesUtils.$clinit(); return cbgu_PropertiesUtils;
        case "java.text.ParsePosition": jt_ParsePosition.$clinit(); return jt_ParsePosition;
        case "org.teavm.classlib.impl.nio.Buffers": otcin_Buffers.$clinit(); return otcin_Buffers;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$loadBinary$lambda$_6_0": cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0.$clinit(); return cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0;
        case "org.teavm.jso.browser.TimerHandler": otjb_TimerHandler.$clinit(); return otjb_TimerHandler;
        case "java.lang.AbstractStringBuilder$Constants": jl_AbstractStringBuilder$Constants.$clinit(); return jl_AbstractStringBuilder$Constants;
        case "org.teavm.classlib.impl.text.FloatAnalyzer": otcit_FloatAnalyzer.$clinit(); return otcit_FloatAnalyzer;
        case "org.teavm.classlib.impl.text.FloatAnalyzer$Result": otcit_FloatAnalyzer$Result.$clinit(); return otcit_FloatAnalyzer$Result;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.HEXCoder": cgxgbtf_HEXCoder.$clinit(); return cgxgbtf_HEXCoder;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect$Convolve1DEffect": ccve_GaussianBlurEffect$Convolve1DEffect.$clinit(); return ccve_GaussianBlurEffect$Convolve1DEffect;
        case "com.crashinvaders.vfx.effects.GaussianBlurEffect$1": ccve_GaussianBlurEffect$1.$clinit(); return ccve_GaussianBlurEffect$1;
        case "java.nio.charset.impl.UTF8Charset": jnci_UTF8Charset.$clinit(); return jnci_UTF8Charset;
        case "org.teavm.classlib.impl.text.FloatSynthesizer": otcit_FloatSynthesizer.$clinit(); return otcit_FloatSynthesizer;
        case "java.text.ChoiceFormat": jt_ChoiceFormat.$clinit(); return jt_ChoiceFormat;
        case "java.text.NumberFormat": jt_NumberFormat.$clinit(); return jt_NumberFormat;
        case "java.text.DecimalFormat": jt_DecimalFormat.$clinit(); return jt_DecimalFormat;
        case "java.text.DecimalFormatSymbols": jt_DecimalFormatSymbols.$clinit(); return jt_DecimalFormatSymbols;
        case "java.text.DateFormat": jt_DateFormat.$clinit(); return jt_DateFormat;
        case "java.text.SimpleDateFormat": jt_SimpleDateFormat.$clinit(); return jt_SimpleDateFormat;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$loadBinaryInternally$lambda$_7_0": cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0.$clinit(); return cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0;
        case "java.lang.Boolean": jl_Boolean.$clinit(); return jl_Boolean;
        case "com.crashinvaders.vfx.utils.PrioritizedArray$Wrapper$1": ccvu_PrioritizedArray$Wrapper$1.$clinit(); return ccvu_PrioritizedArray$Wrapper$1;
        case "java.nio.charset.CodingErrorAction": jnc_CodingErrorAction.$clinit(); return jnc_CodingErrorAction;
        case "java.nio.charset.CharsetDecoder": jnc_CharsetDecoder.$clinit(); return jnc_CharsetDecoder;
        case "com.badlogic.gdx.graphics.TextureData$TextureDataType": cbgg_TextureData$TextureDataType.$clinit(); return cbgg_TextureData$TextureDataType;
        case "com.badlogic.gdx.graphics.glutils.MipMapGenerator": cbggg_MipMapGenerator.$clinit(); return cbggg_MipMapGenerator;
        case "java.text.DecimalFormat$FormatField": jt_DecimalFormat$FormatField.$clinit(); return jt_DecimalFormat$FormatField;
        case "java.text.DecimalFormat$TextField": jt_DecimalFormat$TextField.$clinit(); return jt_DecimalFormat$TextField;
        case "java.text.DateFormatSymbols": jt_DateFormatSymbols.$clinit(); return jt_DateFormatSymbols;
        case "java.nio.NativeBuffer": jn_NativeBuffer.$clinit(); return jn_NativeBuffer;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$setOnProgress$lambda$_8_0": cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0.$clinit(); return cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0;
        case "org.teavm.jso.ajax.XMLHttpRequest": otja_XMLHttpRequest.$clinit(); return otja_XMLHttpRequest;
        case "org.teavm.jso.dom.events.EventTarget": otjde_EventTarget.$clinit(); return otjde_EventTarget;
        case "org.teavm.classlib.impl.text.DoubleAnalyzer$Result": otcit_DoubleAnalyzer$Result.$clinit(); return otcit_DoubleAnalyzer$Result;
        case "java.util.regex.Matcher$1": jur_Matcher$1.$clinit(); return jur_Matcher$1;
        case "java.nio.CharBuffer": jn_CharBuffer.$clinit(); return jn_CharBuffer;
        case "org.teavm.jso.typedarrays.Uint8Array": otjt_Uint8Array.$clinit(); return otjt_Uint8Array;
        case "org.teavm.jso.typedarrays.Uint16Array": otjt_Uint16Array.$clinit(); return otjt_Uint16Array;
        case "java.math.RoundingMode": jm_RoundingMode.$clinit(); return jm_RoundingMode;
        case "java.util.Currency": ju_Currency.$clinit(); return ju_Currency;
        case "java.nio.charset.CharacterCodingException": jnc_CharacterCodingException.$clinit(); return jnc_CharacterCodingException;
        case "java.lang.AssertionError": jl_AssertionError.$clinit(); return jl_AssertionError;
        case "java.lang.Error": jl_Error.$clinit(); return jl_Error;
        case "org.teavm.classlib.impl.currency.CurrencyHelper": otcic_CurrencyHelper.$clinit(); return otcic_CurrencyHelper;
        case "java.util.Calendar": ju_Calendar.$clinit(); return ju_Calendar;
        case "org.teavm.jso.dom.events.Registration": otjde_Registration.$clinit(); return otjde_Registration;
        case "java.nio.CharBufferOverTypedArray": jn_CharBufferOverTypedArray.$clinit(); return jn_CharBufferOverTypedArray;
        case "java.nio.CharBufferImpl": jn_CharBufferImpl.$clinit(); return jn_CharBufferImpl;
        case "java.util.GregorianCalendar": ju_GregorianCalendar.$clinit(); return ju_GregorianCalendar;
        case "java.nio.charset.CoderResult": jnc_CoderResult.$clinit(); return jnc_CoderResult;
        case "java.nio.charset.CoderMalfunctionError": jnc_CoderMalfunctionError.$clinit(); return jnc_CoderMalfunctionError;
        case "java.nio.charset.IllegalCharsetNameException": jnc_IllegalCharsetNameException.$clinit(); return jnc_IllegalCharsetNameException;
        case "java.util.TimeZone": ju_TimeZone.$clinit(); return ju_TimeZone;
        case "java.util.IANATimeZone": ju_IANATimeZone.$clinit(); return ju_IANATimeZone;
        case "org.teavm.classlib.impl.tz.FixedDateTimeZone": otcit_FixedDateTimeZone.$clinit(); return otcit_FixedDateTimeZone;
        case "org.teavm.classlib.impl.tz.StorableDateTimeZone": otcit_StorableDateTimeZone.$clinit(); return otcit_StorableDateTimeZone;
        case "org.teavm.classlib.impl.tz.DateTimeZone": otcit_DateTimeZone.$clinit(); return otcit_DateTimeZone;
        case "com.github.xpenatan.gdx.backends.teavm.TeaFileHandle$1": cgxgbt_TeaFileHandle$1.$clinit(); return cgxgbt_TeaFileHandle$1;
        case "java.util.HashMap$EntryIterator": ju_HashMap$EntryIterator.$clinit(); return ju_HashMap$EntryIterator;
        case "java.util.HashMap$AbstractMapIterator": ju_HashMap$AbstractMapIterator.$clinit(); return ju_HashMap$AbstractMapIterator;
        case "java.nio.charset.impl.UTF8Decoder": jnci_UTF8Decoder.$clinit(); return jnci_UTF8Decoder;
        case "java.nio.charset.impl.BufferedDecoder": jnci_BufferedDecoder.$clinit(); return jnci_BufferedDecoder;
        case "java.nio.BufferOverflowException": jn_BufferOverflowException.$clinit(); return jn_BufferOverflowException;
        case "java.nio.charset.BufferUnderflowException": jnc_BufferUnderflowException.$clinit(); return jnc_BufferUnderflowException;
        case "java.nio.charset.BufferOverflowException": jnc_BufferOverflowException.$clinit(); return jnc_BufferOverflowException;
        case "java.nio.charset.MalformedInputException": jnc_MalformedInputException.$clinit(); return jnc_MalformedInputException;
        case "java.nio.charset.UnmappableCharacterException": jnc_UnmappableCharacterException.$clinit(); return jnc_UnmappableCharacterException;
        case "com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator": cbgu_ObjectSet$ObjectSetIterator.$clinit(); return cbgu_ObjectSet$ObjectSetIterator;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.TeaBlob": cgxgbta_TeaBlob.$clinit(); return cgxgbta_TeaBlob;
        case "com.github.xpenatan.gdx.backends.teavm.webaudio.howler.HowlMusic": cgxgbtwh_HowlMusic.$clinit(); return cgxgbtwh_HowlMusic;
        case "com.github.xpenatan.gdx.backends.teavm.webaudio.howler.HowlSound": cgxgbtwh_HowlSound.$clinit(); return cgxgbtwh_HowlSound;
        case "com.badlogic.gdx.utils.Sort": cbgu_Sort.$clinit(); return cbgu_Sort;
        case "java.text.DecimalFormatParser": jt_DecimalFormatParser.$clinit(); return jt_DecimalFormatParser;
        case "com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream": cbgu_StreamUtils$OptimizedByteArrayOutputStream.$clinit(); return cbgu_StreamUtils$OptimizedByteArrayOutputStream;
        case "java.io.ByteArrayOutputStream": ji_ByteArrayOutputStream.$clinit(); return ji_ByteArrayOutputStream;
        case "com.badlogic.gdx.utils.ObjectMap$Keys": cbgu_ObjectMap$Keys.$clinit(); return cbgu_ObjectMap$Keys;
        case "com.badlogic.gdx.utils.ObjectMap$MapIterator": cbgu_ObjectMap$MapIterator.$clinit(); return cbgu_ObjectMap$MapIterator;
        case "java.text.FieldPosition": jt_FieldPosition.$clinit(); return jt_FieldPosition;
        case "com.badlogic.gdx.math.MathUtils$Sin": cbgm_MathUtils$Sin.$clinit(); return cbgm_MathUtils$Sin;
        case "com.github.xpenatan.gdx.backends.teavm.webaudio.howler.Howl": cgxgbtwh_Howl.$clinit(); return cgxgbtwh_Howl;
        case "java.lang.Double": jl_Double.$clinit(); return jl_Double;
        case "java.text.SimpleDatePatternParser": jt_SimpleDatePatternParser.$clinit(); return jt_SimpleDatePatternParser;
        case "java.text.DateFormatElement": jt_DateFormatElement.$clinit(); return jt_DateFormatElement;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0": cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0.$clinit(); return cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0;
        case "com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer": cbgggpi_Influencer.$clinit(); return cbgggpi_Influencer;
        case "com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent": cbgggp_ParticleControllerComponent.$clinit(); return cbgggp_ParticleControllerComponent;
        case "com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData": cbgggp_ResourceData$SaveData.$clinit(); return cbgggp_ResourceData$SaveData;
        case "java.nio.charset.impl.BufferedDecoder$Controller": jnci_BufferedDecoder$Controller.$clinit(); return jnci_BufferedDecoder$Controller;
        case "com.badlogic.gdx.utils.TimSort": cbgu_TimSort.$clinit(); return cbgu_TimSort;
        case "com.badlogic.gdx.graphics.glutils.FrameBuffer": cbggg_FrameBuffer.$clinit(); return cbggg_FrameBuffer;
        case "com.badlogic.gdx.graphics.glutils.GLFrameBuffer": cbggg_GLFrameBuffer.$clinit(); return cbggg_GLFrameBuffer;
        case "java.text.DecimalFormat$MinusField": jt_DecimalFormat$MinusField.$clinit(); return jt_DecimalFormat$MinusField;
        case "java.text.DateFormatElement$Numeric": jt_DateFormatElement$Numeric.$clinit(); return jt_DateFormatElement$Numeric;
        case "java.text.DateFormatElement$WeekdayText": jt_DateFormatElement$WeekdayText.$clinit(); return jt_DateFormatElement$WeekdayText;
        case "java.text.DateFormatElement$EraText": jt_DateFormatElement$EraText.$clinit(); return jt_DateFormatElement$EraText;
        case "java.text.DateFormatElement$Rfc822Timezone": jt_DateFormatElement$Rfc822Timezone.$clinit(); return jt_DateFormatElement$Rfc822Timezone;
        case "java.text.DateFormatElement$BaseTimezone": jt_DateFormatElement$BaseTimezone.$clinit(); return jt_DateFormatElement$BaseTimezone;
        case "java.text.DateFormatElement$AmPmText": jt_DateFormatElement$AmPmText.$clinit(); return jt_DateFormatElement$AmPmText;
        case "java.text.DateFormatElement$NumericHour": jt_DateFormatElement$NumericHour.$clinit(); return jt_DateFormatElement$NumericHour;
        case "java.text.DateFormatElement$NumericWeekday": jt_DateFormatElement$NumericWeekday.$clinit(); return jt_DateFormatElement$NumericWeekday;
        case "java.text.DateFormatElement$GeneralTimezone": jt_DateFormatElement$GeneralTimezone.$clinit(); return jt_DateFormatElement$GeneralTimezone;
        case "java.text.DateFormatElement$ConstantText": jt_DateFormatElement$ConstantText.$clinit(); return jt_DateFormatElement$ConstantText;
        case "java.text.DateFormatElement$Year": jt_DateFormatElement$Year.$clinit(); return jt_DateFormatElement$Year;
        case "java.text.DateFormatElement$Iso8601Timezone": jt_DateFormatElement$Iso8601Timezone.$clinit(); return jt_DateFormatElement$Iso8601Timezone;
        case "java.text.DateFormatElement$MonthText": jt_DateFormatElement$MonthText.$clinit(); return jt_DateFormatElement$MonthText;
        case "java.text.DateFormatElement$NumericMonth": jt_DateFormatElement$NumericMonth.$clinit(); return jt_DateFormatElement$NumericMonth;
        case "com.badlogic.gdx.math.Matrix3": cbgm_Matrix3.$clinit(); return cbgm_Matrix3;
        case "org.teavm.classlib.impl.text.DoubleSynthesizer": otcit_DoubleSynthesizer.$clinit(); return otcit_DoubleSynthesizer;
        case "java.math.BigInteger": jm_BigInteger.$clinit(); return jm_BigInteger;
        case "java.math.BigDecimal": jm_BigDecimal.$clinit(); return jm_BigDecimal;
        case "org.teavm.classlib.impl.text.DoubleAnalyzer": otcit_DoubleAnalyzer.$clinit(); return otcit_DoubleAnalyzer;
        case "com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder": cbggg_GLFrameBuffer$FrameBufferBuilder.$clinit(); return cbggg_GLFrameBuffer$FrameBufferBuilder;
        case "com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder": cbggg_GLFrameBuffer$GLFrameBufferBuilder.$clinit(); return cbggg_GLFrameBuffer$GLFrameBufferBuilder;
        case "java.util.Date": ju_Date.$clinit(); return ju_Date;
        case "java.math.Multiplication": jm_Multiplication.$clinit(); return jm_Multiplication;
        case "java.nio.charset.UnsupportedCharsetException": jnc_UnsupportedCharsetException.$clinit(); return jnc_UnsupportedCharsetException;
        case "java.io.UnsupportedEncodingException": ji_UnsupportedEncodingException.$clinit(); return ji_UnsupportedEncodingException;
        case "java.text.MessageFormat$FieldContainer": jt_MessageFormat$FieldContainer.$clinit(); return jt_MessageFormat$FieldContainer;
        case "java.text.MessageFormat$Field": jt_MessageFormat$Field.$clinit(); return jt_MessageFormat$Field;
        case "java.text.Format$Field": jt_Format$Field.$clinit(); return jt_Format$Field;
        case "java.text.AttributedCharacterIterator$Attribute": jt_AttributedCharacterIterator$Attribute.$clinit(); return jt_AttributedCharacterIterator$Attribute;
        case "java.nio.charset.Charset$Charsets": jnc_Charset$Charsets.$clinit(); return jnc_Charset$Charsets;
        case "java.nio.charset.StandardCharsets": jnc_StandardCharsets.$clinit(); return jnc_StandardCharsets;
        case "java.nio.charset.impl.AsciiCharset": jnci_AsciiCharset.$clinit(); return jnci_AsciiCharset;
        case "java.nio.charset.impl.Iso8859Charset": jnci_Iso8859Charset.$clinit(); return jnci_Iso8859Charset;
        case "java.nio.charset.impl.UTF16Charset": jnci_UTF16Charset.$clinit(); return jnci_UTF16Charset;
        case "java.io.ByteArrayInputStream": ji_ByteArrayInputStream.$clinit(); return ji_ByteArrayInputStream;
        case "polygon_burst.survivor01.logic.BulletLogic": psl_BulletLogic.$clinit(); return psl_BulletLogic;
        case "polygon_burst.survivor01.shapes.ChimeraShape": pss_ChimeraShape.$clinit(); return pss_ChimeraShape;
        case "java.math.BitLevel": jm_BitLevel.$clinit(); return jm_BitLevel;
        case "space.earlygrey.shapedrawer.ShapeUtils": ses_ShapeUtils.$clinit(); return ses_ShapeUtils;
        case "java.text.DecimalFormat$PerMillField": jt_DecimalFormat$PerMillField.$clinit(); return jt_DecimalFormat$PerMillField;
        case "java.text.DecimalFormat$CurrencyField": jt_DecimalFormat$CurrencyField.$clinit(); return jt_DecimalFormat$CurrencyField;
        case "java.text.DecimalFormat$PercentField": jt_DecimalFormat$PercentField.$clinit(); return jt_DecimalFormat$PercentField;
        case "java.lang.ArithmeticException": jl_ArithmeticException.$clinit(); return jl_ArithmeticException;
        case "com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec": cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec.$clinit(); return cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec;
        case "com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec": cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec.$clinit(); return cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec;
        case "java.text.AttributedString": jt_AttributedString.$clinit(); return jt_AttributedString;
        case "java.nio.charset.impl.AsciiDecoder": jnci_AsciiDecoder.$clinit(); return jnci_AsciiDecoder;
        case "java.nio.charset.impl.UTF16Decoder": jnci_UTF16Decoder.$clinit(); return jnci_UTF16Decoder;
        case "java.nio.charset.impl.Iso8859Decoder": jnci_Iso8859Decoder.$clinit(); return jnci_Iso8859Decoder;
        case "java.lang.ArrayIndexOutOfBoundsException": jl_ArrayIndexOutOfBoundsException.$clinit(); return jl_ArrayIndexOutOfBoundsException;
        case "polygon_burst.survivor01.shapes.BulletShape": pss_BulletShape.$clinit(); return pss_BulletShape;
        case "java.nio.charset.CharsetEncoder": jnc_CharsetEncoder.$clinit(); return jnc_CharsetEncoder;
        case "java.text.DecimalFormat$1": jt_DecimalFormat$1.$clinit(); return jt_DecimalFormat$1;
        case "java.math.Elementary": jm_Elementary.$clinit(); return jm_Elementary;
        case "java.math.Division": jm_Division.$clinit(); return jm_Division;
        case "java.util.ArrayDeque$1": ju_ArrayDeque$1.$clinit(); return ju_ArrayDeque$1;
        case "java.text.DecimalFormat$Constants": jt_DecimalFormat$Constants.$clinit(); return jt_DecimalFormat$Constants;
        case "com.badlogic.gdx.graphics.g2d.BitmapFontCache$addText$lambda$_31_0": cbggg_BitmapFontCache$addText$lambda$_31_0.$clinit(); return cbggg_BitmapFontCache$addText$lambda$_31_0;
        case "space.earlygrey.shapedrawer.Joiner": ses_Joiner.$clinit(); return ses_Joiner;
        case "java.text.AttributedString$AttributedIterator": jt_AttributedString$AttributedIterator.$clinit(); return jt_AttributedString$AttributedIterator;
        case "java.text.AttributedCharacterIterator": jt_AttributedCharacterIterator.$clinit(); return jt_AttributedCharacterIterator;
        case "java.text.CharacterIterator": jt_CharacterIterator.$clinit(); return jt_CharacterIterator;
        case "java.nio.charset.impl.UTF8Encoder": jnci_UTF8Encoder.$clinit(); return jnci_UTF8Encoder;
        case "java.nio.charset.impl.BufferedEncoder": jnci_BufferedEncoder.$clinit(); return jnci_BufferedEncoder;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.types.LocalDBStorage$removeFile$lambda$_3_0": cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0.$clinit(); return cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0;
        case "com.github.xpenatan.gdx.backends.teavm.assetloader.AssetLoadImpl$6": cgxgbta_AssetLoadImpl$6.$clinit(); return cgxgbta_AssetLoadImpl$6;
        case "org.teavm.classlib.PlatformDetector": otc_PlatformDetector.$clinit(); return otc_PlatformDetector;
        case "java.nio.charset.impl.BufferedEncoder$Controller": jnci_BufferedEncoder$Controller.$clinit(); return jnci_BufferedEncoder$Controller;
        case "com.badlogic.gdx.graphics.glutils.GLOnlyTextureData": cbggg_GLOnlyTextureData.$clinit(); return cbggg_GLOnlyTextureData;
        case "com.crashinvaders.vfx.utils.CommonUtils": ccvu_CommonUtils.$clinit(); return ccvu_CommonUtils;
        case "java.math.Conversion": jm_Conversion.$clinit(); return jm_Conversion;
        case "java.text.AttributedString$Range": jt_AttributedString$Range.$clinit(); return jt_AttributedString$Range;
        case "space.earlygrey.shapedrawer.Drawing": ses_Drawing.$clinit(); return ses_Drawing;
        case "java.text.Annotation": jt_Annotation.$clinit(); return jt_Annotation;
        case "java.util.HashMap$1": ju_HashMap$1.$clinit(); return ju_HashMap$1;
        case "com.badlogic.gdx.graphics.Colors": cbgg_Colors.$clinit(); return cbgg_Colors;
        case "java.util.HashMap$KeyIterator": ju_HashMap$KeyIterator.$clinit(); return ju_HashMap$KeyIterator;
        case "com.github.xpenatan.gdx.backends.teavm.filesystem.FileDB$1": cgxgbtf_FileDB$1.$clinit(); return cgxgbtf_FileDB$1;
        default: return null;
    }
},
otp_Platform_getEnumConstants = var$1 => {
    let c = '$$enumConstants$$';
    cgxgbt_TeaApplication$AppState[c] = cgxgbt_TeaApplication$AppState_values;
    cbg_Application$ApplicationType[c] = cbg_Application$ApplicationType_values;
    cbggg_GLVersion$Type[c] = cbggg_GLVersion$Type_values;
    cgxgbtd_StyleWrapper$Unit[c] = cgxgbtd_StyleWrapper$Unit_values;
    cgxgbta_AssetType[c] = cgxgbta_AssetType_values;
    cbgg_Cursor$SystemCursor[c] = cbgg_Cursor$SystemCursor_values;
    cbgg_Pixmap$Format[c] = cbgg_Pixmap$Format_values;
    ccveu_MixEffect$Method[c] = ccveu_MixEffect$Method_values;
    ccve_GaussianBlurEffect$BlurType[c] = ccve_GaussianBlurEffect$BlurType_values;
    ccveu_GammaThresholdEffect$Type[c] = ccveu_GammaThresholdEffect$Type_values;
    cbgg_Texture$TextureWrap[c] = cbgg_Texture$TextureWrap_values;
    cbgg_Texture$TextureFilter[c] = cbgg_Texture$TextureFilter_values;
    ccve_GaussianBlurEffect$Tap[c] = ccve_GaussianBlurEffect$Tap_values;
    cbgg_Mesh$VertexDataType[c] = cbgg_Mesh$VertexDataType_values;
    cbgg_Pixmap$Blending[c] = cbgg_Pixmap$Blending_values;
    cbgg_Pixmap$Filter[c] = cbgg_Pixmap$Filter_values;
    cbg_Files$FileType[c] = cbg_Files$FileType_values;
    ses_JoinType[c] = ses_JoinType_values;
    cbgu_JsonWriter$OutputType[c] = cbgu_JsonWriter$OutputType_values;
    cbgg_TextureData$TextureDataType[c] = cbgg_TextureData$TextureDataType_values;
    jm_RoundingMode[c] = jm_RoundingMode_values;
    otp_Platform_getEnumConstants = cls => {
        if (!cls.hasOwnProperty(c)) {
            return null;
        }
        if (typeof cls[c] === "function") {
            cls[c] = cls[c]();
        }
        return cls[c];
    };
    return otp_Platform_getEnumConstants(var$1);
},
otp_Platform_launchThread = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1.$_016;
    if (!jl_Object_isEmptyMonitor(var$1)) {
        var$2 = var$1.$monitor;
        if (var$2.$owner === null) {
            var$1 = var$2.$enteringThreads;
            if (var$1 !== null && !otp_PlatformQueue_isEmpty$static(var$1)) {
                var$1 = var$2.$enteringThreads.shift();
                if (var$1 !== null && !(var$1 instanceof $rt_objcls()))
                    var$1 = otji_JSWrapper_wrap(var$1);
                var$3 = var$1;
                var$2.$enteringThreads = null;
                var$1 = var$3;
                var$2 = var$1.$_04;
                var$3 = var$1.$_13;
                var$4 = var$1.$_22;
                var$1 = var$1.$_31;
                jl_Thread_setCurrentThread(var$2);
                var$3 = var$3.$monitor;
                var$3.$owner = var$2;
                var$3.$count = var$3.$count + var$4 | 0;
                var$2 = null;
                otpp_AsyncCallbackWrapper_complete(var$1, var$2);
            }
        }
    }
},
otp_Platform_schedule = (var$1, var$2) => {
    setTimeout(() => {
        otp_Platform_launchThread(var$1);
    }, var$2);
},
otp_Platform_getArrayItem = var$1 => {
    return var$1.$meta.item;
},
otp_Platform_getName = $cls => {
    return $rt_str($cls.$meta.name);
},
otp_Platform_createQueueJs$js_body$_30 = () => {
    return [];
};
function jl_Throwable() {
    let a = this; jl_Object.call(a);
    a.$message = null;
    a.$cause = null;
    a.$suppressionEnabled = 0;
    a.$writableStackTrace = 0;
    a.$stackTrace = null;
}
let jl_Throwable__init_ = $this => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
},
jl_Throwable__init_4 = () => {
    let var_0 = new jl_Throwable();
    jl_Throwable__init_(var_0);
    return var_0;
},
jl_Throwable__init_0 = ($this, $message, $cause) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
    $this.$cause = $cause;
},
jl_Throwable__init_3 = (var_0, var_1) => {
    let var_2 = new jl_Throwable();
    jl_Throwable__init_0(var_2, var_0, var_1);
    return var_2;
},
jl_Throwable__init_1 = ($this, $cause) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$cause = $cause;
},
jl_Throwable__init_2 = var_0 => {
    let var_1 = new jl_Throwable();
    jl_Throwable__init_1(var_1, var_0);
    return var_1;
},
jl_Throwable_fillInStackTrace = $this => {
    return $this;
},
jl_Throwable_initNativeException = $this => {
    $rt_fillNativeException($this);
},
jl_Throwable_getMessage = $this => {
    return $this.$message;
},
jl_Throwable_getLocalizedMessage = $this => {
    return $this.$getMessage();
},
jl_Throwable_getCause = $this => {
    let var$1;
    var$1 = $this.$cause;
    if (var$1 === $this)
        var$1 = null;
    return var$1;
},
jl_Throwable_printStackTrace0 = $this => {
    jl_Throwable_printStackTrace($this, jl_System_err());
},
jl_Throwable_printStackTrace = ($this, $stream) => {
    let var$2, var$3, $message, var$5, var$6, var$7, $element, var$9;
    var$2 = jl_Class_getName(jl_Object_getClass($this));
    var$3 = $stream;
    otcic_JSStderrPrintStream_print(var$3, var$2);
    $message = $this.$getMessage();
    if ($message !== null) {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $rt_s(35));
        jl_AbstractStringBuilder_append(var$2, $message);
        otcic_JSStderrPrintStream_print(var$3, jl_AbstractStringBuilder_toString(var$2));
    }
    a: {
        var$2 = $stream;
        otcic_JSStderrPrintStream_print(var$2, $rt_s(36));
        var$5 = $this.$stackTrace;
        if (var$5 !== null) {
            var$5 = var$5.data;
            var$6 = var$5.length;
            var$7 = 0;
            while (true) {
                if (var$7 >= var$6)
                    break a;
                $element = var$5[var$7];
                otcic_JSStderrPrintStream_print(var$3, $rt_s(37));
                var$9 = $rt_s(38);
                if ($element !== null)
                    var$9 = $element.$toString();
                otcic_JsConsolePrintStream_println(var$2, var$9);
                var$7 = var$7 + 1 | 0;
            }
        }
    }
    var$2 = $this.$cause;
    if (var$2 !== null && var$2 !== $this) {
        otcic_JSStderrPrintStream_print(var$3, $rt_s(39));
        jl_Throwable_printStackTrace($this.$cause, $stream);
    }
},
jl_Exception = $rt_classWithoutFields(jl_Throwable),
jl_Exception__init_0 = $this => {
    jl_Throwable__init_($this);
},
jl_Exception__init_1 = () => {
    let var_0 = new jl_Exception();
    jl_Exception__init_0(var_0);
    return var_0;
},
jl_Exception__init_ = ($this, $message) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
},
jl_Exception__init_2 = var_0 => {
    let var_1 = new jl_Exception();
    jl_Exception__init_(var_1, var_0);
    return var_1;
},
jl_RuntimeException = $rt_classWithoutFields(jl_Exception),
jl_RuntimeException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_RuntimeException__init_2 = () => {
    let var_0 = new jl_RuntimeException();
    jl_RuntimeException__init_(var_0);
    return var_0;
},
jl_RuntimeException__init_0 = ($this, $message) => {
    jl_Exception__init_($this, $message);
},
jl_RuntimeException__init_1 = var_0 => {
    let var_1 = new jl_RuntimeException();
    jl_RuntimeException__init_0(var_1, var_0);
    return var_1;
},
jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException),
jl_ClassCastException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ClassCastException__init_0 = () => {
    let var_0 = new jl_ClassCastException();
    jl_ClassCastException__init_(var_0);
    return var_0;
},
ji_Serializable = $rt_classWithoutFields(0),
jl_Comparable = $rt_classWithoutFields(0),
jl_CharSequence = $rt_classWithoutFields(0);
function jl_String() {
    jl_Object.call(this);
    this.$hashCode2 = 0;
}
let jl_String_EMPTY_CHARS = null,
jl_String_EMPTY = null,
jl_String_CASE_INSENSITIVE_ORDER = null,
jl_String__init_4 = $this => {
    $this.$nativeString = "";
},
jl_String__init_5 = () => {
    let var_0 = new jl_String();
    jl_String__init_4(var_0);
    return var_0;
},
jl_String__init_3 = ($this, $characters) => {
    $this.$nativeString = $rt_charArrayToString($characters.data, 0, $characters.data.length);
},
jl_String__init_0 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_3(var_1, var_0);
    return var_1;
},
jl_String__init_7 = (var$0, var$1) => {
    var$0.$nativeString = var$1;
},
jl_String__init_1 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_7(var_1, var_0);
    return var_1;
},
jl_String__init_6 = (var$0, var$1, $offset, $count) => {
    ju_Objects_checkFromIndexSize($offset, $count, var$1.data.length);
    var$0.$nativeString = $rt_charArrayToString(var$1.data, $offset, $count);
},
jl_String__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jl_String();
    jl_String__init_6(var_3, var_0, var_1, var_2);
    return var_3;
},
jl_String__init_8 = ($this, $bytes) => {
    let var$2, var$3, var$4, var$5, var$6, $$je;
    var$2 = $bytes.data.length;
    jnci_UTF8Charset_$callClinit();
    var$3 = jnci_UTF8Charset_INSTANCE;
    var$4 = jn_ByteBuffer_wrap0($bytes, 0, var$2);
    a: {
        try {
            var$4 = jnc_CharsetDecoder_decode0(jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput(jnci_UTF8Charset_newDecoder(var$3), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), var$4);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_CharacterCodingException) {
                var$4 = $$je;
            } else {
                throw $$e;
            }
        }
        var$5 = new jl_AssertionError;
        jl_Throwable__init_0(var$5, $rt_s(40), var$4);
        $rt_throw(var$5);
    }
    var$6 = var$4.$array6 === null ? 0 : 1;
    if (var$6 && !var$4.$position0 && var$4.$limit0 == var$4.$capacityImpl())
        $bytes = jn_CharBuffer_array(var$4);
    else {
        $bytes = $rt_createCharArray(jn_Buffer_remaining(var$4));
        jn_CharBuffer_get(var$4, $bytes, 0, $bytes.data.length);
    }
    $this.$nativeString = $rt_fullArrayToString($bytes.data);
},
jl_String__init_2 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_8(var_1, var_0);
    return var_1;
},
jl_String_charAt = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$nativeString.length)
        return $this.$nativeString.charCodeAt($index);
    var$2 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jl_String_length = $this => {
    return $this.$nativeString.length;
},
jl_String_isEmpty = $this => {
    return $this.$nativeString.length ? 0 : 1;
},
jl_String_getChars = ($this, $srcBegin, $srcEnd, $dst, $dstBegin) => {
    let var$5, var$6;
    if ($srcBegin >= 0 && $srcBegin <= $srcEnd && $srcEnd <= $this.$nativeString.length && $dstBegin >= 0) {
        var$5 = $dst.data;
        $srcEnd = $srcEnd - $srcBegin | 0;
        if (($dstBegin + $srcEnd | 0) <= var$5.length) {
            $rt_stringToCharArray($this.$nativeString, $srcBegin, $dst.data, $dstBegin, $srcEnd);
            return;
        }
    }
    var$6 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$6);
    $rt_throw(var$6);
},
jl_String_startsWith0 = ($this, $prefix, $toffset) => {
    let $i, var$4, var$5;
    if (($toffset + $prefix.$nativeString.length | 0) > $this.$nativeString.length)
        return 0;
    $i = 0;
    while ($i < $prefix.$nativeString.length) {
        var$4 = jl_String_charAt($prefix, $i);
        var$5 = $toffset + 1 | 0;
        if (var$4 != jl_String_charAt($this, $toffset))
            return 0;
        $i = $i + 1 | 0;
        $toffset = var$5;
    }
    return 1;
},
jl_String_startsWith = ($this, $prefix) => {
    if ($this === $prefix)
        return 1;
    return jl_String_startsWith0($this, $prefix, 0);
},
jl_String_regionMatches = ($this, $toffset, $other, $ooffset, $len) => {
    let $i, var$6, var$7, var$8;
    if ($toffset >= 0 && $ooffset >= 0 && ($toffset + $len | 0) <= $this.$nativeString.length && ($ooffset + $len | 0) <= $other.$nativeString.length) {
        $i = 0;
        while ($i < $len) {
            var$6 = $toffset + 1 | 0;
            var$7 = jl_String_charAt($this, $toffset);
            var$8 = $ooffset + 1 | 0;
            if (var$7 != jl_String_charAt($other, $ooffset))
                return 0;
            $i = $i + 1 | 0;
            $toffset = var$6;
            $ooffset = var$8;
        }
        return 1;
    }
    return 0;
},
jl_String_endsWith = ($this, $suffix) => {
    let $j, $i, var$4, var$5;
    if ($this === $suffix)
        return 1;
    if ($suffix.$nativeString.length > $this.$nativeString.length)
        return 0;
    $j = 0;
    $i = $this.$nativeString.length - $suffix.$nativeString.length | 0;
    while ($i < $this.$nativeString.length) {
        var$4 = jl_String_charAt($this, $i);
        var$5 = $j + 1 | 0;
        if (var$4 != jl_String_charAt($suffix, $j))
            return 0;
        $i = $i + 1 | 0;
        $j = var$5;
    }
    return 1;
},
jl_String_indexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_max(0, $fromIndex);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i >= $this.$nativeString.length)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i >= ($this.$nativeString.length - 1 | 0))
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $hi && $this.$nativeString.charCodeAt(($i + 1 | 0)) == $lo)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_indexOf0 = ($this, $ch) => {
    return jl_String_indexOf($this, $ch, 0);
},
jl_String_lastIndexOf0 = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_min($fromIndex, $this.$nativeString.length - 1 | 0);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i < 0)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i < 1)
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $lo) {
            $fromIndex = $i - 1 | 0;
            if ($this.$nativeString.charCodeAt($fromIndex) == $hi)
                break;
        }
        $i = $i + (-1) | 0;
    }
    return $fromIndex;
},
jl_String_lastIndexOf = ($this, $ch) => {
    return jl_String_lastIndexOf0($this, $ch, $this.$nativeString.length - 1 | 0);
},
jl_String_indexOf1 = ($this, $str, $fromIndex) => {
    let $i, $toIndex, $j;
    $i = jl_Math_max(0, $fromIndex);
    $toIndex = $this.$nativeString.length - $str.$nativeString.length | 0;
    a: while (true) {
        if ($i > $toIndex)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$nativeString.length)
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_indexOf2 = ($this, $str) => {
    return jl_String_indexOf1($this, $str, 0);
},
jl_String_lastIndexOf1 = ($this, $str, $fromIndex) => {
    let $i, $j;
    $i = jl_Math_min($fromIndex, $this.$nativeString.length - $str.$nativeString.length | 0);
    a: while (true) {
        if ($i < 0)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$nativeString.length)
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + (-1) | 0;
    }
    return $i;
},
jl_String_substring = ($this, $beginIndex, $endIndex) => {
    let $length, var$4, var$5;
    $length = $this.$nativeString.length;
    var$4 = $rt_compare($beginIndex, $endIndex);
    if (!var$4)
        return jl_String_EMPTY;
    if (!$beginIndex && $endIndex == $length)
        return $this;
    if ($beginIndex >= 0 && var$4 <= 0 && $endIndex <= $length)
        return jl_String__init_1($this.$nativeString.substring($beginIndex, $endIndex));
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jl_String_substring0 = ($this, $beginIndex) => {
    return jl_String_substring($this, $beginIndex, $this.$nativeString.length);
},
jl_String_subSequence = ($this, $beginIndex, $endIndex) => {
    return jl_String_substring($this, $beginIndex, $endIndex);
},
jl_String_replace = ($this, $target, $replacement) => {
    let $sb, $i, $sz, var$6, var$7, $i_0, $j;
    if ($target === $replacement)
        return $this;
    $target = $target;
    if (jl_String_isEmpty($target)) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while ($i < $this.$nativeString.length) {
            jl_AbstractStringBuilder_append($sb, $replacement);
            jl_AbstractStringBuilder_append2($sb, jl_String_charAt($this, $i));
            $i = $i + 1 | 0;
        }
        jl_AbstractStringBuilder_append($sb, $replacement);
        return jl_AbstractStringBuilder_toString($sb);
    }
    if ($target.$nativeString.length == 1) {
        $sb = $replacement;
        if ($sb.$nativeString.length == 1) {
            $i = jl_String_charAt($target, 0);
            $sz = jl_String_charAt($sb, 0);
            if ($i != $sz) {
                var$6 = $rt_createCharArray($this.$nativeString.length);
                var$7 = var$6.data;
                $i_0 = 0;
                while ($i_0 < $this.$nativeString.length) {
                    var$7[$i_0] = jl_String_charAt($this, $i_0) != $i ? jl_String_charAt($this, $i_0) : $sz;
                    $i_0 = $i_0 + 1 | 0;
                }
                $this = jl_String__init_5();
                $this.$nativeString = $rt_fullArrayToString(var$6.data);
            }
            return $this;
        }
    }
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $sz = $this.$nativeString.length - $target.$nativeString.length | 0;
    $i_0 = 0;
    while ($i_0 <= $sz) {
        $j = 0;
        a: {
            while (true) {
                if ($j >= $target.$nativeString.length) {
                    jl_AbstractStringBuilder_append($sb, $replacement);
                    $i_0 = $i_0 + ($target.$nativeString.length - 1 | 0) | 0;
                    break a;
                }
                if (jl_String_charAt($this, $i_0 + $j | 0) != jl_String_charAt($target, $j))
                    break;
                $j = $j + 1 | 0;
            }
            jl_AbstractStringBuilder_append2($sb, jl_String_charAt($this, $i_0));
        }
        $i_0 = $i_0 + 1 | 0;
    }
    jl_AbstractStringBuilder_append($sb, jl_String_substring0($this, $i_0));
    return jl_AbstractStringBuilder_toString($sb);
},
jl_String_trim = $this => {
    let $lower, $upper;
    $lower = 0;
    $upper = $this.$nativeString.length - 1 | 0;
    a: {
        while ($lower <= $upper) {
            if (jl_String_charAt($this, $lower) > 32)
                break a;
            $lower = $lower + 1 | 0;
        }
    }
    while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
        $upper = $upper + (-1) | 0;
    }
    return jl_String_substring($this, $lower, $upper + 1 | 0);
},
jl_String_toString = $this => {
    return $this;
},
jl_String_toCharArray = $this => {
    let $array, var$2, $i, var$4;
    $array = $rt_createCharArray($this.$nativeString.length);
    var$2 = $array.data;
    $i = 0;
    var$4 = var$2.length;
    while ($i < var$4) {
        var$2[$i] = jl_String_charAt($this, $i);
        $i = $i + 1 | 0;
    }
    return $array;
},
jl_String_valueOf = $obj => {
    return $obj === null ? $rt_s(38) : $obj.$toString();
},
jl_String_valueOf0 = $i => {
    let var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append1(var$2, $i);
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_String_equals = ($this, $other) => {
    let $str;
    if ($this === $other)
        return 1;
    if (!($other instanceof jl_String))
        return 0;
    $str = $other;
    return $this.$nativeString !== $str.$nativeString ? 0 : 1;
},
jl_String_getBytes = $this => {
    let var$1, var$2, var$3, var$4, var$5, $$je;
    jnci_UTF8Charset_$callClinit();
    var$1 = jnci_UTF8Charset_INSTANCE;
    var$2 = jn_CharBuffer_wrap($rt_fastStringToCharArray($this.$nativeString));
    a: {
        try {
            var$1 = jnc_CharsetEncoder_encode0(jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(jnci_UTF8Charset_newEncoder(var$1), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), var$2);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_CharacterCodingException) {
                var$2 = $$je;
            } else {
                throw $$e;
            }
        }
        var$3 = new jl_AssertionError;
        jl_Throwable__init_0(var$3, $rt_s(40), var$2);
        $rt_throw(var$3);
    }
    var$4 = var$1.$array4 === null ? 0 : 1;
    if (var$4 && !var$1.$position0 && var$1.$limit0 == var$1.$capacityImpl())
        var$5 = jn_ByteBuffer_array(var$1);
    else {
        var$5 = $rt_createByteArray(jn_Buffer_remaining(var$1));
        jn_ByteBuffer_get(var$1, var$5, 0, var$5.data.length);
    }
    return var$5;
},
jl_String_hashCode = $this => {
    let $i;
    a: {
        if (!$this.$hashCode2) {
            $i = 0;
            while (true) {
                if ($i >= $this.$nativeString.length)
                    break a;
                $this.$hashCode2 = (31 * $this.$hashCode2 | 0) + $this.$nativeString.charCodeAt($i) | 0;
                $i = $i + 1 | 0;
            }
        }
    }
    return $this.$hashCode2;
},
jl_String_split = ($this, $regex) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this, 0);
},
jl_String_split0 = ($this, $regex, $limit) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this, $limit);
},
jl_String_replaceAll = ($this, $regex, $replacement) => {
    let var$3;
    $regex = jur_Pattern_matcher(jur_Pattern_compile($regex), $this);
    var$3 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_(var$3);
    jur_Matcher_reset($regex);
    while (jur_Matcher_find($regex)) {
        jur_Matcher_appendReplacement($regex, var$3, $replacement);
    }
    return jl_AbstractStringBuilder_toString(jur_Matcher_appendTail($regex, var$3));
},
jl_String__clinit_ = () => {
    jl_String_EMPTY_CHARS = $rt_createCharArray(0);
    jl_String_EMPTY = jl_String__init_5();
    jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_115_0;
},
jl_Number = $rt_classWithoutFields();
function jl_Integer() {
    jl_Number.call(this);
    this.$value0 = 0;
}
let jl_Integer_TYPE = null,
jl_Integer_integerCache = null,
jl_Integer__init_0 = ($this, $value) => {
    $this.$value0 = $value;
},
jl_Integer__init_ = var_0 => {
    let var_1 = new jl_Integer();
    jl_Integer__init_0(var_1, var_0);
    return var_1;
},
jl_Integer_toHexString = $i => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    if (!$i)
        var$2 = $rt_s(15);
    else {
        var$3 = (((32 - jl_Integer_numberOfLeadingZeros($i) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
        var$4 = $rt_createCharArray(var$3);
        var$5 = var$4.data;
        var$6 = (var$3 - 1 | 0) * 4 | 0;
        var$3 = 0;
        while (var$6 >= 0) {
            var$7 = var$3 + 1 | 0;
            var$5[var$3] = jl_Character_forDigit(($i >>> var$6 | 0) & 15, 16);
            var$6 = var$6 - 4 | 0;
            var$3 = var$7;
        }
        var$2 = jl_String__init_0(var$4);
    }
    return var$2;
},
jl_Integer_toString = $i => {
    return (jl_AbstractStringBuilder_append5(jl_AbstractStringBuilder__init_1(20), $i, 10)).$toString();
},
jl_Integer_parseInt0 = ($s, $radix) => {
    if ($s !== null)
        return jl_Integer_parseIntImpl($s, 0, $s.$nativeString.length, $radix);
    $s = new jl_NumberFormatException;
    jl_Exception__init_($s, $rt_s(41));
    $rt_throw($s);
},
jl_Integer_parseIntImpl = ($s, $beginIndex, $endIndex, $radix) => {
    let $negative, var$6, $value, $maxValue, var$9, $digit, var$11, var$12;
    if ($beginIndex == $endIndex) {
        $s = new jl_NumberFormatException;
        jl_Exception__init_($s, $rt_s(42));
        $rt_throw($s);
    }
    if ($radix >= 2 && $radix <= 36) {
        a: {
            $negative = 0;
            $s = $s;
            switch (jl_String_charAt($s, $beginIndex)) {
                case 43:
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                case 45:
                    $negative = 1;
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                default:
            }
            var$6 = $beginIndex;
        }
        $value = 0;
        $maxValue = 1 + (2147483647 / $radix | 0) | 0;
        if (var$6 == $endIndex) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s);
            $rt_throw($s);
        }
        while (var$6 < $endIndex) {
            var$9 = var$6 + 1 | 0;
            var$6 = jl_String_charAt($s, var$6);
            $digit = var$6 >= 48 && var$6 <= 57 ? var$6 - 48 | 0 : var$6 >= 97 && var$6 <= 122 ? (var$6 - 97 | 0) + 10 | 0 : var$6 >= 65 && var$6 <= 90 ? (var$6 - 65 | 0) + 10 | 0 : (-1);
            if ($digit < 0) {
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(var$12, $rt_s(43));
                jl_AbstractStringBuilder_append(var$12, $s);
                jl_Exception__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            if ($digit >= $radix) {
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(var$12, $rt_s(44));
                jl_AbstractStringBuilder_append1(var$12, $radix);
                jl_AbstractStringBuilder_append(var$12, $rt_s(35));
                jl_AbstractStringBuilder_append(var$12, $s);
                jl_Exception__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            if ($value > $maxValue) {
                $s = new jl_NumberFormatException;
                jl_Exception__init_($s, $rt_s(45));
                $rt_throw($s);
            }
            $value = $rt_imul($radix, $value) + $digit | 0;
            if ($value < 0) {
                if (var$9 == $endIndex && $value == (-2147483648) && $negative)
                    return (-2147483648);
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_AbstractStringBuilder_append(var$12, $rt_s(46));
                jl_AbstractStringBuilder_append(var$12, $s);
                jl_Exception__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            var$6 = var$9;
        }
        if ($negative)
            $value =  -$value | 0;
        return $value;
    }
    $s = new jl_NumberFormatException;
    var$11 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$11);
    jl_AbstractStringBuilder_append(var$11, $rt_s(47));
    jl_AbstractStringBuilder_append1(var$11, $radix);
    jl_Exception__init_($s, jl_AbstractStringBuilder_toString(var$11));
    $rt_throw($s);
},
jl_Integer_parseInt = $s => {
    return jl_Integer_parseInt0($s, 10);
},
jl_Integer_valueOf = $i => {
    let var$2, var$3;
    if ($i >= (-128) && $i <= 127) {
        a: {
            if (jl_Integer_integerCache === null) {
                jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                var$2 = 0;
                while (true) {
                    var$3 = jl_Integer_integerCache.data;
                    if (var$2 >= var$3.length)
                        break a;
                    var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                    var$2 = var$2 + 1 | 0;
                }
            }
        }
        return jl_Integer_integerCache.data[$i + 128 | 0];
    }
    return jl_Integer__init_($i);
},
jl_Integer_intValue = $this => {
    return $this.$value0;
},
jl_Integer_toString0 = $this => {
    return jl_Integer_toString($this.$value0);
},
jl_Integer_hashCode = $this => {
    return $this.$value0;
},
jl_Integer_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Integer && $other.$value0 == $this.$value0 ? 1 : 0;
},
jl_Integer_numberOfLeadingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i >>> 16 | 0;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 >>> 8 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i >>> 4 | 0;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 >>> 2 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i >>> 1 | 0)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_numberOfTrailingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i << 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 << 8;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i << 4;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 << 2;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i << 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer__clinit_ = () => {
    jl_Integer_TYPE = $rt_cls($rt_intcls);
};
function jl_AbstractStringBuilder() {
    let a = this; jl_Object.call(a);
    a.$buffer = null;
    a.$length1 = 0;
}
let jl_AbstractStringBuilder__init_ = $this => {
    jl_AbstractStringBuilder__init_0($this, 16);
},
jl_AbstractStringBuilder__init_2 = () => {
    let var_0 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_(var_0);
    return var_0;
},
jl_AbstractStringBuilder__init_0 = ($this, $capacity) => {
    $this.$buffer = $rt_createCharArray($capacity);
},
jl_AbstractStringBuilder__init_1 = var_0 => {
    let var_1 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_0(var_1, var_0);
    return var_1;
},
jl_AbstractStringBuilder_append = ($this, $obj) => {
    return $this.$insert($this.$length1, $obj);
},
jl_AbstractStringBuilder_append0 = ($this, $string) => {
    return $this.$insert0($this.$length1, $string);
},
jl_AbstractStringBuilder_insert0 = ($this, $index, $string) => {
    let $i, $i_0, var$5, var$6;
    if ($index >= 0 && $index <= $this.$length1) {
        if ($string === null)
            $string = $rt_s(38);
        else if (jl_String_isEmpty($string))
            return $this;
        $this.$ensureCapacity($this.$length1 + $string.$nativeString.length | 0);
        $i = $this.$length1 - 1 | 0;
        while ($i >= $index) {
            $this.$buffer.data[$i + $string.$nativeString.length | 0] = $this.$buffer.data[$i];
            $i = $i + (-1) | 0;
        }
        $this.$length1 = $this.$length1 + $string.$nativeString.length | 0;
        $i_0 = 0;
        while ($i_0 < $string.$nativeString.length) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = jl_String_charAt($string, $i_0);
            $i_0 = $i_0 + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $string = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_($string);
    $rt_throw($string);
},
jl_AbstractStringBuilder_append1 = ($this, $value) => {
    return jl_AbstractStringBuilder_append5($this, $value, 10);
},
jl_AbstractStringBuilder_append5 = ($this, $value, $radix) => {
    return jl_AbstractStringBuilder_insert3($this, $this.$length1, $value, $radix);
},
jl_AbstractStringBuilder_insert3 = ($this, $target, $value, $radix) => {
    let $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
    $positive = 1;
    if ($value < 0) {
        $positive = 0;
        $value =  -$value | 0;
    }
    a: {
        if ($rt_ucmp($value, $radix) < 0) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$5 = $this.$buffer.data;
                var$6 = $target + 1 | 0;
                var$5[$target] = 45;
                $target = var$6;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
        } else {
            $pos = 1;
            $sz = 1;
            $posLimit = $rt_udiv((-1), $radix);
            b: {
                while (true) {
                    var$10 = $rt_imul($pos, $radix);
                    if ($rt_ucmp(var$10, $value) > 0) {
                        var$10 = $pos;
                        break b;
                    }
                    $sz = $sz + 1 | 0;
                    if ($rt_ucmp(var$10, $posLimit) > 0)
                        break;
                    $pos = var$10;
                }
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                $positive = $target;
            else {
                var$5 = $this.$buffer.data;
                $positive = $target + 1 | 0;
                var$5[$target] = 45;
            }
            while (true) {
                if (!var$10)
                    break a;
                var$5 = $this.$buffer.data;
                $target = $positive + 1 | 0;
                var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                $value = $rt_umod($value, var$10);
                var$10 = $rt_udiv(var$10, $radix);
                $positive = $target;
            }
        }
    }
    return $this;
},
jl_AbstractStringBuilder_insert4 = ($this, $target, $value) => {
    let $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
    $mantissa = $rt_compare($value, 0.0);
    if (!$mantissa) {
        if (1.0 / $value === Infinity) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 48;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 46;
            var$4[$target] = 48;
            return $this;
        }
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 45;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 48;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 46;
        var$4[$mantissa] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 78;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 97;
        var$4[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($mantissa > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $mantissa = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 73;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 110;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 102;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 110;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 116;
        var$4[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
    otcit_FloatAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa0;
    $exp = $number.$exponent0;
    $negative = $number.$sign2;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 9;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    $leadingZeros = 0;
    $leadingZero = 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else {
            $intPart = 0;
            $leadingZeros = ( -$exp | 0) - 1 | 0;
            $leadingZero = 1;
            $sz = $sz + 1 | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
    if (!$negative)
        $negative = $target;
    else {
        var$4 = $this.$buffer.data;
        $negative = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = 100000000;
    if ($leadingZero) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 48;
        $negative = $target + 1 | 0;
        var$4[$target] = 46;
        while (true) {
            $target = $leadingZeros + (-1) | 0;
            if ($leadingZeros <= 0)
                break;
            $intDigit = $negative + 1 | 0;
            var$4[$negative] = 48;
            $leadingZeros = $target;
            $negative = $intDigit;
        }
    }
    $i = 0;
    while ($i < $digits) {
        if ($pos <= 0)
            $intDigit = 0;
        else {
            $intDigit = $mantissa / $pos | 0;
            $mantissa = $mantissa % $pos | 0;
        }
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $negative = $target;
        else {
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = $pos / 10 | 0;
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 69;
        if ($exp >= 0)
            $mantissa = $target;
        else {
            $exp =  -$exp | 0;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        if ($exp < 10)
            $intDigit = $mantissa;
        else {
            $intDigit = $mantissa + 1 | 0;
            var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
},
jl_AbstractStringBuilder_trailingDecimalZeros = $n => {
    let $result, $zeros, var$4;
    if (!($n % 1000000000 | 0))
        return 9;
    $result = 0;
    $zeros = 1;
    if (!($n % 100000000 | 0)) {
        $result = 8;
        $zeros = 100000000;
    }
    var$4 = $zeros * 10000 | 0;
    if ($n % var$4 | 0)
        var$4 = $zeros;
    else
        $result = $result | 4;
    $zeros = var$4 * 100 | 0;
    if ($n % $zeros | 0)
        $zeros = var$4;
    else
        $result = $result | 2;
    if (!($n % ($zeros * 10 | 0) | 0))
        $result = $result | 1;
    return $result;
},
jl_AbstractStringBuilder_append2 = ($this, $c) => {
    return $this.$insert2($this.$length1, $c);
},
jl_AbstractStringBuilder_insert = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
    $this.$buffer.data[$index] = $c;
    return $this;
},
jl_AbstractStringBuilder_insert1 = ($this, $index, $obj) => {
    return $this.$insert0($index, $obj === null ? $rt_s(38) : $obj.$toString());
},
jl_AbstractStringBuilder_ensureCapacity = ($this, $capacity) => {
    let var$2, $newLength;
    var$2 = $this.$buffer.data.length;
    if (var$2 >= $capacity)
        return;
    $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
    $this.$buffer = ju_Arrays_copyOf1($this.$buffer, $newLength);
},
jl_AbstractStringBuilder_toString = $this => {
    return jl_String__init_($this.$buffer, 0, $this.$length1);
},
jl_AbstractStringBuilder_append4 = ($this, $chars, $offset, $len) => {
    return $this.$insert3($this.$length1, $chars, $offset, $len);
},
jl_AbstractStringBuilder_insert2 = ($this, $index, $chars, $offset, $len) => {
    let var$5, var$6, var$7, var$8;
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
    var$5 = $len + $offset | 0;
    while ($offset < var$5) {
        var$6 = $chars.data;
        var$7 = $this.$buffer.data;
        $len = $index + 1 | 0;
        var$8 = $offset + 1 | 0;
        var$7[$index] = var$6[$offset];
        $index = $len;
        $offset = var$8;
    }
    return $this;
},
jl_AbstractStringBuilder_append3 = ($this, $chars) => {
    return $this.$append6($chars, 0, $chars.data.length);
},
jl_AbstractStringBuilder_insertSpace = ($this, $start, $end) => {
    let var$3, $sz, $i, var$6;
    var$3 = $this.$length1;
    $sz = var$3 - $start | 0;
    $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
    $i = $sz - 1 | 0;
    while ($i >= 0) {
        var$6 = $this.$buffer.data;
        var$6[$end + $i | 0] = var$6[$start + $i | 0];
        $i = $i + (-1) | 0;
    }
    $this.$length1 = $this.$length1 + ($end - $start | 0) | 0;
},
jl_AbstractStringBuilder_substring = ($this, $from, $to) => {
    let var$3;
    if ($from <= $to && $from >= 0 && $to <= $this.$length1)
        return jl_String__init_($this.$buffer, $from, $to - $from | 0);
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$3);
    $rt_throw(var$3);
},
jl_Appendable = $rt_classWithoutFields(0),
jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuilder__init_0 = $this => {
    jl_AbstractStringBuilder__init_($this);
},
jl_StringBuilder__init_ = () => {
    let var_0 = new jl_StringBuilder();
    jl_StringBuilder__init_0(var_0);
    return var_0;
},
jl_StringBuilder_append = ($this, $obj) => {
    jl_AbstractStringBuilder_append($this, $obj);
    return $this;
},
jl_StringBuilder_append0 = ($this, $string) => {
    jl_AbstractStringBuilder_append0($this, $string);
    return $this;
},
jl_StringBuilder_append2 = ($this, $value) => {
    jl_AbstractStringBuilder_append1($this, $value);
    return $this;
},
jl_StringBuilder_append1 = ($this, $value) => {
    let var$2;
    var$2 = $this.$length1;
    jl_AbstractStringBuilder_insert4($this, var$2, $value);
    return $this;
},
jl_StringBuilder_append3 = ($this, $c) => {
    jl_AbstractStringBuilder_append2($this, $c);
    return $this;
},
jl_StringBuilder_append5 = ($this, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_append4($this, $chars, $offset, $len);
    return $this;
},
jl_StringBuilder_append4 = ($this, $b) => {
    let var$2, var$3, var$4;
    var$2 = $this.$length1;
    var$3 = $this;
    var$4 = !$b ? $rt_s(48) : $rt_s(49);
    jl_AbstractStringBuilder_insert0(var$3, var$2, var$4);
    return $this;
},
jl_StringBuilder_delete = ($this, $start, $end) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    if ($start >= 0) {
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0) {
            var$4 = $this.$length1;
            if ($start <= var$4) {
                if (var$3) {
                    if ($end > var$4)
                        $end = var$4;
                    var$5 = var$4 - $end | 0;
                    $this.$length1 = var$4 - ($end - $start | 0) | 0;
                    var$4 = 0;
                    while (var$4 < var$5) {
                        var$6 = $this.$buffer.data;
                        var$3 = $start + 1 | 0;
                        var$7 = $end + 1 | 0;
                        var$6[$start] = var$6[$end];
                        var$4 = var$4 + 1 | 0;
                        $start = var$3;
                        $end = var$7;
                    }
                }
                return $this;
            }
        }
    }
    var$8 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$8);
    $rt_throw(var$8);
},
jl_StringBuilder_deleteCharAt = ($this, $index) => {
    let var$2, var$3, var$4, var$5;
    if ($index >= 0) {
        var$2 = $this.$length1;
        if ($index < var$2) {
            var$2 = var$2 - 1 | 0;
            $this.$length1 = var$2;
            while ($index < var$2) {
                var$3 = $this.$buffer.data;
                var$4 = $index + 1 | 0;
                var$3[$index] = var$3[var$4];
                $index = var$4;
            }
            return $this;
        }
    }
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jl_StringBuilder_substring = ($this, var$1, var$2) => {
    return jl_AbstractStringBuilder_substring($this, var$1, var$2);
},
jl_StringBuilder_subSequence = ($this, var$1, var$2) => {
    return $this.$substring0(var$1, var$2);
},
jl_StringBuilder_insert0 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuilder_append6 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append4($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuilder_length = $this => {
    return $this.$length1;
},
jl_StringBuilder_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuilder_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuilder_insert2 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2);
    return $this;
},
jl_StringBuilder_insert1 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
},
jl_StringBuilder_insert = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2);
    return $this;
},
otcir_FieldInfo = $rt_classWithoutFields(),
otcir_FieldInfo__init_ = $this => {
    return;
},
otcir_FieldInfo__init_0 = () => {
    let var_0 = new otcir_FieldInfo();
    otcir_FieldInfo__init_(var_0);
    return var_0;
},
otcir_MethodInfo = $rt_classWithoutFields(),
otcir_MethodInfo__init_ = $this => {
    return;
};
let otcir_MethodInfo__init_0 = () => {
    let var_0 = new otcir_MethodInfo();
    otcir_MethodInfo__init_(var_0);
    return var_0;
},
otcir_ClassList = $rt_classWithoutFields(),
otcir_ClassList__init_ = $this => {
    return;
},
otcir_ClassList__init_0 = () => {
    let var_0 = new otcir_ClassList();
    otcir_ClassList__init_(var_0);
    return var_0;
},
pst_TeaVMLauncher = $rt_classWithoutFields(),
pst_TeaVMLauncher_$callClinit = () => {
    pst_TeaVMLauncher_$callClinit = $rt_eraseClinit(pst_TeaVMLauncher);
    pst_TeaVMLauncher__clinit_();
},
pst_TeaVMLauncher__init_ = $this => {
    pst_TeaVMLauncher_$callClinit();
},
pst_TeaVMLauncher__init_0 = () => {
    let var_0 = new pst_TeaVMLauncher();
    pst_TeaVMLauncher__init_(var_0);
    return var_0;
},
pst_TeaVMLauncher_main = $args => {
    let $config, var$3, var$4;
    pst_TeaVMLauncher_$callClinit();
    $config = new cgxgbt_TeaApplicationConfiguration;
    $config.$useGL30 = 0;
    $config.$preloadAssets = 1;
    $config.$storagePrefix = $rt_s(50);
    $config.$localStoragePrefix = $rt_s(51);
    $config.$shouldEncodePreference = 0;
    $config.$showDownloadLogs = 0;
    $config.$width3 = (-1);
    $config.$height0 = (-1);
    $config.$padHorizontal = 0;
    $config.$padVertical = 0;
    $config.$stencil = 0;
    $config.$antialiasing = 0;
    $config.$alpha = 0;
    $config.$premultipliedAlpha = 0;
    $config.$preserveDrawingBuffer = 0;
    $config.$useDebugGL = 0;
    $config.$usePhysicalPixels = 0;
    $config.$powerPreference = $rt_s(52);
    $config.$baseUrlProvider = new cgxgbtu_TeaDefaultBaseUrlProvider;
    $config.$canvasID = $rt_s(53);
    $config.$width3 = 1280;
    $config.$height0 = 800;
    var$3 = new cgxgbt_TeaApplication;
    var$4 = new ps_Adapter;
    var$3.$lifecycleListeners = cbgu_Array__init_0(4);
    var$3.$initState = cgxgbt_TeaApplication$AppState_INIT;
    var$3.$lastWidth = (-1);
    var$3.$lastHeight = 1;
    var$3.$logLevel = 2;
    var$3.$prefs = cbgu_ObjectMap__init_();
    var$3.$runnables = cbgu_Array__init_();
    var$3.$runnablesHelper = cbgu_Array__init_();
    var$3.$window = cgxgbtdi_TeaWindow_get();
    var$3.$config = $config;
    var$3.$queueAppListener = var$4;
    cgxgbt_TeaApplication_init(var$3);
},
pst_TeaVMLauncher__clinit_ = () => {
    cbgu_ObjectMap__clinit_();
    jl_String__clinit_();
    jl_Float__clinit_();
    jl_AbstractStringBuilder$Constants__clinit_();
    jl_Integer__clinit_();
    otcit_FloatAnalyzer__clinit_();
    jl_Long__clinit_();
    cbgm_MathUtils__clinit_();
    jl_Character__clinit_();
    jl_Double__clinit_();
    jl_Boolean__clinit_();
    ju_Calendar__clinit_();
    cbgu_ArraySupplier__clinit_();
    cbgg_Color__clinit_();
    cbggg_NinePatch__clinit_();
    cbgg_GLTexture__clinit_();
    cgxgbt_TeaApplication__clinit_();
    cgxgbt_TeaApplication$AppState__clinit_();
    cbg_Application$ApplicationType__clinit_();
    ju_Hashtable__clinit_();
    cbggg_GLVersion$Type__clinit_();
    jur_AbstractSet__clinit_();
    jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    jur_AbstractCharClass__clinit_();
    jl_Thread__clinit_();
    cbgm_Vector2__clinit_();
    pss_Control__clinit_();
    cbgm_Quaternion__clinit_();
    cgxgbta_AssetType__clinit_();
    ccv_VfxManager__clinit_();
    cbgg_Cursor$SystemCursor__clinit_();
    cbgg_Pixmap$Format__clinit_();
    ccveu_MixEffect$Method__clinit_();
    psm_Menu$RepeatControl__clinit_();
    pse_Episode__clinit_();
    cbgu_StringBuilder__clinit_();
    jn_ByteOrder__clinit_();
    cgxgbt_TeaTool__clinit_();
    ccve_GaussianBlurEffect$Tap__clinit_();
    ccveu_GammaThresholdEffect$Type__clinit_();
    pse_S01E01Episode__clinit_();
    cbgg_Texture$TextureWrap__clinit_();
    cbgg_Texture$TextureFilter__clinit_();
    ses_FilledPolygonDrawer__clinit_();
    ses_DrawerTemplate__clinit_();
    ses_PathDrawer__clinit_();
    ses_PolygonDrawer__clinit_();
    cbgu_I18NBundle__clinit_();
    cbgg_Mesh$VertexDataType__clinit_();
    ccvu_ViewportQuadMesh__clinit_();
    cbgm_GeometryUtils__clinit_();
    cbgu_StreamUtils__clinit_();
    cbgg_Pixmap$Blending__clinit_();
    cbgg_Pixmap$Filter__clinit_();
    cbg_Files$FileType__clinit_();
    ses_JoinType__clinit_();
    cbggg_BitmapFontCache__clinit_();
    cbgu_JsonReader__clinit_();
    cgxgbtf_HEXCoder__clinit_();
    otcit_FloatSynthesizer__clinit_();
    jt_DecimalFormat__clinit_();
    jnc_CodingErrorAction__clinit_();
    cbgg_TextureData$TextureDataType__clinit_();
    cbggg_MipMapGenerator__clinit_();
    jm_RoundingMode__clinit_();
    ju_GregorianCalendar__clinit_();
    jnc_CoderResult__clinit_();
    cbgm_MathUtils$Sin__clinit_();
    otcit_DoubleSynthesizer__clinit_();
    jm_BigInteger__clinit_();
    otcit_DoubleAnalyzer__clinit_();
    jt_AttributedCharacterIterator$Attribute__clinit_();
    jt_MessageFormat$Field__clinit_();
    psl_BulletLogic__clinit_();
    ses_ShapeUtils__clinit_();
    jt_DecimalFormat$Constants__clinit_();
    ses_Joiner__clinit_();
    ccvu_CommonUtils__clinit_();
    jm_Conversion__clinit_();
},
otci_IntegerUtil = $rt_classWithoutFields(),
otci_IntegerUtil__init_ = $this => {
    return;
},
otci_IntegerUtil__init_0 = () => {
    let var_0 = new otci_IntegerUtil();
    otci_IntegerUtil__init_(var_0);
    return var_0;
};
function cgxgbt_TeaApplicationConfiguration() {
    let a = this; jl_Object.call(a);
    a.$useGL30 = 0;
    a.$windowListener = null;
    a.$preloadAssets = 0;
    a.$storagePrefix = null;
    a.$localStoragePrefix = null;
    a.$shouldEncodePreference = 0;
    a.$showDownloadLogs = 0;
    a.$canvasID = null;
    a.$width3 = 0;
    a.$height0 = 0;
    a.$padHorizontal = 0;
    a.$padVertical = 0;
    a.$stencil = 0;
    a.$antialiasing = 0;
    a.$alpha = 0;
    a.$premultipliedAlpha = 0;
    a.$preserveDrawingBuffer = 0;
    a.$useDebugGL = 0;
    a.$usePhysicalPixels = 0;
    a.$powerPreference = null;
    a.$preloadListener = null;
    a.$baseUrlProvider = null;
}
let cgxgbt_TeaApplicationConfiguration_isAutoSizeApplication = $this => {
    return !$this.$width3 && !$this.$height0 ? 1 : 0;
},
cbg_Application = $rt_classWithoutFields(0),
jl_Runnable = $rt_classWithoutFields(0);
function cgxgbt_TeaApplication() {
    let a = this; jl_Object.call(a);
    a.$delayInitCount = 0;
    a.$graphics = null;
    a.$input = null;
    a.$files = null;
    a.$net = null;
    a.$audio = null;
    a.$config = null;
    a.$queueAppListener = null;
    a.$appListener = null;
    a.$lifecycleListeners = null;
    a.$window = null;
    a.$initState = null;
    a.$lastWidth = 0;
    a.$lastHeight = 0;
    a.$logger = null;
    a.$logLevel = 0;
    a.$assetLoader = null;
    a.$prefs = null;
    a.$clipboard = null;
    a.$runnables = null;
    a.$runnablesHelper = null;
}
let cgxgbt_TeaApplication_WEB_SCRIPT_PATH = null,
cgxgbt_TeaApplication_WEB_ASSET_PATH = null,
cgxgbt_TeaApplication_agentInfo = null,
cgxgbt_TeaApplication_init = $this => {
    let $assetDownload, $hostPageBaseURL, var$3, var$4, $map, $instance, var$7, var$8;
    cgxgbt_TeaApplication_agentInfo = cgxgbta_TeaWebAgent_createAgent$js_body$_1();
    jl_System_setProperty($rt_s(54), $rt_s(9));
    jl_System_setProperty($rt_s(55), $rt_str(cgxgbt_TeaApplication_agentInfo.userAgent));
    if (cgxgbt_TeaApplication_agentInfo.windows ? 1 : 0)
        jl_System_setProperty($rt_s(56), $rt_s(57));
    else if (cgxgbt_TeaApplication_agentInfo.macOS ? 1 : 0)
        jl_System_setProperty($rt_s(56), $rt_s(58));
    else if (!(cgxgbt_TeaApplication_agentInfo.linux ? 1 : 0))
        jl_System_setProperty($rt_s(56), $rt_s(59));
    else
        jl_System_setProperty($rt_s(56), $rt_s(60));
    $this.$graphics = cgxgbt_TeaGraphics__init_($this.$config);
    $assetDownload = new cgxgbta_AssetDownloadImpl;
    $assetDownload.$showLogs = $this.$config.$showDownloadLogs;
    cgxgbta_AssetInstance_downloaderInstance = $assetDownload;
    $hostPageBaseURL = $rt_str((cgxgbtdi_TeaWindow_get()).$window0.location.href);
    var$3 = $hostPageBaseURL.$nativeString.length - $rt_s(61).$nativeString.length | 0;
    var$4 = 0;
    $map = $rt_s(61);
    $instance = $rt_s(61);
    a: {
        while (var$4 <= var$3) {
            var$7 = 0;
            while (true) {
                if (var$7 >= $map.$nativeString.length) {
                    var$3 = 1;
                    break a;
                }
                if (jl_String_charAt($hostPageBaseURL, var$4 + var$7 | 0) != jl_String_charAt($instance, var$7))
                    break;
                var$7 = var$7 + 1 | 0;
            }
            var$4 = var$4 + 1 | 0;
        }
        var$3 = 0;
    }
    if (var$3)
        $hostPageBaseURL = jl_String_replace(jl_String_replace(jl_String_replace($hostPageBaseURL, $rt_s(62), $rt_s(9)), $rt_s(63), $rt_s(9)), $rt_s(64), $rt_s(9));
    var$3 = jl_String_indexOf0($hostPageBaseURL, 63);
    if (var$3 >= 0)
        $hostPageBaseURL = jl_String_substring($hostPageBaseURL, 0, var$3);
    $instance = new cgxgbta_AssetLoadImpl;
    $map = $this.$graphics.$canvas0;
    $instance.$assetTotal = (-1);
    $instance.$assetDownloader = $assetDownload;
    $instance.$baseUrl = $hostPageBaseURL;
    $instance.$assetInQueue = ju_HashSet__init_2();
    var$8 = $this.$config;
    if (var$8.$windowListener !== null) {
        $hostPageBaseURL = $map.ownerDocument;
        $map = new cgxgbta_AssetLoadImpl$1;
        $map.$this$038 = $instance;
        $hostPageBaseURL.addEventListener("dragenter", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"), !!0);
        $map = new cgxgbta_AssetLoadImpl$2;
        $map.$this$057 = $instance;
        $hostPageBaseURL.addEventListener("dragover", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"), !!0);
        $map = new cgxgbta_AssetLoadImpl$3;
        $map.$this$010 = $instance;
        $map.$val$config0 = var$8;
        $hostPageBaseURL.addEventListener("drop", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"));
    }
    $this.$assetLoader = $instance;
    cgxgbta_AssetInstance_instance = $instance;
    if (cgxjc_JMultiplatform_platformMap === null)
        cgxjc_JMultiplatform_platformMap = cgxjc_JMultiplatform__init_0();
    $map = cgxjc_JMultiplatform_platformMap.$map1;
    cgxjc_JPlatformMap_put($map, cgxgbt_TeaApplication_WEB_SCRIPT_PATH, cgxgbta_AssetLoadImpl_getScriptUrl($this.$assetLoader));
    cgxjc_JPlatformMap_put($map, cgxgbt_TeaApplication_WEB_ASSET_PATH, cgxgbta_AssetLoadImpl_getAssetUrl($this.$assetLoader));
    $this.$input = cgxgbt_TeaInput__init_($this, $this.$graphics.$canvas0);
    $this.$files = cgxgbt_TeaFiles__init_0($this.$config, $this);
    $this.$net = cgxgbt_TeaNet__init_0();
    $this.$logger = new cgxgbt_TeaApplicationLogger;
    $this.$clipboard = cgxgbt_TeaClipboard__init_0();
    $map = $this.$assetLoader;
    $instance = new cgxgbt_TeaApplication$4;
    $instance.$this$064 = $this;
    cgxgbta_AssetLoadImpl_loadScript($map, $rt_s(65), $instance);
    cgxgbt_TeaApplication_initSound($this);
    $assetDownload = $this.$config.$preloadListener;
    if ($assetDownload !== null)
        $assetDownload.$onPreload($this.$assetLoader);
    cbg_Gdx_app = $this;
    $assetDownload = $this.$graphics;
    cbg_Gdx_graphics = $assetDownload;
    $instance = $assetDownload.$gl20;
    cbg_Gdx_gl = $instance;
    cbg_Gdx_gl20 = $instance;
    cbg_Gdx_gl30 = $assetDownload.$gl30;
    cbg_Gdx_input = $this.$input;
    cbg_Gdx_files = $this.$files;
    cbg_Gdx_net = $this.$net;
    $assetDownload = cgxgbt_DefaultTeaAudio__init_0();
    $this.$audio = $assetDownload;
    cbg_Gdx_audio = $assetDownload;
    cgxgbtdi_TeaWindow_addEventListener($this.$window, $rt_s(66), otji_JSWrapper_unwrap(cgxgbt_TeaApplication$1__init_0($this)));
    $assetDownload = cgxgbtdi_TeaWindow_getDocument($this.$window);
    $map = cgxgbt_TeaApplication$2__init_0($this);
    $assetDownload.addEventListener("visibilitychange", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"));
    if (cgxgbt_TeaApplicationConfiguration_isAutoSizeApplication($this.$config))
        cgxgbtdi_TeaWindow_addEventListener($this.$window, $rt_s(67), otji_JSWrapper_unwrap(cgxgbt_TeaApplication$3__init_0($this)));
    cgxgbtdi_TeaWindow_requestAnimationFrame($this.$window, $this);
},
cgxgbt_TeaApplication_run = $this => {
    let $state, $queue, $element, $total, $percentage, $progressBar, $t, $$je;
    $state = $this.$initState;
    a: {
        try {
            b: {
                c: {
                    d: {
                        cgxgbt_TeaApplication$6_$callClinit();
                        switch (cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState.data[jl_Enum_ordinal($state)]) {
                            case 1:
                                if ($this.$delayInitCount)
                                    break b;
                                $this.$initState = cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS;
                                break b;
                            case 2:
                                break;
                            case 3:
                                break c;
                            case 4:
                                break d;
                            default:
                                break b;
                        }
                        cgxgbta_AssetLoadImpl_preload($this.$assetLoader, $this.$config, $rt_s(68));
                        $this.$initState = cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS;
                        break b;
                    }
                    if ($this.$queueAppListener !== null) {
                        $state = $this.$appListener;
                        if ($state !== null) {
                            cbg_ApplicationAdapter_pause($state);
                            ps_Adapter_dispose($this.$appListener);
                        }
                        cgxgbt_TeaInput_setInputProcessor($this.$input, null);
                        cgxgbt_TeaInput_reset($this.$input);
                        cbgu_Array_clear($this.$runnables);
                        $this.$appListener = $this.$queueAppListener;
                        $this.$queueAppListener = null;
                        $this.$initState = cgxgbt_TeaApplication$AppState_APP_CREATE;
                        $this.$graphics.$frameId = Long_ZERO;
                    }
                    $state = $this.$appListener;
                    if ($state === null)
                        break b;
                    cgxgbt_TeaApplication_step($this, $state);
                    break b;
                }
                $queue = cgxgbta_AssetLoadImpl_getQueue($this.$assetLoader);
                if (!$queue) {
                    $this.$initState = cgxgbt_TeaApplication$AppState_APP_LOOP;
                    $element = window.document.getElementById("progress");
                    if ($element !== null)
                        $element.style.setProperty("display", "none");
                } else {
                    $total = $this.$assetLoader.$assetTotal;
                    if ($total > 0) {
                        $percentage = 25 + ((75 * ($total - $queue | 0) | 0) / $total | 0) | 0;
                        $progressBar = window.document.getElementById("progress-bar");
                        if ($progressBar !== null) {
                            $t = $progressBar.style;
                            $element = jl_StringBuilder__init_();
                            jl_StringBuilder_append3(jl_StringBuilder_append2($element, $percentage), 37);
                            $t.setProperty("width", $rt_ustr(jl_StringBuilder_toString($element)));
                        }
                    }
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Throwable) {
                $t = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        cgxgbtdi_TeaWindow_requestAnimationFrame($this.$window, $this);
        return;
    }
    jl_Throwable_printStackTrace0($t);
    $rt_throw($t);
},
cgxgbt_TeaApplication_step = ($this, $appListener) => {
    let var$2, var$3, $resizeBypass, $width, $height, $i, var$8, var$9, var$10, var$11;
    $appListener = $this.$graphics;
    var$2 = jl_System_currentTimeMillis();
    var$3 = Long_toNumber(Long_sub(var$2, $appListener.$lastTimeStamp)) / 1000.0;
    $appListener.$deltaTime = var$3;
    $appListener.$lastTimeStamp = var$2;
    var$3 = $appListener.$time0 + var$3;
    $appListener.$time0 = var$3;
    $resizeBypass = $appListener.$frames + 1 | 0;
    $appListener.$frames = $resizeBypass;
    if (var$3 > 1.0) {
        $appListener.$fps = $resizeBypass;
        $appListener.$time0 = 0.0;
        $appListener.$frames = 0;
    }
    $width = cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics);
    $height = cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics);
    $resizeBypass = 0;
    if ($this.$initState === cgxgbt_TeaApplication$AppState_APP_CREATE) {
        $this.$initState = cgxgbt_TeaApplication$AppState_APP_LOOP;
        pss_Section_createInitialize();
        $resizeBypass = 1;
    }
    if (!($width == $this.$lastWidth && $height == $this.$lastHeight && !$resizeBypass)) {
        $this.$lastWidth = $width;
        $this.$lastHeight = $height;
        cbg_Gdx_gl.$glViewport(0, 0, $width, $height);
    }
    cbgu_Array_addAll($this.$runnablesHelper, $this.$runnables);
    cbgu_Array_clear($this.$runnables);
    $i = 0;
    while (true) {
        $appListener = $this.$runnablesHelper;
        if ($i >= $appListener.$size0)
            break;
        cgxgbt_TeaApplication_run(cbgu_Array_get($appListener, $i));
        $i = $i + 1 | 0;
    }
    cbgu_Array_clear($appListener);
    $appListener = $this.$graphics;
    var$2 = Long_add($appListener.$frameId, Long_fromInt(1));
    $appListener.$frameId = var$2;
    if (Long_gt(var$2, Long_fromInt(60))) {
        pss_Section_$callClinit();
        pss_Section_control.$process();
        var$3 = pss_Section_elapsedTime;
        var$8 = cbg_Gdx_graphics.$deltaTime;
        pss_Section_frameTime = var$8;
        pss_Section_elapsedTime = var$3 + var$8;
        if (pss_Section_progress === 1.0)
            pss_Section_current.$update();
        $appListener = pss_Section_vfxManager;
        var$9 = cbgg_Color_CLEAR;
        if ($appListener.$applyingEffects) {
            $appListener = new jl_IllegalStateException;
            jl_Exception__init_($appListener, $rt_s(69));
            $rt_throw($appListener);
        }
        if ($appListener.$capturing0) {
            var$9 = new jl_IllegalStateException;
            jl_Exception__init_(var$9, $rt_s(70));
            $rt_throw(var$9);
        }
        $appListener = $appListener.$pingPongWrapper;
        var$3 = var$9.$r;
        var$8 = var$9.$g;
        var$10 = var$9.$b;
        var$11 = var$9.$a;
        $resizeBypass = $appListener.$capturing;
        if (!$resizeBypass)
            ccvf_VfxPingPongWrapper_begin($appListener);
        cbg_Gdx_gl.$glClearColor(var$3, var$8, var$10, var$11);
        cbg_Gdx_gl.$glClear(16384);
        ccvf_VfxPingPongWrapper_swap($appListener);
        cbg_Gdx_gl.$glClear(16384);
        if (!$resizeBypass)
            ccvf_VfxPingPongWrapper_end($appListener);
        $appListener = pss_Section_vfxManager;
        if ($appListener.$applyingEffects) {
            var$9 = new jl_IllegalStateException;
            jl_Exception__init_(var$9, $rt_s(71));
            $rt_throw(var$9);
        }
        if (!$appListener.$capturing0) {
            $appListener.$capturing0 = 1;
            ccvf_VfxPingPongWrapper_begin($appListener.$pingPongWrapper);
        }
        cbg_Gdx_gl.$glClear(16384);
        $appListener = pss_Section_batch;
        if ($appListener.$drawing) {
            var$9 = new jl_IllegalStateException;
            jl_Exception__init_(var$9, $rt_s(72));
            $rt_throw(var$9);
        }
        $appListener.$renderCalls = 0;
        cbg_Gdx_gl.$glDepthMask(0);
        var$9 = $appListener.$customShader;
        if (var$9 !== null)
            var$9.$bind();
        else
            cbggg_ShaderProgram_bind($appListener.$shader);
        cbggg_PolygonSpriteBatch_setupMatrices($appListener);
        $appListener.$drawing = 1;
        var$10 = pss_Section_progress;
        if (var$10 === 1.0)
            pss_Section_current.$render();
        else {
            $appListener = pss_Section_current;
            var$3 = jl_Math_min0(1.0, var$10 + pss_Section_frameTime / 0.5);
            pss_Section_progress = var$3;
            $appListener.$renderEnter(var$3);
        }
        $appListener = pss_Section_pointer;
        var$9 = pss_Control_pointer;
        var$3 = var$9.$x;
        var$8 = var$9.$y;
        $appListener.$x6 = var$3;
        $appListener.$y5 = var$8;
        $appListener.$dirty = 1;
        pss_Section_setDrawerColor0(pss_Section_pointerFill);
        ses_ShapeDrawer_filledPolygon(pss_Section_drawer, pss_Section_pointer);
        pss_Section_setDrawerColor0(pss_Section_pointerLine);
        ses_ShapeDrawer_polygon(pss_Section_drawer, pss_Section_pointer);
        $appListener = pss_Section_batch;
        if (!$appListener.$drawing) {
            var$9 = new jl_IllegalStateException;
            jl_Exception__init_(var$9, $rt_s(73));
            $rt_throw(var$9);
        }
        if ($appListener.$vertexIndex > 0)
            cbggg_PolygonSpriteBatch_flush($appListener);
        $appListener.$lastTexture = null;
        $appListener.$drawing = 0;
        var$9 = cbg_Gdx_gl;
        var$9.$glDepthMask(1);
        if ($appListener.$blendingDisabled ? 0 : 1)
            var$9.$glDisable(3042);
        $appListener = pss_Section_vfxManager;
        if (!$appListener.$capturing0) {
            var$9 = new jl_IllegalStateException;
            jl_Exception__init_(var$9, $rt_s(74));
            $rt_throw(var$9);
        }
        $appListener.$capturing0 = 0;
        ccvf_VfxPingPongWrapper_end($appListener.$pingPongWrapper);
        ccv_VfxManager_applyEffects(pss_Section_vfxManager);
        ccv_VfxManager_renderToScreen(pss_Section_vfxManager);
    }
    cgxgbt_TeaInput_reset($this.$input);
},
cgxgbt_TeaApplication_log = ($this, $tag, $message) => {
    let var$3, var$4;
    if ($this.$logLevel >= 2) {
        var$3 = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $tag);
        jl_AbstractStringBuilder_append(var$4, $rt_s(35));
        jl_AbstractStringBuilder_append(var$4, $message);
        $tag = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, $tag);
    }
},
cgxgbt_TeaApplication_error = ($this, $tag, $message) => {
    let var$3, var$4;
    if ($this.$logLevel >= 1) {
        var$3 = jl_System_err();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $tag);
        jl_AbstractStringBuilder_append(var$4, $rt_s(35));
        jl_AbstractStringBuilder_append(var$4, $message);
        $tag = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, $tag);
    }
},
cgxgbt_TeaApplication_getType = $this => {
    return cbg_Application$ApplicationType_WebGL;
},
cgxgbt_TeaApplication_getPreferences = ($this, $name) => {
    let $pref, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, $$je;
    $pref = cbgu_ObjectMap_get($this.$prefs, $name);
    if ($pref === null) {
        var$3 = window.localStorage;
        $pref = new cgxgbt_TeaPreferences;
        var$4 = $this.$config.$storagePrefix;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append(var$5, var$4);
        jl_AbstractStringBuilder_append2(var$5, 58);
        jl_AbstractStringBuilder_append(var$5, $name);
        var$6 = jl_AbstractStringBuilder_toString(var$5);
        var$7 = $this.$config.$shouldEncodePreference;
        $pref.$values5 = cbgu_ObjectMap__init_();
        $pref.$storage = var$3;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(75));
        jl_AbstractStringBuilder_append(var$4, var$6);
        jl_AbstractStringBuilder_append2(var$4, 58);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        $pref.$prefix = var$4;
        $pref.$shouldEncode = var$7;
        var$8 = var$4.$nativeString.length;
        a: {
            try {
                var$9 = 0;
                while (var$9 < var$3.length) {
                    var$6 = $rt_str(var$3.key(var$9));
                    var$4 = !var$7 ? var$6 : jl_String__init_2(cgxgbtf_HEXCoder_decode(var$6));
                    if (jl_String_startsWith(var$4, $pref.$prefix)) {
                        var$10 = $rt_str(var$3.getItem($rt_ustr(var$6)));
                        var$5 = jl_String_substring(var$4, var$8, jl_String_length(var$4) - 1 | 0);
                        var$4 = !var$7 ? cgxgbt_TeaPreferences_toObject($pref, var$4, var$10) : cgxgbt_TeaPreferences_toObject($pref, var$4, jl_String__init_2(cgxgbtf_HEXCoder_decode(var$10)));
                        cbgu_ObjectMap_put($pref.$values5, var$5, var$4);
                    }
                    var$9 = var$9 + 1 | 0;
                }
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    var$4 = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace0(var$4);
            cbgu_ObjectMap_clear($pref.$values5);
        }
        cbgu_ObjectMap_put($this.$prefs, $name, $pref);
    }
    return $pref;
},
cgxgbt_TeaApplication_initSound = $this => {
    let var$1, var$2;
    var$1 = $this.$assetLoader;
    var$2 = new cgxgbt_TeaApplication$5;
    var$2.$this$027 = $this;
    cgxgbta_AssetLoadImpl_loadScript(var$1, $rt_s(76), var$2);
},
cgxgbt_TeaApplication__clinit_ = () => {
    cgxgbt_TeaApplication_WEB_SCRIPT_PATH = $rt_s(77);
    cgxgbt_TeaApplication_WEB_ASSET_PATH = $rt_s(78);
},
cbg_ApplicationListener = $rt_classWithoutFields(0),
cbg_ApplicationAdapter = $rt_classWithoutFields(),
cbg_ApplicationAdapter_pause = $this => {
    return;
},
ps_Adapter = $rt_classWithoutFields(cbg_ApplicationAdapter),
ps_Adapter__init_ = $this => {
    return;
},
ps_Adapter__init_0 = () => {
    let var_0 = new ps_Adapter();
    ps_Adapter__init_(var_0);
    return var_0;
},
ps_Adapter_dispose = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    pss_Section_$callClinit();
    var$1 = pss_Section_profile;
    var$2 = cgxgbt_TeaApplication_getPreferences(cbg_Gdx_app, $rt_s(79));
    cgxgbt_TeaPreferences_clear(var$2);
    cgxgbt_TeaPreferences_putInteger(var$2, $rt_s(80), 1);
    cgxgbt_TeaPreferences_putInteger(var$2, $rt_s(81), var$1.$textSize);
    cgxgbt_TeaPreferences_putInteger(var$2, $rt_s(82), var$1.$soundVolume);
    cgxgbt_TeaPreferences_putInteger(var$2, $rt_s(83), var$1.$musicVolume);
    cgxgbt_TeaPreferences_flush(var$2);
    cbggg_BitmapFont_dispose(pss_Section_labelFont);
    cbggg_BitmapFont_dispose(pss_Section_textFont);
    var$1 = pss_Section_atlas;
    var$3 = var$1.$textures0;
    if (cbgu_Collections_allocateIterators)
        var$2 = cbgu_ObjectSet$ObjectSetIterator__init_(var$3);
    else {
        if (var$3.$iterator10 === null) {
            var$3.$iterator10 = cbgu_ObjectSet$ObjectSetIterator__init_(var$3);
            var$3.$iterator2 = cbgu_ObjectSet$ObjectSetIterator__init_(var$3);
        }
        var$2 = var$3.$iterator10;
        if (!var$2.$valid1) {
            cbgu_ObjectSet$ObjectSetIterator_reset(var$2);
            var$2 = var$3.$iterator10;
            var$2.$valid1 = 1;
            var$3.$iterator2.$valid1 = 0;
        } else {
            cbgu_ObjectSet$ObjectSetIterator_reset(var$3.$iterator2);
            var$2 = var$3.$iterator2;
            var$2.$valid1 = 1;
            var$3.$iterator10.$valid1 = 0;
        }
    }
    while (true) {
        var$3 = var$2;
        var$4 = var$3.$valid1;
        if (!var$4)
            break;
        var$5 = var$3.$hasNext1;
        if (!var$5) {
            var$1 = var$1.$textures0;
            var$4 = cbgu_ObjectSet_tableSize(0, var$1.$loadFactor);
            var$6 = var$1.$keyTable0;
            if (var$6.data.length > var$4) {
                var$1.$size8 = 0;
                cbgu_ObjectSet_resize(var$1, var$4);
            } else if (var$1.$size8) {
                var$1.$size8 = 0;
                ju_Arrays_fill1(var$6, null);
            }
            var$1 = pss_Section_vfxManager;
            ccvf_VfxPingPongWrapper_reset(var$1.$pingPongWrapper);
            var$1 = var$1.$context0;
            var$3 = var$1.$bufferPool0;
            var$4 = var$3.$managedBuffers.$size0;
            var$5 = var$3.$freeBuffers.$size0;
            if (var$4 != var$5) {
                var$4 = var$4 - var$5 | 0;
                var$7 = cbg_Gdx_app;
                ccvf_VfxFrameBufferPool_$callClinit();
                var$8 = ccvf_VfxFrameBufferPool_TAG;
                var$2 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$2);
                jl_AbstractStringBuilder_append0(var$2, $rt_s(84));
                jl_AbstractStringBuilder_append1(var$2, var$4);
                jl_AbstractStringBuilder_append0(var$2, $rt_s(85));
                var$9 = jl_AbstractStringBuilder_toString(var$2);
                cgxgbt_TeaApplication_error(var$7, var$8, var$9);
            }
            var$3.$disposed = 1;
            var$4 = 0;
            while (true) {
                var$2 = var$3.$managedBuffers;
                if (var$4 >= var$2.$size0)
                    break;
                ccvf_VfxFrameBuffer_dispose(cbgu_Array_get(var$2, var$4));
                var$4 = var$4 + 1 | 0;
            }
            cbgu_Array_clear(var$2);
            cbgu_Array_clear(var$3.$freeBuffers);
            var$1 = var$1.$bufferRenderer;
            cbggg_ShaderProgram_dispose(var$1.$shader0);
            var$1 = var$1.$mesh.$mesh1;
            cbgg_Mesh_$callClinit();
            var$3 = cbgg_Mesh_meshes;
            var$2 = cbg_Gdx_app;
            if (ju_HashMap_get(var$3, var$2) !== null) {
                var$3 = cbgg_Mesh_meshes;
                var$2 = cbg_Gdx_app;
                cbgu_Array_removeValue(ju_HashMap_get(var$3, var$2), var$1, 1);
            }
            var$1.$vertices.$dispose();
            var$3 = var$1.$instances;
            if (var$3 !== null)
                var$3.$dispose();
            var$1.$indices.$dispose();
            ccve_MotionBlurEffect_dispose(pss_Section_blurEffect);
            ccve_CompositeVfxEffect_dispose(pss_Section_bloomEffect);
            ccve_ShaderVfxEffect_dispose(pss_Section_fxaaEffect);
            pss_Audio_dispose(pss_Section_audio);
            return;
        }
        if (!var$5) {
            var$1 = new ju_NoSuchElementException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        }
        if (!var$4) {
            var$3 = new cbgu_GdxRuntimeException;
            jl_Exception__init_(var$3, $rt_s(86));
            $rt_throw(var$3);
        }
        var$6 = var$3.$set11.$keyTable0.data;
        var$4 = var$3.$nextIndex1;
        var$7 = var$6[var$4];
        var$3.$currentIndex = var$4;
        cbgu_ObjectSet$ObjectSetIterator_findNextIndex(var$3);
        cbgg_Texture_dispose(var$7);
    }
    var$3 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$3, $rt_s(86));
    $rt_throw(var$3);
},
cbgu_DefaultPool$PoolSupplier = $rt_classWithoutFields(0),
cbggg_GlyphLayout$_clinit_$lambda$_17_0 = $rt_classWithoutFields(),
cbggg_GlyphLayout$_clinit_$lambda$_17_0__init_ = var$0 => {
    return;
},
cbggg_GlyphLayout$_clinit_$lambda$_17_0__init_0 = () => {
    let var_0 = new cbggg_GlyphLayout$_clinit_$lambda$_17_0();
    cbggg_GlyphLayout$_clinit_$lambda$_17_0__init_(var_0);
    return var_0;
},
cbggg_GlyphLayout$_clinit_$lambda$_17_0_get = var$0 => {
    return cbggg_GlyphLayout$GlyphRun__init_0();
},
cbgu_Pools = $rt_classWithoutFields(),
cbgu_Pools_typePools = null,
cbgu_Pools_supplierPoolsCache = null,
cbgu_Pools_$callClinit = () => {
    cbgu_Pools_$callClinit = $rt_eraseClinit(cbgu_Pools);
    cbgu_Pools__clinit_();
},
cbgu_Pools_get = $poolTypeSupplier => {
    let var$2, var$3;
    cbgu_Pools_$callClinit();
    var$2 = cbgu_ObjectMap_get(cbgu_Pools_supplierPoolsCache, jl_Object_getClass($poolTypeSupplier));
    if (var$2 === null) {
        var$3 = jl_Object_getClass($poolTypeSupplier.$get7());
        var$2 = cbgu_ObjectMap_get(cbgu_Pools_typePools, var$3);
        if (var$2 === null) {
            var$2 = new cbgu_DefaultPool;
            cbgu_Pool__init_(var$2, 4, 100);
            var$2.$poolTypeSupplier = $poolTypeSupplier;
            cbgu_ObjectMap_put(cbgu_Pools_typePools, var$3, var$2);
        }
        cbgu_ObjectMap_put(cbgu_Pools_supplierPoolsCache, jl_Object_getClass($poolTypeSupplier), var$2);
    }
    return var$2;
},
cbgu_Pools__init_ = $this => {
    cbgu_Pools_$callClinit();
},
cbgu_Pools__init_0 = () => {
    let var_0 = new cbgu_Pools();
    cbgu_Pools__init_(var_0);
    return var_0;
},
cbgu_Pools__clinit_ = () => {
    cbgu_Pools_typePools = cbgu_ObjectMap__init_();
    cbgu_Pools_supplierPoolsCache = cbgu_ObjectMap__init_();
};
function cbgu_IntArray() {
    let a = this; jl_Object.call(a);
    a.$items1 = null;
    a.$size1 = 0;
    a.$ordered0 = 0;
}
let cbgu_IntArray__init_1 = $this => {
    cbgu_IntArray__init_0($this, 1, 16);
},
cbgu_IntArray__init_ = () => {
    let var_0 = new cbgu_IntArray();
    cbgu_IntArray__init_1(var_0);
    return var_0;
},
cbgu_IntArray__init_3 = ($this, $capacity) => {
    cbgu_IntArray__init_0($this, 1, $capacity);
},
cbgu_IntArray__init_2 = var_0 => {
    let var_1 = new cbgu_IntArray();
    cbgu_IntArray__init_3(var_1, var_0);
    return var_1;
},
cbgu_IntArray__init_0 = ($this, $ordered, $capacity) => {
    $this.$ordered0 = $ordered;
    $this.$items1 = $rt_createIntArray($capacity);
},
cbgu_IntArray__init_4 = (var_0, var_1) => {
    let var_2 = new cbgu_IntArray();
    cbgu_IntArray__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_IntArray_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items1;
    var$3 = $items.data;
    var$4 = $this.$size1;
    if (var$4 == var$3.length)
        $items = cbgu_IntArray_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size1;
    $this.$size1 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_IntArray_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size1)
        return $this.$items1.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(21));
    jl_AbstractStringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(5));
    jl_AbstractStringBuilder_append1(var$3, $this.$size1);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
cbgu_IntArray_set = ($this, $index, $value) => {
    let var$3, var$4;
    if ($index < $this.$size1) {
        $this.$items1.data[$index] = $value;
        return;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(var$4, $rt_s(21));
    jl_AbstractStringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append0(var$4, $rt_s(5));
    jl_AbstractStringBuilder_append1(var$4, $this.$size1);
    jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
cbgu_IntArray_peek = $this => {
    return $this.$items1.data[$this.$size1 - 1 | 0];
},
cbgu_IntArray_clear = $this => {
    $this.$size1 = 0;
},
cbgu_IntArray_ensureCapacity = ($this, $additionalCapacity) => {
    let var$2, var$3, $sizeNeeded;
    if ($additionalCapacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(23));
        jl_AbstractStringBuilder_append1(var$3, $additionalCapacity);
        jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    $sizeNeeded = $this.$size1 + $additionalCapacity | 0;
    if ($sizeNeeded > $this.$items1.data.length)
        cbgu_IntArray_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size1 * 1.75 | 0));
    return $this.$items1;
},
cbgu_IntArray_resize = ($this, $newSize) => {
    let $newItems, var$3;
    $newItems = $rt_createIntArray($newSize);
    var$3 = $newItems.data;
    jl_System_fastArraycopy($this.$items1, 0, $newItems, 0, jl_Math_min($this.$size1, var$3.length));
    $this.$items1 = $newItems;
    return $newItems;
},
cbgu_IntArray_hashCode = $this => {
    let $items, $h, $i, $n, var$5;
    if (!$this.$ordered0)
        return jl_Object_identity($this);
    $items = $this.$items1;
    $h = 1;
    $i = 0;
    $n = $this.$size1;
    while ($i < $n) {
        var$5 = $items.data;
        $h = ($h * 31 | 0) + var$5[$i] | 0;
        $i = $i + 1 | 0;
    }
    return $h;
},
cbgu_IntArray_equals = ($this, $object) => {
    let $array, $n, $items1, $items2, $i, var$7;
    if ($object === $this)
        return 1;
    if (!$this.$ordered0)
        return 0;
    if (!($object instanceof cbgu_IntArray))
        return 0;
    $array = $object;
    if (!$array.$ordered0)
        return 0;
    $n = $this.$size1;
    if ($n != $array.$size1)
        return 0;
    $items1 = $this.$items1;
    $items2 = $array.$items1;
    $i = 0;
    while ($i < $n) {
        var$7 = $items2.data;
        if ($items1.data[$i] != var$7[$i])
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
cbgu_IntArray_toString = $this => {
    let $items, $buffer, $i;
    if (!$this.$size1)
        return $rt_s(28);
    $items = $this.$items1.data;
    $buffer = cbgu_StringBuilder__init_0(32);
    cbgu_StringBuilder_append0($buffer, 91);
    cbgu_StringBuilder_append($buffer, $items[0]);
    $i = 1;
    while ($i < $this.$size1) {
        cbgu_StringBuilder_append00($buffer, $rt_s(29));
        cbgu_StringBuilder_append($buffer, $items[$i]);
        $i = $i + 1 | 0;
    }
    cbgu_StringBuilder_append0($buffer, 93);
    return cbgu_StringBuilder_toString($buffer);
},
ju_Map = $rt_classWithoutFields(0);
function ju_AbstractMap() {
    jl_Object.call(this);
    this.$cachedKeySet = null;
}
let jl_Cloneable = $rt_classWithoutFields(0);
function ju_HashMap() {
    let a = this; ju_AbstractMap.call(a);
    a.$elementCount = 0;
    a.$elementData = null;
    a.$modCount0 = 0;
    a.$loadFactor5 = 0.0;
    a.$threshold3 = 0;
}
let ju_HashMap__init_2 = $this => {
    ju_HashMap__init_1($this, 16);
},
ju_HashMap__init_ = () => {
    let var_0 = new ju_HashMap();
    ju_HashMap__init_2(var_0);
    return var_0;
},
ju_HashMap__init_1 = ($this, $capacity) => {
    let var$2;
    if ($capacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $capacity = ju_HashMap_calculateCapacity($capacity);
    $this.$elementCount = 0;
    $this.$elementData = $rt_createArray(ju_HashMap$HashEntry, $capacity);
    $this.$loadFactor5 = 0.75;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap__init_0 = var_0 => {
    let var_1 = new ju_HashMap();
    ju_HashMap__init_1(var_1, var_0);
    return var_1;
},
ju_HashMap_calculateCapacity = $x => {
    let var$2;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    $x = var$2 | var$2 >> 1;
    $x = $x | $x >> 2;
    $x = $x | $x >> 4;
    $x = $x | $x >> 8;
    return ($x | $x >> 16) + 1 | 0;
},
ju_HashMap_computeThreshold = $this => {
    $this.$threshold3 = $this.$elementData.data.length * $this.$loadFactor5 | 0;
},
ju_HashMap_entrySet = $this => {
    let var$1;
    var$1 = new ju_HashMap$HashMapEntrySet;
    var$1.$associatedMap0 = $this;
    return var$1;
},
ju_HashMap_get = ($this, $key) => {
    let $m;
    $m = ju_HashMap_entryByKey($this, $key);
    if ($m === null)
        return null;
    return $m.$value;
},
ju_HashMap_entryByKey = ($this, $key) => {
    let $m, $hash;
    if ($key === null)
        $m = ju_HashMap_findNullKeyEntry($this);
    else {
        $hash = $key.$hashCode();
        $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
    }
    return $m;
},
ju_HashMap_findNonNullKeyEntry = ($this, $key, $index, $keyHash) => {
    let $m;
    $m = $this.$elementData.data[$index];
    while ($m !== null && !($m.$origKeyHash == $keyHash && ju_HashMap_areEqualKeys($key, $m.$key))) {
        $m = $m.$next2;
    }
    return $m;
},
ju_HashMap_findNullKeyEntry = $this => {
    let $m;
    $m = $this.$elementData.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next2;
    }
    return $m;
},
ju_HashMap_keySet = $this => {
    let var$1;
    if ($this.$cachedKeySet === null) {
        var$1 = new ju_HashMap$1;
        var$1.$this$016 = $this;
        $this.$cachedKeySet = var$1;
    }
    return $this.$cachedKeySet;
},
ju_HashMap_put = ($this, $key, $value) => {
    let var$3, var$4, var$5;
    if ($key === null) {
        var$3 = ju_HashMap_findNullKeyEntry($this);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold3)
                ju_HashMap_rehash($this);
        }
    } else {
        var$4 = $key.$hashCode();
        var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
        var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold3)
                ju_HashMap_rehash($this);
        }
    }
    $key = var$3.$value;
    var$3.$value = $value;
    return $key;
},
ju_HashMap_createHashedEntry = ($this, $key, $index, $hash) => {
    let $entry, var$5;
    $entry = new ju_HashMap$HashEntry;
    ju_MapEntry__init_($entry, $key, null);
    $entry.$origKeyHash = $hash;
    var$5 = $this.$elementData.data;
    $entry.$next2 = var$5[$index];
    var$5[$index] = $entry;
    return $entry;
},
ju_HashMap_rehash = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$1 = $this.$elementData.data.length;
    var$1 = ju_HashMap_calculateCapacity(!var$1 ? 1 : var$1 << 1);
    var$2 = $rt_createArray(ju_HashMap$HashEntry, var$1);
    var$3 = var$2.data;
    var$4 = 0;
    var$5 = var$1 - 1 | 0;
    while (true) {
        var$6 = $this.$elementData.data;
        if (var$4 >= var$6.length)
            break;
        var$7 = var$6[var$4];
        var$6[var$4] = null;
        while (var$7 !== null) {
            var$1 = var$7.$origKeyHash & var$5;
            var$8 = var$7.$next2;
            var$7.$next2 = var$3[var$1];
            var$3[var$1] = var$7;
            var$7 = var$8;
        }
        var$4 = var$4 + 1 | 0;
    }
    $this.$elementData = var$2;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap_areEqualKeys = ($key1, $key2) => {
    return $key1 !== $key2 && !$key1.$equals($key2) ? 0 : 1;
},
cbgm_Interpolation$1 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$1__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$1__init_0 = () => {
    let var_0 = new cbgm_Interpolation$1();
    cbgm_Interpolation$1__init_(var_0);
    return var_0;
},
cbgm_Interpolation$2 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$2__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$2__init_0 = () => {
    let var_0 = new cbgm_Interpolation$2();
    cbgm_Interpolation$2__init_(var_0);
    return var_0;
},
cbgm_Interpolation$3 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$3__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$3__init_0 = () => {
    let var_0 = new cbgm_Interpolation$3();
    cbgm_Interpolation$3__init_(var_0);
    return var_0;
},
cbgm_Interpolation$4 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$4__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$4__init_0 = () => {
    let var_0 = new cbgm_Interpolation$4();
    cbgm_Interpolation$4__init_(var_0);
    return var_0;
};
function cbgm_Interpolation$Pow() {
    cbgm_Interpolation.call(this);
    this.$power1 = 0;
}
let cbgm_Interpolation$Pow__init_ = ($this, $power) => {
    cbgm_Interpolation__init_($this);
    $this.$power1 = $power;
},
cbgm_Interpolation$Pow__init_0 = var_0 => {
    let var_1 = new cbgm_Interpolation$Pow();
    cbgm_Interpolation$Pow__init_(var_1, var_0);
    return var_1;
},
cbgm_Interpolation$PowIn = $rt_classWithoutFields(cbgm_Interpolation$Pow),
cbgm_Interpolation$PowOut = $rt_classWithoutFields(cbgm_Interpolation$Pow),
cbgm_Interpolation$5 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$5__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$5__init_0 = () => {
    let var_0 = new cbgm_Interpolation$5();
    cbgm_Interpolation$5__init_(var_0);
    return var_0;
},
cbgm_Interpolation$6 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$6__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$6__init_0 = () => {
    let var_0 = new cbgm_Interpolation$6();
    cbgm_Interpolation$6__init_(var_0);
    return var_0;
},
cbgm_Interpolation$7 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$7__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$7__init_0 = () => {
    let var_0 = new cbgm_Interpolation$7();
    cbgm_Interpolation$7__init_(var_0);
    return var_0;
},
cbgm_Interpolation$8 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$8__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$8__init_0 = () => {
    let var_0 = new cbgm_Interpolation$8();
    cbgm_Interpolation$8__init_(var_0);
    return var_0;
},
cbgm_Interpolation$9 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$9__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$9__init_0 = () => {
    let var_0 = new cbgm_Interpolation$9();
    cbgm_Interpolation$9__init_(var_0);
    return var_0;
},
cbgm_Interpolation$10 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$10__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$10__init_0 = () => {
    let var_0 = new cbgm_Interpolation$10();
    cbgm_Interpolation$10__init_(var_0);
    return var_0;
},
cbgm_Interpolation$11 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$11__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$11__init_0 = () => {
    let var_0 = new cbgm_Interpolation$11();
    cbgm_Interpolation$11__init_(var_0);
    return var_0;
};
function cbgm_Interpolation$Exp() {
    let a = this; cbgm_Interpolation.call(a);
    a.$value8 = 0.0;
    a.$power0 = 0.0;
    a.$min2 = 0.0;
    a.$scale4 = 0.0;
}
let cbgm_Interpolation$Exp__init_ = ($this, $value, $power) => {
    cbgm_Interpolation__init_($this);
    $this.$value8 = $value;
    $this.$power0 = $power;
    $power = jl_Math_powImpl($value,  -$power);
    $this.$min2 = $power;
    $this.$scale4 = 1.0 / (1.0 - $power);
},
cbgm_Interpolation$Exp__init_0 = (var_0, var_1) => {
    let var_2 = new cbgm_Interpolation$Exp();
    cbgm_Interpolation$Exp__init_(var_2, var_0, var_1);
    return var_2;
},
cbgm_Interpolation$ExpIn = $rt_classWithoutFields(cbgm_Interpolation$Exp),
cbgm_Interpolation$ExpOut = $rt_classWithoutFields(cbgm_Interpolation$Exp),
cbgm_Interpolation$12 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$12__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$12__init_0 = () => {
    let var_0 = new cbgm_Interpolation$12();
    cbgm_Interpolation$12__init_(var_0);
    return var_0;
},
cbgm_Interpolation$13 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$13__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$13__init_0 = () => {
    let var_0 = new cbgm_Interpolation$13();
    cbgm_Interpolation$13__init_(var_0);
    return var_0;
},
cbgm_Interpolation$14 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$14__init_ = $this => {
    cbgm_Interpolation__init_($this);
},
cbgm_Interpolation$14__init_0 = () => {
    let var_0 = new cbgm_Interpolation$14();
    cbgm_Interpolation$14__init_(var_0);
    return var_0;
};
function cbgm_Interpolation$Elastic() {
    let a = this; cbgm_Interpolation.call(a);
    a.$value7 = 0.0;
    a.$power = 0.0;
    a.$scale1 = 0.0;
    a.$bounces = 0.0;
}
let cbgm_Interpolation$Elastic__init_ = ($this, $value, $power, $bounces, $scale) => {
    cbgm_Interpolation__init_($this);
    $this.$value7 = $value;
    $this.$power = $power;
    $this.$scale1 = $scale;
    $this.$bounces = $bounces * 3.1415927410125732 * ($bounces % 2 | 0 ? (-1) : 1);
},
cbgm_Interpolation$Elastic__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgm_Interpolation$Elastic();
    cbgm_Interpolation$Elastic__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgm_Interpolation$ElasticIn = $rt_classWithoutFields(cbgm_Interpolation$Elastic),
cbgm_Interpolation$ElasticOut = $rt_classWithoutFields(cbgm_Interpolation$Elastic);
function cbgm_Interpolation$Swing() {
    cbgm_Interpolation.call(this);
    this.$scale5 = 0.0;
}
function cbgm_Interpolation$SwingIn() {
    cbgm_Interpolation.call(this);
    this.$scale6 = 0.0;
}
function cbgm_Interpolation$SwingOut() {
    cbgm_Interpolation.call(this);
    this.$scale2 = 0.0;
}
function cbgm_Interpolation$BounceOut() {
    let a = this; cbgm_Interpolation.call(a);
    a.$widths = null;
    a.$heights = null;
}
let cbgm_Interpolation$BounceOut__init_ = ($this, $bounces) => {
    let var$2, var$3, var$4, var$5, var$6;
    cbgm_Interpolation__init_($this);
    if ($bounces >= 2 && $bounces <= 5) {
        a: {
            var$2 = $rt_createFloatArray($bounces);
            $this.$widths = var$2;
            var$3 = $rt_createFloatArray($bounces);
            var$4 = var$3.data;
            $this.$heights = var$3;
            var$4[0] = 1.0;
            switch ($bounces) {
                case 2:
                    break;
                case 3:
                    var$3 = var$2.data;
                    var$3[0] = 0.4000000059604645;
                    var$3[1] = 0.4000000059604645;
                    var$3[2] = 0.20000000298023224;
                    var$4[1] = 0.33000001311302185;
                    var$4[2] = 0.10000000149011612;
                    break a;
                case 4:
                    var$3 = var$2.data;
                    var$3[0] = 0.3400000035762787;
                    var$3[1] = 0.3400000035762787;
                    var$3[2] = 0.20000000298023224;
                    var$3[3] = 0.15000000596046448;
                    var$4[1] = 0.25999999046325684;
                    var$4[2] = 0.10999999940395355;
                    var$4[3] = 0.029999999329447746;
                    break a;
                case 5:
                    var$3 = var$2.data;
                    var$3[0] = 0.30000001192092896;
                    var$3[1] = 0.30000001192092896;
                    var$3[2] = 0.20000000298023224;
                    var$3[3] = 0.10000000149011612;
                    var$3[4] = 0.10000000149011612;
                    var$4[1] = 0.44999998807907104;
                    var$4[2] = 0.30000001192092896;
                    var$4[3] = 0.15000000596046448;
                    var$4[4] = 0.05999999865889549;
                    break a;
                default:
                    break a;
            }
            var$3 = var$2.data;
            var$3[0] = 0.6000000238418579;
            var$3[1] = 0.4000000059604645;
            var$4[1] = 0.33000001311302185;
        }
        var$2 = var$2.data;
        var$2[0] = var$2[0] * 2.0;
        return;
    }
    var$5 = new jl_IllegalArgumentException;
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append0(var$6, $rt_s(87));
    jl_AbstractStringBuilder_append1(var$6, $bounces);
    jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$6));
    $rt_throw(var$5);
},
cbgm_Interpolation$BounceOut__init_0 = var_0 => {
    let var_1 = new cbgm_Interpolation$BounceOut();
    cbgm_Interpolation$BounceOut__init_(var_1, var_0);
    return var_1;
},
cbgm_Interpolation$Bounce = $rt_classWithoutFields(cbgm_Interpolation$BounceOut),
cbgm_Interpolation$BounceIn = $rt_classWithoutFields(cbgm_Interpolation$BounceOut),
ju_Comparator = $rt_classWithoutFields(0),
jl_String$_clinit_$lambda$_115_0 = $rt_classWithoutFields(),
jl_String$_clinit_$lambda$_115_0__init_ = var$0 => {
    return;
},
jl_String$_clinit_$lambda$_115_0__init_0 = () => {
    let var_0 = new jl_String$_clinit_$lambda$_115_0();
    jl_String$_clinit_$lambda$_115_0__init_(var_0);
    return var_0;
},
jl_Character = $rt_classWithoutFields(),
jl_Character_TYPE = null,
jl_Character_digitMapping = null,
jl_Character_upperCaseMapping = null,
jl_Character_lowerCaseMapping = null,
jl_Character_classMapping = null,
jl_Character_characterCache = null,
jl_Character_$$metadata$$0 = null,
jl_Character_$$metadata$$1 = null,
jl_Character_$$metadata$$3 = null,
jl_Character_$$metadata$$4 = null,
jl_Character_toString = $c => {
    let var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_3(var$2, var$3);
    return var$2;
},
jl_Character_isSupplementaryCodePoint = $codePoint => {
    return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
},
jl_Character_isHighSurrogate = $ch => {
    return ($ch & 64512) != 55296 ? 0 : 1;
},
jl_Character_isLowSurrogate = $ch => {
    return ($ch & 64512) != 56320 ? 0 : 1;
},
jl_Character_isSurrogate = $ch => {
    return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
},
jl_Character_isSurrogatePair = ($high, $low) => {
    return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
},
jl_Character_toCodePoint = ($high, $low) => {
    return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
},
jl_Character_highSurrogate = $codePoint => {
    return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
},
jl_Character_lowSurrogate = $codePoint => {
    return (56320 | $codePoint & 1023) & 65535;
},
jl_Character_toLowerCase = $ch => {
    return jl_Character_toLowerCase0($ch) & 65535;
},
jl_Character_toLowerCase0 = $ch => {
    if (jl_Character_lowerCaseMapping === null) {
        if (jl_Character_$$metadata$$0 === null)
            jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
        jl_Character_lowerCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
},
jl_Character_toUpperCase = $ch => {
    return jl_Character_toUpperCase0($ch) & 65535;
},
jl_Character_toUpperCase0 = $codePoint => {
    if (jl_Character_upperCaseMapping === null) {
        if (jl_Character_$$metadata$$1 === null)
            jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
        jl_Character_upperCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
},
jl_Character_mapChar = ($table, $codePoint) => {
    let $binSearchTable, var$4, var$5, var$6, $index, var$8;
    $binSearchTable = $table.$fastTable.data;
    if ($codePoint < $binSearchTable.length)
        return $codePoint + $binSearchTable[$codePoint] | 0;
    $binSearchTable = $table.$binarySearchTable.data;
    var$4 = 0;
    var$5 = $binSearchTable.length;
    var$6 = (var$5 / 2 | 0) - 1 | 0;
    a: {
        while (true) {
            $index = (var$4 + var$6 | 0) / 2 | 0;
            var$8 = $rt_compare($binSearchTable[$index * 2 | 0], $codePoint);
            if (!var$8)
                break;
            if (var$8 <= 0) {
                var$4 = $index + 1 | 0;
                if (var$4 > var$6)
                    break a;
            } else {
                $index = $index - 1 | 0;
                if ($index < var$4)
                    break a;
                var$6 = $index;
            }
        }
    }
    if ($index >= 0) {
        $index = $index * 2 | 0;
        if ($index < var$5)
            return $codePoint + $binSearchTable[$index + 1 | 0] | 0;
    }
    return 0;
},
jl_Character_digit = ($ch, $radix) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    if ($radix >= 2 && $radix <= 36) {
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$3 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$4 = otci_CharFlow__init_(jl_String_toCharArray(var$3));
            var$5 = otci_Base46_decodeUnsigned(var$4);
            var$6 = $rt_createIntArray(var$5 * 2 | 0);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < var$5) {
                var$9 = var$9 + otci_Base46_decode(var$4) | 0;
                var$10 = var$10 + otci_Base46_decode(var$4) | 0;
                var$12 = var$8 + 1 | 0;
                var$7[var$8] = var$9;
                var$8 = var$12 + 1 | 0;
                var$7[var$12] = var$10;
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_digitMapping = var$6;
        }
        var$6 = jl_Character_digitMapping.data;
        var$8 = 0;
        var$9 = (var$6.length / 2 | 0) - 1 | 0;
        a: {
            while (var$9 >= var$8) {
                var$10 = (var$8 + var$9 | 0) / 2 | 0;
                var$11 = var$10 * 2 | 0;
                var$5 = $rt_compare($ch, var$6[var$11]);
                if (var$5 > 0)
                    var$8 = var$10 + 1 | 0;
                else {
                    if (var$5 >= 0) {
                        $ch = var$6[var$11 + 1 | 0];
                        break a;
                    }
                    var$9 = var$10 - 1 | 0;
                }
            }
            $ch = (-1);
        }
        if ($ch >= $radix)
            $ch = (-1);
    } else
        $ch = (-1);
    return $ch;
},
jl_Character_forDigit = ($digit, $radix) => {
    if ($radix >= 2 && $radix <= 36 && $digit >= 0 && $digit < $radix)
        return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
    return 0;
},
jl_Character_toChars = $codePoint => {
    let var$2, var$3, var$4;
    if (!($codePoint >= 0 && $codePoint <= 1114111 ? 1 : 0)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if ($codePoint < 65536) {
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $codePoint & 65535;
        return var$3;
    }
    var$3 = $rt_createCharArray(2);
    var$4 = var$3.data;
    var$4[0] = jl_Character_highSurrogate($codePoint);
    var$4[1] = jl_Character_lowSurrogate($codePoint);
    return var$3;
},
jl_Character_getType = $codePoint => {
    let $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, $i, var$11, var$12, var$13, var$14, $l;
    $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
    if ($u && jl_Character_isSurrogate($codePoint & 65535))
        return 19;
    if (jl_Character_classMapping === null) {
        if (jl_Character_$$metadata$$4 === null)
            jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
        $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
        $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
        var$5 = $classes.data;
        var$6 = $rt_createByteArray(16384);
        var$7 = var$6.data;
        var$8 = 0;
        var$9 = 0;
        $i = 0;
        var$11 = 0;
        while (var$11 < $range.$nativeString.length) {
            var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            if (var$12 == 64) {
                var$11 = var$11 + 1 | 0;
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                var$13 = 0;
                var$14 = 1;
                $u = 0;
                while ($u < 3) {
                    var$11 = var$11 + 1 | 0;
                    var$13 = var$13 | $rt_imul(var$14, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                    var$14 = var$14 * 64 | 0;
                    $u = $u + 1 | 0;
                }
            } else if (var$12 < 32)
                var$13 = 1;
            else {
                var$12 = (var$12 - 32 | 0) << 24 >> 24;
                var$11 = var$11 + 1 | 0;
                var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            }
            if (!var$12 && var$13 >= 128) {
                if (var$8 > 0) {
                    $u = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                    var$9 = $u;
                }
                $i = $i + (var$8 + var$13 | 0) | 0;
                var$8 = 0;
            } else {
                $u = var$8 + var$13 | 0;
                if ($u < var$7.length)
                    $l = var$9;
                else {
                    $l = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf0(var$6, var$8));
                    $i = $i + $u | 0;
                    var$8 = 0;
                }
                while (true) {
                    $u = var$13 + (-1) | 0;
                    if (var$13 <= 0)
                        break;
                    var$13 = var$8 + 1 | 0;
                    var$7[var$8] = var$12;
                    var$8 = var$13;
                    var$13 = $u;
                }
                var$9 = $l;
            }
            var$11 = var$11 + 1 | 0;
        }
        jl_Character_classMapping = ju_Arrays_copyOf($classes, var$9);
    }
    $classes = jl_Character_classMapping.data;
    $l = 0;
    $u = $classes.length - 1 | 0;
    while ($l <= $u) {
        $i = ($l + $u | 0) / 2 | 0;
        $range = $classes[$i];
        if ($codePoint >= $range.$end4)
            $l = $i + 1 | 0;
        else {
            $u = $range.$start4;
            if ($codePoint >= $u)
                return $range.$data11.data[$codePoint - $u | 0];
            $u = $i - 1 | 0;
        }
    }
    return 0;
},
jl_Character_isLetterOrDigit = $codePoint => {
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
                break;
            case 6:
            case 7:
            case 8:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return 0;
},
jl_Character_isIdentifierIgnorable = $codePoint => {
    a: {
        if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
            if ($codePoint < 127)
                break a;
            if ($codePoint > 159)
                break a;
        }
        return 1;
    }
    return jl_Character_getType($codePoint) != 16 ? 0 : 1;
},
jl_Character_isSpaceChar = $codePoint => {
    switch (jl_Character_getType($codePoint)) {
        case 12:
        case 13:
        case 14:
            break;
        default:
            return 0;
    }
    return 1;
},
jl_Character_isWhitespace = $codePoint => {
    switch ($codePoint) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
            break;
        case 160:
        case 8199:
        case 8239:
            return 0;
        default:
            return jl_Character_isSpaceChar($codePoint);
    }
    return 1;
},
jl_Character__clinit_ = () => {
    jl_Character_TYPE = $rt_cls($rt_charcls);
    jl_Character_characterCache = $rt_createArray(jl_Character, 128);
},
jl_Character_acquireLowerCaseMapping$$create = () => {
    return {"value" : "TW  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
    + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 a$#%# -mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
    + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%"
    + "# #%# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# #$$r#%# \'%# +%# #%# #%# #P6rM \'%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# .\'F#S HB#F#b o@5F#b Jo=N#f "};
},
jl_Character_acquireUpperCaseMapping$$create = () => {
    return {"value" : "NY  ,%H#U :#>b# vH#O #H#/:+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #,5# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'#(;#N1# %\'# #\'# %\'# \'\'# +\'# %6)# \'\'#*/#N6r# %_+# %\'# #\'# #\'# %\'# )\'# %\'# \'\'# #\'# %\'# \'\'# #J%# +\'#+# #\'#+# #\'#+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#L\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'#+# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
    + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3#!$r#:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'"
    + "# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d# #\'- (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'#"
    + " #\'# #\'# -\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
    + "\'# #\'# #\'# #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'# %\'\' #\'% )\'# #\'# #\'# U\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#t {nm%:# V%H#^ >B#H#b o@5H#b No=P#f "};
},
jl_Character_obtainDigitMapping$$create = () => {
    return {"value" : "kE*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
    + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
    + "%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%_fG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%B\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%oYG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%ow?G%%%%%%%%%%%%%%%%%%s4%G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%"
    + "%%%%:OG%%%%%%%%%%%%%%%%%%V*OG%%%%%%%%%%%%%%%%%%VZ%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%k5G%%%%%%%%%%%%%%%%%%.lG%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
},
jl_Character_obtainClasses$$create = () => {
    return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
    + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A&G*FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"

    + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F) Y#J+Y(^+G*^*Y$G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
    + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*!#A&BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0"
    + "G.H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^jA7^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?6767676"
    + "7Y&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^1-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^GA*=F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#B##A#!# # #!#!#!#!A6E$!#&"
    + "E##F(\'F$\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F"
    + "\'A#F\'A#F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#A$FUA-b&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+A\'J+F%%&B7A$G&5%C7A)Z#b 1$ L@ FK G#5A#F#A1F$AXG%F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'"
    + "F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+A\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&A,F+ &A#& FG &I$G\' )A#) I% I#\')\'&\'&Y# Y#A)G#A>FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+A\'J5A=F<A#\')\'I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%"
    + "Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W# FB9A/J+A\'F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+\'b 6! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0A+b&<` A&b&(* b ZK!F?G-I$G$J+b \'< b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q\' E$FIE#Y$J+b \'$ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AJF#A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =_ b=Q$ J+A\'b=U\'"
    + " AnGOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b 7$ F?G#&J+A%9b A( F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% "
    + "F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^-A%^#A`b=5& A-^/A#^.A$^+A&^YA(^0A#^,A\'^*A(b=4#  b==! J+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&A0&b M* &b CG b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   "
    + "%b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
},
cgxgbtu_TeaBaseUrlProvider = $rt_classWithoutFields(0),
cgxgbtu_TeaDefaultBaseUrlProvider = $rt_classWithoutFields(),
cgxgbtu_TeaDefaultBaseUrlProvider__init_ = $this => {
    return;
},
cgxgbtu_TeaDefaultBaseUrlProvider__init_0 = () => {
    let var_0 = new cgxgbtu_TeaDefaultBaseUrlProvider();
    cgxgbtu_TeaDefaultBaseUrlProvider__init_(var_0);
    return var_0;
};
function jl_Enum() {
    let a = this; jl_Object.call(a);
    a.$name0 = null;
    a.$ordinal0 = 0;
}
let jl_Enum__init_ = ($this, $name, $ordinal) => {
    $this.$name0 = $name;
    $this.$ordinal0 = $ordinal;
},
jl_Enum_ordinal = $this => {
    return $this.$ordinal0;
},
jl_Enum_toString = $this => {
    return $this.$name0;
},
jl_Enum_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
},
jl_Enum_hashCode = $this => {
    return jl_Object_identity($this);
},
jl_Enum_valueOf = ($enumType, $name) => {
    let $constants, var$4, var$5, $constant, var$7;
    if (!($enumType.$platformClass.$meta.enum ? 1 : 0))
        $constants = null;
    else {
        $enumType.$platformClass.$clinit();
        $constants = (otp_Platform_getEnumConstants($enumType.$platformClass)).$clone0();
    }
    $constants = $constants;
    if ($constants === null) {
        $enumType = new jl_IllegalArgumentException;
        jl_Exception__init_($enumType, $rt_s(88));
        $rt_throw($enumType);
    }
    $constants = $constants.data;
    var$4 = $constants.length;
    var$5 = 0;
    while (true) {
        if (var$5 >= var$4) {
            $constant = new jl_IllegalArgumentException;
            $enumType = jl_String_valueOf($enumType);
            $name = jl_String_valueOf($name);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(var$7, $rt_s(89));
            jl_AbstractStringBuilder_append(var$7, $enumType);
            jl_AbstractStringBuilder_append(var$7, $rt_s(90));
            jl_AbstractStringBuilder_append(var$7, $name);
            jl_AbstractStringBuilder_append(var$7, $rt_s(91));
            jl_Exception__init_($constant, jl_AbstractStringBuilder_toString(var$7));
            $rt_throw($constant);
        }
        $constant = $constants[var$5];
        if (jl_String_equals($constant.$name0, $name))
            break;
        var$5 = var$5 + 1 | 0;
    }
    return $constant;
},
cgxgbt_TeaApplication$AppState = $rt_classWithoutFields(jl_Enum),
cgxgbt_TeaApplication$AppState_INIT = null,
cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS = null,
cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS = null,
cgxgbt_TeaApplication$AppState_APP_CREATE = null,
cgxgbt_TeaApplication$AppState_APP_LOOP = null,
cgxgbt_TeaApplication$AppState_$VALUES = null,
cgxgbt_TeaApplication$AppState_values = () => {
    return cgxgbt_TeaApplication$AppState_$VALUES.$clone0();
},
cgxgbt_TeaApplication$AppState__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(92), 0);
    cgxgbt_TeaApplication$AppState_INIT = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(93), 1);
    cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(94), 2);
    cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(95), 3);
    cgxgbt_TeaApplication$AppState_APP_CREATE = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(96), 4);
    cgxgbt_TeaApplication$AppState_APP_LOOP = var$1;
    var$2 = $rt_createArray(cgxgbt_TeaApplication$AppState, 5);
    var$3 = var$2.data;
    var$3[0] = cgxgbt_TeaApplication$AppState_INIT;
    var$3[1] = cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS;
    var$3[2] = cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS;
    var$3[3] = cgxgbt_TeaApplication$AppState_APP_CREATE;
    var$3[4] = var$1;
    cgxgbt_TeaApplication$AppState_$VALUES = var$2;
},
cgxgbtd_WindowWrapper = $rt_classWithoutFields(0),
otj_JSObject = $rt_classWithoutFields(0),
otjb_AnimationFrameCallback = $rt_classWithoutFields(0);
function cgxgbtdi_TeaWindow() {
    let a = this; jl_Object.call(a);
    a.$window0 = null;
    a.$runnable = null;
}
let cgxgbtdi_TeaWindow_TEA_WINDOW = null,
cgxgbtdi_TeaWindow_$callClinit = () => {
    cgxgbtdi_TeaWindow_$callClinit = $rt_eraseClinit(cgxgbtdi_TeaWindow);
    cgxgbtdi_TeaWindow__clinit_();
},
cgxgbtdi_TeaWindow_get = () => {
    cgxgbtdi_TeaWindow_$callClinit();
    return cgxgbtdi_TeaWindow_TEA_WINDOW;
},
cgxgbtdi_TeaWindow__init_ = $this => {
    cgxgbtdi_TeaWindow_$callClinit();
    $this.$window0 = window;
},
cgxgbtdi_TeaWindow__init_0 = () => {
    let var_0 = new cgxgbtdi_TeaWindow();
    cgxgbtdi_TeaWindow__init_(var_0);
    return var_0;
},
cgxgbtdi_TeaWindow_getDocument = $this => {
    return $this.$window0.document;
},
cgxgbtdi_TeaWindow_requestAnimationFrame = ($this, $runnable) => {
    $this.$runnable = $runnable;
    requestAnimationFrame(otji_JS_function(otji_JSWrapper_unwrap($this), "onAnimationFrame"));
},
cgxgbtdi_TeaWindow_getClientWidth = $this => {
    return $this.$window0.innerWidth;
},
cgxgbtdi_TeaWindow_getClientHeight = $this => {
    return $this.$window0.innerHeight;
},
cgxgbtdi_TeaWindow_addEventListener = ($this, $type, $listener) => {
    $this.$window0.addEventListener($rt_ustr($type), otji_JS_function($listener, "handleEvent"));
},
cgxgbtdi_TeaWindow__clinit_ = () => {
    cgxgbtdi_TeaWindow_TEA_WINDOW = cgxgbtdi_TeaWindow__init_0();
},
cgxgbtdi_TeaWindow_onAnimationFrame$exported$0 = (var$1, var$2) => {
    let var$3;
    cgxgbtdi_TeaWindow_$callClinit();
    var$2;
    var$1 = var$1;
    var$3 = var$1.$runnable;
    var$1.$runnable = null;
    cgxgbt_TeaApplication_run(var$3);
},
jl_Math = $rt_classWithoutFields(),
jl_Math__init_ = $this => {
    return;
},
jl_Math__init_0 = () => {
    let var_0 = new jl_Math();
    jl_Math__init_(var_0);
    return var_0;
},
jl_Math_sin = var$1 => {
    return Math.sin(var$1);
},
jl_Math_cos = var$1 => {
    return Math.cos(var$1);
},
jl_Math_exp = var$1 => {
    return Math.exp(var$1);
},
jl_Math_sqrt = var$1 => {
    return Math.sqrt(var$1);
},
jl_Math_ceil = var$1 => {
    return Math.ceil(var$1);
},
jl_Math_powImpl = (var$1, var$2) => {
    return Math.pow(var$1, var$2);
},
jl_Math_atan2 = (var$1, var$2) => {
    return Math.atan2(var$1, var$2);
},
jl_Math_round = var$1 => {
    return var$1 + jl_Math_signum(var$1) * 0.5 | 0;
},
jl_Math_randomImpl = () => {
    return Math.random();
},
jl_Math_min = ($a, $b) => {
    if ($a < $b)
        $b = $a;
    return $b;
},
jl_Math_max = ($a, $b) => {
    if ($a > $b)
        $b = $a;
    return $b;
},
jl_Math_minImpl = (var$1, var$2) => {
    return Math.min(var$1, var$2);
},
jl_Math_min0 = (var$1, var$2) => {
    return jl_Math_minImpl(var$1, var$2);
},
jl_Math_maxImpl = (var$1, var$2) => {
    return Math.max(var$1, var$2);
},
jl_Math_max0 = (var$1, var$2) => {
    return jl_Math_maxImpl(var$1, var$2);
},
jl_Math_abs0 = $n => {
    if ($n < 0)
        $n =  -$n | 0;
    return $n;
},
jl_Math_abs1 = $n => {
    if (Long_lt($n, Long_ZERO))
        $n = Long_neg($n);
    return $n;
},
jl_Math_absImpl = var$1 => {
    return Math.abs(var$1);
},
jl_Math_abs = var$1 => {
    return jl_Math_absImpl(var$1);
},
jl_Math_absImpl0 = var$1 => {
    return Math.abs(var$1);
},
jl_Math_sign = var$1 => {
    return Math.sign(var$1);
},
jl_Math_signum = var$1 => {
    return jl_Math_sign(var$1);
},
jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalArgumentException__init_0 = $this => {
    jl_Throwable__init_($this);
},
jl_IllegalArgumentException__init_ = () => {
    let var_0 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_0(var_0);
    return var_0;
},
jl_IllegalArgumentException__init_1 = ($this, $message) => {
    jl_Exception__init_($this, $message);
},
jl_IllegalArgumentException__init_2 = var_0 => {
    let var_1 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_1(var_1, var_0);
    return var_1;
},
ju_Objects = $rt_classWithoutFields(),
ju_Objects__init_ = $this => {
    return;
},
ju_Objects__init_0 = () => {
    let var_0 = new ju_Objects();
    ju_Objects__init_(var_0);
    return var_0;
},
ju_Objects_equals = ($a, $b) => {
    if ($a === $b)
        return 1;
    return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
},
ju_Objects_hashCode = $o => {
    return $o !== null ? $o.$hashCode() : 0;
},
ju_Objects_requireNonNull = $obj => {
    if ($obj !== null)
        return $obj;
    $obj = new jl_NullPointerException;
    jl_Exception__init_($obj, $rt_s(9));
    $rt_throw($obj);
},
ju_Objects_checkFromIndexSize = ($fromIndex, $size, $length) => {
    let var$4;
    if ($fromIndex >= 0 && $size >= 0 && $size <= ($length - $fromIndex | 0))
        return $fromIndex;
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
};
function otji_JSWrapper() {
    jl_Object.call(this);
    this.$js = null;
}
let otji_JSWrapper__init_0 = ($this, $js) => {
    $this.$js = $js;
},
otji_JSWrapper__init_ = var_0 => {
    let var_1 = new otji_JSWrapper();
    otji_JSWrapper__init_0(var_1, var_0);
    return var_1;
},
otji_JSWrapper_wrap = $jsNumber => {
    let $type, $isObject, $wrappers, $existingRef, $existing, $wrapper, $stringWrappers, $stringFinalizationRegistry, $wrapperAsJs, $numberWrappers, $numberFinalizationRegistry;
    if ($jsNumber === null)
        return null;
    $type = $rt_str(typeof $jsNumber);
    $isObject = !jl_String_equals($type, $rt_s(97)) && !jl_String_equals($type, $rt_s(98)) ? 0 : 1;
    otji_JSWrapper$Helper_$callClinit();
    $wrappers = otji_JSWrapper$Helper_wrappers;
    if ($wrappers !== null) {
        if ($isObject) {
            $existingRef = $wrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrappers.set($jsNumber, new WeakRef($wrapper));
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(99))) {
            $stringWrappers = otji_JSWrapper$Helper_stringWrappers;
            $stringFinalizationRegistry = otji_JSWrapper$Helper_stringFinalizationRegistry;
            $existingRef = $stringWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            $stringWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4($stringFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(100))) {
            $numberWrappers = otji_JSWrapper$Helper_numberWrappers;
            $numberFinalizationRegistry = otji_JSWrapper$Helper_numberFinalizationRegistry;
            $existingRef = $numberWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            $numberWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4($numberFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(101))) {
            $existingRef = otji_JSWrapper$Helper_undefinedWrapper;
            $existing = $existingRef === null ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            otji_JSWrapper$Helper_undefinedWrapper = new WeakRef($wrapper);
            return $wrapper;
        }
    }
    return otji_JSWrapper__init_($jsNumber);
},
otji_JSWrapper_unwrap = $o => {
    if ($o === null)
        return null;
    return !($o instanceof otji_JSWrapper) ? $o : $o.$js;
},
otji_JSWrapper_javaToJs = $o => {
    if ($o === null)
        return null;
    return $o instanceof $rt_objcls() && $o instanceof otji_JSWrapper ? otji_JSWrapper_unwrap($o) : $o;
},
otji_JSWrapper_jsToJava = $o => {
    if ($o === null)
        return null;
    return $o instanceof $rt_objcls() ? $o : otji_JSWrapper_wrap($o);
},
otji_JSWrapper_register$js_body$_4 = (var$1, var$2, var$3) => {
    return var$1.register(var$2, var$3);
},
cgxgbta_TeaWebAgent = $rt_classWithoutFields(),
cgxgbta_TeaWebAgent__init_ = $this => {
    return;
},
cgxgbta_TeaWebAgent__init_0 = () => {
    let var_0 = new cgxgbta_TeaWebAgent();
    cgxgbta_TeaWebAgent__init_(var_0);
    return var_0;
},
cgxgbta_TeaWebAgent_createAgent$js_body$_1 = () => {
    var userAgent = navigator.userAgent.toLowerCase();
    return { firefox : userAgent.indexOf('firefox') !=  -1, chrome : userAgent.indexOf('chrome') !=  -1, safari : userAgent.indexOf('safari') !=  -1, opera : userAgent.indexOf('opera') !=  -1, IE : userAgent.indexOf('msie') !=  -1, macOS : userAgent.indexOf('mac') !=  -1, linux : userAgent.indexOf('linux') !=  -1, windows : userAgent.indexOf('win') !=  -1, userAgent : userAgent };
},
jl_System = $rt_classWithoutFields(),
jl_System_outCache = null,
jl_System_errCache = null,
jl_System_properties = null,
jl_System__init_ = $this => {
    return;
},
jl_System__init_0 = () => {
    let var_0 = new jl_System();
    jl_System__init_(var_0);
    return var_0;
},
jl_System_out = () => {
    let var$1;
    if (jl_System_outCache === null) {
        var$1 = new otcic_JSStdoutPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_outCache = var$1;
    }
    return jl_System_outCache;
},
jl_System_err = () => {
    let var$1;
    if (jl_System_errCache === null) {
        var$1 = new otcic_JSStderrPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_errCache = var$1;
    }
    return jl_System_errCache;
},
jl_System_arraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    let $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12, $elem, var$14;
    if ($src !== null && $dest !== null) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            a: {
                b: {
                    if ($src !== $dest) {
                        $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                        $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                        if ($srcType !== null && $targetType !== null) {
                            if ($srcType === $targetType)
                                break b;
                            if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                $srcArray = $src;
                                $i = 0;
                                var$10 = $srcPos;
                                while ($i < $length) {
                                    var$11 = $srcArray.data;
                                    var$12 = var$10 + 1 | 0;
                                    $elem = var$11[var$10];
                                    var$14 = $targetType.$platformClass;
                                    if (!($elem !== null && !(typeof $elem.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($elem.constructor, var$14) ? 1 : 0)) {
                                        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                        $src = new jl_ArrayStoreException;
                                        jl_Throwable__init_($src);
                                        $rt_throw($src);
                                    }
                                    $i = $i + 1 | 0;
                                    var$10 = var$12;
                                }
                                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                return;
                            }
                            if (!jl_Class_isPrimitive($srcType))
                                break a;
                            if (jl_Class_isPrimitive($targetType))
                                break b;
                            else
                                break a;
                        }
                        $src = new jl_ArrayStoreException;
                        jl_Throwable__init_($src);
                        $rt_throw($src);
                    }
                }
                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                return;
            }
            $src = new jl_ArrayStoreException;
            jl_Throwable__init_($src);
            $rt_throw($src);
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($src);
        $rt_throw($src);
    }
    $dest = new jl_NullPointerException;
    jl_Exception__init_($dest, $rt_s(102));
    $rt_throw($dest);
},
jl_System_fastArraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
        return;
    }
    $src = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($src);
    $rt_throw($src);
},
jl_System_doArrayCopy = (var$1, var$2, var$3, var$4, var$5) => {
    if (var$5 !== 0) {
        if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = var$2 + var$5 | 0;
            var$4 = var$4 + var$5 | 0;
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[ --var$4] = var$1.data[ --var$2];
            }
        }
    }
},
jl_System_currentTimeMillis = () => {
    return Long_fromNumber((new Date()).getTime());
},
jl_System_setProperty = (var$1, var$2) => {
    let var$3, var$4, var$5;
    if (jl_System_properties === null) {
        var$3 = new ju_Properties;
        ju_Hashtable__init_(var$3);
        var$4 = var$3;
        ju_Hashtable_put(var$4, $rt_s(103), $rt_s(104));
        ju_Hashtable_put(var$4, $rt_s(56), $rt_s(105));
        ju_Hashtable_put(var$4, $rt_s(106), $rt_s(107));
        ju_Hashtable_put(var$4, $rt_s(108), $rt_s(109));
        ju_Hashtable_put(var$4, $rt_s(110), $rt_s(36));
        ju_Hashtable_put(var$4, $rt_s(111), $rt_s(112));
        ju_Hashtable_put(var$4, $rt_s(113), $rt_s(104));
        ju_Hashtable_put(var$4, $rt_s(114), $rt_s(107));
        var$5 = new ju_Properties;
        ju_Hashtable__init_(var$5);
        var$5.$defaults = var$3;
        jl_System_properties = var$5;
    }
    return ju_Hashtable_put(jl_System_properties, var$1, var$2);
},
cbg_Graphics = $rt_classWithoutFields(0);
function cgxgbt_TeaGraphics() {
    let a = this; jl_Object.call(a);
    a.$context = null;
    a.$canvas0 = null;
    a.$config0 = null;
    a.$gl20 = null;
    a.$gl30 = null;
    a.$glVersion = null;
    a.$fps = 0.0;
    a.$lastTimeStamp = Long_ZERO;
    a.$frameId = Long_ZERO;
    a.$deltaTime = 0.0;
    a.$time0 = 0.0;
    a.$frames = 0;
}
let cgxgbt_TeaGraphics__init_0 = ($this, $config) => {
    let $attr, $canvas1, $window, $document, $versionString, $vendorString, $rendererString, $width, $currentWindow, var$11, var$12;
    $this.$fps = 0.0;
    $this.$lastTimeStamp = jl_System_currentTimeMillis();
    $this.$frameId = Long_fromInt(-1);
    $this.$deltaTime = 0.0;
    $this.$time0 = 0.0;
    $this.$config0 = $config;
    $this.$canvas0 = (cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow__init_0())).getElementById($rt_ustr($config.$canvasID));
    $attr = cgxgbtg_WebGLContextAttributesWrapper_create$js_body$_14();
    $attr.alpha = !!$config.$alpha;
    $attr.antialias = !!$config.$antialiasing;
    $attr.stencil = !!$config.$stencil;
    $attr.premultipliedAlpha = !!$config.$premultipliedAlpha;
    $attr.preserveDrawingBuffer = !!$config.$preserveDrawingBuffer;
    $attr.powerPreference = $rt_ustr($config.$powerPreference);
    $canvas1 = $this.$canvas0;
    if ($config.$useGL30)
        $this.$context = $canvas1.getContext("webgl2", $attr);
    a: {
        if ($config.$useGL30) {
            $window = $this.$context;
            if ($window !== null) {
                if (!$config.$useDebugGL)
                    $document = cgxgbt_TeaGL30__init_0($window);
                else {
                    $document = new cgxgbt_TeaGL30Debug;
                    cgxgbt_TeaGL30__init_($document, $window);
                }
                $this.$gl30 = $document;
                $this.$gl20 = $document;
                break a;
            }
        }
        $document = $canvas1.getContext("webgl", $attr);
        $this.$context = $document;
        if (!$config.$useDebugGL)
            $window = cgxgbt_TeaGL20__init_0($document);
        else {
            $window = new cgxgbt_TeaGL20Debug;
            cgxgbt_TeaGL20__init_($window, $document);
        }
        $this.$gl20 = $window;
    }
    $versionString = $this.$gl20.$glGetString(7938);
    $vendorString = $this.$gl20.$glGetString(7936);
    $rendererString = $this.$gl20.$glGetString(7937);
    $canvas1 = new cbggg_GLVersion;
    $window = cbg_Application$ApplicationType_WebGL;
    $canvas1.$TAG = $rt_s(115);
    if ($window === cbg_Application$ApplicationType_Android)
        $canvas1.$type1 = cbggg_GLVersion$Type_GLES;
    else if ($window === cbg_Application$ApplicationType_iOS)
        $canvas1.$type1 = cbggg_GLVersion$Type_GLES;
    else if ($window === cbg_Application$ApplicationType_Desktop)
        $canvas1.$type1 = cbggg_GLVersion$Type_OpenGL;
    else if ($window === cbg_Application$ApplicationType_Applet)
        $canvas1.$type1 = cbggg_GLVersion$Type_OpenGL;
    else if ($window !== $window)
        $canvas1.$type1 = cbggg_GLVersion$Type_NONE;
    else
        $canvas1.$type1 = cbggg_GLVersion$Type_WebGL;
    $window = $canvas1.$type1;
    if ($window === cbggg_GLVersion$Type_GLES)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(116), $versionString);
    else if ($window === cbggg_GLVersion$Type_WebGL)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(117), $versionString);
    else if ($window === cbggg_GLVersion$Type_OpenGL)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(118), $versionString);
    else {
        $canvas1.$majorVersion = (-1);
        $canvas1.$minorVersion = (-1);
        $canvas1.$releaseVersion = (-1);
        $vendorString = $rt_s(9);
        $rendererString = $rt_s(9);
    }
    $canvas1.$versionString = $versionString;
    $canvas1.$vendorString = $vendorString;
    $canvas1.$rendererString = $rendererString;
    $this.$glVersion = $canvas1;
    $width = $config.$width3;
    if (!($width < 0 && $config.$height0 < 0)) {
        if ($width && $config.$height0 ? 1 : 0)
            cgxgbt_TeaGraphics_setCanvasSize($this, $width, $config.$height0, 0);
        else {
            $currentWindow = cgxgbtdi_TeaWindow_get();
            cgxgbt_TeaGraphics_setCanvasSize($this, cgxgbtdi_TeaWindow_getClientWidth($currentWindow) - $config.$padHorizontal | 0, cgxgbtdi_TeaWindow_getClientHeight($currentWindow) - $config.$padVertical | 0, $config.$usePhysicalPixels);
        }
    }
    $config = $this.$context;
    var$11 = cgxgbt_TeaGraphics_getWidth($this);
    var$12 = cgxgbt_TeaGraphics_getHeight($this);
    $config.viewport(0, 0, var$11, var$12);
    $config = $this.$canvas0;
    $window = new cgxgbt_TeaGraphics$1;
    $window.$this$023 = $this;
    cgxgbt_TeaGraphics_addFullscreenChangeListener$js_body$_61($config, otji_JS_function(otji_JSWrapper_unwrap($window), "fullscreenChanged"));
},
cgxgbt_TeaGraphics__init_ = var_0 => {
    let var_1 = new cgxgbt_TeaGraphics();
    cgxgbt_TeaGraphics__init_0(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGraphics_getWidth = $this => {
    return $this.$canvas0.width;
},
cgxgbt_TeaGraphics_getHeight = $this => {
    return $this.$canvas0.height;
},
cgxgbt_TeaGraphics_getBackBufferWidth = $this => {
    return $this.$canvas0.width;
},
cgxgbt_TeaGraphics_getBackBufferHeight = $this => {
    return $this.$canvas0.height;
},
cgxgbt_TeaGraphics_setCanvasSize = ($this, $width, $height, $usePhysicalPixels) => {
    let $density, $w, $h, $style, var$8;
    $density = 1.0;
    if ($usePhysicalPixels)
        $density = devicePixelRatio || 1;
    $w = $width * $density | 0;
    $h = $height * $density | 0;
    $this.$canvas0.width = $w;
    $this.$canvas0.height = $h;
    if ($usePhysicalPixels) {
        $style = $this.$canvas0.style;
        cgxgbtd_StyleWrapper$Unit_$callClinit();
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append1(var$8, $width);
        jl_AbstractStringBuilder_append(var$8, $rt_s(119));
        $style.setProperty("width", $rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append1(var$8, $height);
        jl_AbstractStringBuilder_append(var$8, $rt_s(119));
        $style.setProperty("height", $rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
    }
},
cgxgbt_TeaGraphics_supportsExtension = ($this, $extensionName) => {
    return $this.$context.getExtension($rt_ustr($extensionName)) === null ? 0 : 1;
},
cgxgbt_TeaGraphics_addFullscreenChangeListener$js_body$_61 = (var$1, var$2) => {
    if (var$1.requestFullscreen) {
        document.addEventListener("fullscreenchange", var$2, false);
    }
    if (var$1.webkitRequestFullScreen) {
        document.addEventListener("webkitfullscreenchange", var$2, false);
    }
    if (var$1.mozRequestFullScreen) {
        document.addEventListener("mozfullscreenchange", var$2, false);
    }
    if (var$1.msRequestFullscreen) {
        document.addEventListener("msfullscreenchange", var$2, false);
    }
},
cgxgbta_AssetDownloader = $rt_classWithoutFields(0);
function cgxgbta_AssetDownloadImpl() {
    let a = this; jl_Object.call(a);
    a.$queue = 0;
    a.$showLogs = 0;
}
let cgxgbta_AssetDownloadImpl_subtractQueue = $this => {
    $this.$queue = $this.$queue - 1 | 0;
},
cgxgbta_AssetDownloadImpl_addQueue = $this => {
    $this.$queue = $this.$queue + 1 | 0;
},
cgxgbta_AssetDownloadImpl_load = ($this, $async, $url, $type, $listener) => {
    let $internalListener, var$6;
    $internalListener = new cgxgbta_AssetDownloadImpl$1;
    $internalListener.$this$07 = $this;
    $internalListener.$val$listener = $listener;
    if ($this.$showLogs) {
        $listener = jl_System_out();
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, $rt_s(120));
        jl_AbstractStringBuilder_append(var$6, $url);
        var$6 = jl_AbstractStringBuilder_toString(var$6);
        otcic_JsConsolePrintStream_println($listener, var$6);
    }
    a: {
        cgxgbta_AssetDownloadImpl$3_$callClinit();
        switch (cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType.data[$type.$ordinal0]) {
            case 1:
                break;
            case 2:
                $type = null;
                cgxgbta_AssetDownloadImpl$1_onSuccess($internalListener, $url, $type);
                break a;
            default:
                $url = new cbgu_GdxRuntimeException;
                $type = jl_String_valueOf($type);
                $listener = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listener);
                jl_AbstractStringBuilder_append($listener, $rt_s(121));
                jl_AbstractStringBuilder_append($listener, $type);
                jl_Exception__init_($url, jl_AbstractStringBuilder_toString($listener));
                $rt_throw($url);
        }
        cgxgbta_AssetDownloadImpl_loadBinary($this, $async, $url, $internalListener, 0);
    }
},
cgxgbta_AssetDownloadImpl_loadBinary = ($this, $async, $url, $listener, $count) => {
    let var$5;
    if ($count == 3) {
        if ($listener !== null)
            cgxgbta_AssetDownloadImpl$1_onFailure($listener, $url);
        return;
    }
    cgxgbta_AssetDownloadImpl_addQueue($this);
    if (!$async)
        cgxgbta_AssetDownloadImpl_loadBinaryInternally($this, 0, $url, $listener, $count);
    else {
        var$5 = new cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0;
        var$5.$_00 = $this;
        var$5.$_10 = $url;
        var$5.$_20 = $listener;
        var$5.$_30 = $count;
        setTimeout(otji_JS_function(otji_JSWrapper_unwrap(var$5), "onTimer"), 0);
    }
},
cgxgbta_AssetDownloadImpl_loadBinaryInternally = ($this, $async, $url, $listener, $count) => {
    let $request, var$6;
    $request = new XMLHttpRequest();
    var$6 = new cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0;
    var$6.$_06 = $this;
    var$6.$_14 = $request;
    var$6.$_23 = $listener;
    var$6.$_32 = $url;
    var$6.$_40 = $count;
    var$6.$_5 = $async;
    $request.onreadystatechange = otji_JS_function(otji_JSWrapper_unwrap(var$6), "handleEvent");
    var$6 = new cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0;
    var$6.$_018 = $listener;
    $listener = otji_JSWrapper_unwrap(var$6);
    $request.addEventListener("progress", otji_JS_function($listener, "handleEvent"));
    $request.open("GET", $rt_ustr($url), !!$async);
    if ($async)
        $request.responseType = "arraybuffer";
    $request.send();
},
cgxgbta_AssetInstance = $rt_classWithoutFields(),
cgxgbta_AssetInstance_downloaderInstance = null,
cgxgbta_AssetInstance_instance = null,
cgxgbta_AssetInstance__init_ = $this => {
    return;
},
cgxgbta_AssetInstance__init_0 = () => {
    let var_0 = new cgxgbta_AssetInstance();
    cgxgbta_AssetInstance__init_(var_0);
    return var_0;
},
cgxgbta_AssetLoader = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl() {
    let a = this; jl_Object.call(a);
    a.$assetTotal = 0;
    a.$baseUrl = null;
    a.$assetInQueue = null;
    a.$assetDownloader = null;
}
let cgxgbta_AssetLoadImpl_getAssetUrl = $this => {
    let var$1, var$2;
    var$1 = $this.$baseUrl;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, var$1);
    jl_AbstractStringBuilder_append(var$2, $rt_s(122));
    return jl_AbstractStringBuilder_toString(var$2);
},
cgxgbta_AssetLoadImpl_getScriptUrl = $this => {
    let var$1, var$2;
    var$1 = $this.$baseUrl;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, var$1);
    jl_AbstractStringBuilder_append(var$2, $rt_s(123));
    return jl_AbstractStringBuilder_toString(var$2);
},
cgxgbta_AssetLoadImpl_preload = ($this, $config, $assetFileUrl) => {
    let $listener, var$4, var$5;
    $listener = new cgxgbta_AssetLoadImpl$5;
    $listener.$this$03 = $this;
    $listener.$val$config = $config;
    $listener.$val$assetFileUrl = $assetFileUrl;
    $config = $this.$assetDownloader;
    var$4 = cgxgbta_AssetLoadImpl_getAssetUrl($this);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, var$4);
    jl_AbstractStringBuilder_append(var$5, $assetFileUrl);
    $assetFileUrl = jl_AbstractStringBuilder_toString(var$5);
    var$4 = cgxgbta_AssetType_Binary;
    cgxgbta_AssetDownloadImpl_load($config, 1, $assetFileUrl, var$4, $listener);
},
cgxgbta_AssetLoadImpl_loadScript = ($this, $path, $listener) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = $this.$assetDownloader;
    var$4 = cgxgbta_AssetLoadImpl_getScriptUrl($this);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, var$4);
    jl_AbstractStringBuilder_append(var$5, $path);
    var$6 = jl_AbstractStringBuilder_toString(var$5);
    $path = var$3;
    if ($path.$showLogs) {
        var$3 = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(124));
        jl_AbstractStringBuilder_append(var$4, var$6);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, var$4);
    }
    cgxgbta_AssetDownloadImpl_addQueue($path);
    var$5 = window.document;
    var$7 = var$5.createElement("script");
    var$3 = new cgxgbta_AssetDownloadImpl$2;
    var$3.$this$05 = $path;
    var$3.$val$url = var$6;
    var$3.$val$listener1 = $listener;
    var$7.addEventListener("load", otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent"));
    var$4 = new cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0;
    var$4.$_02 = $path;
    var$4.$_11 = var$6;
    var$4.$_21 = $listener;
    var$7.addEventListener("error", otji_JS_function(otji_JSWrapper_unwrap(var$4), "handleEvent"));
    $path = $rt_ustr(var$6);
    var$7.src = $path;
    var$5.body.appendChild(var$7);
},
cgxgbta_AssetLoadImpl_getQueue = $this => {
    return $this.$assetDownloader.$queue;
};
function cgxjc_JMultiplatform() {
    jl_Object.call(this);
    this.$map1 = null;
}
let cgxjc_JMultiplatform_platformMap = null,
cgxjc_JMultiplatform__init_ = $this => {
    $this.$map1 = cgxjc_JPlatformMap__init_0();
},
cgxjc_JMultiplatform__init_0 = () => {
    let var_0 = new cgxjc_JMultiplatform();
    cgxjc_JMultiplatform__init_(var_0);
    return var_0;
};
function cgxjc_JPlatformMap() {
    jl_Object.call(this);
    this.$map2 = null;
}
let cgxjc_JPlatformMap__init_ = $this => {
    $this.$map2 = ju_HashMap__init_();
},
cgxjc_JPlatformMap__init_0 = () => {
    let var_0 = new cgxjc_JPlatformMap();
    cgxjc_JPlatformMap__init_(var_0);
    return var_0;
},
cgxjc_JPlatformMap_put = ($this, $key, $value) => {
    ju_HashMap_put($this.$map2, $key, $value);
},
cbg_Input = $rt_classWithoutFields(0);
function cbg_AbstractInput() {
    let a = this; jl_Object.call(a);
    a.$pressedKeys = null;
    a.$justPressedKeys = null;
    a.$keysToCatch = null;
}
let cbg_AbstractInput_isCatchKey = ($this, $keycode) => {
    let var$2;
    var$2 = $this.$keysToCatch;
    return !$keycode ? var$2.$hasZeroValue0 : cbgu_IntSet_locateKey(var$2, $keycode) < 0 ? 0 : 1;
},
cgxgbtd_EventListenerWrapper = $rt_classWithoutFields(0);
function cgxgbt_TeaInput() {
    let a = this; cbg_AbstractInput.call(a);
    a.$canvas = null;
    a.$justTouched = 0;
    a.$touchMap = null;
    a.$touched = null;
    a.$touchX = null;
    a.$touchY = null;
    a.$deltaX = null;
    a.$deltaY = null;
    a.$pressedButtons = null;
    a.$pressedKeyCount = 0;
    a.$keyJustPressed = 0;
    a.$justPressedButtons = null;
    a.$processor = null;
    a.$currentEventTimeStamp = Long_ZERO;
    a.$hasFocus = 0;
    a.$application = null;
}
let cgxgbt_TeaInput_getMouseWheelVelocity = $event => {
    let $agent, $delta, $detail, $wheelDelta;
    $agent = cgxgbt_TeaApplication_agentInfo;
    $delta = 0.0;
    $detail = $event.detail;
    $wheelDelta = $event.wheelDelta;
    if ($agent.firefox ? 1 : 0)
        $delta = ($agent.macOS ? 1 : 0) ? 1.0 * $detail : 1.0 * $detail / 3.0;
    else if ($agent.opera ? 1 : 0)
        $delta = !($agent.linux ? 1 : 0) ? (-1.0) * $wheelDelta / 40.0 : (-1.0) * $wheelDelta / 80.0;
    else if (!(!($agent.chrome ? 1 : 0) && !($agent.safari ? 1 : 0) && !($agent.IE ? 1 : 0))) {
        $delta = (-1.0) * $wheelDelta;
        $detail = $delta / 120.0;
        if (jl_Math_abs($detail) >= 1.0)
            $delta = $detail;
        else if (!($agent.windows ? 1 : 0))
            $delta = !($agent.macOS ? 1 : 0) ? $detail : $delta / 3.0;
    }
    return $delta;
},
cgxgbt_TeaInput__init_0 = ($this, $application, $canvas) => {
    $this.$keysToCatch = cbgu_IntSet__init_0();
    $this.$pressedKeys = $rt_createBooleanArray(256);
    $this.$justPressedKeys = $rt_createBooleanArray(256);
    $this.$justTouched = 0;
    $this.$touchMap = cbgu_IntMap__init_1(20, 0.800000011920929);
    $this.$touched = $rt_createBooleanArray(20);
    $this.$touchX = $rt_createIntArray(20);
    $this.$touchY = $rt_createIntArray(20);
    $this.$deltaX = $rt_createIntArray(20);
    $this.$deltaY = $rt_createIntArray(20);
    $this.$pressedButtons = cbgu_IntSet__init_0();
    $this.$pressedKeyCount = 0;
    $this.$keyJustPressed = 0;
    $this.$justPressedButtons = $rt_createBooleanArray(5);
    $this.$hasFocus = 1;
    $this.$application = $application;
    $this.$canvas = $canvas;
    cgxgbt_TeaInput_hookEvents($this);
},
cgxgbt_TeaInput__init_ = (var_0, var_1) => {
    let var_2 = new cgxgbt_TeaInput();
    cgxgbt_TeaInput__init_0(var_2, var_0, var_1);
    return var_2;
},
cgxgbt_TeaInput_hookEvents = $this => {
    let $document;
    $document = $this.$canvas.ownerDocument;
    $document.addEventListener("mousedown", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("mouseup", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("mousemove", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("wheel", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keydown", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keyup", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keypress", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $this.$canvas.addEventListener("touchstart", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchmove", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchcancel", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchend", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
},
cgxgbt_TeaInput_handleMouseEvents = ($this, $touchEvent) => {
    let $type, $target, $canvas2, var$5, $button, $relativeX, $relativeY, $touch, $i, $real, $mouseX, $mouseY, $wheelDelta, $touches, $j, $equals, $touch_0, $touchId, $j_0, var$21;
    a: {
        $type = $rt_str($touchEvent.type);
        if (jl_String_equals($type, $rt_s(125))) {
            window.focus();
            $target = $touchEvent.target;
            $canvas2 = $this.$canvas;
            if ($target !== $canvas2 ? 0 : 1) {
                var$5 = $this.$touched.data;
                if (!var$5[0]) {
                    $this.$hasFocus = 1;
                    $this.$justTouched = 1;
                    var$5[0] = 1;
                    $button = cgxgbtu_KeyCodes_getButton($touchEvent.button);
                    cbgu_IntSet_add($this.$pressedButtons, $button);
                    $this.$justPressedButtons.data[$button] = 1;
                    $this.$deltaX.data[0] = 0;
                    $this.$deltaY.data[0] = 0;
                    if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                        $relativeX = cgxgbt_TeaInput_getRelativeX($this, $touchEvent, $this.$canvas);
                        $relativeY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
                        $this.$touchX.data[0] = $relativeX;
                        $this.$touchY.data[0] = $relativeY;
                    } else {
                        var$5 = $this.$touchX.data;
                        var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                        var$5 = $this.$touchY.data;
                        var$5[0] = var$5[0] + $touchEvent.movementY | 0;
                    }
                    $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
                    $touch = $this.$processor;
                    if ($touch !== null) {
                        $i = $this.$touchX.data[0];
                        $real = $this.$touchY.data[0];
                        $relativeY = cgxgbtu_KeyCodes_getButton($touchEvent.button);
                        pss_Control_touchDown($touch, $i, $real, 0, $relativeY);
                    }
                    $touchEvent.preventDefault();
                    $touchEvent.stopPropagation();
                    break a;
                }
            }
            $mouseX = cgxgbt_TeaInput_getRelativeX($this, $touchEvent, $canvas2);
            $mouseY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
            if (!($mouseX >= 0.0 && $mouseX <= cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics) && $mouseY >= 0.0 && $mouseY <= cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics)))
                $this.$hasFocus = 0;
            return;
        }
        if (jl_String_equals($type, $rt_s(126))) {
            if (!$this.$touched.data[0])
                return;
            cbgu_IntSet_remove($this.$pressedButtons, cgxgbtu_KeyCodes_getButton($touchEvent.button));
            var$5 = $this.$touched;
            var$5.data[0] = $this.$pressedButtons.$size5 <= 0 ? 0 : 1;
            if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                cgxgbt_TeaInput_setDelta($this, 0, cgxgbt_TeaInput_getRelativeX($this, $touchEvent, $this.$canvas) - $this.$touchX.data[0] | 0, cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas) - $this.$touchY.data[0] | 0);
                $this.$touchX.data[0] = cgxgbt_TeaInput_getRelativeX($this, $touchEvent, $this.$canvas);
                $this.$touchY.data[0] = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
            } else {
                cgxgbt_TeaInput_setDelta($this, 0, $touchEvent.movementX | 0, $touchEvent.movementY | 0);
                var$5 = $this.$touchX.data;
                var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                var$5 = $this.$touchY.data;
                var$5[0] = var$5[0] + $touchEvent.movementY | 0;
            }
            $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            $this.$touched.data[0] = 0;
            $touch = $this.$processor;
            if ($touch !== null) {
                $i = $this.$touchX.data[0];
                $real = $this.$touchY.data[0];
                $relativeY = cgxgbtu_KeyCodes_getButton($touchEvent.button);
                pss_Control_touchUp($touch, $i, $real, 0, $relativeY);
            }
        } else if (!jl_String_equals($type, $rt_s(127))) {
            if (jl_String_equals($type, $rt_s(128))) {
                if ($this.$processor !== null) {
                    $wheelDelta = cgxgbt_TeaInput_getMouseWheelVelocity($touchEvent);
                    $touch = $this.$processor;
                    $wheelDelta = $wheelDelta | 0;
                    pss_Control_scrolled($touch, 0.0, $wheelDelta);
                }
                $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            } else if (jl_String_equals($type, $rt_s(129))) {
                $this.$justTouched = 1;
                $touches = $touchEvent.changedTouches;
                $i = 0;
                $j = $touches.length;
                while ($i < $j) {
                    $touch = $touches.item($i);
                    $real = $touch.identifier;
                    $canvas2 = $this.$touchMap;
                    $equals = cgxgbt_TeaInput_getAvailablePointer($this);
                    cbgu_IntMap_put($canvas2, $real, jl_Integer_valueOf($equals));
                    $this.$touched.data[$equals] = 1;
                    $this.$touchX.data[$equals] = cgxgbt_TeaInput_getRelativeX0($this, $touch, $this.$canvas);
                    $this.$touchY.data[$equals] = cgxgbt_TeaInput_getRelativeY($this, $touch, $this.$canvas);
                    $this.$deltaX.data[$equals] = 0;
                    $this.$deltaY.data[$equals] = 0;
                    $touch = $this.$processor;
                    if ($touch !== null) {
                        $real = $this.$touchX.data[$equals];
                        $relativeX = $this.$touchY.data[$equals];
                        pss_Control_touchDown($touch, $real, $relativeX, $equals, 0);
                    }
                    $i = $i + 1 | 0;
                }
                $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
                $touchEvent.preventDefault();
            }
        } else {
            if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                $relativeX = cgxgbt_TeaInput_getRelativeX($this, $touchEvent, $this.$canvas);
                $relativeY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
                cgxgbt_TeaInput_setDelta($this, 0, $relativeX - $this.$touchX.data[0] | 0, $relativeY - $this.$touchY.data[0] | 0);
                $this.$touchX.data[0] = $relativeX;
                $this.$touchY.data[0] = $relativeY;
            } else {
                cgxgbt_TeaInput_setDelta($this, 0, $touchEvent.movementX | 0, $touchEvent.movementY | 0);
                var$5 = $this.$touchX.data;
                var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                var$5 = $this.$touchY.data;
                var$5[0] = var$5[0] + $touchEvent.movementY | 0;
            }
            $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            $touch = $this.$processor;
            if ($touch !== null) {
                if (!$this.$touched.data[0]) {
                    $i = $this.$touchX.data[0];
                    $real = $this.$touchY.data[0];
                    pss_Control_mouseMoved($touch, $i, $real);
                } else {
                    $i = $this.$touchX.data[0];
                    $real = $this.$touchY.data[0];
                    pss_Control_touchDragged($touch, $i, $real, 0);
                }
            }
        }
    }
    if (jl_String_equals($type, $rt_s(130))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j = $touches.length;
        while ($i < $j) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get($this.$touchMap, $real));
            cgxgbt_TeaInput_setDelta($this, $touchId, cgxgbt_TeaInput_getRelativeX0($this, $touch_0, $this.$canvas) - $this.$touchX.data[$touchId] | 0, cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas) - $this.$touchY.data[$touchId] | 0);
            $this.$touchX.data[$touchId] = cgxgbt_TeaInput_getRelativeX0($this, $touch_0, $this.$canvas);
            $this.$touchY.data[$touchId] = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            $touch = $this.$processor;
            if ($touch !== null) {
                $real = $this.$touchX.data[$touchId];
                $relativeX = $this.$touchY.data[$touchId];
                pss_Control_touchDragged($touch, $real, $relativeX, $touchId);
            }
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
    if (jl_String_equals($type, $rt_s(131))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j_0 = $touches.length;
        while ($i < $j_0) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get($this.$touchMap, $real));
            cbgu_IntMap_remove($this.$touchMap, $real);
            $this.$touched.data[$touchId] = 0;
            $relativeX = cgxgbt_TeaInput_getRelativeX0($this, $touch_0, $this.$canvas);
            $relativeY = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            cgxgbt_TeaInput_setDelta($this, $touchId, $relativeX - $this.$touchX.data[$touchId] | 0, $relativeY - $this.$touchY.data[$touchId] | 0);
            var$5 = $this.$touchX.data;
            var$5[$touchId] = $relativeX;
            var$21 = $this.$touchY.data;
            var$21[$touchId] = $relativeY;
            $touch = $this.$processor;
            if ($touch !== null) {
                $real = var$5[$touchId];
                $relativeX = var$21[$touchId];
                pss_Control_touchUp($touch, $real, $relativeX, $touchId, 0);
            }
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
    if (jl_String_equals($type, $rt_s(132))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j_0 = $touches.length;
        while ($i < $j_0) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get($this.$touchMap, $real));
            cbgu_IntMap_remove($this.$touchMap, $real);
            $this.$touched.data[$touchId] = 0;
            $relativeX = cgxgbt_TeaInput_getRelativeX0($this, $touch_0, $this.$canvas);
            $relativeY = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            cgxgbt_TeaInput_setDelta($this, $touchId, $relativeX - $this.$touchX.data[$touchId] | 0, $relativeY - $this.$touchY.data[$touchId] | 0);
            var$5 = $this.$touchX.data;
            var$5[$touchId] = $relativeX;
            var$21 = $this.$touchY.data;
            var$21[$touchId] = $relativeY;
            $touch = $this.$processor;
            if ($touch !== null) {
                $real = var$5[$touchId];
                $relativeX = var$21[$touchId];
                pss_Control_touchUp($touch, $real, $relativeX, $touchId, 0);
            }
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
},
cgxgbt_TeaInput_handleKeyboardEvents = ($this, $keyboardEvent) => {
    let $type, $code, var$4, var$5;
    $type = $rt_str($keyboardEvent.type);
    if (!(jl_String_equals($type, $rt_s(133)) && $this.$hasFocus)) {
        if (jl_String_equals($type, $rt_s(134)) && $this.$hasFocus) {
            if (($keyboardEvent.charCode & 65535) == 9) {
                $keyboardEvent.preventDefault();
                $keyboardEvent.stopPropagation();
            }
        } else if (jl_String_equals($type, $rt_s(135)) && $this.$hasFocus) {
            $code = cgxgbtu_KeyCodes_keyForCode($keyboardEvent.keyCode);
            if (cbg_AbstractInput_isCatchKey($this, $code))
                $keyboardEvent.preventDefault();
            var$4 = $this.$pressedKeys.data;
            if (var$4[$code]) {
                $this.$pressedKeyCount = $this.$pressedKeyCount - 1 | 0;
                var$4[$code] = 0;
            }
            var$5 = $this.$processor;
            if (var$5 !== null)
                pss_Control_keyUp(var$5, $code);
            if ($code == 61) {
                $keyboardEvent.preventDefault();
                $keyboardEvent.stopPropagation();
            }
        }
    } else {
        a: {
            $code = cgxgbtu_KeyCodes_keyForCode($keyboardEvent.keyCode);
            switch ($code) {
                case 67:
                    break;
                case 112:
                    break a;
                default:
                    break a;
            }
        }
        if (cbg_AbstractInput_isCatchKey($this, $code))
            $keyboardEvent.preventDefault();
        if (!($code != 67 && $code != 112)) {
            $keyboardEvent.preventDefault();
            var$5 = $this.$processor;
            if (var$5 !== null)
                pss_Control_keyDown(var$5, $code);
        } else {
            var$4 = $this.$pressedKeys.data;
            if (!var$4[$code]) {
                $this.$pressedKeyCount = $this.$pressedKeyCount + 1 | 0;
                var$4[$code] = 1;
                $this.$keyJustPressed = 1;
                $this.$justPressedKeys.data[$code] = 1;
                var$5 = $this.$processor;
                if (var$5 !== null)
                    pss_Control_keyDown(var$5, $code);
            }
        }
        if ($code == 61) {
            $keyboardEvent.preventDefault();
            $keyboardEvent.stopPropagation();
        }
    }
},
cgxgbt_TeaInput_getAvailablePointer = $this => {
    let $i, var$2, var$3, var$4, var$5, var$6;
    $i = 0;
    while (true) {
        if ($i >= 20)
            return (-1);
        a: {
            b: {
                var$2 = $this.$touchMap;
                var$3 = jl_Integer_valueOf($i);
                var$4 = var$2.$valueTable0;
                if (var$3 !== null) {
                    if (var$2.$hasZeroValue) {
                        var$2 = var$2.$zeroValue;
                        if (jl_Integer_equals(var$3, var$2)) {
                            var$5 = 1;
                            break a;
                        }
                    }
                    var$4 = var$4.data;
                    var$5 = var$4.length - 1 | 0;
                    while (true) {
                        if (var$5 < 0)
                            break b;
                        var$2 = var$4[var$5];
                        if (jl_Integer_equals(var$3, var$2))
                            break;
                        var$5 = var$5 + (-1) | 0;
                    }
                    var$5 = 1;
                    break a;
                }
                if (var$2.$hasZeroValue && var$2.$zeroValue === null) {
                    var$5 = 1;
                    break a;
                }
                var$6 = var$4.data;
                var$4 = var$2.$keyTable1;
                var$5 = var$6.length - 1 | 0;
                while (true) {
                    if (var$5 < 0)
                        break b;
                    if (var$4.data[var$5] && var$6[var$5] === null)
                        break;
                    var$5 = var$5 + (-1) | 0;
                }
                var$5 = 1;
                break a;
            }
            var$5 = 0;
        }
        if (!var$5)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
cgxgbt_TeaInput_reset = $this => {
    let $i, var$2, $i_0;
    a: {
        if ($this.$justTouched) {
            $this.$justTouched = 0;
            $i = 0;
            while (true) {
                var$2 = $this.$justPressedButtons.data;
                if ($i >= var$2.length)
                    break a;
                var$2[$i] = 0;
                $i = $i + 1 | 0;
            }
        }
    }
    b: {
        if ($this.$keyJustPressed) {
            $this.$keyJustPressed = 0;
            $i = 0;
            while (true) {
                var$2 = $this.$justPressedKeys.data;
                if ($i >= var$2.length)
                    break b;
                var$2[$i] = 0;
                $i = $i + 1 | 0;
            }
        }
    }
    $i_0 = 0;
    while ($i_0 < $this.$touchX.data.length) {
        $this.$deltaX.data[$i_0] = 0;
        $this.$deltaY.data[$i_0] = 0;
        $i_0 = $i_0 + 1 | 0;
    }
},
cgxgbt_TeaInput_setDelta = ($this, $touchId, $x, $y) => {
    $this.$deltaX.data[$touchId] = $x;
    $this.$deltaY.data[$touchId] = $y;
},
cgxgbt_TeaInput_getCompatMode = ($this, $element) => {
    if (jl_String_equals($rt_str($element.compatMode), $rt_s(136)))
        $element = $element.documentElement;
    return $element;
},
cgxgbt_TeaInput_getScrollTop = ($this, $target) => {
    return $target.scrollTop | 0;
},
cgxgbt_TeaInput_getScrollTop0 = ($this, $target) => {
    return cgxgbt_TeaInput_getScrollTop($this, cgxgbt_TeaInput_getCompatMode($this, $target));
},
cgxgbt_TeaInput_getScrollLeft = ($this, $target) => {
    return $target.scrollLeft | 0;
},
cgxgbt_TeaInput_getScrollLeft0 = ($this, $target) => {
    return cgxgbt_TeaInput_getScrollLeft($this, cgxgbt_TeaInput_getCompatMode($this, $target));
},
cgxgbt_TeaInput_getRelativeX = ($this, $e, $target) => {
    return jl_Math_round($target.width * 1.0 / cgxgbt_TeaInput_getClientWidth($this, $target) * ((($e.clientX - cgxgbt_TeaInput_getAbsoluteLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeY0 = ($this, $e, $target) => {
    return jl_Math_round($target.height * 1.0 / cgxgbt_TeaInput_getClientHeight($this, $target) * ((($e.clientY - cgxgbt_TeaInput_getAbsoluteTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeX0 = ($this, $touch, $target) => {
    return jl_Math_round($target.width * 1.0 / cgxgbt_TeaInput_getClientWidth($this, $target) * ((($touch.clientX - cgxgbt_TeaInput_getAbsoluteLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeY = ($this, $touch, $target) => {
    return jl_Math_round($target.height * 1.0 / cgxgbt_TeaInput_getClientHeight($this, $target) * ((($touch.clientY - cgxgbt_TeaInput_getAbsoluteTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getClientWidth = ($this, $target) => {
    return $target.clientWidth;
},
cgxgbt_TeaInput_getClientHeight = ($this, $target) => {
    return $target.clientHeight;
},
cgxgbt_TeaInput_getAbsoluteTop = ($this, $target) => {
    let var$2, var$3;
    var$2 = 0.0;
    var$3 = $target;
    while (var$3.offsetParent !== null) {
        var$2 = var$2 - var$3.scrollTop;
        var$3 = var$3.parentNode;
    }
    while ($target !== null) {
        var$2 = var$2 + $target.offsetTop;
        $target = var$3.offsetParent;
    }
    return var$2 | 0;
},
cgxgbt_TeaInput_getAbsoluteLeft = ($this, $target) => {
    let var$2, var$3;
    var$2 = 0.0;
    var$3 = $target;
    while (var$3.offsetParent !== null) {
        var$2 = var$2 - var$3.scrollLeft;
        var$3 = var$3.parentNode;
    }
    while ($target !== null) {
        var$2 = var$2 + $target.offsetLeft;
        $target = var$3.offsetParent;
    }
    return var$2 | 0;
},
cgxgbt_TeaInput_setInputProcessor = ($this, $processor) => {
    $this.$processor = $processor;
},
cgxgbt_TeaInput_isCursorCatched = $this => {
    return cgxgbt_TeaInput_isCursorCatchedJSNI$js_body$_75($this.$canvas) ? 1 : 0;
},
cgxgbt_TeaInput_isCursorCatchedJSNI$js_body$_75 = var$1 => {
    if (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas) {
        return true;
    }
    return false;
},
cgxgbt_TeaInput_handleEvent$exported$0 = (var$1, var$2) => {
    var$1 = var$1;
    if (var$1.$application.$appListener !== null) {
        cgxgbt_TeaInput_handleMouseEvents(var$1, var$2);
        cgxgbt_TeaInput_handleKeyboardEvents(var$1, var$2);
    }
},
cbg_Files = $rt_classWithoutFields(0);
function cgxgbt_TeaFiles() {
    let a = this; jl_Object.call(a);
    a.$internalStorage = null;
    a.$classpathStorage = null;
    a.$localStorage = null;
    a.$localStoragePrefix0 = null;
}
let cgxgbt_TeaFiles__init_ = ($this, $config, $teaApplication) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = new cgxgbtft_InternalStorage;
    cgxgbtf_MemoryFileStorage__init_(var$3);
    $this.$internalStorage = var$3;
    var$3 = new cgxgbtft_ClasspathStorage;
    cgxgbtf_MemoryFileStorage__init_(var$3);
    $this.$classpathStorage = var$3;
    var$4 = new cgxgbtft_LocalDBStorage;
    cgxgbtf_MemoryFileStorage__init_(var$4);
    var$4.$dataBase = null;
    if ($teaApplication !== null) {
        var$5 = $teaApplication.$config;
        $teaApplication.$delayInitCount = $teaApplication.$delayInitCount + 1 | 0;
        var$6 = indexedDB || mozIndexedDB || webkitIndexedDB || msIndexedDB;
        if (typeof var$6 === 'undefined' ? 1 : 0) {
            $teaApplication = new jl_IllegalStateException;
            jl_Exception__init_($teaApplication, $rt_s(137));
            $rt_throw($teaApplication);
        }
        var$7 = var$5.$localStoragePrefix;
        var$5 = var$6.open($rt_ustr(var$7), 1);
        var$3 = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0;
        var$3.$_01 = var$5;
        var$5.onupgradeneeded = otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent");
        var$3 = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1;
        var$3.$_08 = var$4;
        var$3.$_16 = var$5;
        var$3.$_24 = $teaApplication;
        var$5.onsuccess = otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent");
        var$3 = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2;
        var$3.$_07 = var$7;
        var$3.$_15 = $teaApplication;
        var$5.onerror = otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent");
    }
    $this.$localStorage = var$4;
    $this.$localStoragePrefix0 = $config.$localStoragePrefix;
},
cgxgbt_TeaFiles__init_0 = (var_0, var_1) => {
    let var_2 = new cgxgbt_TeaFiles();
    cgxgbt_TeaFiles__init_(var_2, var_0, var_1);
    return var_2;
},
cgxgbt_TeaFiles_getFileDB = ($this, $type) => {
    if ($type === cbg_Files$FileType_Internal)
        return $this.$internalStorage;
    if ($type === cbg_Files$FileType_Classpath)
        return $this.$classpathStorage;
    if ($type !== cbg_Files$FileType_Local)
        return null;
    return $this.$localStorage;
},
cgxgbt_TeaFiles_getFileHandle = ($this, $path, $type) => {
    let var$3;
    if ($type === cbg_Files$FileType_Internal)
        return cgxgbt_TeaFiles_internal($this, $path);
    if ($type === cbg_Files$FileType_Classpath)
        return cgxgbt_TeaFiles_classpath($this, $path);
    var$3 = cbg_Files$FileType_Local;
    if ($type === var$3)
        return cgxgbt_TeaFileHandle__init_($this, $path, var$3);
    $path = new cbgu_GdxRuntimeException;
    $type = jl_String_valueOf($type);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(138));
    jl_AbstractStringBuilder_append(var$3, $type);
    jl_AbstractStringBuilder_append(var$3, $rt_s(139));
    jl_Exception__init_($path, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw($path);
},
cgxgbt_TeaFiles_classpath = ($this, $path) => {
    return cgxgbt_TeaFileHandle__init_($this, $path, cbg_Files$FileType_Classpath);
},
cgxgbt_TeaFiles_internal = ($this, $path) => {
    return cgxgbt_TeaFileHandle__init_($this, $path, cbg_Files$FileType_Internal);
};
function cgxgbt_TeaNet() {
    jl_Object.call(this);
    this.$httpResponseListeners = null;
}
let cgxgbt_TeaNet__init_ = $this => {
    $this.$httpResponseListeners = ju_HashMap__init_0(16);
},
cgxgbt_TeaNet__init_0 = () => {
    let var_0 = new cgxgbt_TeaNet();
    cgxgbt_TeaNet__init_(var_0);
    return var_0;
},
cbg_ApplicationLogger = $rt_classWithoutFields(0),
cgxgbt_TeaApplicationLogger = $rt_classWithoutFields(),
cgxgbt_TeaApplicationLogger__init_ = $this => {
    return;
},
cgxgbt_TeaApplicationLogger__init_0 = () => {
    let var_0 = new cgxgbt_TeaApplicationLogger();
    cgxgbt_TeaApplicationLogger__init_(var_0);
    return var_0;
},
cbgu_Clipboard = $rt_classWithoutFields(0);
function cgxgbt_TeaClipboard() {
    let a = this; jl_Object.call(a);
    a.$requestedWritePermissions = 0;
    a.$hasWritePermissions = 0;
    a.$writeHandler = null;
    a.$content = null;
}
let cgxgbt_TeaClipboard__init_ = $this => {
    let var$1, var$2;
    $this.$requestedWritePermissions = 0;
    $this.$hasWritePermissions = 1;
    var$1 = new cgxgbt_TeaClipboard$ClipboardWriteHandler;
    var$1.$this$01 = $this;
    $this.$writeHandler = var$1;
    $this.$content = $rt_s(9);
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_0;
    var$2.$_015 = $this;
    var$1.addEventListener("copy", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_1;
    var$2.$_011 = $this;
    var$1.addEventListener("cut", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_2;
    var$2.$_05 = $this;
    var$1.addEventListener("paste", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
},
cgxgbt_TeaClipboard__init_0 = () => {
    let var_0 = new cgxgbt_TeaClipboard();
    cgxgbt_TeaClipboard__init_(var_0);
    return var_0;
},
cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4 = var$1 => {
    if ("clipboard" in navigator) {
        navigator.clipboard.writeText(var$1);
    }
},
cbg_Gdx = $rt_classWithoutFields(),
cbg_Gdx_app = null,
cbg_Gdx_graphics = null,
cbg_Gdx_audio = null,
cbg_Gdx_input = null,
cbg_Gdx_files = null,
cbg_Gdx_net = null,
cbg_Gdx_gl = null,
cbg_Gdx_gl20 = null,
cbg_Gdx_gl30 = null,
cbg_Gdx_gl31 = null,
cbg_Gdx__init_ = $this => {
    return;
},
cbg_Gdx__init_0 = () => {
    let var_0 = new cbg_Gdx();
    cbg_Gdx__init_(var_0);
    return var_0;
},
cbg_Audio = $rt_classWithoutFields(0),
cgxgbt_TeaAudio = $rt_classWithoutFields(0);
function cgxgbt_DefaultTeaAudio() {
    jl_Object.call(this);
    this.$webAudioAPIManager = null;
}
let cgxgbt_DefaultTeaAudio__init_ = $this => {
    $this.$webAudioAPIManager = null;
    $this.$webAudioAPIManager = new cgxgbtwh_HowlerAudioManager;
},
cgxgbt_DefaultTeaAudio__init_0 = () => {
    let var_0 = new cgxgbt_DefaultTeaAudio();
    cgxgbt_DefaultTeaAudio__init_(var_0);
    return var_0;
},
cgxgbt_DefaultTeaAudio_newSound = ($this, $fileHandle) => {
    let var$2;
    var$2 = new cgxgbtwh_HowlSound;
    var$2.$howl0 = cgxgbtwh_Howl_create$js_body$_1(cgxgbtdt_TypedArrays_getInt8Array(cbgf_FileHandle_readBytes($fileHandle)));
    return var$2;
},
otjde_EventListener = $rt_classWithoutFields(0);
function cgxgbt_TeaApplication$1() {
    jl_Object.call(this);
    this.$this$08 = null;
}
let cgxgbt_TeaApplication$1__init_ = ($this, $this$0) => {
    $this.$this$08 = $this$0;
},
cgxgbt_TeaApplication$1__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$1();
    cgxgbt_TeaApplication$1__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$1_handleEvent$exported$0 = (var$1, var$2) => {
    var$1 = var$1;
    var$2 = var$1.$this$08.$appListener;
    if (var$2 !== null) {
        ps_Adapter_dispose(var$2);
        var$1.$this$08.$appListener = null;
    }
};
function cgxgbt_TeaApplication$2() {
    jl_Object.call(this);
    this.$this$00 = null;
}
let cgxgbt_TeaApplication$2__init_ = ($this, $this$0) => {
    $this.$this$00 = $this$0;
},
cgxgbt_TeaApplication$2__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$2();
    cgxgbt_TeaApplication$2__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, $$je;
    var$1 = var$1;
    var$3 = var$1.$this$00;
    if (var$3.$initState === cgxgbt_TeaApplication$AppState_APP_LOOP) {
        var$3 = $rt_str((cgxgbtdi_TeaWindow_getDocument(var$3.$window)).visibilityState);
        if (jl_String_equals(var$3, $rt_s(140))) {
            var$1 = var$1.$this$00.$lifecycleListeners;
            jl_Object_monitorEnterSync(var$1);
            a: {
                b: {
                    try {
                        var$2 = cbgu_Array_iterator(var$1);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;
                        break b;

                    }
                    var$3 = var$2;
                    while (true) {
                        try {
                            if (!cbgu_Array$ArrayIterator_hasNext(var$3))
                                break;
                            cbgc_Controllers$1_pause(cbgu_Array$ArrayIterator_next(var$3));
                            continue;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            var$2 = $$je;
                            break b;

                        }
                    }
                    try {
                        jl_Object_monitorExitSync(var$1);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;

                    }
                }
                jl_Object_monitorExitSync(var$1);
                $rt_throw(var$2);
            }
        } else if (jl_String_equals(var$3, $rt_s(141))) {
            var$1 = var$1.$this$00.$lifecycleListeners;
            jl_Object_monitorEnterSync(var$1);
            c: {
                d: {
                    try {
                        var$2 = cbgu_Array_iterator(var$1);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;
                        break d;

                    }
                    var$3 = var$2;
                    while (true) {
                        try {
                            if (!cbgu_Array$ArrayIterator_hasNext(var$3))
                                break;
                            cbgc_Controllers$1_resume(cbgu_Array$ArrayIterator_next(var$3));
                            continue;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            var$2 = $$je;
                            break d;

                        }
                    }
                    try {
                        jl_Object_monitorExitSync(var$1);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;

                    }
                }
                jl_Object_monitorExitSync(var$1);
                $rt_throw(var$2);
            }
        }
    }
};
function cgxgbt_TeaApplication$3() {
    jl_Object.call(this);
    this.$this$0 = null;
}
let cgxgbt_TeaApplication$3__init_ = ($this, $this$0) => {
    $this.$this$0 = $this$0;
},
cgxgbt_TeaApplication$3__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$3();
    cgxgbt_TeaApplication$3__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$3_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    var$3 = cgxgbtdi_TeaWindow_getClientWidth(var$1.$this$0.$window);
    var$2 = var$1.$this$0;
    var$3 = var$3 - var$2.$config.$padHorizontal | 0;
    var$4 = cgxgbtdi_TeaWindow_getClientHeight(var$2.$window);
    var$1 = var$1.$this$0;
    var$2 = var$1.$config;
    var$4 = var$4 - var$2.$padVertical | 0;
    if (var$3 > 0 && var$4 > 0) {
        var$1 = var$1.$graphics;
        if (var$1 !== null)
            cgxgbt_TeaGraphics_setCanvasSize(var$1, var$3, var$4, var$2.$usePhysicalPixels);
    }
};
function cbgu_Pool() {
    let a = this; jl_Object.call(a);
    a.$max2 = 0;
    a.$peak = 0;
    a.$freeObjects = null;
}
let cbgu_Pool__init_ = ($this, $initialCapacity, $max) => {
    $this.$freeObjects = cbgu_Array__init_1(0, $initialCapacity);
    $this.$max2 = $max;
},
cbgu_Pool_obtain = $this => {
    let var$1;
    var$1 = $this.$freeObjects;
    return var$1.$size0 ? cbgu_Array_pop(var$1) : $this.$newObject();
},
cbgu_Pool_free = ($this, $object) => {
    let var$2;
    if ($object === null) {
        $object = new jl_IllegalArgumentException;
        jl_Exception__init_($object, $rt_s(142));
        $rt_throw($object);
    }
    var$2 = $this.$freeObjects;
    if (var$2.$size0 >= $this.$max2)
        cbgu_Pool_reset($this, $object);
    else {
        cbgu_Array_add(var$2, $object);
        $this.$peak = jl_Math_max($this.$peak, $this.$freeObjects.$size0);
        cbgu_Pool_reset($this, $object);
    }
},
cbgu_Pool_reset = ($this, $object) => {
    if ($rt_isInstance($object, cbgu_Pool$Poolable))
        $object.$reset();
};
function cbgu_DefaultPool() {
    cbgu_Pool.call(this);
    this.$poolTypeSupplier = null;
}
let cbgu_DefaultPool_newObject = $this => {
    return $this.$poolTypeSupplier.$get7();
},
jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException),
jl_IndexOutOfBoundsException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_IndexOutOfBoundsException__init_1 = () => {
    let var_0 = new jl_IndexOutOfBoundsException();
    jl_IndexOutOfBoundsException__init_(var_0);
    return var_0;
},
jl_IndexOutOfBoundsException__init_0 = ($this, $message) => {
    jl_Exception__init_($this, $message);
},
jl_IndexOutOfBoundsException__init_2 = var_0 => {
    let var_1 = new jl_IndexOutOfBoundsException();
    jl_IndexOutOfBoundsException__init_0(var_1, var_0);
    return var_1;
},
cbgu_ArraySupplier = $rt_classWithoutFields(0),
cbgu_ArraySupplier_ANY = null,
cbgu_ArraySupplier__clinit_ = () => {
    cbgu_ArraySupplier_ANY = new cbgu_ArraySupplier$_clinit_$lambda$_3_0;
};
function cbgu_ObjectSet() {
    let a = this; jl_Object.call(a);
    a.$size8 = 0;
    a.$keyTable0 = null;
    a.$loadFactor = 0.0;
    a.$threshold5 = 0;
    a.$shift1 = 0;
    a.$mask4 = 0;
    a.$iterator10 = null;
    a.$iterator2 = null;
}
let cbgu_ObjectSet__init_0 = $this => {
    cbgu_ObjectSet__init_($this, 51, 0.800000011920929);
},
cbgu_ObjectSet__init_3 = () => {
    let var_0 = new cbgu_ObjectSet();
    cbgu_ObjectSet__init_0(var_0);
    return var_0;
},
cbgu_ObjectSet__init_2 = ($this, $initialCapacity) => {
    cbgu_ObjectSet__init_($this, $initialCapacity, 0.800000011920929);
},
cbgu_ObjectSet__init_1 = var_0 => {
    let var_1 = new cbgu_ObjectSet();
    cbgu_ObjectSet__init_2(var_1, var_0);
    return var_1;
},
cbgu_ObjectSet__init_ = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold5 = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask4 = $initialCapacity;
        $this.$shift1 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable0 = $rt_createArray(jl_Object, $tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(31));
    jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_ObjectSet__init_4 = (var_0, var_1) => {
    let var_2 = new cbgu_ObjectSet();
    cbgu_ObjectSet__init_(var_2, var_0, var_1);
    return var_2;
},
cbgu_ObjectSet_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item.$hashCode()), Long_create(2135587861, 2654435769)), $this.$shift1));
},
cbgu_ObjectSet_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $i, $key, var$7, var$8;
    a: {
        $oldCapacity = $this.$keyTable0.data.length;
        $this.$threshold5 = $newSize * $this.$loadFactor | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask4 = var$3;
        $this.$shift1 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable0;
        $this.$keyTable0 = $rt_createArray(jl_Object, $newSize);
        if ($this.$size8 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key !== null) {
                    var$7 = $this.$keyTable0;
                    $newSize = cbgu_ObjectSet_place($this, $key);
                    while (true) {
                        var$8 = var$7.data;
                        if (var$8[$newSize] === null)
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask4;
                    }
                    var$8[$newSize] = $key;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
cbgu_ObjectSet_tableSize = ($capacity, $loadFactor) => {
    let var$3, var$4, $tableSize;
    if ($capacity < 0) {
        var$3 = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append0(var$4, $rt_s(143));
        jl_AbstractStringBuilder_append1(var$4, $capacity);
        jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw(var$3);
    }
    $tableSize = cbgm_MathUtils_nextPowerOfTwo(jl_Math_max(2, jl_Math_ceil($capacity / $loadFactor) | 0));
    if ($tableSize <= 1073741824)
        return $tableSize;
    var$3 = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(var$4, $rt_s(144));
    jl_AbstractStringBuilder_append1(var$4, $capacity);
    jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
};
function jl_Long() {
    jl_Number.call(this);
    this.$value1 = Long_ZERO;
}
let jl_Long_TYPE = null,
jl_Long_valueOf = $value => {
    let var$2;
    var$2 = new jl_Long;
    var$2.$value1 = $value;
    return var$2;
},
jl_Long_parseLongImpl = ($s, $beginIndex, $endIndex, $radix) => {
    let $negative, $digit, $value, var$8, $maxValue, var$10, var$11, var$12, var$13;
    if ($radix >= 2 && $radix <= 36) {
        if ($beginIndex == $endIndex) {
            $s = new jl_NumberFormatException;
            jl_Exception__init_($s, $rt_s(42));
            $rt_throw($s);
        }
        a: {
            $negative = 0;
            $s = $s;
            switch (jl_String_charAt($s, $beginIndex)) {
                case 43:
                    $digit = $beginIndex + 1 | 0;
                    break a;
                case 45:
                    $negative = 1;
                    $digit = $beginIndex + 1 | 0;
                    break a;
                default:
            }
            $digit = $beginIndex;
        }
        $value = Long_ZERO;
        var$8 = Long_fromInt($radix);
        $maxValue = Long_add(Long_fromInt(1), Long_div(Long_create(4294967295, 2147483647), var$8));
        if ($digit == $endIndex) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s);
            $rt_throw($s);
        }
        while ($digit < $endIndex) {
            var$10 = $digit + 1 | 0;
            var$11 = jl_String_charAt($s, $digit);
            $digit = var$11 >= 48 && var$11 <= 57 ? var$11 - 48 | 0 : var$11 >= 97 && var$11 <= 122 ? (var$11 - 97 | 0) + 10 | 0 : var$11 >= 65 && var$11 <= 90 ? (var$11 - 65 | 0) + 10 | 0 : (-1);
            if ($digit < 0) {
                var$12 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(var$13, $rt_s(43));
                jl_AbstractStringBuilder_append(var$13, $s);
                jl_Exception__init_(var$12, jl_AbstractStringBuilder_toString(var$13));
                $rt_throw(var$12);
            }
            if ($digit >= $radix) {
                var$12 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(var$13, $rt_s(44));
                jl_AbstractStringBuilder_append1(var$13, $radix);
                jl_AbstractStringBuilder_append(var$13, $rt_s(35));
                jl_AbstractStringBuilder_append(var$13, $s);
                jl_Exception__init_(var$12, jl_AbstractStringBuilder_toString(var$13));
                $rt_throw(var$12);
            }
            if (Long_gt($value, $maxValue)) {
                $s = new jl_NumberFormatException;
                jl_Exception__init_($s, $rt_s(145));
                $rt_throw($s);
            }
            $value = Long_add(Long_mul(var$8, $value), Long_fromInt($digit));
            if (Long_lt($value, Long_ZERO)) {
                if (var$10 == $endIndex && Long_eq($value, Long_create(0, 2147483648)) && $negative)
                    return Long_create(0, 2147483648);
                var$12 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$13 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$13);
                jl_AbstractStringBuilder_append(var$13, $rt_s(146));
                jl_AbstractStringBuilder_append(var$13, $s);
                jl_Exception__init_(var$12, jl_AbstractStringBuilder_toString(var$13));
                $rt_throw(var$12);
            }
            $digit = var$10;
        }
        if ($negative)
            $value = Long_neg($value);
        return $value;
    }
    $s = new jl_NumberFormatException;
    var$12 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$12);
    jl_AbstractStringBuilder_append(var$12, $rt_s(47));
    jl_AbstractStringBuilder_append1(var$12, $radix);
    jl_Exception__init_($s, jl_AbstractStringBuilder_toString(var$12));
    $rt_throw($s);
},
jl_Long_doubleValue = $this => {
    return Long_toNumber($this.$value1);
},
jl_Long_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    var$1 = $this.$value1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    var$3 = var$2.$length1;
    var$4 = var$2;
    var$5 = 1;
    if (Long_lt(var$1, Long_ZERO)) {
        var$5 = 0;
        var$1 = Long_neg(var$1);
    }
    a: {
        if (jl_Long_compareUnsigned(var$1, Long_fromInt(10)) < 0) {
            if (var$5)
                jl_AbstractStringBuilder_insertSpace(var$4, var$3, var$3 + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace(var$4, var$3, var$3 + 2 | 0);
                var$6 = var$4.$buffer.data;
                var$7 = var$3 + 1 | 0;
                var$6[var$3] = 45;
                var$3 = var$7;
            }
            var$4.$buffer.data[var$3] = jl_Character_forDigit(Long_lo(var$1), 10);
        } else {
            var$8 = 1;
            var$9 = Long_fromInt(1);
            var$10 = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
            b: {
                while (true) {
                    var$11 = Long_mul(var$9, Long_fromInt(10));
                    if (jl_Long_compareUnsigned(var$11, var$1) > 0) {
                        var$11 = var$9;
                        break b;
                    }
                    var$8 = var$8 + 1 | 0;
                    if (jl_Long_compareUnsigned(var$11, var$10) > 0)
                        break;
                    var$9 = var$11;
                }
            }
            if (!var$5)
                var$8 = var$8 + 1 | 0;
            jl_AbstractStringBuilder_insertSpace(var$4, var$3, var$3 + var$8 | 0);
            if (var$5)
                var$7 = var$3;
            else {
                var$6 = var$4.$buffer.data;
                var$7 = var$3 + 1 | 0;
                var$6[var$3] = 45;
            }
            while (true) {
                if (Long_eq(var$11, Long_ZERO))
                    break a;
                var$6 = var$4.$buffer.data;
                var$3 = var$7 + 1 | 0;
                var$6[var$7] = jl_Character_forDigit(Long_lo((jl_Long_divideUnsigned(var$1, var$11))), 10);
                var$1 = jl_Long_remainderUnsigned(var$1, var$11);
                var$11 = jl_Long_divideUnsigned(var$11, Long_fromInt(10));
                var$7 = var$3;
            }
        }
    }
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_Long_hashCode = $this => {
    let var$1;
    var$1 = $this.$value1;
    return Long_lo(var$1) ^ Long_hi(var$1);
},
jl_Long_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Long && Long_eq($other.$value1, $this.$value1) ? 1 : 0;
},
jl_Long_numberOfLeadingZeros = $i => {
    let $n, var$3;
    if (Long_eq($i, Long_ZERO))
        return 64;
    $n = 0;
    var$3 = Long_shru($i, 32);
    if (Long_ne(var$3, Long_ZERO))
        $n = 32;
    else
        var$3 = $i;
    $i = Long_shru(var$3, 16);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 16;
    var$3 = Long_shru($i, 8);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 8;
    $i = Long_shru(var$3, 4);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 4;
    var$3 = Long_shru($i, 2);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 2;
    if (Long_ne(Long_shru(var$3, 1), Long_ZERO))
        $n = $n | 1;
    return (64 - $n | 0) - 1 | 0;
},
jl_Long_numberOfTrailingZeros = $i => {
    let $n, var$3;
    if (Long_eq($i, Long_ZERO))
        return 64;
    $n = 0;
    var$3 = Long_shl($i, 32);
    if (Long_ne(var$3, Long_ZERO))
        $n = 32;
    else
        var$3 = $i;
    $i = Long_shl(var$3, 16);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 16;
    var$3 = Long_shl($i, 8);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 8;
    $i = Long_shl(var$3, 4);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 4;
    var$3 = Long_shl($i, 2);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 2;
    if (Long_ne(Long_shl(var$3, 1), Long_ZERO))
        $n = $n | 1;
    return (64 - $n | 0) - 1 | 0;
},
jl_Long_divideUnsigned = (var$1, var$2) => {
    return Long_udiv(var$1, var$2);
},
jl_Long_remainderUnsigned = (var$1, var$2) => {
    return Long_urem(var$1, var$2);
},
jl_Long_compareUnsigned = (var$1, var$2) => {
    return Long_ucompare(var$1, var$2);
},
jl_Long__clinit_ = () => {
    jl_Long_TYPE = $rt_cls($rt_longcls);
},
cgxgbtg_WebGLContextAttributesWrapper = $rt_classWithoutFields(),
cgxgbtg_WebGLContextAttributesWrapper_create$js_body$_14 = () => {
    return {  };
},
cbgg_GL20 = $rt_classWithoutFields(0);
function cgxgbt_TeaGL20() {
    let a = this; jl_Object.call(a);
    a.$gl = null;
    a.$programs = null;
    a.$shaders = null;
    a.$buffers0 = null;
    a.$frameBuffers = null;
    a.$renderBuffers = null;
    a.$textures = null;
    a.$uniforms = null;
    a.$currProgram = 0;
}
let cgxgbt_TeaGL20__init_ = ($this, $gl) => {
    $this.$programs = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$shaders = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$buffers0 = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$frameBuffers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$renderBuffers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$textures = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$uniforms = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$currProgram = 0;
    $this.$gl = $gl;
    $gl.pixelStorei(37441, 0);
},
cgxgbt_TeaGL20__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaGL20();
    cgxgbt_TeaGL20__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGL20_getUniformLocation = ($this, $location) => {
    return cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$uniforms, $this.$currProgram), $location);
},
cgxgbt_TeaGL20_glActiveTexture = ($this, $texture) => {
    $this.$gl.activeTexture($texture);
},
cgxgbt_TeaGL20_glAttachShader = ($this, $program, $shader) => {
    let var$3, var$4;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    $this.$gl.attachShader(var$3, var$4);
},
cgxgbt_TeaGL20_glBindBuffer = ($this, $target, $buffer) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$buffers0, $buffer);
    var$3.bindBuffer($target, var$4);
},
cgxgbt_TeaGL20_glBindFramebuffer = ($this, $target, $framebuffer) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$frameBuffers, $framebuffer);
    var$3.bindFramebuffer($target, var$4);
},
cgxgbt_TeaGL20_glBindRenderbuffer = ($this, $target, $renderbuffer) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$renderBuffers, $renderbuffer);
    var$3.bindRenderbuffer($target, var$4);
},
cgxgbt_TeaGL20_glBindTexture = ($this, $target, $texture) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$textures, $texture);
    var$3.bindTexture($target, var$4);
},
cgxgbt_TeaGL20_glBlendFunc = ($this, $sfactor, $dfactor) => {
    $this.$gl.blendFunc($sfactor, $dfactor);
},
cgxgbt_TeaGL20_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    $this.$gl.blendFuncSeparate($srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
},
cgxgbt_TeaGL20_glBufferData = ($this, $target, $size, $data, $usage) => {
    let $typedArray;
    if ($data === null)
        $this.$gl.bufferData($target, $size, $usage);
    else {
        $typedArray = cgxgbtdt_TypedArrays_getTypedArray($data);
        $this.$gl.bufferData($target, $typedArray, $usage);
    }
},
cgxgbt_TeaGL20_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    let $typedArray;
    $typedArray = cgxgbtdt_TypedArrays_getTypedArray($data);
    $this.$gl.bufferSubData($target, $offset, $typedArray);
},
cgxgbt_TeaGL20_glCheckFramebufferStatus = ($this, $target) => {
    return $this.$gl.checkFramebufferStatus($target);
},
cgxgbt_TeaGL20_glClear = ($this, $mask) => {
    $this.$gl.clear($mask);
},
cgxgbt_TeaGL20_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    $this.$gl.clearColor($red, $green, $blue, $alpha);
},
cgxgbt_TeaGL20_glCompileShader = ($this, $shader) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    $this.$gl.compileShader(var$2);
},
cgxgbt_TeaGL20_glCreateProgram = $this => {
    let $program;
    $program = $this.$gl.createProgram();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$programs, $program);
},
cgxgbt_TeaGL20_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = $this.$gl.createShader($type);
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$shaders, $shader);
},
cgxgbt_TeaGL20_glDeleteBuffer = ($this, $id) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$buffers0, $id);
    $this.$gl.deleteBuffer(var$2);
},
cgxgbt_TeaGL20_glDeleteFramebuffer = ($this, $id) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$frameBuffers, $id);
    $this.$gl.deleteFramebuffer(var$2);
},
cgxgbt_TeaGL20_glDeleteProgram = ($this, $program) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$programs, $program);
    cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$uniforms, $program);
    $this.$gl.deleteProgram(var$2);
},
cgxgbt_TeaGL20_glDeleteRenderbuffer = ($this, $id) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$renderBuffers, $id);
    $this.$gl.deleteRenderbuffer(var$2);
},
cgxgbt_TeaGL20_glDeleteShader = ($this, $shader) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$shaders, $shader);
    $this.$gl.deleteShader(var$2);
},
cgxgbt_TeaGL20_glDeleteTexture = ($this, $id) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$textures, $id);
    $this.$gl.deleteTexture(var$2);
},
cgxgbt_TeaGL20_glDepthMask = ($this, $flag) => {
    $this.$gl.depthMask(!!$flag);
},
cgxgbt_TeaGL20_glDisable = ($this, $cap) => {
    $this.$gl.disable($cap);
},
cgxgbt_TeaGL20_glDisableVertexAttribArray = ($this, $index) => {
    $this.$gl.disableVertexAttribArray($index);
},
cgxgbt_TeaGL20_glDrawArrays = ($this, $mode, $first, $count) => {
    $this.$gl.drawArrays($mode, $first, $count);
},
cgxgbt_TeaGL20_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    let var$5, var$6;
    var$5 = $this.$gl;
    var$6 = $indices.$position0;
    var$5.drawElements($mode, $count, $type, var$6);
},
cgxgbt_TeaGL20_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    $this.$gl.drawElements($mode, $count, $type, $indices);
},
cgxgbt_TeaGL20_glEnable = ($this, $cap) => {
    $this.$gl.enable($cap);
},
cgxgbt_TeaGL20_glEnableVertexAttribArray = ($this, $index) => {
    $this.$gl.enableVertexAttribArray($index);
},
cgxgbt_TeaGL20_glFramebufferRenderbuffer = ($this, $target, $attachment, $renderbuffertarget, $renderbuffer) => {
    let var$5, var$6;
    var$5 = $this.$gl;
    var$6 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$renderBuffers, $renderbuffer);
    var$5.framebufferRenderbuffer($target, $attachment, $renderbuffertarget, var$6);
},
cgxgbt_TeaGL20_glFramebufferTexture2D = ($this, $target, $attachment, $textarget, $texture, $level) => {
    let var$6, var$7;
    var$6 = $this.$gl;
    var$7 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$textures, $texture);
    var$6.framebufferTexture2D($target, $attachment, $textarget, var$7, $level);
},
cgxgbt_TeaGL20_glGenBuffer = $this => {
    let $buffer;
    $buffer = $this.$gl.createBuffer();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$buffers0, $buffer);
},
cgxgbt_TeaGL20_glGenerateMipmap = ($this, $target) => {
    $this.$gl.generateMipmap($target);
},
cgxgbt_TeaGL20_glGenFramebuffer = $this => {
    let $fb;
    $fb = $this.$gl.createFramebuffer();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$frameBuffers, $fb);
},
cgxgbt_TeaGL20_glGenRenderbuffer = $this => {
    let $rb;
    $rb = $this.$gl.createRenderbuffer();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$renderBuffers, $rb);
},
cgxgbt_TeaGL20_glGenTexture = $this => {
    let $texture;
    $texture = $this.$gl.createTexture();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$textures, $texture);
},
cgxgbt_TeaGL20_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $activeUniform, var$6;
    $activeUniform = $this.$gl;
    var$6 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    $activeUniform = $activeUniform.getActiveAttrib(var$6, $index);
    $index = $activeUniform.size;
    jn_IntBufferImpl_put($size, 0, $index);
    $index = $activeUniform.type;
    jn_IntBufferImpl_put($type, 0, $index);
    return $rt_str($activeUniform.name);
},
cgxgbt_TeaGL20_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $activeUniform, var$6;
    $activeUniform = $this.$gl;
    var$6 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    $activeUniform = $activeUniform.getActiveUniform(var$6, $index);
    $index = $activeUniform.size;
    jn_IntBufferImpl_put($size, 0, $index);
    $index = $activeUniform.type;
    jn_IntBufferImpl_put($type, 0, $index);
    return $rt_str($activeUniform.name);
},
cgxgbt_TeaGL20_glGetAttribLocation = ($this, $program, $name) => {
    let var$3;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    return $this.$gl.getAttribLocation(var$3, $rt_ustr($name));
},
cgxgbt_TeaGL20_glGetBooleanv = ($this, $pname, $params) => {
    $params = new cbgu_GdxRuntimeException;
    jl_Exception__init_($params, $rt_s(147));
    $rt_throw($params);
},
cgxgbt_TeaGL20_glGetFloatv = ($this, $pname, $params) => {
    let var$3;
    if ($pname != 2931 && $pname != 2849 && $pname != 32824 && $pname != 10752 && $pname != 32938) {
        $params = new cbgu_GdxRuntimeException;
        jl_Exception__init_($params, $rt_s(148));
        $rt_throw($params);
    }
    var$3 = $this.$gl.getParameter($pname);
    jn_FloatBufferImpl_put($params, 0, var$3);
},
cgxgbt_TeaGL20_glGetIntegerv = ($this, $pname, $params) => {
    let var$3, var$4, var$5;
    a: {
        b: {
            if ($pname == 34016)
                break b;
            if ($pname == 3413)
                break b;
            if ($pname == 32970)
                break b;
            if ($pname == 32968)
                break b;
            if ($pname == 34877)
                break b;
            if ($pname == 32777)
                break b;
            if ($pname == 32971)
                break b;
            if ($pname == 32969)
                break b;
            if ($pname == 3412)
                break b;
            if ($pname == 2885)
                break b;
            if ($pname == 3414)
                break b;
            if ($pname == 2932)
                break b;
            if ($pname == 2886)
                break b;
            if ($pname == 33170)
                break b;
            if ($pname == 3411)
                break b;
            if ($pname == 35739)
                break b;
            if ($pname == 35738)
                break b;
            if ($pname == 35661)
                break b;
            if ($pname == 34076)
                break b;
            if ($pname == 36349)
                break b;
            if ($pname == 34024)
                break b;
            if ($pname == 34930)
                break b;
            if ($pname == 3379)
                break b;
            if ($pname == 36348)
                break b;
            if ($pname == 34921)
                break b;
            if ($pname == 35660)
                break b;
            if ($pname == 36347)
                break b;
            if ($pname == 34466)
                break b;
            if ($pname == 3333)
                break b;
            if ($pname == 3410)
                break b;
            if ($pname == 32936)
                break b;
            if ($pname == 32937)
                break b;
            if ($pname == 34817)
                break b;
            if ($pname == 34816)
                break b;
            if ($pname == 34818)
                break b;
            if ($pname == 34819)
                break b;
            if ($pname == 36003)
                break b;
            if ($pname == 36004)
                break b;
            if ($pname == 36005)
                break b;
            if ($pname == 3415)
                break b;
            if ($pname == 2961)
                break b;
            if ($pname == 2964)
                break b;
            if ($pname == 2962)
                break b;
            if ($pname == 2965)
                break b;
            if ($pname == 2966)
                break b;
            if ($pname == 2967)
                break b;
            if ($pname == 2963)
                break b;
            if ($pname == 2968)
                break b;
            if ($pname == 3408)
                break b;
            if ($pname != 3317) {
                if ($pname != 2978) {
                    if ($pname != 36006) {
                        $params = new cbgu_GdxRuntimeException;
                        jl_Exception__init_($params, $rt_s(149));
                        $rt_throw($params);
                    }
                    var$3 = $this.$gl.getParameter($pname);
                    if (var$3 === null)
                        jn_IntBufferImpl_put($params, 0, 0);
                    else {
                        var$4 = cgxgbt_TeaGL20$CustomIntMap_getKey$js_body$_6($this.$frameBuffers, var$3);
                        jn_IntBufferImpl_put($params, 0, var$4);
                    }
                    break a;
                }
                var$5 = $this.$gl.getParameter($pname);
                var$4 = var$5[0];
                $params = $params;
                jn_IntBufferImpl_put($params, 0, var$4);
                jn_IntBufferImpl_put($params, 1, var$5[1]);
                jn_IntBufferImpl_put($params, 2, var$5[2]);
                jn_IntBufferImpl_put($params, 3, var$5[3]);
                break a;
            }
        }
        $pname = $this.$gl.getParameter($pname);
        jn_IntBufferImpl_put($params, 0, $pname);
    }
},
cgxgbt_TeaGL20_glGetProgramInfoLog = ($this, $program) => {
    return $rt_str($this.$gl.getProgramInfoLog(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program)));
},
cgxgbt_TeaGL20_glGetProgramiv = ($this, $program, $pname, $params) => {
    if ($pname != 35712 && $pname != 35714 && $pname != 35715) {
        $program = $this.$gl.getProgramParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $pname);
        jn_IntBufferImpl_put($params, 0, $program);
    } else {
        $pname = !($this.$gl.getProgramParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $pname) ? 1 : 0) ? 0 : 1;
        jn_IntBufferImpl_put($params, 0, $pname);
    }
},
cgxgbt_TeaGL20_glGetShaderInfoLog = ($this, $shader) => {
    return $rt_str($this.$gl.getShaderInfoLog(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader)));
},
cgxgbt_TeaGL20_glGetShaderiv = ($this, $shader, $pname, $params) => {
    let $result;
    if ($pname != 35713 && $pname != 35712) {
        $result = $this.$gl.getShaderParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader), $pname);
        jn_IntBufferImpl_put($params, 0, $result);
    } else {
        $pname = !($this.$gl.getShaderParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader), $pname) ? 1 : 0) ? 0 : 1;
        jn_IntBufferImpl_put($params, 0, $pname);
    }
};
let cgxgbt_TeaGL20_glGetString = ($this, $name) => {
    return $rt_str($this.$gl.getParameter($name));
},
cgxgbt_TeaGL20_glGetUniformLocation = ($this, $program, $name) => {
    let $location;
    $location = $this.$gl.getUniformLocation(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $rt_ustr($name));
    if ($location === null)
        return (-1);
    $name = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$uniforms, $program);
    if ($name === null) {
        $name = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
        $this.$uniforms[$program] = $name;
    }
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($name, $location);
},
cgxgbt_TeaGL20_glLinkProgram = ($this, $program) => {
    let var$2, var$3;
    var$2 = $this.$gl;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$2.linkProgram(var$3);
},
cgxgbt_TeaGL20_glPixelStorei = ($this, $pname, $param) => {
    $this.$gl.pixelStorei($pname, $param);
},
cgxgbt_TeaGL20_glRenderbufferStorage = ($this, $target, $internalformat, $width, $height) => {
    $this.$gl.renderbufferStorage($target, $internalformat, $width, $height);
},
cgxgbt_TeaGL20_glShaderSource = ($this, $shader, $source) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    var$3.shaderSource(var$4, $rt_ustr($source));
},
cgxgbt_TeaGL20_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    let $arrayBuffer;
    if ($pixels === null) {
        $this.$gl.texImage2D($target, $level, $internalformat, $width, $height, $border, $format, $type, null);
        return;
    }
    $arrayBuffer = $type == 5121 ? cgxgbtdt_TypedArrays_getUint8Array($pixels) : $type != 5123 && $type != 33635 && $type != 32819 ? ($type != 5126 ? cgxgbtdt_TypedArrays_getTypedArray($pixels) : cgxgbtdt_TypedArrays_getFloat32Array($pixels)) : cgxgbtdt_TypedArrays_getUint16Array($pixels);
    $this.$gl.texImage2D($target, $level, $internalformat, $width, $height, $border, $format, $type, $arrayBuffer);
},
cgxgbt_TeaGL20_glTexParameterf = ($this, $target, $pname, $param) => {
    $this.$gl.texParameterf($target, $pname, $param);
},
cgxgbt_TeaGL20_glTexParameteri = ($this, $target, $pname, $param) => {
    let var$4, var$5;
    var$4 = $this.$gl;
    var$5 = $param;
    var$4.texParameterf($target, $pname, var$5);
},
cgxgbt_TeaGL20_glUniform1f = ($this, $location, $x) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform1f($loc, $x);
},
cgxgbt_TeaGL20_glUniform1fv = ($this, $location, $count, $v, $offset) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform1fv($loc, $v.data);
},
cgxgbt_TeaGL20_glUniform1i = ($this, $location, $x) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform1i($loc, $x);
},
cgxgbt_TeaGL20_glUniform2f = ($this, $location, $x, $y) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform2f($loc, $x, $y);
},
cgxgbt_TeaGL20_glUniform2fv = ($this, $location, $count, $v, $offset) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform2fv($loc, $v.data);
},
cgxgbt_TeaGL20_glUniformMatrix4fv = ($this, $location, $count, $transpose, $value, $offset) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniformMatrix4fv($loc, !!$transpose, $value.data);
},
cgxgbt_TeaGL20_glUseProgram = ($this, $program) => {
    let var$2, var$3;
    $this.$currProgram = $program;
    var$2 = $this.$gl;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$2.useProgram(var$3);
},
cgxgbt_TeaGL20_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    $this.$gl.vertexAttribPointer($indx, $size, $type, !!$normalized, $stride, $ptr_0);
},
cgxgbt_TeaGL20_glViewport = ($this, $x, $y, $width, $height) => {
    $this.$gl.viewport($x, $y, $width, $height);
},
cbgg_GL30 = $rt_classWithoutFields(0);
function cgxgbt_TeaGL30() {
    let a = this; cgxgbt_TeaGL20.call(a);
    a.$gl0 = null;
    a.$queries = null;
    a.$samplers = null;
    a.$feedbacks = null;
    a.$vertexArrays = null;
}
let cgxgbt_TeaGL30__init_ = ($this, $gl) => {
    cgxgbt_TeaGL20__init_($this, $gl);
    $this.$queries = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$samplers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$feedbacks = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$vertexArrays = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$gl0 = $gl;
},
cgxgbt_TeaGL30__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaGL30();
    cgxgbt_TeaGL30__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGL30_glBindVertexArray = ($this, $array) => {
    let var$2, var$3;
    var$2 = $this.$gl0;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$vertexArrays, $array);
    var$2.bindVertexArray(var$3);
},
cgxgbt_TeaGL30_glDeleteVertexArrays = ($this, $n, $ids) => {
    let $startPosition, $i, var$5, $id, var$7;
    $startPosition = $ids.$position0;
    $i = 0;
    var$5 = $ids;
    while ($i < $n) {
        $id = jn_IntBufferImpl_get0(var$5);
        var$7 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$vertexArrays, $id);
        cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5($this.$vertexArrays, $id);
        $this.$gl0.deleteVertexArray(var$7);
        $i = $i + 1 | 0;
    }
    jn_Buffer_position($ids, $startPosition);
},
cgxgbt_TeaGL30_glDrawArraysInstanced = ($this, $mode, $first, $count, $instanceCount) => {
    $this.$gl0.drawArraysInstanced($mode, $first, $count, $instanceCount);
},
cgxgbt_TeaGL30_glDrawBuffers = ($this, $n, $bufs) => {
    let $arrayBuffer;
    $arrayBuffer = cgxgbtdt_TypedArrays_getInt32Array($bufs);
    $this.$gl0.drawBuffers($arrayBuffer);
},
cgxgbt_TeaGL30_glDrawElementsInstanced = ($this, $mode, $count, $type, $indicesOffset, $instanceCount) => {
    $this.$gl0.drawElementsInstanced($mode, $count, $type, $indicesOffset, $instanceCount);
},
cgxgbt_TeaGL30_glGenVertexArrays = ($this, $n, $ids) => {
    let $i, var$4, $vArray;
    $i = 0;
    var$4 = $ids;
    while ($i < $n) {
        $vArray = $this.$gl0.createVertexArray();
        jn_IntBufferImpl_put(var$4, $i, cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$vertexArrays, $vArray));
        $i = $i + 1 | 0;
    }
},
cgxgbt_TeaGL30_glGetFloatv = ($this, $pname, $params) => {
    let var$3;
    if ($pname != 34045)
        cgxgbt_TeaGL20_glGetFloatv($this, $pname, $params);
    else {
        var$3 = $this.$gl0.getParameter($pname);
        jn_FloatBufferImpl_put($params, 0, var$3);
    }
},
cgxgbt_TeaGL30_glGetIntegerv = ($this, $pname, $params) => {
    let var$3, var$4;
    switch ($pname) {
        case 3074:
        case 3314:
        case 3315:
        case 3316:
        case 3330:
        case 3331:
        case 3332:
        case 32877:
        case 32878:
        case 32883:
        case 33000:
        case 33001:
        case 34852:
        case 34853:
        case 34854:
        case 34855:
        case 34856:
        case 34857:
        case 34858:
        case 34859:
        case 34860:
        case 34861:
        case 34862:
        case 34863:
        case 35071:
        case 35076:
        case 35077:
        case 35371:
        case 35373:
        case 35375:
        case 35657:
        case 35658:
        case 35659:
        case 35723:
        case 35968:
        case 35978:
        case 35979:
        case 36063:
        case 36183:
        case 37154:
        case 37157:
            $pname = $this.$gl0.getParameter($pname);
            jn_IntBufferImpl_put($params, 0, $pname);
            return;
        case 32874:
        case 35869:
            var$3 = $this.$gl0.getParameter($pname);
            if (var$3 === null)
                jn_IntBufferImpl_put($params, 0, 0);
            else {
                var$4 = cgxgbt_TeaGL20$CustomIntMap_getKey$js_body$_6($this.$textures, var$3);
                jn_IntBufferImpl_put($params, 0, var$4);
            }
            return;
        case 34229:
            var$3 = $this.$gl0.getParameter($pname);
            if (var$3 === null)
                jn_IntBufferImpl_put($params, 0, 0);
            else {
                var$4 = cgxgbt_TeaGL20$CustomIntMap_getKey$js_body$_6($this.$vertexArrays, var$3);
                jn_IntBufferImpl_put($params, 0, var$4);
            }
            return;
        case 36006:
        case 36010:
            var$3 = $this.$gl0.getParameter($pname);
            if (var$3 === null)
                jn_IntBufferImpl_put($params, 0, 0);
            else {
                var$4 = cgxgbt_TeaGL20$CustomIntMap_getKey$js_body$_6($this.$frameBuffers, var$3);
                jn_IntBufferImpl_put($params, 0, var$4);
            }
            return;
        default:
    }
    cgxgbt_TeaGL20_glGetIntegerv($this, $pname, $params);
},
cgxgbt_TeaGL30Debug = $rt_classWithoutFields(cgxgbt_TeaGL30),
cgxgbt_TeaGL30Debug_checkError = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$gl0.getError();
    if (!var$1)
        return;
    var$2 = new cbgu_GdxRuntimeException;
    var$3 = jl_Integer_toHexString(var$1);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(150));
    jl_AbstractStringBuilder_append1(var$4, var$1);
    jl_AbstractStringBuilder_append(var$4, $rt_s(29));
    jl_AbstractStringBuilder_append(var$4, var$3);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
cgxgbt_TeaGL30Debug_glBindVertexArray = ($this, $array) => {
    cgxgbt_TeaGL30_glBindVertexArray($this, $array);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDeleteVertexArrays = ($this, $n, $ids) => {
    cgxgbt_TeaGL30_glDeleteVertexArrays($this, $n, $ids);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawArraysInstanced = ($this, $mode, $first, $count, $instanceCount) => {
    cgxgbt_TeaGL30_glDrawArraysInstanced($this, $mode, $first, $count, $instanceCount);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawBuffers = ($this, $n, $bufs) => {
    cgxgbt_TeaGL30_glDrawBuffers($this, $n, $bufs);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElementsInstanced = ($this, $mode, $count, $type, $indicesOffset, $instanceCount) => {
    cgxgbt_TeaGL30_glDrawElementsInstanced($this, $mode, $count, $type, $indicesOffset, $instanceCount);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGenVertexArrays = ($this, $n, $ids) => {
    cgxgbt_TeaGL30_glGenVertexArrays($this, $n, $ids);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glActiveTexture = ($this, $texture) => {
    cgxgbt_TeaGL20_glActiveTexture($this, $texture);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindTexture = ($this, $target, $texture) => {
    cgxgbt_TeaGL20_glBindTexture($this, $target, $texture);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBlendFunc = ($this, $sfactor, $dfactor) => {
    cgxgbt_TeaGL20_glBlendFunc($this, $sfactor, $dfactor);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glClear = ($this, $mask) => {
    cgxgbt_TeaGL20_glClear($this, $mask);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    cgxgbt_TeaGL20_glClearColor($this, $red, $green, $blue, $alpha);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDepthMask = ($this, $flag) => {
    cgxgbt_TeaGL20_glDepthMask($this, $flag);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDisable = ($this, $cap) => {
    cgxgbt_TeaGL20_glDisable($this, $cap);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawArrays = ($this, $mode, $first, $count) => {
    cgxgbt_TeaGL20_glDrawArrays($this, $mode, $first, $count);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glEnable = ($this, $cap) => {
    cgxgbt_TeaGL20_glEnable($this, $cap);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetIntegerv = ($this, $pname, $params) => {
    cgxgbt_TeaGL30_glGetIntegerv($this, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetString = ($this, $name) => {
    return cgxgbt_TeaGL20_glGetString($this, $name);
},
cgxgbt_TeaGL30Debug_glPixelStorei = ($this, $pname, $param) => {
    cgxgbt_TeaGL20_glPixelStorei($this, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexImage2D($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexParameterf = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameterf($this, $target, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glViewport = ($this, $x, $y, $width, $height) => {
    cgxgbt_TeaGL20_glViewport($this, $x, $y, $width, $height);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glAttachShader = ($this, $program, $shader) => {
    cgxgbt_TeaGL20_glAttachShader($this, $program, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindBuffer = ($this, $target, $buffer) => {
    cgxgbt_TeaGL20_glBindBuffer($this, $target, $buffer);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindFramebuffer = ($this, $target, $framebuffer) => {
    cgxgbt_TeaGL20_glBindFramebuffer($this, $target, $framebuffer);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindRenderbuffer = ($this, $target, $renderbuffer) => {
    cgxgbt_TeaGL20_glBindRenderbuffer($this, $target, $renderbuffer);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    cgxgbt_TeaGL20_glBlendFuncSeparate($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBufferData = ($this, $target, $size, $data, $usage) => {
    cgxgbt_TeaGL20_glBufferData($this, $target, $size, $data, $usage);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    cgxgbt_TeaGL20_glBufferSubData($this, $target, $offset, $size, $data);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glCheckFramebufferStatus = ($this, $target) => {
    return cgxgbt_TeaGL20_glCheckFramebufferStatus($this, $target);
},
cgxgbt_TeaGL30Debug_glCompileShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glCompileShader($this, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glCreateProgram = $this => {
    let $program;
    $program = cgxgbt_TeaGL20_glCreateProgram($this);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $program;
},
cgxgbt_TeaGL30Debug_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = cgxgbt_TeaGL20_glCreateShader($this, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $shader;
},
cgxgbt_TeaGL30Debug_glDeleteProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glDeleteProgram($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDeleteShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glDeleteShader($this, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDisableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glDisableVertexAttribArray($this, $index);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements0($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glEnableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glEnableVertexAttribArray($this, $index);
    cgxgbt_TeaGL30Debug_checkError($this);
};
let cgxgbt_TeaGL30Debug_glFramebufferRenderbuffer = ($this, $target, $attachment, $renderbuffertarget, $renderbuffer) => {
    cgxgbt_TeaGL20_glFramebufferRenderbuffer($this, $target, $attachment, $renderbuffertarget, $renderbuffer);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glFramebufferTexture2D = ($this, $target, $attachment, $textarget, $texture, $level) => {
    cgxgbt_TeaGL20_glFramebufferTexture2D($this, $target, $attachment, $textarget, $texture, $level);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGenerateMipmap = ($this, $target) => {
    cgxgbt_TeaGL20_glGenerateMipmap($this, $target);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $attrib;
    $attrib = cgxgbt_TeaGL20_glGetActiveAttrib($this, $program, $index, $size, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $attrib;
},
cgxgbt_TeaGL30Debug_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $uniform;
    $uniform = cgxgbt_TeaGL20_glGetActiveUniform($this, $program, $index, $size, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $uniform;
},
cgxgbt_TeaGL30Debug_glGetAttribLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetAttribLocation($this, $program, $name);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL30Debug_glGetBooleanv = ($this, $pname, $params) => {
    cgxgbt_TeaGL20_glGetBooleanv($this, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetFloatv = ($this, $pname, $params) => {
    cgxgbt_TeaGL30_glGetFloatv($this, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetProgramiv = ($this, $program, $pname, $params) => {
    cgxgbt_TeaGL20_glGetProgramiv($this, $program, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetProgramInfoLog = ($this, $program) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetProgramInfoLog($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL30Debug_glGetShaderiv = ($this, $shader, $pname, $params) => {
    cgxgbt_TeaGL20_glGetShaderiv($this, $shader, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetShaderInfoLog = ($this, $shader) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetShaderInfoLog($this, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL30Debug_glGetUniformLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetUniformLocation($this, $program, $name);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL30Debug_glLinkProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glLinkProgram($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glRenderbufferStorage = ($this, $target, $internalformat, $width, $height) => {
    cgxgbt_TeaGL20_glRenderbufferStorage($this, $target, $internalformat, $width, $height);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glShaderSource = ($this, $shader, $source) => {
    cgxgbt_TeaGL20_glShaderSource($this, $shader, $source);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexParameteri = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameteri($this, $target, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUniform1f = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1f($this, $location, $x);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUniform1i = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1i($this, $location, $x);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUniform2f = ($this, $location, $x, $y) => {
    cgxgbt_TeaGL20_glUniform2f($this, $location, $x, $y);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUseProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glUseProgram($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    cgxgbt_TeaGL20_glVertexAttribPointer($this, $indx, $size, $type, $normalized, $stride, $ptr_0);
    cgxgbt_TeaGL30Debug_checkError($this);
};
function cbggg_GLVersion() {
    let a = this; jl_Object.call(a);
    a.$majorVersion = 0;
    a.$minorVersion = 0;
    a.$releaseVersion = 0;
    a.$versionString = null;
    a.$vendorString = null;
    a.$rendererString = null;
    a.$type1 = null;
    a.$TAG = $rt_s(115);
}
let cbggg_GLVersion_extractVersion = ($this, $patternString, $versionString) => {
    let $matcher, $pattern, $resultSplit, $found;
    $matcher = jur_Pattern_matcher(jur_Pattern_compile($patternString), $versionString);
    if (!jur_Matcher_find($matcher)) {
        $pattern = cbg_Gdx_app;
        $patternString = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($patternString);
        jl_AbstractStringBuilder_append0($patternString, $rt_s(151));
        jl_AbstractStringBuilder_append0($patternString, $versionString);
        $versionString = jl_AbstractStringBuilder_toString($patternString);
        cgxgbt_TeaApplication_log($pattern, $rt_s(115), $versionString);
        $this.$majorVersion = 2;
        $this.$minorVersion = 0;
        $this.$releaseVersion = 0;
    } else {
        $resultSplit = (jl_String_split(jur_Matcher_group($matcher, 1), $rt_s(152))).data;
        $this.$majorVersion = cbggg_GLVersion_parseInt($this, $resultSplit[0], 2);
        $found = $resultSplit.length;
        $this.$minorVersion = $found < 2 ? 0 : cbggg_GLVersion_parseInt($this, $resultSplit[1], 0);
        $this.$releaseVersion = $found < 3 ? 0 : cbggg_GLVersion_parseInt($this, $resultSplit[2], 0);
    }
},
cbggg_GLVersion_parseInt = ($this, $v, $defaultValue) => {
    let var$3, var$4, var$5, $$je;
    a: {
        try {
            var$3 = jl_Integer_parseInt($v);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NumberFormatException) {
                break a;
            } else {
                throw $$e;
            }
        }
        return var$3;
    }
    var$4 = cbg_Gdx_app;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(153));
    jl_AbstractStringBuilder_append0(var$5, $v);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(154));
    jl_AbstractStringBuilder_append1(var$5, $defaultValue);
    var$5 = jl_AbstractStringBuilder_toString(var$5);
    cgxgbt_TeaApplication_error(var$4, $rt_s(155), var$5);
    return $defaultValue;
},
cbg_Application$ApplicationType = $rt_classWithoutFields(jl_Enum),
cbg_Application$ApplicationType_Android = null,
cbg_Application$ApplicationType_Desktop = null,
cbg_Application$ApplicationType_HeadlessDesktop = null,
cbg_Application$ApplicationType_Applet = null,
cbg_Application$ApplicationType_WebGL = null,
cbg_Application$ApplicationType_iOS = null,
cbg_Application$ApplicationType_$VALUES = null,
cbg_Application$ApplicationType_values = () => {
    return cbg_Application$ApplicationType_$VALUES.$clone0();
},
cbg_Application$ApplicationType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(156), 0);
    cbg_Application$ApplicationType_Android = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(157), 1);
    cbg_Application$ApplicationType_Desktop = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(158), 2);
    cbg_Application$ApplicationType_HeadlessDesktop = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(159), 3);
    cbg_Application$ApplicationType_Applet = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(160), 4);
    cbg_Application$ApplicationType_WebGL = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(161), 5);
    cbg_Application$ApplicationType_iOS = var$1;
    var$2 = $rt_createArray(cbg_Application$ApplicationType, 6);
    var$3 = var$2.data;
    var$3[0] = cbg_Application$ApplicationType_Android;
    var$3[1] = cbg_Application$ApplicationType_Desktop;
    var$3[2] = cbg_Application$ApplicationType_HeadlessDesktop;
    var$3[3] = cbg_Application$ApplicationType_Applet;
    var$3[4] = cbg_Application$ApplicationType_WebGL;
    var$3[5] = var$1;
    cbg_Application$ApplicationType_$VALUES = var$2;
},
cgxgbt_TeaGraphics$FullscreenChanged = $rt_classWithoutFields(0);
function cgxgbt_TeaGraphics$1() {
    jl_Object.call(this);
    this.$this$023 = null;
}
let cgxgbt_TeaGraphics$1_fullscreenChanged$exported$0 = var$1 => {
    var$1;
},
cgxgbt_TeaGL20Debug = $rt_classWithoutFields(cgxgbt_TeaGL20),
cgxgbt_TeaGL20Debug_checkError = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$gl.getError();
    if (!var$1)
        return;
    var$2 = new cbgu_GdxRuntimeException;
    var$3 = jl_Integer_toHexString(var$1);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(150));
    jl_AbstractStringBuilder_append1(var$4, var$1);
    jl_AbstractStringBuilder_append(var$4, $rt_s(29));
    jl_AbstractStringBuilder_append(var$4, var$3);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
cgxgbt_TeaGL20Debug_glActiveTexture = ($this, $texture) => {
    cgxgbt_TeaGL20_glActiveTexture($this, $texture);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBindTexture = ($this, $target, $texture) => {
    cgxgbt_TeaGL20_glBindTexture($this, $target, $texture);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBlendFunc = ($this, $sfactor, $dfactor) => {
    cgxgbt_TeaGL20_glBlendFunc($this, $sfactor, $dfactor);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glClear = ($this, $mask) => {
    cgxgbt_TeaGL20_glClear($this, $mask);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    cgxgbt_TeaGL20_glClearColor($this, $red, $green, $blue, $alpha);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDepthMask = ($this, $flag) => {
    cgxgbt_TeaGL20_glDepthMask($this, $flag);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDisable = ($this, $cap) => {
    cgxgbt_TeaGL20_glDisable($this, $cap);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawArrays = ($this, $mode, $first, $count) => {
    cgxgbt_TeaGL20_glDrawArrays($this, $mode, $first, $count);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glEnable = ($this, $cap) => {
    cgxgbt_TeaGL20_glEnable($this, $cap);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetIntegerv = ($this, $pname, $params) => {
    cgxgbt_TeaGL20_glGetIntegerv($this, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetString = ($this, $name) => {
    return cgxgbt_TeaGL20_glGetString($this, $name);
},
cgxgbt_TeaGL20Debug_glPixelStorei = ($this, $pname, $param) => {
    cgxgbt_TeaGL20_glPixelStorei($this, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexImage2D($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexParameterf = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameterf($this, $target, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glViewport = ($this, $x, $y, $width, $height) => {
    cgxgbt_TeaGL20_glViewport($this, $x, $y, $width, $height);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glAttachShader = ($this, $program, $shader) => {
    cgxgbt_TeaGL20_glAttachShader($this, $program, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBindBuffer = ($this, $target, $buffer) => {
    cgxgbt_TeaGL20_glBindBuffer($this, $target, $buffer);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBindFramebuffer = ($this, $target, $framebuffer) => {
    cgxgbt_TeaGL20_glBindFramebuffer($this, $target, $framebuffer);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBindRenderbuffer = ($this, $target, $renderbuffer) => {
    cgxgbt_TeaGL20_glBindRenderbuffer($this, $target, $renderbuffer);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    cgxgbt_TeaGL20_glBlendFuncSeparate($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBufferData = ($this, $target, $size, $data, $usage) => {
    cgxgbt_TeaGL20_glBufferData($this, $target, $size, $data, $usage);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    cgxgbt_TeaGL20_glBufferSubData($this, $target, $offset, $size, $data);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glCheckFramebufferStatus = ($this, $target) => {
    return cgxgbt_TeaGL20_glCheckFramebufferStatus($this, $target);
},
cgxgbt_TeaGL20Debug_glCompileShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glCompileShader($this, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glCreateProgram = $this => {
    let $program;
    $program = cgxgbt_TeaGL20_glCreateProgram($this);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $program;
},
cgxgbt_TeaGL20Debug_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = cgxgbt_TeaGL20_glCreateShader($this, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $shader;
},
cgxgbt_TeaGL20Debug_glDeleteProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glDeleteProgram($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDeleteShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glDeleteShader($this, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDisableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glDisableVertexAttribArray($this, $index);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements0($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glEnableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glEnableVertexAttribArray($this, $index);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glFramebufferRenderbuffer = ($this, $target, $attachment, $renderbuffertarget, $renderbuffer) => {
    cgxgbt_TeaGL20_glFramebufferRenderbuffer($this, $target, $attachment, $renderbuffertarget, $renderbuffer);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glFramebufferTexture2D = ($this, $target, $attachment, $textarget, $texture, $level) => {
    cgxgbt_TeaGL20_glFramebufferTexture2D($this, $target, $attachment, $textarget, $texture, $level);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGenerateMipmap = ($this, $target) => {
    cgxgbt_TeaGL20_glGenerateMipmap($this, $target);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $attrib;
    $attrib = cgxgbt_TeaGL20_glGetActiveAttrib($this, $program, $index, $size, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $attrib;
},
cgxgbt_TeaGL20Debug_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $uniform;
    $uniform = cgxgbt_TeaGL20_glGetActiveUniform($this, $program, $index, $size, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $uniform;
},
cgxgbt_TeaGL20Debug_glGetAttribLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetAttribLocation($this, $program, $name);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL20Debug_glGetBooleanv = ($this, $pname, $params) => {
    cgxgbt_TeaGL20_glGetBooleanv($this, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetFloatv = ($this, $pname, $params) => {
    cgxgbt_TeaGL20_glGetFloatv($this, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetProgramiv = ($this, $program, $pname, $params) => {
    cgxgbt_TeaGL20_glGetProgramiv($this, $program, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetProgramInfoLog = ($this, $program) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetProgramInfoLog($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL20Debug_glGetShaderiv = ($this, $shader, $pname, $params) => {
    cgxgbt_TeaGL20_glGetShaderiv($this, $shader, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetShaderInfoLog = ($this, $shader) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetShaderInfoLog($this, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL20Debug_glGetUniformLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetUniformLocation($this, $program, $name);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL20Debug_glLinkProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glLinkProgram($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glRenderbufferStorage = ($this, $target, $internalformat, $width, $height) => {
    cgxgbt_TeaGL20_glRenderbufferStorage($this, $target, $internalformat, $width, $height);
    cgxgbt_TeaGL20Debug_checkError($this);
};
let cgxgbt_TeaGL20Debug_glShaderSource = ($this, $shader, $source) => {
    cgxgbt_TeaGL20_glShaderSource($this, $shader, $source);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexParameteri = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameteri($this, $target, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUniform1f = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1f($this, $location, $x);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUniform1i = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1i($this, $location, $x);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUniform2f = ($this, $location, $x, $y) => {
    cgxgbt_TeaGL20_glUniform2f($this, $location, $x, $y);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUseProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glUseProgram($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    cgxgbt_TeaGL20_glVertexAttribPointer($this, $indx, $size, $type, $normalized, $stride, $ptr_0);
    cgxgbt_TeaGL20Debug_checkError($this);
},
ju_Collection = $rt_classWithoutFields(0),
ju_AbstractCollection = $rt_classWithoutFields(),
ju_AbstractCollection_isEmpty = $this => {
    return $this.$size3 ? 0 : 1;
},
ju_AbstractCollection_toArray = ($this, $a) => {
    let var$2, $i, $i_0, var$5, var$6;
    var$2 = $a.data;
    $i = $this.$size3;
    $i_0 = var$2.length;
    if ($i_0 < $i)
        $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
    else
        while ($i < $i_0) {
            var$2[$i] = null;
            $i = $i + 1 | 0;
        }
    $i_0 = 0;
    var$5 = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext(var$5)) {
        var$2 = $a.data;
        var$6 = $i_0 + 1 | 0;
        var$2[$i_0] = ju_AbstractList$1_next(var$5);
        $i_0 = var$6;
    }
    return $a;
},
ju_Set = $rt_classWithoutFields(0),
ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection);
function ju_HashSet() {
    ju_AbstractSet.call(this);
    this.$backingMap = null;
}
let ju_HashSet__init_ = $this => {
    ju_HashSet__init_0($this, ju_HashMap__init_());
},
ju_HashSet__init_2 = () => {
    let var_0 = new ju_HashSet();
    ju_HashSet__init_(var_0);
    return var_0;
},
ju_HashSet__init_0 = ($this, $backingMap) => {
    $this.$backingMap = $backingMap;
},
ju_HashSet__init_1 = var_0 => {
    let var_1 = new ju_HashSet();
    ju_HashSet__init_0(var_1, var_0);
    return var_1;
},
ju_HashSet_add = ($this, $object) => {
    return ju_HashMap_put($this.$backingMap, $object, $this) !== null ? 0 : 1;
},
ju_HashSet_iterator = $this => {
    return ju_HashMap$1_iterator(ju_HashMap_keySet($this.$backingMap));
};
function cbgu_IntMap() {
    let a = this; jl_Object.call(a);
    a.$size7 = 0;
    a.$keyTable1 = null;
    a.$valueTable0 = null;
    a.$zeroValue = null;
    a.$hasZeroValue = 0;
    a.$loadFactor1 = 0.0;
    a.$threshold0 = 0;
    a.$shift0 = 0;
    a.$mask2 = 0;
}
let cbgu_IntMap__init_0 = $this => {
    cbgu_IntMap__init_($this, 51, 0.800000011920929);
},
cbgu_IntMap__init_2 = () => {
    let var_0 = new cbgu_IntMap();
    cbgu_IntMap__init_0(var_0);
    return var_0;
},
cbgu_IntMap__init_ = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor1 = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold0 = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask2 = $initialCapacity;
        $this.$shift0 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable1 = $rt_createIntArray($tableSize);
        $this.$valueTable0 = $rt_createArray(jl_Object, $tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(31));
    jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_IntMap__init_1 = (var_0, var_1) => {
    let var_2 = new cbgu_IntMap();
    cbgu_IntMap__init_(var_2, var_0, var_1);
    return var_2;
},
cbgu_IntMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item), Long_create(2135587861, 2654435769)), $this.$shift0));
},
cbgu_IntMap_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable1;
    $i = cbgu_IntMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return  -($i + 1 | 0) | 0;
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask2;
    }
    return $i;
},
cbgu_IntMap_put = ($this, $key, $value) => {
    let $oldValue, $i, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    if (!$key) {
        $oldValue = $this.$zeroValue;
        $this.$zeroValue = $value;
        if (!$this.$hasZeroValue) {
            $this.$hasZeroValue = 1;
            $this.$size7 = $this.$size7 + 1 | 0;
        }
        return $oldValue;
    }
    $i = cbgu_IntMap_locateKey($this, $key);
    if ($i >= 0) {
        var$5 = $this.$valueTable0.data;
        $oldValue = var$5[$i];
        var$5[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    var$5 = $this.$keyTable1.data;
    var$5[$i] = $key;
    $this.$valueTable0.data[$i] = $value;
    $key = $this.$size7 + 1 | 0;
    $this.$size7 = $key;
    if ($key >= $this.$threshold0)
        a: {
            $key = var$5.length;
            $i = $key << 1;
            $this.$threshold0 = $i * $this.$loadFactor1 | 0;
            var$6 = $i - 1 | 0;
            $this.$mask2 = var$6;
            $this.$shift0 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$6));
            var$5 = $this.$keyTable1;
            var$7 = $this.$valueTable0;
            $this.$keyTable1 = $rt_createIntArray($i);
            $this.$valueTable0 = $rt_createArray(jl_Object, $i);
            if ($this.$size7 > 0) {
                var$6 = 0;
                while (true) {
                    if (var$6 >= $key)
                        break a;
                    var$8 = var$5.data[var$6];
                    if (var$8) {
                        $value = var$7.data[var$6];
                        var$9 = $this.$keyTable1;
                        var$10 = cbgu_IntMap_place($this, var$8);
                        while (true) {
                            var$11 = var$9.data;
                            if (!var$11[var$10])
                                break;
                            var$10 = (var$10 + 1 | 0) & $this.$mask2;
                        }
                        var$11[var$10] = var$8;
                        $this.$valueTable0.data[var$10] = $value;
                    }
                    var$6 = var$6 + 1 | 0;
                }
            }
        }
    return null;
},
cbgu_IntMap_get = ($this, $key) => {
    let $i;
    if (!$key)
        return !$this.$hasZeroValue ? null : $this.$zeroValue;
    $i = cbgu_IntMap_locateKey($this, $key);
    return $i < 0 ? null : $this.$valueTable0.data[$i];
},
cbgu_IntMap_remove = ($this, $key) => {
    let $oldValue, $i, $keyTable, $valueTable, $oldValue_0, $mask, $next, var$9, $placement;
    if (!$key) {
        if (!$this.$hasZeroValue)
            return null;
        $this.$hasZeroValue = 0;
        $oldValue = $this.$zeroValue;
        $this.$zeroValue = null;
        $this.$size7 = $this.$size7 - 1 | 0;
        return $oldValue;
    }
    $i = cbgu_IntMap_locateKey($this, $key);
    if ($i < 0)
        return null;
    $keyTable = $this.$keyTable1;
    $valueTable = $this.$valueTable0.data;
    $oldValue_0 = $valueTable[$i];
    $mask = $this.$mask2;
    $next = ($i + 1 | 0) & $mask;
    while (true) {
        var$9 = $keyTable.data;
        $key = var$9[$next];
        if (!$key)
            break;
        $placement = cbgu_IntMap_place($this, $key);
        if ((($next - $placement | 0) & $mask) > (($i - $placement | 0) & $mask)) {
            var$9[$i] = $key;
            $valueTable[$i] = $valueTable[$next];
            $i = $next;
        }
        $next = ($next + 1 | 0) & $mask;
    }
    var$9[$i] = 0;
    $valueTable[$i] = null;
    $this.$size7 = $this.$size7 - 1 | 0;
    return $oldValue_0;
};
function cbgu_IntSet() {
    let a = this; jl_Object.call(a);
    a.$size5 = 0;
    a.$keyTable2 = null;
    a.$hasZeroValue0 = 0;
    a.$loadFactor4 = 0.0;
    a.$threshold1 = 0;
    a.$shift = 0;
    a.$mask1 = 0;
}
let cbgu_IntSet__init_ = $this => {
    let var$1, var$2;
    $this.$loadFactor4 = 0.800000011920929;
    var$1 = cbgu_ObjectSet_tableSize(51, 0.800000011920929);
    $this.$threshold1 = var$1 * 0.800000011920929 | 0;
    var$2 = var$1 - 1 | 0;
    $this.$mask1 = var$2;
    $this.$shift = jl_Long_numberOfLeadingZeros(Long_fromInt(var$2));
    $this.$keyTable2 = $rt_createIntArray(var$1);
},
cbgu_IntSet__init_0 = () => {
    let var_0 = new cbgu_IntSet();
    cbgu_IntSet__init_(var_0);
    return var_0;
},
cbgu_IntSet_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item), Long_create(2135587861, 2654435769)), $this.$shift));
},
cbgu_IntSet_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable2;
    $i = cbgu_IntSet_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return  -($i + 1 | 0) | 0;
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask1;
    }
    return $i;
},
cbgu_IntSet_add = ($this, $key) => {
    let $i, var$3, var$4, var$5, var$6, var$7;
    if (!$key) {
        if ($this.$hasZeroValue0)
            return 0;
        $this.$hasZeroValue0 = 1;
        $this.$size5 = $this.$size5 + 1 | 0;
        return 1;
    }
    $i = cbgu_IntSet_locateKey($this, $key);
    if ($i >= 0)
        return 0;
    $i =  -($i + 1 | 0) | 0;
    var$3 = $this.$keyTable2.data;
    var$3[$i] = $key;
    $key = $this.$size5 + 1 | 0;
    $this.$size5 = $key;
    if ($key >= $this.$threshold1)
        a: {
            $key = var$3.length;
            $i = $key << 1;
            $this.$threshold1 = $i * $this.$loadFactor4 | 0;
            var$4 = $i - 1 | 0;
            $this.$mask1 = var$4;
            $this.$shift = jl_Long_numberOfLeadingZeros(Long_fromInt(var$4));
            var$3 = $this.$keyTable2;
            $this.$keyTable2 = $rt_createIntArray($i);
            if ($this.$size5 > 0) {
                $i = 0;
                while (true) {
                    if ($i >= $key)
                        break a;
                    var$4 = var$3.data[$i];
                    if (var$4) {
                        var$5 = $this.$keyTable2;
                        var$6 = cbgu_IntSet_place($this, var$4);
                        while (true) {
                            var$7 = var$5.data;
                            if (!var$7[var$6])
                                break;
                            var$6 = (var$6 + 1 | 0) & $this.$mask1;
                        }
                        var$7[var$6] = var$4;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
    return 1;
},
cbgu_IntSet_remove = ($this, $key) => {
    let $i, $keyTable, $mask, $next, var$6, var$7, $placement;
    if (!$key) {
        if (!$this.$hasZeroValue0)
            return 0;
        $this.$hasZeroValue0 = 0;
        $this.$size5 = $this.$size5 - 1 | 0;
        return 1;
    }
    $i = cbgu_IntSet_locateKey($this, $key);
    if ($i < 0)
        return 0;
    $keyTable = $this.$keyTable2;
    $mask = $this.$mask1;
    $next = ($i + 1 | 0) & $mask;
    while (true) {
        var$6 = $keyTable.data;
        var$7 = var$6[$next];
        if (!var$7)
            break;
        $placement = cbgu_IntSet_place($this, var$7);
        if ((($next - $placement | 0) & $mask) > (($i - $placement | 0) & $mask)) {
            var$6[$i] = var$7;
            $i = $next;
        }
        $next = ($next + 1 | 0) & $mask;
    }
    var$6[$i] = 0;
    $this.$size5 = $this.$size5 - 1 | 0;
    return 1;
},
cgxgbtf_FileDB = $rt_classWithoutFields();
function cgxgbtf_MemoryFileStorage() {
    let a = this; cgxgbtf_FileDB.call(a);
    a.$fileMap = null;
    a.$tmpPaths = null;
    a.$debug = 0;
}
let cgxgbtf_MemoryFileStorage__init_ = $this => {
    $this.$tmpPaths = cbgu_Array__init_();
    $this.$debug = 0;
    $this.$fileMap = cbgu_OrderedMap__init_0();
},
cgxgbtf_MemoryFileStorage__init_0 = () => {
    let var_0 = new cgxgbtf_MemoryFileStorage();
    cgxgbtf_MemoryFileStorage__init_(var_0);
    return var_0;
},
cgxgbtf_MemoryFileStorage_read = ($this, $file) => {
    let $path, $data, $byteArray, $e, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, $$je;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    $data = cgxgbtf_MemoryFileStorage_getInternal($this, $path);
    if ($data === null)
        return null;
    $byteArray = $data.$bytes;
    a: {
        try {
            $file = ji_ByteArrayInputStream__init_0($byteArray);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $file;
    }
    var$6 = $this.$fileMap;
    cbgu_Array_removeValue(var$6.$keys0, $path, 0);
    var$7 = cbgu_ObjectMap_locateKey(var$6, $path);
    if (var$7 < 0)
        $file = null;
    else {
        $byteArray = var$6.$keyTable;
        var$8 = var$6.$valueTable.data;
        $file = var$8[var$7];
        var$9 = var$6.$mask;
        var$10 = (var$7 + 1 | 0) & var$9;
        while (true) {
            var$11 = $byteArray.data;
            $data = var$11[var$10];
            if ($data === null)
                break;
            var$12 = cbgu_ObjectMap_place(var$6, $data);
            if (((var$10 - var$12 | 0) & var$9) > ((var$7 - var$12 | 0) & var$9)) {
                var$11[var$7] = $data;
                var$8[var$7] = var$8[var$10];
                var$7 = var$10;
            }
            var$10 = (var$10 + 1 | 0) & var$9;
        }
        var$11[var$7] = null;
        var$8[var$7] = null;
        var$6.$size6 = var$6.$size6 - 1 | 0;
    }
    var$13 = $file;
    if ($this.$debug) {
        $file = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($file);
        jl_AbstractStringBuilder_append2($file, 34);
        jl_AbstractStringBuilder_append($file, $path);
        jl_AbstractStringBuilder_append2($file, 34);
        var$14 = jl_AbstractStringBuilder_toString($file);
        $data = var$13 !== null && cgxgbtf_FileData_isDirectory(var$13) ? $rt_s(162) : $rt_s(163);
        var$15 = jl_System_out();
        var$6 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$7 = var$13 === null ? 0 : 1;
        $file = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($file);
        jl_AbstractStringBuilder_append($file, var$6);
        jl_AbstractStringBuilder_append($file, $data);
        $data = jl_StringBuilder_append4($file, var$7);
        jl_AbstractStringBuilder_append($data, $rt_s(164));
        jl_AbstractStringBuilder_append($data, var$14);
        $data = jl_AbstractStringBuilder_toString($file);
        otcic_JsConsolePrintStream_println(var$15, $data);
    }
    if (var$13 !== null)
        $this.$removeFile($path);
    $file = new cbgu_GdxRuntimeException;
    $data = jl_Class_getSimpleName(jl_Object_getClass($this));
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, $data);
    jl_AbstractStringBuilder_append(var$6, $rt_s(165));
    jl_AbstractStringBuilder_append(var$6, $path);
    jl_Throwable__init_0($file, jl_AbstractStringBuilder_toString(var$6), $e);
    $rt_throw($file);
},
cgxgbtf_MemoryFileStorage_writeInternal = ($this, $file, $data, $append, $expectedLength) => {
    let $path, $oldData, var$7, var$8, $newSize, $oldBytes, $i, $j, $cur, $parentPath;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    $oldData = cbgu_ObjectMap_get($this.$fileMap, $path);
    if ($append && $oldData !== null) {
        var$7 = $data.data;
        var$8 = $oldData.$bytes.data;
        $append = var$7.length;
        $expectedLength = var$8.length;
        $newSize = $append + $expectedLength | 0;
        $data = $rt_createByteArray($newSize);
        $oldBytes = $data.data;
        $i = 0;
        while ($i < $expectedLength) {
            $oldBytes[$i] = var$8[$i];
            $i = $i + 1 | 0;
        }
        $j = 0;
        while ($expectedLength < $newSize) {
            $oldBytes[$expectedLength] = var$7[$j];
            $expectedLength = $expectedLength + 1 | 0;
            $j = $j + 1 | 0;
        }
    }
    cgxgbtf_MemoryFileStorage_putFileInternal($this, $path, $data, 1);
    $cur = cgxgbt_TeaFileHandle_parent($file);
    while (!cgxgbtf_MemoryFileStorage_isRootFolder($this, $cur)) {
        $oldData = $cur;
        $parentPath = cgxgbtf_MemoryFileStorage_fixPath($this, $oldData.$file);
        if (!cbgu_ObjectMap_containsKey($this.$fileMap, $parentPath))
            cgxgbtf_MemoryFileStorage_putFolderInternal($this, $parentPath);
        $cur = cgxgbt_TeaFileHandle_parent($oldData);
    }
},
cgxgbtf_MemoryFileStorage_mkdirs = ($this, $file) => {
    let $cur, $path, $parentPath;
    cgxgbtf_MemoryFileStorage_putFolderInternal($this, cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file));
    $cur = cgxgbt_TeaFileHandle_parent($file);
    while (!cgxgbtf_MemoryFileStorage_isRootFolder($this, $cur)) {
        $path = $cur;
        $parentPath = cgxgbtf_MemoryFileStorage_fixPath($this, $path.$file);
        if (!cbgu_ObjectMap_containsKey($this.$fileMap, $parentPath))
            cgxgbtf_MemoryFileStorage_putFolderInternal($this, $parentPath);
        $cur = cgxgbt_TeaFileHandle_parent($path);
    }
},
cgxgbtf_MemoryFileStorage_exists = ($this, $file) => {
    let $path, var$3, var$4, var$5, var$6;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    if (cgxgbtf_MemoryFileStorage_isRootFolder($this, $file))
        return 1;
    $file = cbgu_ObjectMap_get($this.$fileMap, $path);
    var$3 = $file === null ? 0 : 1;
    if ($this.$debug) {
        $file = $file !== null && cgxgbtf_FileData_isDirectory($file) ? $rt_s(166) : $rt_s(167);
        var$4 = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, var$5);
        jl_AbstractStringBuilder_append(var$6, $file);
        $file = jl_StringBuilder_append4(var$6, var$3);
        jl_AbstractStringBuilder_append($file, $rt_s(164));
        jl_AbstractStringBuilder_append($file, $path);
        $path = jl_AbstractStringBuilder_toString(var$6);
        otcic_JsConsolePrintStream_println(var$4, $path);
    }
    return var$3;
},
cgxgbtf_MemoryFileStorage_length = ($this, $file) => {
    let $data;
    $data = cgxgbtf_MemoryFileStorage_getInternal($this, cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file));
    if ($data !== null && !cgxgbtf_FileData_isDirectory($data))
        return Long_fromInt($data.$bytes.data.length);
    return Long_ZERO;
},
cgxgbtf_MemoryFileStorage_isRootFolder = ($this, $cur) => {
    let $path;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $cur.$file);
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(168)) && !jl_String_equals($path, $rt_s(107)) && !jl_String_equals($path, $rt_s(169)))
        return 0;
    return 1;
},
cgxgbtf_MemoryFileStorage_putFile = ($this, $key, $data) => {
    return;
},
cgxgbtf_MemoryFileStorage_removeFile = ($this, $key) => {
    return;
},
cgxgbtf_MemoryFileStorage_getInternal = ($this, $path) => {
    let $fileData, $type, var$4, var$5, var$6, var$7, var$8, var$9;
    $fileData = cbgu_ObjectMap_get($this.$fileMap, $path);
    if ($this.$debug) {
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_AbstractStringBuilder_append2($type, 34);
        jl_AbstractStringBuilder_append($type, $path);
        jl_AbstractStringBuilder_append2($type, 34);
        var$4 = jl_AbstractStringBuilder_toString($type);
        $type = $fileData !== null && cgxgbtf_FileData_isDirectory($fileData) ? $rt_s(170) : $rt_s(171);
        $path = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$6 = $fileData === null ? 0 : 1;
        if ($fileData === null)
            var$7 = 0;
        else {
            var$8 = $fileData.$bytes;
            var$7 = var$8 === null ? 0 : var$8.data.length;
        }
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(var$9, var$5);
        jl_AbstractStringBuilder_append(var$9, $type);
        $type = jl_StringBuilder_append4(var$9, var$6);
        jl_AbstractStringBuilder_append($type, $rt_s(172));
        jl_AbstractStringBuilder_append1($type, var$7);
        jl_AbstractStringBuilder_append($type, $rt_s(164));
        jl_AbstractStringBuilder_append($type, var$4);
        $type = jl_AbstractStringBuilder_toString(var$9);
        otcic_JsConsolePrintStream_println($path, $type);
    }
    return $fileData;
},
cgxgbtf_MemoryFileStorage_putFileInternal = ($this, $path, $bytes, $callMethod) => {
    let var$4, $fileData, var$6, var$7, var$8, var$9;
    if ($this.$debug) {
        var$4 = $bytes.data;
        $fileData = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($fileData);
        jl_AbstractStringBuilder_append2($fileData, 34);
        jl_AbstractStringBuilder_append($fileData, $path);
        jl_AbstractStringBuilder_append2($fileData, 34);
        var$6 = jl_AbstractStringBuilder_toString($fileData);
        $fileData = jl_System_out();
        var$7 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$8 = var$4.length;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(var$9, var$7);
        jl_AbstractStringBuilder_append(var$9, $rt_s(173));
        jl_AbstractStringBuilder_append(var$9, var$6);
        jl_AbstractStringBuilder_append(var$9, $rt_s(174));
        jl_AbstractStringBuilder_append1(var$9, var$8);
        var$7 = jl_AbstractStringBuilder_toString(var$9);
        otcic_JsConsolePrintStream_println($fileData, var$7);
    }
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(168)) && !jl_String_equals($path, $rt_s(107)) && !jl_String_equals($path, $rt_s(169))) {
        $fileData = cgxgbtf_FileData__init_0($path, $bytes);
        cbgu_OrderedMap_put($this.$fileMap, $path, $fileData);
        if ($callMethod)
            $this.$putFile($path, $fileData);
        return;
    }
    $fileData = new cbgu_GdxRuntimeException;
    jl_Exception__init_($fileData, $rt_s(175));
    $rt_throw($fileData);
},
cgxgbtf_MemoryFileStorage_putFolderInternal = ($this, $path) => {
    cgxgbtf_MemoryFileStorage_putFolderInternal0($this, $path, 1);
},
cgxgbtf_MemoryFileStorage_putFolderInternal0 = ($this, $path, $callMethod) => {
    let var$3, var$4, var$5, $fileData;
    if ($this.$debug) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append2(var$3, 34);
        jl_AbstractStringBuilder_append(var$3, $path);
        jl_AbstractStringBuilder_append2(var$3, 34);
        var$4 = jl_AbstractStringBuilder_toString(var$3);
        var$3 = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        $fileData = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($fileData);
        jl_AbstractStringBuilder_append($fileData, var$5);
        jl_AbstractStringBuilder_append($fileData, $rt_s(176));
        jl_AbstractStringBuilder_append($fileData, var$4);
        var$5 = jl_AbstractStringBuilder_toString($fileData);
        otcic_JsConsolePrintStream_println(var$3, var$5);
    }
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(168)) && !jl_String_equals($path, $rt_s(107)) && !jl_String_equals($path, $rt_s(169))) {
        $fileData = cgxgbtf_FileData__init_1($path);
        cbgu_OrderedMap_put($this.$fileMap, $path, cgxgbtf_FileData__init_1($path));
        if ($callMethod)
            $this.$putFile($path, $fileData);
        return;
    }
    var$3 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$3, $rt_s(175));
    $rt_throw(var$3);
},
cgxgbtf_MemoryFileStorage_fixPath = ($this, $path) => {
    let var$2, var$3;
    var$2 = jl_String_trim($path);
    if (jl_String_startsWith(var$2, $rt_s(169)))
        var$2 = jl_String_replace(var$2, $rt_s(169), $rt_s(9));
    if (jl_String_startsWith(var$2, $rt_s(168))) {
        var$2 = jur_Pattern_matcher(jur_Pattern_compile($rt_s(168)), var$2);
        jur_Matcher_reset(var$2);
        if (!jur_Matcher_find(var$2))
            var$2 = var$2.$string2;
        else {
            var$3 = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_(var$3);
            jur_Matcher_appendReplacement(var$2, var$3, $rt_s(9));
            var$2 = jl_AbstractStringBuilder_toString(jur_Matcher_appendTail(var$2, var$3));
        }
    }
    if (!jl_String_startsWith(var$2, $rt_s(107))) {
        $path = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($path);
        jl_AbstractStringBuilder_append2($path, 47);
        jl_AbstractStringBuilder_append($path, var$2);
        var$2 = jl_AbstractStringBuilder_toString($path);
    }
    if (!jl_String_endsWith(var$2, $rt_s(107))) {
        $path = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($path);
        jl_AbstractStringBuilder_append($path, var$2);
        jl_AbstractStringBuilder_append2($path, 47);
        var$2 = jl_AbstractStringBuilder_toString($path);
    }
    return var$2;
},
cgxgbtft_InternalStorage = $rt_classWithoutFields(cgxgbtf_MemoryFileStorage),
cgxgbtft_InternalStorage__init_ = $this => {
    cgxgbtf_MemoryFileStorage__init_($this);
},
cgxgbtft_InternalStorage__init_0 = () => {
    let var_0 = new cgxgbtft_InternalStorage();
    cgxgbtft_InternalStorage__init_(var_0);
    return var_0;
},
cgxgbtft_ClasspathStorage = $rt_classWithoutFields(cgxgbtf_MemoryFileStorage),
cgxgbtft_ClasspathStorage__init_ = $this => {
    cgxgbtf_MemoryFileStorage__init_($this);
},
cgxgbtft_ClasspathStorage__init_0 = () => {
    let var_0 = new cgxgbtft_ClasspathStorage();
    cgxgbtft_ClasspathStorage__init_(var_0);
    return var_0;
};
function cgxgbtft_LocalDBStorage() {
    cgxgbtf_MemoryFileStorage.call(this);
    this.$dataBase = null;
}
let cgxgbtft_LocalDBStorage_putFile = ($this, $key, $fileData) => {
    let $type, $transaction, $objectStore, $dbFileData, $request;
    if ($this.$debug) {
        $type = $fileData !== null && cgxgbtf_FileData_isDirectory($fileData) ? $rt_s(177) : $rt_s(178);
        $transaction = jl_System_out();
        $objectStore = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($objectStore);
        jl_AbstractStringBuilder_append($objectStore, $type);
        jl_AbstractStringBuilder_append($objectStore, $key);
        $objectStore = jl_AbstractStringBuilder_toString($objectStore);
        otcic_JsConsolePrintStream_println($transaction, $objectStore);
    }
    $objectStore = $this.$dataBase.transaction("FILE_DATA", "readwrite").objectStore("FILE_DATA");
    $dbFileData = cgxgbtfi_IndexedDBFileData_create$js_body$_5($fileData.$type7, new Date());
    if (!cgxgbtf_FileData_isDirectory($fileData))
        $dbFileData.contents = otji_JS_wrap($fileData.$bytes);
    $fileData = $rt_ustr($key);
    $request = $objectStore.put($dbFileData, $fileData);
    $fileData = new cgxgbtft_LocalDBStorage$putFile$lambda$_2_0;
    $fileData.$_013 = $key;
    $key = otji_JS_function(otji_JSWrapper_unwrap($fileData), "handleEvent");
    $request.onerror = $key;
},
cgxgbtft_LocalDBStorage_removeFile = ($this, $key) => {
    let $objectStore, $transaction, $request;
    if ($this.$debug) {
        $objectStore = jl_System_out();
        $transaction = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($transaction);
        jl_AbstractStringBuilder_append($transaction, $rt_s(179));
        jl_AbstractStringBuilder_append($transaction, $key);
        $transaction = jl_AbstractStringBuilder_toString($transaction);
        otcic_JsConsolePrintStream_println($objectStore, $transaction);
    }
    $objectStore = $this.$dataBase.transaction("FILE_DATA", "readwrite").objectStore("FILE_DATA");
    $transaction = $rt_ustr($key);
    $request = $objectStore.delete($transaction);
    $objectStore = new cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0;
    $objectStore.$_017 = $key;
    $key = otji_JS_function(otji_JSWrapper_unwrap($objectStore), "handleEvent");
    $request.onerror = $key;
},
cgxgbt_TeaPermissions$TeaPermissionResult = $rt_classWithoutFields(0);
function cgxgbt_TeaClipboard$ClipboardWriteHandler() {
    jl_Object.call(this);
    this.$this$01 = null;
}
let cgxgbt_TeaClipboard$ClipboardWriteHandler_granted$exported$0 = var$1 => {
    var$1 = var$1.$this$01;
    var$1.$hasWritePermissions = 1;
    cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4($rt_ustr(var$1.$content));
},
cgxgbt_TeaClipboard$ClipboardWriteHandler_prompt$exported$1 = var$1 => {
    var$1 = var$1.$this$01;
    var$1.$hasWritePermissions = 1;
    cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4($rt_ustr(var$1.$content));
},
cgxgbt_TeaClipboard$ClipboardWriteHandler_denied$exported$2 = var$1 => {
    var$1.$this$01.$hasWritePermissions = 0;
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_0() {
    jl_Object.call(this);
    this.$_015 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_015;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$3.setData("text/plain", $rt_ustr(var$1.$content));
    var$2.preventDefault();
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_1() {
    jl_Object.call(this);
    this.$_011 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_1_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_011;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$3.setData("text/plain", $rt_ustr(var$1.$content));
    var$2.preventDefault();
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_2() {
    jl_Object.call(this);
    this.$_05 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_05;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$1.$content = $rt_str(var$3.getData("text/plain"));
    var$2.preventDefault();
},
cgxgbta_AssetLoaderListener = $rt_classWithoutFields(0),
cgxgbta_AssetLoaderListener_onProgress = ($this, $total, $loaded) => {
    return;
},
cgxgbta_AssetLoaderListener_onFailure = ($this, $url) => {
    return;
},
cgxgbta_AssetLoaderListener_onSuccess = ($this, $url, $result) => {
    return;
};
function cgxgbt_TeaApplication$4() {
    jl_Object.call(this);
    this.$this$064 = null;
}
function cgxgbt_TeaApplication$5() {
    jl_Object.call(this);
    this.$this$027 = null;
}
let cbg_LifecycleListener = $rt_classWithoutFields(0),
cgxgbtwh_HowlerAudioManager = $rt_classWithoutFields(),
cgxgbtwh_HowlerAudioManager__init_ = $this => {
    return;
},
cgxgbtwh_HowlerAudioManager__init_0 = () => {
    let var_0 = new cgxgbtwh_HowlerAudioManager();
    cgxgbtwh_HowlerAudioManager__init_(var_0);
    return var_0;
},
cbgm_MathUtils = $rt_classWithoutFields(),
cbgm_MathUtils_random0 = null,
cbgm_MathUtils__init_ = $this => {
    return;
},
cbgm_MathUtils__init_0 = () => {
    let var_0 = new cbgm_MathUtils();
    cbgm_MathUtils__init_(var_0);
    return var_0;
},
cbgm_MathUtils_sin = $radians => {
    return cbgm_MathUtils$Sin_table.data[($radians * 2607.594482421875 | 0) & 16383];
},
cbgm_MathUtils_cos = $radians => {
    return cbgm_MathUtils$Sin_table.data[(($radians + 1.5707963705062866) * 2607.594482421875 | 0) & 16383];
},
cbgm_MathUtils_random = $range => {
    let var$2, var$3, var$4, var$5, var$6;
    var$2 = cbgm_MathUtils_random0;
    $range = $range + 1 | 0;
    var$2 = var$2;
    var$3 = Long_fromInt($range);
    if (Long_le(var$3, Long_ZERO)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2, $rt_s(180));
        $rt_throw(var$2);
    }
    var$4 = Long_sub(var$3, Long_fromInt(1));
    while (true) {
        var$5 = var$2.$seed0;
        var$6 = var$2.$seed1;
        var$2.$seed0 = var$6;
        var$5 = Long_xor(var$5, Long_shl(var$5, 23));
        var$5 = Long_xor(Long_xor(Long_xor(var$5, var$6), Long_shru(var$5, 17)), Long_shru(var$6, 26));
        var$2.$seed1 = var$5;
        var$5 = Long_shru(Long_add(var$5, var$6), 1);
        var$6 = Long_rem(var$5, var$3);
        if (Long_ge(Long_add(Long_sub(var$5, var$6), var$4), Long_ZERO))
            break;
    }
    return Long_lo(var$6);
},
cbgm_MathUtils_nextPowerOfTwo = $value => {
    let var$2;
    if (!$value)
        return 1;
    var$2 = $value + (-1) | 0;
    $value = var$2 | var$2 >> 1;
    $value = $value | $value >> 2;
    $value = $value | $value >> 4;
    $value = $value | $value >> 8;
    return ($value | $value >> 16) + 1 | 0;
},
cbgm_MathUtils__clinit_ = () => {
    cbgm_MathUtils_random0 = cbgm_RandomXS128__init_0();
},
ju_Dictionary = $rt_classWithoutFields();
function ju_Hashtable() {
    let a = this; ju_Dictionary.call(a);
    a.$elementCount0 = 0;
    a.$elementData0 = null;
    a.$loadFactor3 = 0.0;
    a.$threshold6 = 0;
    a.$firstSlot = 0;
    a.$lastSlot = 0;
    a.$modCount2 = 0;
}
let ju_Hashtable_EMPTY_ENUMERATION = null,
ju_Hashtable_EMPTY_ITERATOR = null,
ju_Hashtable__init_ = $this => {
    let var$1, var$2;
    $this.$lastSlot = (-1);
    $this.$elementCount0 = 0;
    var$1 = $rt_createArray(ju_Hashtable$Entry, 11);
    var$2 = var$1.data;
    $this.$elementData0 = var$1;
    $this.$firstSlot = var$2.length;
    $this.$loadFactor3 = 0.75;
    ju_Hashtable_computeMaxSize($this);
},
ju_Hashtable__init_0 = () => {
    let var_0 = new ju_Hashtable();
    ju_Hashtable__init_(var_0);
    return var_0;
},
ju_Hashtable_computeMaxSize = $this => {
    $this.$threshold6 = $this.$elementData0.data.length * $this.$loadFactor3 | 0;
},
ju_Hashtable_put = ($this, $key, $value) => {
    let $result, var$4, var$5, $index, $entry, $hash, var$9, var$10, var$11, var$12, var$13;
    jl_Object_monitorEnterSync($this);
    try {
        if ($key !== null && $value !== null) {
            $result = $key;
            var$4 = jl_String_hashCode($result) & 2147483647;
            var$5 = $this.$elementData0.data;
            $index = var$4 % var$5.length | 0;
            $entry = var$5[$index];
            while ($entry !== null && !($entry.$hashcode == jl_String_hashCode($result) && $entry.$key.$equals($key) ? 1 : 0)) {
                $entry = $entry.$next3;
            }
            if ($entry !== null) {
                $result = $entry.$value;
                $entry.$value = $value;
                return $result;
            }
            $this.$modCount2 = $this.$modCount2 + 1 | 0;
            $hash = $this.$elementCount0 + 1 | 0;
            $this.$elementCount0 = $hash;
            if ($hash > $this.$threshold6) {
                $hash = ($this.$elementData0.data.length << 1) + 1 | 0;
                if (!$hash)
                    $hash = 1;
                $index = (-1);
                var$9 = $rt_createArray(ju_Hashtable$Entry, $hash);
                var$5 = var$9.data;
                var$10 = $this.$lastSlot + 1 | 0;
                var$11 = $hash;
                while (true) {
                    var$10 = var$10 + (-1) | 0;
                    if (var$10 < $this.$firstSlot)
                        break;
                    var$12 = $this.$elementData0.data[var$10];
                    while (var$12 !== null) {
                        var$13 = (var$12.$key.$hashCode() & 2147483647) % $hash | 0;
                        if (var$13 < var$11)
                            var$11 = var$13;
                        if (var$13 > $index)
                            $index = var$13;
                        $entry = var$12.$next3;
                        var$12.$next3 = var$5[var$13];
                        var$5[var$13] = var$12;
                        var$12 = $entry;
                    }
                }
                $this.$firstSlot = var$11;
                $this.$lastSlot = $index;
                $this.$elementData0 = var$9;
                ju_Hashtable_computeMaxSize($this);
                $index = var$4 % $this.$elementData0.data.length | 0;
            }
            if ($index < $this.$firstSlot)
                $this.$firstSlot = $index;
            if ($index > $this.$lastSlot)
                $this.$lastSlot = $index;
            $entry = new ju_Hashtable$Entry;
            ju_MapEntry__init_($entry, $key, $value);
            $entry.$hashcode = jl_String_hashCode($result);
            var$5 = $this.$elementData0.data;
            $entry.$next3 = var$5[$index];
            var$5[$index] = $entry;
            return null;
        }
        $key = new jl_NullPointerException;
        jl_Throwable__init_($key);
        $rt_throw($key);
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
ju_Hashtable__clinit_ = () => {
    ju_Hashtable_EMPTY_ENUMERATION = new ju_Hashtable$1;
    ju_Hashtable_EMPTY_ITERATOR = new ju_Hashtable$2;
};
function ju_Properties() {
    ju_Hashtable.call(this);
    this.$defaults = null;
}
let ju_Properties__init_ = $this => {
    ju_Hashtable__init_($this);
},
ju_Properties__init_0 = () => {
    let var_0 = new ju_Properties();
    ju_Properties__init_(var_0);
    return var_0;
},
cgxgbt_TeaGL20$CustomIntMap = $rt_classWithoutFields(),
cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1 = () => {
    return [undefined];
},
cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2 = (var$1, var$2) => {
    if (var$1[var$2] === undefined) return null;
    return var$1[var$2];
},
cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4 = (var$1, var$2) => {
    var$1.push(var$2);
    return var$1.length - 1;
},
cgxgbt_TeaGL20$CustomIntMap_remove$js_body$_5 = (var$1, var$2) => {
    var value = var$1[var$2];
    delete var$1[var$2];
    return value;
},
cgxgbt_TeaGL20$CustomIntMap_getKey$js_body$_6 = (var$1, var$2) => {
    for (var i = 0;i < var$1.length;i++) {
        if (var$2 === var$1[i]) {
            return i;
        }
    }
},
cbggg_GLVersion$Type = $rt_classWithoutFields(jl_Enum),
cbggg_GLVersion$Type_OpenGL = null,
cbggg_GLVersion$Type_GLES = null,
cbggg_GLVersion$Type_WebGL = null,
cbggg_GLVersion$Type_NONE = null,
cbggg_GLVersion$Type_$VALUES = null,
cbggg_GLVersion$Type_values = () => {
    return cbggg_GLVersion$Type_$VALUES.$clone0();
},
cbggg_GLVersion$Type__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(181), 0);
    cbggg_GLVersion$Type_OpenGL = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(182), 1);
    cbggg_GLVersion$Type_GLES = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(160), 2);
    cbggg_GLVersion$Type_WebGL = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(183), 3);
    cbggg_GLVersion$Type_NONE = var$1;
    var$2 = $rt_createArray(cbggg_GLVersion$Type, 4);
    var$3 = var$2.data;
    var$3[0] = cbggg_GLVersion$Type_OpenGL;
    var$3[1] = cbggg_GLVersion$Type_GLES;
    var$3[2] = cbggg_GLVersion$Type_WebGL;
    var$3[3] = var$1;
    cbggg_GLVersion$Type_$VALUES = var$2;
};
function cgxgbta_AssetLoadImpl$1() {
    jl_Object.call(this);
    this.$this$038 = null;
}
let cgxgbta_AssetLoadImpl$1_handleEvent$exported$0 = (var$1, var$2) => {
    var$1;
    var$2.preventDefault();
};
function cgxgbta_AssetLoadImpl$2() {
    jl_Object.call(this);
    this.$this$057 = null;
}
let cgxgbta_AssetLoadImpl$2_handleEvent$exported$0 = (var$1, var$2) => {
    var$1;
    var$2.preventDefault();
};
function cgxgbta_AssetLoadImpl$3() {
    let a = this; jl_Object.call(a);
    a.$val$config0 = null;
    a.$this$010 = null;
}
let cgxgbta_AssetLoadImpl$3_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = var$1;
    var$2.preventDefault();
    var$3 = var$2.dataTransfer.files;
    var$2 = var$1.$this$010;
    var$1 = var$1.$val$config0;
    var$4 = var$3.length;
    if (var$4 > 0) {
        cbgu_Array__init_3(new cbgu_Array);
        var$5 = new Array();
        var$6 = 0;
        while (var$6 < var$4) {
            var$7 = var$3[var$6];
            var$8 = $rt_str(var$7.name);
            if (var$1.$windowListener.$acceptFileDropped(var$8)) {
                var$9 = new cgxgbta_AssetLoadImpl$getFile$lambda$_2_0;
                var$9.$_014 = var$2;
                var$9.$_17 = var$7;
                var$9.$_25 = var$8;
                var$5.push(new Promise(otji_JS_function(otji_JSWrapper_unwrap(var$9), "onExecute")));
            }
            var$6 = var$6 + 1 | 0;
        }
        var$3 = Promise.all(var$5);
        var$2 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0;
        var$2.$_09 = var$1;
        var$1 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1;
        var$2 = var$3.then(otji_JS_function(otji_JSWrapper_unwrap(var$2), "apply"), otji_JS_function(otji_JSWrapper_unwrap(var$1), "apply"));
        var$1 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2;
        var$2.finally(otji_JS_function(otji_JSWrapper_unwrap(var$1), "get"));
    }
},
cbgu_ArraySupplier$_clinit_$lambda$_3_0 = $rt_classWithoutFields(),
cbgu_ArraySupplier$_clinit_$lambda$_3_0__init_ = var$0 => {
    return;
},
cbgu_ArraySupplier$_clinit_$lambda$_3_0__init_0 = () => {
    let var_0 = new cbgu_ArraySupplier$_clinit_$lambda$_3_0();
    cbgu_ArraySupplier$_clinit_$lambda$_3_0__init_(var_0);
    return var_0;
},
cbgu_ArraySupplier$_clinit_$lambda$_3_0_get = (var$0, var$1) => {
    return $rt_createArray(jl_Object, var$1);
};
function jur_Pattern() {
    let a = this; jl_Object.call(a);
    a.$lexemes = null;
    a.$flags = 0;
    a.$backRefs = null;
    a.$needsBackRefReplacement = 0;
    a.$globalGroupIndex = 0;
    a.$compCount = 0;
    a.$consCount = 0;
    a.$start2 = null;
}
let jur_Pattern_matcher = ($this, $input) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$2 = new jur_Matcher;
    var$2.$leftBound0 = (-1);
    var$2.$rightBound0 = (-1);
    var$2.$pat = $this;
    var$2.$start5 = $this.$start2;
    var$2.$string2 = $input;
    var$2.$leftBound0 = 0;
    var$3 = $input.$nativeString.length;
    var$2.$rightBound0 = var$3;
    var$4 = new jur_MatchResultImpl;
    var$5 = var$2.$leftBound0;
    var$6 = $this.$globalGroupIndex;
    var$7 = $this.$compCount + 1 | 0;
    var$8 = $this.$consCount + 1 | 0;
    var$4.$previousMatch = (-1);
    var$6 = var$6 + 1 | 0;
    var$4.$groupCount = var$6;
    var$4.$groupBounds = $rt_createIntArray(var$6 * 2 | 0);
    var$9 = $rt_createIntArray(var$8);
    var$4.$consumers = var$9;
    ju_Arrays_fill(var$9, (-1));
    if (var$7 > 0)
        var$4.$compQuantCounters = $rt_createIntArray(var$7);
    ju_Arrays_fill(var$4.$groupBounds, (-1));
    jur_MatchResultImpl_reset(var$4, $input, var$5, var$3);
    var$2.$matchResult = var$4;
    var$4.$anchoringBounds = 1;
    return var$2;
},
jur_Pattern_split = ($this, $inputSeq, $limit) => {
    let $res, $mat, $index, $curPos, var$7, var$8;
    $res = ju_ArrayList__init_();
    $mat = jur_Pattern_matcher($this, $inputSeq);
    $index = 0;
    $curPos = 0;
    $inputSeq = $inputSeq;
    if (!$inputSeq.$nativeString.length) {
        var$7 = $rt_createArray(jl_String, 1);
        var$7.data[0] = $rt_s(9);
        return var$7;
    }
    while (jur_Matcher_find($mat)) {
        var$8 = $index + 1 | 0;
        if (var$8 >= $limit && $limit > 0)
            break;
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, jur_Matcher_start($mat)));
        $curPos = jur_Matcher_end($mat);
        $index = var$8;
    }
    a: {
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, $inputSeq.$nativeString.length));
        $index = $index + 1 | 0;
        if (!$limit)
            while (true) {
                $index = $index + (-1) | 0;
                if ($index < 0)
                    break;
                if ((ju_ArrayList_get($res, $index)).$nativeString.length)
                    break a;
                ju_ArrayList_remove($res, $index);
            }
    }
    if ($index < 0)
        $index = 0;
    var$7 = $rt_createArray(jl_String, $index);
    return ju_AbstractCollection_toArray($res, var$7);
},
jur_Pattern_pattern = $this => {
    return $this.$lexemes.$orig;
},
jur_Pattern_processExpression = ($this, $ch, $newFlags, $last) => {
    let $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
    $children = ju_ArrayList__init_();
    $saveFlags = $this.$flags;
    $saveChangedFlags = 0;
    if ($newFlags != $saveFlags)
        $this.$flags = $newFlags;
    a: {
        switch ($ch) {
            case -1073741784:
                $fSet = new jur_NonCapFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -536870872:
            case -268435416:
                break;
            case -134217688:
            case -67108824:
                $fSet = new jur_BehindFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -33554392:
                $fSet = new jur_AtomicFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            default:
                $newFlags = $this.$globalGroupIndex + 1 | 0;
                $this.$globalGroupIndex = $newFlags;
                if ($last !== null)
                    $fSet = jur_FSet__init_0($newFlags);
                else {
                    $fSet = jur_FinalSet__init_0();
                    $saveChangedFlags = 1;
                }
                $newFlags = $this.$globalGroupIndex;
                if ($newFlags <= (-1))
                    break a;
                if ($newFlags >= 10)
                    break a;
                $this.$backRefs.data[$newFlags] = $fSet;
                break a;
        }
        $fSet = jur_AheadFSet__init_0();
    }
    while (true) {
        if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
            $last = jur_CharClass__init_1(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                $child = $this.$lexemes;
                var$9 = $child.$lookAhead;
                if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                    break;
                jur_CharClass_add0($last, jur_Lexer_next($child));
                $child = $this.$lexemes;
                if ($child.$ch != (-536870788))
                    continue;
                jur_Lexer_next($child);
            }
            $child = jur_Pattern_processRangeSet($this, $last);
            $child.$setNext($fSet);
        } else if ($this.$lexemes.$ch == (-536870788)) {
            $child = jur_EmptySet__init_($fSet);
            jur_Lexer_next($this.$lexemes);
        } else {
            $child = jur_Pattern_processSubExpression($this, $fSet);
            $last = $this.$lexemes;
            if ($last.$ch == (-536870788))
                jur_Lexer_next($last);
        }
        if ($child !== null)
            ju_ArrayList_add($children, $child);
        if (jur_Lexer_isEmpty($this.$lexemes))
            break;
        if ($this.$lexemes.$ch == (-536870871))
            break;
    }
    if ($this.$lexemes.$lookBack == (-536870788))
        ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
    if ($this.$flags != $saveFlags && !$saveChangedFlags) {
        $this.$flags = $saveFlags;
        $last = $this.$lexemes;
        $last.$flags0 = $saveFlags;
        $last.$lookAhead = $last.$ch;
        $last.$lookAheadST = $last.$curST;
        var$9 = $last.$curToc;
        $last.$index0 = var$9 + 1 | 0;
        $last.$lookAheadToc = var$9;
        jur_Lexer_movePointer($last);
    }
    switch ($ch) {
        case -1073741784:
            break;
        case -536870872:
            $last = new jur_PositiveLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -268435416:
            $last = new jur_NegativeLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -134217688:
            $last = new jur_PositiveLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -67108824:
            $last = new jur_NegativeLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -33554392:
            $last = new jur_AtomicJointSet;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        default:
            switch ($children.$size3) {
                case 0:
                    break;
                case 1:
                    return jur_SingleSet__init_0(ju_ArrayList_get($children, 0), $fSet);
                default:
                    return jur_JointSet__init_1($children, $fSet);
            }
            return jur_EmptySet__init_($fSet);
    }
    $last = new jur_NonCapJointSet;
    jur_JointSet__init_($last, $children, $fSet);
    return $last;
},
jur_Pattern_processDecomposedChar = $this => {
    let $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
    $codePoints = $rt_createIntArray(4);
    $curSymb = (-1);
    $curSymbIndex = (-1);
    if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $codePointsHangul = $codePoints.data;
        $curSymb = jur_Lexer_next($this.$lexemes);
        $codePointsHangul[0] = $curSymb;
        $curSymbIndex = $curSymb - 4352 | 0;
    }
    if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
        $codePointsHangul = $rt_createCharArray(3);
        $codePoints = $codePointsHangul.data;
        $codePoints[0] = $curSymb & 65535;
        var$5 = $this.$lexemes;
        var$6 = var$5.$ch;
        $readCodePoints = var$6 - 4449 | 0;
        if ($readCodePoints >= 0 && $readCodePoints < 21) {
            $codePoints[1] = var$6 & 65535;
            jur_Lexer_next(var$5);
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $curSymb = var$6 - 4519 | 0;
            if ($curSymb >= 0 && $curSymb < 28) {
                $codePoints[2] = var$6 & 65535;
                jur_Lexer_next(var$5);
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
            }
            return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_CharSet__init_($codePoints[0]);
        if (jur_Pattern_hasFlag($this, 64))
            return jur_UCICharSet__init_($codePoints[0]);
        return jur_CICharSet__init_($codePoints[0]);
    }
    $codePointsHangul = $codePoints.data;
    $curSymb = 1;
    while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $readCodePoints = $curSymb + 1 | 0;
        $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
        $curSymb = $readCodePoints;
    }
    if ($curSymb == 1) {
        $readCodePoints = $codePointsHangul[0];
        if (!(jur_Lexer_singleDecompTable.$get($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
            return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_DecomposedCharSet__init_0($codePoints, $curSymb);
    if (jur_Pattern_hasFlag($this, 64)) {
        var$5 = new jur_UCIDecomposedCharSet;
        jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
        return var$5;
    }
    var$5 = new jur_CIDecomposedCharSet;
    jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
    return var$5;
},
jur_Pattern_processSubExpression = ($this, $last) => {
    let $cur, $term, var$4, var$5, var$6, $next, var$8;
    if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
        if (jur_Pattern_hasFlag($this, 128)) {
            $cur = jur_Pattern_processDecomposedChar($this);
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                $term = $this.$lexemes;
                var$4 = $term.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                    $cur = jur_Pattern_processQuantifier($this, $last, $cur);
            }
        } else if (!jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
            $term = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_($term);
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
                if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                    var$5 = $this.$lexemes.$lookAhead;
                    if (var$5 != (-536870871) && (var$5 & (-2147418113)) != (-2147483608) && var$5 != (-536870788) && var$5 != (-536870876))
                        break;
                }
                var$4 = jur_Lexer_next($this.$lexemes);
                if (!jl_Character_isSupplementaryCodePoint(var$4))
                    jl_AbstractStringBuilder_append2($term, var$4 & 65535);
                else
                    jl_AbstractStringBuilder_append3($term, jl_Character_toChars(var$4));
            }
            if (!jur_Pattern_hasFlag($this, 2)) {
                $cur = new jur_SequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string0 = jl_AbstractStringBuilder_toString($term);
                var$4 = $term.$length1;
                $cur.$charCount0 = var$4;
                $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount0);
                var$6 = 0;
                while (var$6 < ($cur.$charCount0 - 1 | 0)) {
                    jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string0, var$6), ($cur.$charCount0 - var$6 | 0) - 1 | 0);
                    jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string0, ($cur.$charCount0 - var$6 | 0) - 1 | 0), ($cur.$charCount0 - var$6 | 0) - 1 | 0);
                    var$6 = var$6 + 1 | 0;
                }
            } else if (jur_Pattern_hasFlag($this, 64))
                $cur = jur_UCISequenceSet__init_0($term);
            else {
                $cur = new jur_CISequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string3 = jl_StringBuffer_toString($term);
                $cur.$charCount0 = jl_StringBuffer_length($term);
            }
        } else
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
    } else {
        $term = $this.$lexemes;
        if ($term.$ch != (-536870871))
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        else {
            if ($last instanceof jur_FinalSet)
                $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($term), jur_Lexer_getIndex($this.$lexemes)));
            $cur = jur_EmptySet__init_($last);
        }
    }
    a: {
        if (!jur_Lexer_isEmpty($this.$lexemes)) {
            var$4 = $this.$lexemes.$ch;
            if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                $next = jur_Pattern_processSubExpression($this, $last);
                if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                    $term = $cur;
                    var$8 = $term;
                    if (!$next.$first1(var$8.$innerSet)) {
                        $cur = new jur_UnifiedQuantifierSet;
                        var$8 = var$8.$innerSet;
                        $last = $term;
                        jur_LeafQuantifierSet__init_($cur, var$8, $last.$next1, $last.$type6);
                        $cur.$innerSet.$setNext($cur);
                    }
                }
                if (($next.$getType1() & 65535) != 43)
                    $cur.$setNext($next);
                else
                    $cur.$setNext($next.$innerSet);
                break a;
            }
        }
        if ($cur === null)
            return null;
        $cur.$setNext($last);
    }
    if (($cur.$getType1() & 65535) != 43)
        return $cur;
    return $cur.$innerSet;
},
jur_Pattern_processQuantifier = ($this, $last, $term) => {
    let $q, $quant, $q_0, var$6, $leaf;
    $q = $this.$lexemes;
    $quant = $q.$ch;
    if ($term !== null && !($term instanceof jur_LeafSet)) {
        switch ($quant) {
            case -2147483606:
                jur_Lexer_next($q);
                $q = new jur_PossessiveGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PosPlusGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $q = new jur_PosAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483525:
                $q_0 = new jur_PosCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                var$6 = $this.$compCount + 1 | 0;
                $this.$compCount = var$6;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), var$6);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q_0;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                $term.$setNext($q);
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $q = new jur_RelAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -1073741701:
                $q_0 = new jur_RelCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                if ($term.$getType1() != (-2147483602)) {
                    $q = new jur_GroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else if (jur_Pattern_hasFlag($this, 32)) {
                    $q = new jur_DotAllQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else {
                    $q = new jur_DotQuantifierSet;
                    $q_0 = jur_AbstractLineTerminator_getInstance($this.$flags);
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $q.$lt = $q_0;
                }
                $term.$setNext($q);
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $q = new jur_AltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -536870789:
                $q_0 = new jur_CompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            default:
        }
        return $term;
    }
    $leaf = null;
    if ($term !== null)
        $leaf = $term;
    switch ($quant) {
        case -2147483606:
        case -2147483605:
            jur_Lexer_next($q);
            $q = new jur_PossessiveQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next1 = $q;
            return $q;
        case -2147483585:
            jur_Lexer_next($q);
            $term = new jur_PossessiveAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
            return $term;
        case -2147483525:
            $term = new jur_PossessiveCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
            return $term;
        case -1073741782:
        case -1073741781:
            jur_Lexer_next($q);
            $q = new jur_ReluctantQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next1 = $q;
            return $q;
        case -1073741761:
            jur_Lexer_next($q);
            $term = new jur_ReluctantAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
            return $term;
        case -1073741701:
            $term = new jur_ReluctantCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
            return $term;
        case -536870870:
        case -536870869:
            jur_Lexer_next($q);
            $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$next1 = $q;
            return $q;
        case -536870849:
            jur_Lexer_next($q);
            $term = new jur_AltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
            return $term;
        case -536870789:
            return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
        default:
    }
    return $term;
},
jur_Pattern_processTerminal = ($this, $last) => {
    let $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
    $term = null;
    var$3 = $last instanceof jur_FinalSet;
    while (true) {
        a: {
            var$4 = $this.$lexemes;
            $ch = var$4.$ch;
            if (($ch & (-2147418113)) == (-2147483608)) {
                jur_Lexer_next(var$4);
                $newFlags = ($ch & 16711680) >> 16;
                $ch = $ch & (-16711681);
                if ($ch == (-16777176))
                    $this.$flags = $newFlags;
                else {
                    if ($ch != (-1073741784))
                        $newFlags = $this.$flags;
                    $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                    var$4 = $this.$lexemes;
                    if (var$4.$ch != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), var$4.$orig, var$4.$curToc));
                    jur_Lexer_next(var$4);
                }
            } else {
                b: {
                    c: {
                        switch ($ch) {
                            case -2147483599:
                            case -2147483598:
                            case -2147483597:
                            case -2147483596:
                            case -2147483595:
                            case -2147483594:
                            case -2147483593:
                            case -2147483592:
                            case -2147483591:
                                break c;
                            case -2147483583:
                                break;
                            case -2147483582:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(0);
                                break a;
                            case -2147483577:
                                jur_Lexer_next(var$4);
                                $term = new jur_PreviousMatch;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -2147483558:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOLSet;
                                $number = $this.$consCount + 1 | 0;
                                $this.$consCount = $number;
                                jur_EOLSet__init_($term, $number);
                                break a;
                            case -2147483550:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(1);
                                break a;
                            case -2147483526:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOISet;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -536870876:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (jur_Pattern_hasFlag($this, 8)) {
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UMultiLineEOLSet__init_($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                    break a;
                                }
                                if (jur_Pattern_hasFlag($this, 1)) {
                                    $term = jur_UEOLSet__init_($this.$consCount);
                                    break a;
                                }
                                $term = jur_EOLSet__init_0($this.$consCount);
                                break a;
                            case -536870866:
                                jur_Lexer_next(var$4);
                                if (jur_Pattern_hasFlag($this, 32)) {
                                    $term = jur_DotAllSet__init_0();
                                    break a;
                                }
                                $term = jur_DotSet__init_0(jur_AbstractLineTerminator_getInstance($this.$flags));
                                break a;
                            case -536870821:
                                jur_Lexer_next(var$4);
                                $negative = 0;
                                $term = $this.$lexemes;
                                if ($term.$ch == (-536870818)) {
                                    $negative = 1;
                                    jur_Lexer_next($term);
                                }
                                $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                $term.$setNext($last);
                                var$4 = $this.$lexemes;
                                if (var$4.$ch != (-536870819))
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), var$4.$orig, var$4.$curToc));
                                jur_Lexer_setMode(var$4, 1);
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            case -536870818:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (!jur_Pattern_hasFlag($this, 8)) {
                                    $term = new jur_SOLSet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                }
                                $term = new jur_MultiLineSOLSet;
                                var$4 = jur_AbstractLineTerminator_getInstance($this.$flags);
                                jur_AbstractSet__init_($term);
                                $term.$lt1 = var$4;
                                break a;
                            case 0:
                                $cc = var$4.$curST;
                                if ($cc !== null)
                                    $term = jur_Pattern_processRangeSet($this, $cc);
                                else {
                                    if (jur_Lexer_isEmpty(var$4)) {
                                        $term = jur_EmptySet__init_($last);
                                        break a;
                                    }
                                    $term = jur_CharSet__init_($ch & 65535);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            default:
                                break b;
                        }
                        jur_Lexer_next(var$4);
                        $term = new jur_SOLSet;
                        jur_AbstractSet__init_($term);
                        break a;
                    }
                    $number = ($ch & 2147483647) - 48 | 0;
                    if ($this.$globalGroupIndex < $number)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                    jur_Lexer_next(var$4);
                    $this.$consCount = $this.$consCount + 1 | 0;
                    $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_0($number, $this.$consCount) : jur_CIBackReferenceSet__init_0($number, $this.$consCount);
                    $this.$backRefs.data[$number].$isBackReferenced = 1;
                    $this.$needsBackRefReplacement = 1;
                    break a;
                }
                if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                    $term = jur_Pattern_processCharSet($this, $ch);
                    jur_Lexer_next($this.$lexemes);
                } else if ($ch == (-536870788))
                    $term = jur_EmptySet__init_($last);
                else {
                    if ($ch != (-536870871)) {
                        $last = new jur_PatternSyntaxException;
                        $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $term, var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    if (var$3) {
                        $last = new jur_PatternSyntaxException;
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $rt_s(9), var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    $term = jur_EmptySet__init_($last);
                }
            }
        }
        if ($ch != (-16777176))
            break;
    }
    return $term;
},
jur_Pattern_processRangeExpression = ($this, $alt) => {
    let $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
    $res = jur_CharClass__init_1(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    jur_AbstractCharClass_setNegative($res, $alt);
    $buffer = (-1);
    $intersection = 0;
    $notClosed = 0;
    $firstInClass = 1;
    a: {
        b: {
            c: while (true) {
                if (jur_Lexer_isEmpty($this.$lexemes))
                    break a;
                $cs = $this.$lexemes;
                $alt = $cs.$ch;
                $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                if (!$notClosed)
                    break a;
                d: {
                    switch ($alt) {
                        case -536870874:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = jur_Lexer_next($this.$lexemes);
                            $cs = $this.$lexemes;
                            if ($cs.$ch != (-536870874)) {
                                $buffer = 38;
                                break d;
                            }
                            if ($cs.$lookAhead == (-536870821)) {
                                jur_Lexer_next($cs);
                                $intersection = 1;
                                $buffer = (-1);
                                break d;
                            }
                            jur_Lexer_next($cs);
                            if ($firstInClass) {
                                $res = jur_Pattern_processRangeExpression($this, 0);
                                break d;
                            }
                            if ($this.$lexemes.$ch == (-536870819))
                                break d;
                            jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                            break d;
                        case -536870867:
                            if (!$firstInClass) {
                                $alt = $cs.$lookAhead;
                                if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                    jur_Lexer_next($cs);
                                    $cs = $this.$lexemes;
                                    $cur = $cs.$ch;
                                    if (jur_Lexer_isSpecial($cs))
                                        break c;
                                    if ($cur < 0) {
                                        $negative = $this.$lexemes.$lookAhead;
                                        if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                            break c;
                                    }
                                    e: {
                                        try {
                                            if (jur_Lexer_isLetter0($cur))
                                                break e;
                                            $cur = $cur & 65535;
                                            break e;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                    }
                                    try {
                                        jur_CharClass_add($res, $buffer, $cur);
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            break b;
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    $buffer = (-1);
                                    break d;
                                }
                            }
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 45;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870821:
                            if ($buffer >= 0) {
                                jur_CharClass_add0($res, $buffer);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            $negative = 0;
                            $cs = $this.$lexemes;
                            if ($cs.$ch == (-536870818)) {
                                jur_Lexer_next($cs);
                                $negative = 1;
                            }
                            if (!$intersection)
                                jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                            else
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                            $intersection = 0;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870819:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 93;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870818:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 94;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case 0:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $cs = $this.$lexemes.$curST;
                            if ($cs === null)
                                $buffer = 0;
                            else {
                                jur_CharClass_add1($res, $cs);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        default:
                    }
                    if ($buffer >= 0)
                        jur_CharClass_add0($res, $buffer);
                    $buffer = jur_Lexer_next($this.$lexemes);
                }
                $firstInClass = 0;
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
    }
    if (!$notClosed) {
        if ($buffer >= 0)
            jur_CharClass_add0($res, $buffer);
        return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
},
jur_Pattern_processCharSet = ($this, $ch) => {
    let $isSupplCodePoint, var$3, var$4;
    $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
    if (jur_Pattern_hasFlag($this, 2)) {
        a: {
            if (!($ch >= 97 && $ch <= 122)) {
                if ($ch < 65)
                    break a;
                if ($ch > 90)
                    break a;
            }
            return jur_CICharSet__init_($ch & 65535);
        }
        if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
            if ($isSupplCodePoint) {
                var$3 = new jur_UCISupplCharSet;
                jur_LeafSet__init_(var$3);
                var$3.$charCount0 = 2;
                var$3.$ch2 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                return var$3;
            }
            if (jur_Lexer_isLowSurrogate($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate($ch))
                return jur_UCICharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
    }
    if (!$isSupplCodePoint) {
        if (jur_Lexer_isLowSurrogate($ch))
            return jur_LowSurrogateCharSet__init_($ch & 65535);
        if (!jur_Lexer_isHighSurrogate($ch))
            return jur_CharSet__init_($ch & 65535);
        return jur_HighSurrogateCharSet__init_($ch & 65535);
    }
    var$3 = new jur_SupplCharSet;
    jur_LeafSet__init_(var$3);
    var$3.$charCount0 = 2;
    var$3.$ch1 = $ch;
    var$4 = (jl_Character_toChars($ch)).data;
    var$3.$high0 = var$4[0];
    var$3.$low0 = var$4[1];
    return var$3;
},
jur_Pattern_processRangeSet = ($this, $charClass) => {
    let $surrogates, $lowHighSurrRangeSet, var$4;
    if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_UCIRangeSet__init_($charClass);
            return jur_RangeSet__init_($charClass);
        }
        if (!$charClass.$hasUCI())
            return jur_SupplRangeSet__init_0($charClass);
        $surrogates = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_($surrogates, $charClass);
        return $surrogates;
    }
    $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
    $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
    jur_AbstractSet__init_($lowHighSurrRangeSet);
    $lowHighSurrRangeSet.$surrChars = $surrogates;
    $lowHighSurrRangeSet.$alt3 = $surrogates.$alt;
    if (!$charClass.$mayContainSupplCodepoints) {
        if ($charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    }
    if (!$charClass.$hasUCI())
        return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_0(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    $surrogates = new jur_CompositeRangeSet;
    var$4 = new jur_UCISupplRangeSet;
    jur_SupplRangeSet__init_(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
    jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
    return $surrogates;
},
jur_Pattern_compile = $pattern => {
    let var$2, var$3, var$4, var$5;
    if ($pattern === null) {
        $pattern = new jl_NullPointerException;
        jl_Exception__init_($pattern, $rt_s(184));
        $rt_throw($pattern);
    }
    jur_AbstractSet_counter = 1;
    var$2 = jur_Pattern__init_0();
    var$3 = new jur_Lexer;
    var$3.$mode = 1;
    var$3.$orig = $pattern;
    var$3.$pattern0 = $rt_createCharArray($pattern.$nativeString.length + 2 | 0);
    jl_System_fastArraycopy(jl_String_toCharArray($pattern), 0, var$3.$pattern0, 0, $pattern.$nativeString.length);
    var$4 = var$3.$pattern0.data;
    var$5 = var$4.length;
    var$4[var$5 - 1 | 0] = 0;
    var$4[var$5 - 2 | 0] = 0;
    var$3.$patternFullLength = var$5;
    var$3.$flags0 = 0;
    jur_Lexer_movePointer(var$3);
    jur_Lexer_movePointer(var$3);
    var$2.$lexemes = var$3;
    var$2.$flags = 0;
    var$2.$start2 = jur_Pattern_processExpression(var$2, (-1), 0, null);
    if (jur_Lexer_isEmpty(var$2.$lexemes)) {
        if (var$2.$needsBackRefReplacement)
            var$2.$start2.$processSecondPass();
        return var$2;
    }
    $pattern = new jur_PatternSyntaxException;
    var$2 = var$2.$lexemes;
    jur_PatternSyntaxException__init_0($pattern, $rt_s(9), var$2.$orig, var$2.$curToc);
    $rt_throw($pattern);
},
jur_Pattern_getSupplement = $ch => {
    if ($ch >= 97 && $ch <= 122)
        $ch = ($ch - 32 | 0) & 65535;
    else if ($ch >= 65 && $ch <= 90)
        $ch = ($ch + 32 | 0) & 65535;
    return $ch;
},
jur_Pattern_hasFlag = ($this, $flag) => {
    return ($this.$flags & $flag) != $flag ? 0 : 1;
},
jur_Pattern__init_ = $this => {
    $this.$backRefs = $rt_createArray(jur_FSet, 10);
    $this.$globalGroupIndex = (-1);
    $this.$compCount = (-1);
    $this.$consCount = (-1);
},
jur_Pattern__init_0 = () => {
    let var_0 = new jur_Pattern();
    jur_Pattern__init_(var_0);
    return var_0;
},
jur_MatchResult = $rt_classWithoutFields(0);
function jur_Matcher() {
    let a = this; jl_Object.call(a);
    a.$pat = null;
    a.$start5 = null;
    a.$string2 = null;
    a.$matchResult = null;
    a.$leftBound0 = 0;
    a.$rightBound0 = 0;
    a.$appendPos = 0;
    a.$replacement0 = null;
    a.$processedRepl = null;
    a.$replacementParts = null;
}
let jur_Matcher_appendReplacement = ($this, $buffer, $replacement) => {
    let var$3, var$4;
    $this.$processedRepl = jur_Matcher_processReplacement($this, $replacement);
    $replacement = $this.$string2;
    var$3 = $this.$appendPos;
    var$4 = jur_Matcher_start($this);
    jl_StringBuffer_append($buffer, jl_String_substring($replacement, var$3, var$4));
    jl_AbstractStringBuilder_append0($buffer, $this.$processedRepl);
    $this.$appendPos = jur_Matcher_end($this);
    return $this;
},
jur_Matcher_processReplacement = ($this, $replacement) => {
    let $res, $sb, $i, $repl, $index, $replacementPos, $nextBackSlashed, var$9, $group, $gr, $$je;
    $res = $this.$replacement0;
    if ($res !== null && jl_String_equals($res, $replacement)) {
        if ($this.$replacementParts === null)
            return $this.$processedRepl;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while (true) {
            $replacement = $this.$replacementParts;
            if ($i >= $replacement.$size3)
                break;
            jl_AbstractStringBuilder_append($sb, ju_ArrayList_get($replacement, $i));
            $i = $i + 1 | 0;
        }
        return jl_AbstractStringBuilder_toString($sb);
    }
    $this.$replacement0 = $replacement;
    $repl = jl_String_toCharArray($replacement);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $this.$replacementParts = null;
    $index = 0;
    $replacementPos = 0;
    $nextBackSlashed = 0;
    a: {
        b: while (true) {
            var$9 = $repl.data;
            $i = var$9.length;
            if ($index >= $i) {
                $group = $this.$replacementParts;
                if ($group !== null) {
                    $gr = $res.$length1;
                    if ($replacementPos != $gr)
                        ju_ArrayList_add($group, $res.$substring0($replacementPos, $gr));
                }
                return jl_AbstractStringBuilder_toString($res);
            }
            if (var$9[$index] == 92 && !$nextBackSlashed) {
                $nextBackSlashed = 1;
                $index = $index + 1 | 0;
            }
            c: {
                if ($nextBackSlashed) {
                    if ($index >= $i)
                        break b;
                    jl_AbstractStringBuilder_append2($res, var$9[$index]);
                    $nextBackSlashed = 0;
                } else if (var$9[$index] != 36)
                    jl_AbstractStringBuilder_append2($res, var$9[$index]);
                else {
                    if ($this.$replacementParts === null)
                        $this.$replacementParts = ju_ArrayList__init_();
                    d: {
                        try {
                            $replacement = new jl_String;
                            $index = $index + 1 | 0;
                            jl_String__init_6($replacement, $repl, $index, 1);
                            $gr = jl_Integer_parseInt($replacement);
                            if ($replacementPos == jl_StringBuilder_length($res))
                                break d;
                            ju_ArrayList_add($this.$replacementParts, jl_StringBuilder_subSequence($res, $replacementPos, jl_StringBuilder_length($res)));
                            $replacementPos = jl_StringBuilder_length($res);
                            break d;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                break a;
                            } else {
                                throw $$e;
                            }
                        }
                    }
                    try {
                        ju_ArrayList_add($this.$replacementParts, jur_Matcher$1__init_0($this, $gr));
                        $group = jur_Matcher_group($this, $gr);
                        $replacementPos = $replacementPos + jl_String_length($group) | 0;
                        jl_StringBuilder_append0($res, $group);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            break a;
                        } else {
                            throw $$e;
                        }
                    }
                }
            }
            $index = $index + 1 | 0;
        }
        $replacement = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($replacement);
        $rt_throw($replacement);
    }
    $replacement = new jl_IllegalArgumentException;
    jl_Exception__init_($replacement, $rt_s(9));
    $rt_throw($replacement);
},
jur_Matcher_reset = $this => {
    let var$1;
    $this.$leftBound0 = 0;
    var$1 = $this.$string2.$nativeString.length;
    $this.$rightBound0 = var$1;
    jur_MatchResultImpl_reset($this.$matchResult, $this.$string2, $this.$leftBound0, var$1);
    $this.$appendPos = 0;
    $this.$replacement0 = null;
    $this.$matchResult.$previousMatch = (-1);
    return $this;
},
jur_Matcher_appendTail = ($this, $buffer) => {
    let var$2, var$3;
    var$2 = $this.$string2;
    var$3 = $this.$appendPos;
    var$2 = var$2;
    return jl_StringBuffer_append($buffer, jl_String_substring(var$2, var$3, var$2.$nativeString.length));
},
jur_Matcher_group = ($this, $group) => {
    let var$2, var$3, var$4;
    var$2 = $this.$matchResult;
    if (jur_MatchResultImpl_start(var$2, $group) < 0)
        var$2 = null;
    else {
        var$3 = var$2.$string5;
        var$4 = jur_MatchResultImpl_start(var$2, $group);
        $group = jur_MatchResultImpl_end(var$2, $group);
        var$2 = jl_String_substring(var$3, var$4, $group);
    }
    return var$2;
},
jur_Matcher_find0 = ($this, $start) => {
    let $stringLength, var$3, var$4;
    $stringLength = $this.$string2.$nativeString.length;
    if ($start >= 0 && $start <= $stringLength) {
        jur_MatchResultImpl_reset($this.$matchResult, null, (-1), (-1));
        var$3 = $this.$matchResult;
        var$3.$mode0 = 1;
        var$3.$startIndex = $start;
        $stringLength = var$3.$previousMatch;
        if ($stringLength < 0)
            $stringLength = $start;
        var$3.$previousMatch = $stringLength;
        $start = $this.$start5.$find0($start, $this.$string2, var$3);
        if ($start == (-1))
            $this.$matchResult.$hitEnd = 1;
        if ($start >= 0) {
            var$3 = $this.$matchResult;
            if (var$3.$valid2) {
                var$4 = var$3.$groupBounds.data;
                if (var$4[0] == (-1)) {
                    $stringLength = var$3.$startIndex;
                    var$4[0] = $stringLength;
                    var$4[1] = $stringLength;
                }
                var$3.$previousMatch = jur_MatchResultImpl_end0(var$3);
                return 1;
            }
        }
        $this.$matchResult.$startIndex = (-1);
        return 0;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$3, jl_String_valueOf0($start));
    $rt_throw(var$3);
},
jur_Matcher_find = $this => {
    let $length, var$2, var$3;
    $length = $this.$string2.$nativeString.length;
    var$2 = $this.$matchResult;
    if (!var$2.$transparentBounds)
        $length = $this.$rightBound0;
    if (var$2.$startIndex >= 0 && var$2.$mode0 == 1) {
        var$2.$startIndex = jur_MatchResultImpl_end0(var$2);
        if (jur_MatchResultImpl_end0($this.$matchResult) == jur_MatchResultImpl_start($this.$matchResult, 0)) {
            var$2 = $this.$matchResult;
            var$2.$startIndex = var$2.$startIndex + 1 | 0;
        }
        var$3 = $this.$matchResult.$startIndex;
        return var$3 <= $length && jur_Matcher_find0($this, var$3) ? 1 : 0;
    }
    return jur_Matcher_find0($this, $this.$leftBound0);
},
jur_Matcher_start = $this => {
    return jur_MatchResultImpl_start($this.$matchResult, 0);
},
jur_Matcher_end = $this => {
    return jur_MatchResultImpl_end($this.$matchResult, 0);
},
otji_IDBFactory = $rt_classWithoutFields();
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0() {
    jl_Object.call(this);
    this.$_01 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$2 = var$1.$_01.result;
    var$3 = otji_IDBObjectStoreParameters_create$js_body$_1();
    var$2.createObjectStore("FILE_DATA", var$3);
},
otji_EventHandler = $rt_classWithoutFields(0);
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1() {
    let a = this; jl_Object.call(a);
    a.$_08 = null;
    a.$_16 = null;
    a.$_24 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4, var$5;
    var$1 = var$1;
    var$2 = var$1.$_08;
    var$3 = var$1.$_16;
    var$1 = var$1.$_24;
    var$3 = var$3.result;
    var$2.$dataBase = var$3;
    var$4 = var$3.transaction("FILE_DATA", "readonly");
    var$5 = var$4.objectStore("FILE_DATA").openCursor();
    var$3 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0;
    var$3.$_03 = var$2;
    var$3.$_12 = var$5;
    var$2 = otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent");
    var$5.onsuccess = var$2;
    var$2 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1;
    var$2.$_010 = var$1;
    var$3 = otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent");
    var$4.oncomplete = var$3;
    var$2 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2;
    var$2.$_012 = var$1;
    var$1 = otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent");
    var$5.onerror = var$1;
};
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2() {
    let a = this; jl_Object.call(a);
    a.$_07 = null;
    a.$_15 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_07;
    var$1 = var$1.$_15;
    var$3 = jl_System_err();
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(185));
    jl_AbstractStringBuilder_append(var$4, var$2);
    var$4 = jl_AbstractStringBuilder_toString(var$4);
    otcic_JsConsolePrintStream_println(var$3, var$4);
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
},
jur_RandomGenerator = $rt_classWithoutFields(0),
ju_Random = $rt_classWithoutFields(),
ju_Random__init_ = $this => {
    return;
},
ju_Random__init_0 = () => {
    let var_0 = new ju_Random();
    ju_Random__init_(var_0);
    return var_0;
},
ju_Random_nextInt = $this => {
    return 4.294967296E9 * jl_Math_randomImpl() + (-2.147483648E9) | 0;
};
function cbgm_RandomXS128() {
    let a = this; ju_Random.call(a);
    a.$seed0 = Long_ZERO;
    a.$seed1 = Long_ZERO;
}
let cbgm_RandomXS128__init_ = $this => {
    let var$1, var$2, var$3;
    var$1 = new ju_Random;
    var$2 = Long_or(Long_shl(Long_fromInt(ju_Random_nextInt(var$1)), 32), Long_fromInt(ju_Random_nextInt(var$1)));
    if (Long_eq(var$2, Long_ZERO))
        var$2 = Long_create(0, 2147483648);
    var$3 = cbgm_RandomXS128_murmurHash3(var$2);
    var$2 = cbgm_RandomXS128_murmurHash3(var$3);
    $this.$seed0 = var$3;
    $this.$seed1 = var$2;
},
cbgm_RandomXS128__init_0 = () => {
    let var_0 = new cbgm_RandomXS128();
    cbgm_RandomXS128__init_(var_0);
    return var_0;
},
cbgm_RandomXS128_murmurHash3 = $x => {
    $x = Long_mul(Long_xor($x, Long_shru($x, 33)), Long_create(3981806797, 4283543511));
    $x = Long_mul(Long_xor($x, Long_shru($x, 33)), Long_create(444984403, 3301882366));
    return Long_xor($x, Long_shru($x, 33));
},
ju_Enumeration = $rt_classWithoutFields(0),
ju_Hashtable$1 = $rt_classWithoutFields(),
ju_Hashtable$1__init_ = $this => {
    return;
},
ju_Hashtable$1__init_0 = () => {
    let var_0 = new ju_Hashtable$1();
    ju_Hashtable$1__init_(var_0);
    return var_0;
},
ju_Iterator = $rt_classWithoutFields(0),
ju_Hashtable$2 = $rt_classWithoutFields(),
ju_Hashtable$2__init_ = $this => {
    return;
},
ju_Hashtable$2__init_0 = () => {
    let var_0 = new ju_Hashtable$2();
    ju_Hashtable$2__init_(var_0);
    return var_0;
};
function jur_MatchResultImpl() {
    let a = this; jl_Object.call(a);
    a.$groupBounds = null;
    a.$consumers = null;
    a.$compQuantCounters = null;
    a.$string5 = null;
    a.$groupCount = 0;
    a.$valid2 = 0;
    a.$leftBound = 0;
    a.$rightBound = 0;
    a.$startIndex = 0;
    a.$transparentBounds = 0;
    a.$anchoringBounds = 0;
    a.$hitEnd = 0;
    a.$requireEnd = 0;
    a.$previousMatch = 0;
    a.$mode0 = 0;
}
let jur_MatchResultImpl_setConsumed = ($this, $counter, $value) => {
    $this.$consumers.data[$counter] = $value;
},
jur_MatchResultImpl_getConsumed = ($this, $counter) => {
    return $this.$consumers.data[$counter];
},
jur_MatchResultImpl_end0 = $this => {
    return jur_MatchResultImpl_end($this, 0);
},
jur_MatchResultImpl_end = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_setStart = ($this, $group, $offset) => {
    $this.$groupBounds.data[$group * 2 | 0] = $offset;
},
jur_MatchResultImpl_setEnd = ($this, $group, $offset) => {
    $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
},
jur_MatchResultImpl_getStart = ($this, $group) => {
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnd = ($this, $group) => {
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_start = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnterCounter = ($this, $setCounter) => {
    return $this.$compQuantCounters.data[$setCounter];
},
jur_MatchResultImpl_setEnterCounter = ($this, $setCounter, $value) => {
    $this.$compQuantCounters.data[$setCounter] = $value;
},
jur_MatchResultImpl_checkGroup = ($this, $group) => {
    let var$2;
    if (!$this.$valid2) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if ($group >= 0 && $group < $this.$groupCount)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$2, jl_String_valueOf0($group));
    $rt_throw(var$2);
},
jur_MatchResultImpl_reset = ($this, $newSequence, $leftBound, $rightBound) => {
    $this.$valid2 = 0;
    $this.$mode0 = 2;
    ju_Arrays_fill($this.$groupBounds, (-1));
    ju_Arrays_fill($this.$consumers, (-1));
    if ($newSequence !== null)
        $this.$string5 = $newSequence;
    if ($leftBound >= 0) {
        $this.$leftBound = $leftBound;
        $this.$rightBound = $rightBound;
    }
    $this.$startIndex = $this.$leftBound;
},
jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException),
jl_NumberFormatException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_NumberFormatException__init_0 = () => {
    let var_0 = new jl_NumberFormatException();
    jl_NumberFormatException__init_(var_0);
    return var_0;
},
jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalStateException__init_0 = $this => {
    jl_Throwable__init_($this);
},
jl_IllegalStateException__init_2 = () => {
    let var_0 = new jl_IllegalStateException();
    jl_IllegalStateException__init_0(var_0);
    return var_0;
},
jl_IllegalStateException__init_1 = ($this, $message) => {
    jl_Exception__init_($this, $message);
},
jl_IllegalStateException__init_ = var_0 => {
    let var_1 = new jl_IllegalStateException();
    jl_IllegalStateException__init_1(var_1, var_0);
    return var_1;
},
jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException),
jl_NullPointerException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_NullPointerException__init_0 = () => {
    let var_0 = new jl_NullPointerException();
    jl_NullPointerException__init_(var_0);
    return var_0;
};
function jur_AbstractSet() {
    let a = this; jl_Object.call(a);
    a.$next1 = null;
    a.$isSecondPassVisited = 0;
    a.$index7 = null;
    a.$type6 = 0;
}
let jur_AbstractSet_counter = 0,
jur_AbstractSet__init_ = $this => {
    let var$1;
    var$1 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$1 + 1 | 0;
    $this.$index7 = jl_Integer_toString(var$1);
},
jur_AbstractSet__init_0 = ($this, $n) => {
    let var$2;
    var$2 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$2 + 1 | 0;
    $this.$index7 = jl_Integer_toString(var$2);
    $this.$next1 = $n;
},
jur_AbstractSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $length;
    $length = $matchResult.$rightBound;
    while (true) {
        if ($stringIndex > $length)
            return (-1);
        if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_AbstractSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_AbstractSet_setType = ($this, $type) => {
    $this.$type6 = $type;
},
jur_AbstractSet_getType = $this => {
    return $this.$type6;
},
jur_AbstractSet_getQualifiedName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index7;
    var$2 = $this.$getName();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append2(var$3, 60);
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append2(var$3, 58);
    jl_AbstractStringBuilder_append(var$3, var$2);
    jl_AbstractStringBuilder_append2(var$3, 62);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_AbstractSet_toString = $this => {
    return jur_AbstractSet_getQualifiedName($this);
},
jur_AbstractSet_getNext = $this => {
    return $this.$next1;
},
jur_AbstractSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_AbstractSet_first = ($this, $set) => {
    return 1;
},
jur_AbstractSet_processBackRefReplacement = $this => {
    return null;
},
jur_AbstractSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next1;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next1.$isSecondPassVisited = 1;
                $this.$next1 = $set;
            }
            $this.$next1.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$next1 = $set.$next1;
    }
},
jur_AbstractSet__clinit_ = () => {
    jur_AbstractSet_counter = 1;
},
ju_Map$Entry = $rt_classWithoutFields(0);
function ju_MapEntry() {
    let a = this; jl_Object.call(a);
    a.$key = null;
    a.$value = null;
}
let ju_MapEntry__init_ = ($this, $theKey, $theValue) => {
    $this.$key = $theKey;
    $this.$value = $theValue;
},
ju_MapEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_MapEntry();
    ju_MapEntry__init_(var_2, var_0, var_1);
    return var_2;
};
function ju_Hashtable$Entry() {
    let a = this; ju_MapEntry.call(a);
    a.$next3 = null;
    a.$hashcode = 0;
}
function jur_FSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$isBackReferenced = 0;
    a.$groupIndex0 = 0;
}
let jur_FSet_posFSet = null,
jur_FSet_$callClinit = () => {
    jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
    jur_FSet__clinit_();
},
jur_FSet__init_ = ($this, $groupIndex) => {
    jur_FSet_$callClinit();
    jur_AbstractSet__init_($this);
    $this.$groupIndex0 = $groupIndex;
},
jur_FSet__init_0 = var_0 => {
    let var_1 = new jur_FSet();
    jur_FSet__init_(var_1, var_0);
    return var_1;
},
jur_FSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $end, $shift;
    $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $stringIndex);
    $shift = $this.$next1.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $end);
    return $shift;
},
jur_FSet_getGroupIndex = $this => {
    return $this.$groupIndex0;
},
jur_FSet_getName = $this => {
    return $rt_s(186);
},
jur_FSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FSet__clinit_ = () => {
    let var$1;
    var$1 = new jur_FSet$PossessiveFSet;
    jur_AbstractSet__init_(var$1);
    jur_FSet_posFSet = var$1;
};
function jur_Lexer() {
    let a = this; jl_Object.call(a);
    a.$pattern0 = null;
    a.$flags0 = 0;
    a.$mode = 0;
    a.$savedMode = 0;
    a.$lookBack = 0;
    a.$ch = 0;
    a.$lookAhead = 0;
    a.$patternFullLength = 0;
    a.$curST = null;
    a.$lookAheadST = null;
    a.$index0 = 0;
    a.$prevNW = 0;
    a.$curToc = 0;
    a.$lookAheadToc = 0;
    a.$orig = null;
}
let jur_Lexer_decompTable = null,
jur_Lexer_singleDecompTable = null,
jur_Lexer_singleDecompTableSize = 0,
jur_Lexer_setMode = ($this, $mode) => {
    if ($mode > 0 && $mode < 3)
        $this.$mode = $mode;
    if ($mode == 1) {
        $this.$lookAhead = $this.$ch;
        $this.$lookAheadST = $this.$curST;
        $this.$index0 = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$curToc;
        jur_Lexer_movePointer($this);
    }
},
jur_Lexer_isSpecial = $this => {
    return $this.$curST === null ? 0 : 1;
},
jur_Lexer_isNextSpecial = $this => {
    return $this.$lookAheadST === null ? 0 : 1;
},
jur_Lexer_next = $this => {
    jur_Lexer_movePointer($this);
    return $this.$lookBack;
},
jur_Lexer_nextSpecial = $this => {
    let $res;
    $res = $this.$curST;
    jur_Lexer_movePointer($this);
    return $res;
},
jur_Lexer_movePointer = $this => {
    let $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
    $this.$lookBack = $this.$ch;
    $this.$ch = $this.$lookAhead;
    $this.$curST = $this.$lookAheadST;
    $this.$curToc = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$index0;
    while (true) {
        $reread = 0;
        $nonCap = $this.$index0 >= $this.$pattern0.data.length ? 0 : jur_Lexer_nextCodePoint($this);
        $this.$lookAhead = $nonCap;
        $this.$lookAheadST = null;
        if ($this.$mode == 4) {
            if ($nonCap != 92)
                return;
            $nonCap = $this.$index0;
            var$3 = $this.$pattern0.data;
            $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
            $this.$lookAhead = $nonCap;
            switch ($nonCap) {
                case 69:
                    break;
                default:
                    $this.$lookAhead = 92;
                    $this.$index0 = $this.$prevNW;
                    return;
            }
            $this.$mode = $this.$savedMode;
            $this.$lookAhead = $this.$index0 > ($this.$pattern0.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
        }
        a: {
            $nonCap = $this.$lookAhead;
            if ($nonCap != 92) {
                $behind = $this.$mode;
                if ($behind == 1)
                    switch ($nonCap) {
                        case 36:
                            $this.$lookAhead = (-536870876);
                            break a;
                        case 40:
                            if ($this.$pattern0.data[$this.$index0] != 63) {
                                $this.$lookAhead = (-2147483608);
                                break a;
                            }
                            jur_Lexer_nextIndex($this);
                            $nonCap = $this.$pattern0.data[$this.$index0];
                            $behind = 0;
                            while (true) {
                                b: {
                                    if ($behind) {
                                        $behind = 0;
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 61:
                                                $this.$lookAhead = (-134217688);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($this), $this.$index0));
                                        }
                                        $this.$lookAhead = (-67108824);
                                        jur_Lexer_nextIndex($this);
                                    } else {
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 60:
                                                jur_Lexer_nextIndex($this);
                                                $nonCap = $this.$pattern0.data[$this.$index0];
                                                $behind = 1;
                                                break b;
                                            case 61:
                                                $this.$lookAhead = (-536870872);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            case 62:
                                                $this.$lookAhead = (-33554392);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $mod = jur_Lexer_readFlags($this);
                                                $this.$lookAhead = $mod;
                                                if ($mod < 256) {
                                                    $this.$flags0 = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-1073741784) | $mod;
                                                    break b;
                                                }
                                                $mod = $mod & 255;
                                                $this.$lookAhead = $mod;
                                                $this.$flags0 = $mod;
                                                $mod = $mod << 16;
                                                $this.$lookAhead = $mod;
                                                $this.$lookAhead = (-16777176) | $mod;
                                                break b;
                                        }
                                        $this.$lookAhead = (-268435416);
                                        jur_Lexer_nextIndex($this);
                                    }
                                }
                                if (!$behind)
                                    break;
                            }
                            break a;
                        case 41:
                            $this.$lookAhead = (-536870871);
                            break a;
                        case 42:
                        case 43:
                        case 63:
                            $behind = $this.$index0;
                            var$3 = $this.$pattern0.data;
                            switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                case 43:
                                    $this.$lookAhead = $nonCap | (-2147483648);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                case 63:
                                    $this.$lookAhead = $nonCap | (-1073741824);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                default:
                            }
                            $this.$lookAhead = $nonCap | (-536870912);
                            break a;
                        case 46:
                            $this.$lookAhead = (-536870866);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            jur_Lexer_setMode($this, 2);
                            break a;
                        case 93:
                            if ($behind != 2)
                                break a;
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        case 123:
                            $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                            break a;
                        case 124:
                            $this.$lookAhead = (-536870788);
                            break a;
                        default:
                    }
                else if ($behind == 2)
                    switch ($nonCap) {
                        case 38:
                            $this.$lookAhead = (-536870874);
                            break a;
                        case 45:
                            $this.$lookAhead = (-536870867);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            break a;
                        case 93:
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        default:
                    }
            } else {
                $nonCap = $this.$index0 >= ($this.$pattern0.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                c: {
                    $this.$lookAhead = $nonCap;
                    switch ($nonCap) {
                        case -1:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($this), $this.$index0));
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 118:
                            break;
                        case 48:
                            $this.$lookAhead = jur_Lexer_readOctals($this);
                            break a;
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if ($this.$mode != 1)
                                break a;
                            $this.$lookAhead = (-2147483648) | $nonCap;
                            break a;
                        case 65:
                            $this.$lookAhead = (-2147483583);
                            break a;
                        case 66:
                            $this.$lookAhead = (-2147483582);
                            break a;
                        case 67:
                        case 69:
                        case 70:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 88:
                        case 89:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 111:
                        case 113:
                        case 121:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($this), $this.$index0));
                        case 68:
                        case 83:
                        case 87:
                        case 100:
                        case 115:
                        case 119:
                            $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_($this.$pattern0, $this.$prevNW, 1), 0);
                            $this.$lookAhead = 0;
                            break a;
                        case 71:
                            $this.$lookAhead = (-2147483577);
                            break a;
                        case 80:
                        case 112:
                            break c;
                        case 81:
                            $this.$savedMode = $this.$mode;
                            $this.$mode = 4;
                            $reread = 1;
                            break a;
                        case 90:
                            $this.$lookAhead = (-2147483558);
                            break a;
                        case 97:
                            $this.$lookAhead = 7;
                            break a;
                        case 98:
                            $this.$lookAhead = (-2147483550);
                            break a;
                        case 99:
                            $nonCap = $this.$index0;
                            var$3 = $this.$pattern0.data;
                            if ($nonCap >= (var$3.length - 2 | 0))
                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($this), $this.$index0));
                            $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                            break a;
                        case 101:
                            $this.$lookAhead = 27;
                            break a;
                        case 102:
                            $this.$lookAhead = 12;
                            break a;
                        case 110:
                            $this.$lookAhead = 10;
                            break a;
                        case 114:
                            $this.$lookAhead = 13;
                            break a;
                        case 116:
                            $this.$lookAhead = 9;
                            break a;
                        case 117:
                            $this.$lookAhead = jur_Lexer_readHex($this, 4);
                            break a;
                        case 120:
                            $this.$lookAhead = jur_Lexer_readHex($this, 2);
                            break a;
                        case 122:
                            $this.$lookAhead = (-2147483526);
                            break a;
                        default:
                    }
                    break a;
                }
                $cs = jur_Lexer_parseCharClassName($this);
                $negative = 0;
                if ($this.$lookAhead == 80)
                    $negative = 1;
                try {
                    $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ju_MissingResourceException) {
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), jur_Lexer_toString($this), $this.$index0));
                    } else {
                        throw $$e;
                    }
                }
                $this.$lookAhead = 0;
            }
        }
        if ($reread)
            continue;
        else
            break;
    }
},
jur_Lexer_parseCharClassName = $this => {
    let $sb, $ch, var$3, var$4, $res, var$6;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 10);
    $ch = $this.$index0;
    var$3 = $this.$pattern0;
    var$4 = var$3.data;
    if ($ch < (var$4.length - 2 | 0)) {
        if (var$4[$ch] != 123) {
            $sb = jl_String__init_(var$3, jur_Lexer_nextIndex($this), 1);
            $res = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($res);
            jl_AbstractStringBuilder_append($res, $rt_s(187));
            jl_AbstractStringBuilder_append($res, $sb);
            return jl_AbstractStringBuilder_toString($res);
        }
        jur_Lexer_nextIndex($this);
        $ch = 0;
        a: {
            while (true) {
                var$6 = $this.$index0;
                var$3 = $this.$pattern0.data;
                if (var$6 >= (var$3.length - 2 | 0))
                    break;
                $ch = var$3[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                jl_AbstractStringBuilder_append2($sb, $ch);
            }
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    }
    if (!$sb.$length1)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    $res = jl_AbstractStringBuilder_toString($sb);
    if ($res.$nativeString.length == 1) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        jl_AbstractStringBuilder_append($sb, $rt_s(187));
        jl_AbstractStringBuilder_append($sb, $res);
        return jl_AbstractStringBuilder_toString($sb);
    }
    b: {
        c: {
            if ($res.$nativeString.length > 3) {
                if (jl_String_startsWith($res, $rt_s(187)))
                    break c;
                if (jl_String_startsWith($res, $rt_s(188)))
                    break c;
            }
            break b;
        }
        $res = jl_String_substring0($res, 2);
    }
    return $res;
},
jur_Lexer_processQuantifier = ($this, $ch) => {
    let $sb, $min, $max, $mod, var$6, $$je;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 4);
    $min = (-1);
    $max = 2147483647;
    a: {
        while (true) {
            $mod = $this.$index0;
            var$6 = $this.$pattern0.data;
            if ($mod >= var$6.length)
                break a;
            $ch = var$6[jur_Lexer_nextIndex($this)];
            if ($ch == 125)
                break a;
            if ($ch == 44 && $min < 0)
                try {
                    $min = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                    jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break;
                    } else {
                        throw $$e;
                    }
                }
            jl_AbstractStringBuilder_append2($sb, $ch & 65535);
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    }
    if ($ch != 125)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    if ($sb.$length1 > 0)
        b: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                if ($min >= 0)
                    break b;
                $min = $max;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
        }
    else if ($min < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    if (($min | $max | ($max - $min | 0)) < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
    $ch = $this.$index0;
    var$6 = $this.$pattern0.data;
    $mod = $ch >= var$6.length ? 42 : var$6[$ch];
    c: {
        switch ($mod) {
            case 43:
                $this.$lookAhead = (-2147483525);
                jur_Lexer_nextIndex($this);
                break c;
            case 63:
                $this.$lookAhead = (-1073741701);
                jur_Lexer_nextIndex($this);
                break c;
            default:
        }
        $this.$lookAhead = (-536870789);
    }
    $sb = new jur_Quantifier;
    $sb.$min1 = $min;
    $sb.$max1 = $max;
    return $sb;
},
jur_Lexer_toString = $this => {
    return $this.$orig;
},
jur_Lexer_isEmpty = $this => {
    return !$this.$ch && !$this.$lookAhead && $this.$index0 == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
},
jur_Lexer_isLetter0 = $ch => {
    return $ch < 0 ? 0 : 1;
},
jur_Lexer_isLetter = $this => {
    return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
},
jur_Lexer_isHighSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
},
jur_Lexer_isHighSurrogate = $ch => {
    return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate = $ch => {
    return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
},
jur_Lexer_readHex = ($this, $max) => {
    let $st, $length, $i, var$5, $$je;
    $st = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($st, $max);
    $length = $this.$pattern0.data.length - 2 | 0;
    $i = 0;
    while (true) {
        var$5 = $rt_compare($i, $max);
        if (var$5 >= 0)
            break;
        if ($this.$index0 >= $length)
            break;
        jl_AbstractStringBuilder_append2($st, $this.$pattern0.data[jur_Lexer_nextIndex($this)]);
        $i = $i + 1 | 0;
    }
    if (!var$5)
        a: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($st), 16);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $max;
        }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
},
jur_Lexer_readOctals = $this => {
    let $max, $i, var$3, $length, $res, var$6;
    $max = 3;
    $i = 1;
    var$3 = $this.$pattern0.data;
    $length = var$3.length - 2 | 0;
    $res = jl_Character_digit(var$3[$this.$index0], 8);
    switch ($res) {
        case -1:
            break;
        default:
            if ($res > 3)
                $max = 2;
            jur_Lexer_nextIndex($this);
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    var$6 = $this.$index0;
                    if (var$6 >= $length)
                        break a;
                    var$6 = jl_Character_digit($this.$pattern0.data[var$6], 8);
                    if (var$6 < 0)
                        break;
                    $res = ($res * 8 | 0) + var$6 | 0;
                    jur_Lexer_nextIndex($this);
                    $i = $i + 1 | 0;
                }
            }
            return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, $this.$index0));
},
jur_Lexer_readFlags = $this => {
    let $pos, $res, var$3, var$4;
    $pos = 1;
    $res = $this.$flags0;
    a: while (true) {
        var$3 = $this.$index0;
        var$4 = $this.$pattern0.data;
        if (var$3 >= var$4.length)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, var$3));
        b: {
            c: {
                switch (var$4[var$3]) {
                    case 41:
                        jur_Lexer_nextIndex($this);
                        return $res | 256;
                    case 45:
                        if (!$pos)
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(9), $this.$orig, var$3));
                        $pos = 0;
                        break b;
                    case 58:
                        break a;
                    case 100:
                        break c;
                    case 105:
                        $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                        break b;
                    case 109:
                        $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                        break b;
                    case 115:
                        $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                        break b;
                    case 117:
                        $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                        break b;
                    case 120:
                        $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                        break b;
                    default:
                }
                break b;
            }
            $res = $pos ? $res | 1 : ($res ^ 1) & $res;
        }
        jur_Lexer_nextIndex($this);
    }
    jur_Lexer_nextIndex($this);
    return $res;
},
jur_Lexer_nextIndex = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = $this.$index0;
    $this.$prevNW = var$1;
    if (!($this.$flags0 & 4))
        $this.$index0 = var$1 + 1 | 0;
    else {
        var$2 = $this.$pattern0.data.length - 2 | 0;
        $this.$index0 = var$1 + 1 | 0;
        a: while (true) {
            var$3 = $this.$index0;
            if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern0.data[var$3])) {
                $this.$index0 = $this.$index0 + 1 | 0;
                continue;
            }
            var$3 = $this.$index0;
            if (var$3 >= var$2)
                break;
            var$4 = $this.$pattern0.data;
            if (var$4[var$3] != 35)
                break;
            $this.$index0 = var$3 + 1 | 0;
            while (true) {
                var$5 = $this.$index0;
                if (var$5 >= var$2)
                    continue a;
                var$1 = var$4[var$5];
                if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                    continue a;
                $this.$index0 = var$5 + 1 | 0;
            }
        }
    }
    return $this.$prevNW;
},
jur_Lexer_getDecomposition = $ch => {
    return jur_Lexer_decompTable.$get9($ch);
},
jur_Lexer_nextCodePoint = $this => {
    let $high, $lowExpectedIndex, var$3, $low;
    $high = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
    if (jl_Character_isHighSurrogate($high)) {
        $lowExpectedIndex = $this.$prevNW + 1 | 0;
        var$3 = $this.$pattern0.data;
        if ($lowExpectedIndex < var$3.length) {
            $low = var$3[$lowExpectedIndex];
            if (jl_Character_isLowSurrogate($low)) {
                jur_Lexer_nextIndex($this);
                return jl_Character_toCodePoint($high, $low);
            }
        }
    }
    return $high;
},
jur_Lexer_getIndex = $this => {
    return $this.$curToc;
};
function jur_PatternSyntaxException() {
    let a = this; jl_IllegalArgumentException.call(a);
    a.$desc = null;
    a.$pattern3 = null;
    a.$index6 = 0;
}
let jur_PatternSyntaxException__init_0 = ($this, $description, $pattern, $index) => {
    jl_Throwable__init_($this);
    $this.$index6 = (-1);
    $this.$desc = $description;
    $this.$pattern3 = $pattern;
    $this.$index6 = $index;
},
jur_PatternSyntaxException__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jur_PatternSyntaxException();
    jur_PatternSyntaxException__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PatternSyntaxException_getMessage = $this => {
    let $filler, var$2, $temp, var$4, var$5, var$6, var$7;
    $filler = $rt_s(9);
    var$2 = $this.$index6;
    if (var$2 >= 1) {
        $temp = $rt_createCharArray(var$2);
        ju_Arrays_fill2($temp, 0, $temp.data.length, 32);
        $filler = jl_String__init_0($temp);
    }
    var$4 = $this.$desc;
    var$5 = $this.$pattern3;
    if (var$5 !== null && var$5.$nativeString.length) {
        var$6 = $this.$index6;
        var$5 = $this.$pattern3;
        var$7 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$7);
        jl_AbstractStringBuilder_append1(var$7, var$6);
        jl_AbstractStringBuilder_append(var$7, $rt_s(29));
        jl_AbstractStringBuilder_append(var$7, var$5);
        jl_AbstractStringBuilder_append(var$7, $rt_s(29));
        jl_AbstractStringBuilder_append(var$7, $filler);
        $filler = jl_AbstractStringBuilder_toString(var$7);
    } else
        $filler = $rt_s(9);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, var$4);
    jl_AbstractStringBuilder_append(var$5, $filler);
    return jl_AbstractStringBuilder_toString(var$5);
},
ju_Arrays = $rt_classWithoutFields(),
ju_Arrays__init_ = $this => {
    return;
},
ju_Arrays__init_0 = () => {
    let var_0 = new ju_Arrays();
    ju_Arrays__init_(var_0);
    return var_0;
},
ju_Arrays_copyOf1 = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createCharArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf0 = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createByteArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf = ($original, $newLength) => {
    let var$3, $result, $sz, $i;
    var$3 = $original.data;
    $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
    $sz = jl_Math_min($newLength, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_fill3 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6, var$7;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$5);
        $rt_throw(var$5);
    }
    while ($fromIndex < $toIndex) {
        var$6 = $a.data;
        var$7 = $fromIndex + 1 | 0;
        var$6[$fromIndex] = $val;
        $fromIndex = var$7;
    }
},
ju_Arrays_fill = ($a, $val) => {
    ju_Arrays_fill3($a, 0, $a.data.length, $val);
},
ju_Arrays_fill2 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6, var$7;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$5);
        $rt_throw(var$5);
    }
    while ($fromIndex < $toIndex) {
        var$6 = $a.data;
        var$7 = $fromIndex + 1 | 0;
        var$6[$fromIndex] = $val;
        $fromIndex = var$7;
    }
},
ju_Arrays_fill0 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6;
    if ($fromIndex > $toIndex) {
        $val = new jl_IllegalArgumentException;
        jl_Throwable__init_($val);
        $rt_throw($val);
    }
    while ($fromIndex < $toIndex) {
        var$5 = $a.data;
        var$6 = $fromIndex + 1 | 0;
        var$5[$fromIndex] = $val;
        $fromIndex = var$6;
    }
},
ju_Arrays_fill1 = ($a, $val) => {
    ju_Arrays_fill0($a, 0, $a.data.length, $val);
},
ju_Arrays_equals = ($a, $a2) => {
    let var$3, var$4, var$5;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        $a = $a.data;
        $a2 = $a2.data;
        var$3 = $a.length;
        if (var$3 == $a2.length) {
            var$4 = 0;
            a: {
                while (true) {
                    if (var$4 >= var$3) {
                        var$4 = (-1);
                        break a;
                    }
                    var$5 = var$4 + 0 | 0;
                    if (!ju_Objects_equals($a[var$5], $a2[var$5]))
                        break;
                    var$4 = var$4 + 1 | 0;
                }
            }
            return var$4 >= 0 ? 0 : 1;
        }
    }
    return 0;
},
ju_Arrays_hashCode = $a => {
    let $hash, $i, var$4;
    if ($a === null)
        return 0;
    $hash = 1;
    $i = 0;
    while (true) {
        var$4 = $a.data;
        if ($i >= var$4.length)
            break;
        $hash = (31 * $hash | 0) + ju_Objects_hashCode(var$4[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return $hash;
},
ju_SequencedCollection = $rt_classWithoutFields(0),
ju_List = $rt_classWithoutFields(0);
function ju_AbstractList() {
    ju_AbstractCollection.call(this);
    this.$modCount = 0;
}
let ju_AbstractList_iterator = $this => {
    let var$1;
    var$1 = new ju_AbstractList$1;
    var$1.$this$015 = $this;
    var$1.$modCount1 = $this.$modCount;
    var$1.$size12 = $this.$size3;
    var$1.$removeIndex0 = (-1);
    return var$1;
},
ju_RandomAccess = $rt_classWithoutFields(0);
function ju_ArrayList() {
    let a = this; ju_AbstractList.call(a);
    a.$array2 = null;
    a.$size3 = 0;
}
let ju_ArrayList__init_1 = $this => {
    ju_ArrayList__init_0($this, 10);
},
ju_ArrayList__init_ = () => {
    let var_0 = new ju_ArrayList();
    ju_ArrayList__init_1(var_0);
    return var_0;
},
ju_ArrayList__init_0 = ($this, $initialCapacity) => {
    let var$2;
    if ($initialCapacity >= 0) {
        $this.$array2 = $rt_createArray(jl_Object, $initialCapacity);
        return;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
ju_ArrayList__init_2 = var_0 => {
    let var_1 = new ju_ArrayList();
    ju_ArrayList__init_0(var_1, var_0);
    return var_1;
},
ju_ArrayList_ensureCapacity = ($this, $minCapacity) => {
    let var$2, $newLength;
    var$2 = $this.$array2.data.length;
    if (var$2 < $minCapacity) {
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$array2 = ju_Arrays_copyOf($this.$array2, $newLength);
    }
},
ju_ArrayList_get = ($this, $index) => {
    ju_ArrayList_checkIndex($this, $index);
    return $this.$array2.data[$index];
},
ju_ArrayList_add = ($this, $element) => {
    let var$2, var$3;
    ju_ArrayList_ensureCapacity($this, $this.$size3 + 1 | 0);
    var$2 = $this.$array2.data;
    var$3 = $this.$size3;
    $this.$size3 = var$3 + 1 | 0;
    var$2[var$3] = $element;
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
},
ju_ArrayList_remove = ($this, $i) => {
    let var$2, $old, var$4, $i_0;
    ju_ArrayList_checkIndex($this, $i);
    var$2 = $this.$array2.data;
    $old = var$2[$i];
    var$4 = $this.$size3 - 1 | 0;
    $this.$size3 = var$4;
    while ($i < var$4) {
        $i_0 = $i + 1 | 0;
        var$2[$i] = var$2[$i_0];
        $i = $i_0;
    }
    var$2[var$4] = null;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $old;
},
ju_ArrayList_checkIndex = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$size3)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jur_NonCapFSet = $rt_classWithoutFields(jur_FSet),
jur_NonCapFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_NonCapFSet_getName = $this => {
    return $rt_s(189);
},
jur_NonCapFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_AheadFSet = $rt_classWithoutFields(jur_FSet),
jur_AheadFSet__init_ = $this => {
    jur_FSet__init_($this, (-1));
},
jur_AheadFSet__init_0 = () => {
    let var_0 = new jur_AheadFSet();
    jur_AheadFSet__init_(var_0);
    return var_0;
},
jur_AheadFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_AheadFSet_getName = $this => {
    return $rt_s(190);
},
jur_BehindFSet = $rt_classWithoutFields(jur_FSet),
jur_BehindFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) != $stringIndex)
        $stringIndex = (-1);
    return $stringIndex;
},
jur_BehindFSet_getName = $this => {
    return $rt_s(191);
};
function jur_AtomicFSet() {
    jur_FSet.call(this);
    this.$index9 = 0;
}
let jur_AtomicFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    $this.$index9 = $stringIndex;
    return $stringIndex;
},
jur_AtomicFSet_getName = $this => {
    return $rt_s(192);
},
jur_AtomicFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FinalSet = $rt_classWithoutFields(jur_FSet),
jur_FinalSet__init_ = $this => {
    jur_FSet__init_($this, 0);
},
jur_FinalSet__init_0 = () => {
    let var_0 = new jur_FinalSet();
    jur_FinalSet__init_(var_0);
    return var_0;
},
jur_FinalSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($matchResult.$mode0 != 1 && $stringIndex != $matchResult.$rightBound)
        return (-1);
    $matchResult.$valid2 = 1;
    jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
    return $stringIndex;
},
jur_FinalSet_getName = $this => {
    return $rt_s(193);
};
function jur_LeafSet() {
    jur_AbstractSet.call(this);
    this.$charCount0 = 0;
}
let jur_LeafSet__init_ = $this => {
    jur_AbstractSet__init_($this);
    $this.$charCount0 = 1;
},
jur_LeafSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    if (($stringIndex + $this.$charCount() | 0) > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $shift = $this.$accepts($stringIndex, $testString);
    if ($shift < 0)
        return (-1);
    return $this.$next1.$matches($stringIndex + $shift | 0, $testString, $matchResult);
},
jur_LeafSet_charCount = $this => {
    return $this.$charCount0;
},
jur_LeafSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_EmptySet = $rt_classWithoutFields(jur_LeafSet),
jur_EmptySet__init_0 = ($this, $next) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$charCount0 = 1;
    $this.$type6 = 1;
    $this.$charCount0 = 0;
},
jur_EmptySet__init_ = var_0 => {
    let var_1 = new jur_EmptySet();
    jur_EmptySet__init_0(var_1, var_0);
    return var_1;
},
jur_EmptySet_accepts = ($this, $stringIndex, $testString) => {
    return 0;
},
jur_EmptySet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startStr, var$6, $high;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    var$6 = $testString;
    while (true) {
        $high = $rt_compare($stringIndex, $strLength);
        if ($high > 0)
            return (-1);
        if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$6, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt(var$6, $stringIndex - 1 | 0))) {
            $stringIndex = $stringIndex + 1 | 0;
            continue;
        }
        if ($this.$next1.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_EmptySet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $strLength, $startStr, var$7;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    var$7 = $testString;
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt(var$7, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt(var$7, $startSearch - 1 | 0))) {
            $startSearch = $startSearch + (-1) | 0;
            continue;
        }
        if ($this.$next1.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_EmptySet_getName = $this => {
    return $rt_s(194);
},
jur_EmptySet_hasConsumed = ($this, $mr) => {
    return 0;
};
function jur_JointSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$children = null;
    a.$fSet = null;
    a.$groupIndex = 0;
}
let jur_JointSet__init_0 = $this => {
    jur_AbstractSet__init_($this);
},
jur_JointSet__init_2 = () => {
    let var_0 = new jur_JointSet();
    jur_JointSet__init_0(var_0);
    return var_0;
},
jur_JointSet__init_ = ($this, $children, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$children = $children;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_JointSet__init_1 = (var_0, var_1) => {
    let var_2 = new jur_JointSet();
    jur_JointSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_JointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    if ($this.$children === null)
        return (-1);
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_JointSet_setNext = ($this, $next) => {
    $this.$fSet.$next1 = $next;
},
jur_JointSet_getName = $this => {
    return $rt_s(195);
},
jur_JointSet_first = ($this, $set) => {
    let $i, var$3;
    a: {
        $i = $this.$children;
        if ($i !== null) {
            var$3 = ju_AbstractList_iterator($i);
            while (true) {
                if (!ju_AbstractList$1_hasNext(var$3))
                    break a;
                if (!(ju_AbstractList$1_next(var$3)).$first1($set))
                    continue;
                else
                    return 1;
            }
        }
    }
    return 0;
},
jur_JointSet_hasConsumed = ($this, $matchResult) => {
    return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_JointSet_processSecondPass = $this => {
    let $child, $childrenSize, $i, $set, var$5, var$6, var$7, var$8, var$9;
    $this.$isSecondPassVisited = 1;
    $child = $this.$fSet;
    if ($child !== null && !$child.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($child);
    a: {
        b: {
            $child = $this.$children;
            if ($child !== null) {
                $childrenSize = $child.$size3;
                $i = 0;
                while (true) {
                    if ($i >= $childrenSize)
                        break b;
                    $child = ju_ArrayList_get($this.$children, $i);
                    $set = $child.$processBackRefReplacement();
                    if ($set === null)
                        $set = $child;
                    else {
                        $child.$isSecondPassVisited = 1;
                        ju_ArrayList_remove($this.$children, $i);
                        var$5 = $this.$children;
                        if ($i < 0)
                            break a;
                        var$6 = var$5.$size3;
                        if ($i > var$6)
                            break a;
                        ju_ArrayList_ensureCapacity(var$5, var$6 + 1 | 0);
                        var$7 = var$5.$size3;
                        var$8 = var$7;
                        while (var$8 > $i) {
                            var$9 = var$5.$array2.data;
                            var$9[var$8] = var$9[var$8 - 1 | 0];
                            var$8 = var$8 + (-1) | 0;
                        }
                        var$5.$array2.data[$i] = $set;
                        var$5.$size3 = var$7 + 1 | 0;
                        var$5.$modCount = var$5.$modCount + 1 | 0;
                    }
                    if (!$set.$isSecondPassVisited)
                        $set.$processSecondPass();
                    $i = $i + 1 | 0;
                }
            }
        }
        if ($this.$next1 !== null)
            jur_AbstractSet_processSecondPass($this);
        return;
    }
    $child = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($child);
    $rt_throw($child);
},
jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet),
jur_NonCapJointSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_NonCapJointSet__init_0 = () => {
    let var_0 = new jur_NonCapJointSet();
    jur_NonCapJointSet__init_(var_0);
    return var_0;
},
jur_NonCapJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_NonCapJointSet_getName = $this => {
    return $rt_s(196);
},
jur_NonCapJointSet_hasConsumed = ($this, $matchResult) => {
    return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet),
jur_AtomicJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next1.$matches($this.$fSet.$index9, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_AtomicJointSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_AtomicJointSet_getName = $this => {
    return $rt_s(196);
},
jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next1.$matches($stringIndex, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_PositiveLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookAhead_getName = $this => {
    return $rt_s(197);
},
jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookAhead_getName = $this => {
    return $rt_s(198);
},
jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $leftBound, $shift, $i;
    $size = $this.$children.$size3;
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    a: {
        $shift = $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
            $i = 0;
            while (true) {
                if ($i >= $size)
                    break a;
                if ((ju_ArrayList_get($this.$children, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, (-1));
                    return $shift;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return (-1);
},
jur_PositiveLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookBehind_getName = $this => {
    return $rt_s(199);
},
jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookBehind_getName = $this => {
    return $rt_s(200);
};
function jur_SingleSet() {
    jur_JointSet.call(this);
    this.$kid = null;
}
let jur_SingleSet__init_ = ($this, $child, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$kid = $child;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_SingleSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_SingleSet();
    jur_SingleSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_SingleSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $shift;
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_SingleSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_findBack = ($this, $stringIndex, $lastIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_first = ($this, $set) => {
    return $this.$kid.$first1($set);
},
jur_SingleSet_processBackRefReplacement = $this => {
    let $set;
    $set = new jur_BackReferencedSingleSet;
    jur_SingleSet__init_($set, $this.$kid, $this.$fSet);
    $this.$next1 = $set;
    return $set;
},
jur_SingleSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$fSet;
    if ($set !== null && !$set.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($set);
    $set = $this.$kid;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$kid.$isSecondPassVisited = 1;
            $this.$kid = $set;
        }
        $this.$kid.$processSecondPass();
    }
},
jlr_Array = $rt_classWithoutFields(),
jlr_Array__init_ = $this => {
    return;
},
jlr_Array__init_0 = () => {
    let var_0 = new jlr_Array();
    jlr_Array__init_(var_0);
    return var_0;
},
jlr_Array_getLength = var$1 => {
    if (var$1 === null || var$1.constructor.$meta.item === 'undefined') {
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    return var$1.data.length;
},
jlr_Array_newInstance = (var$1, $length) => {
    if (var$1 === null) {
        var$1 = new jl_NullPointerException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    if (var$1 === $rt_cls($rt_voidcls)) {
        var$1 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    if ($length >= 0)
        return jlr_Array_newInstanceImpl(var$1.$platformClass, $length);
    var$1 = new jl_NegativeArraySizeException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
jlr_Array_newInstanceImpl = (var$1, var$2) => {
    if (var$1.$meta.primitive) {
        switch (var$1) {
        }
        ;
    }
    return $rt_createArray(var$1, var$2);
},
jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException),
jl_ArrayStoreException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ArrayStoreException__init_0 = () => {
    let var_0 = new jl_ArrayStoreException();
    jl_ArrayStoreException__init_(var_0);
    return var_0;
},
jur_SpecialToken = $rt_classWithoutFields();
function jur_AbstractCharClass() {
    let a = this; jur_SpecialToken.call(a);
    a.$alt = 0;
    a.$altSurrogates = 0;
    a.$lowHighSurrogates = null;
    a.$charClassWithoutSurrogates = null;
    a.$charClassWithSurrogates = null;
    a.$mayContainSupplCodepoints = 0;
}
let jur_AbstractCharClass_charClasses = null,
jur_AbstractCharClass__init_ = $this => {
    let var$1;
    var$1 = new ju_BitSet;
    var$1.$data = $rt_createIntArray(64);
    $this.$lowHighSurrogates = var$1;
},
jur_AbstractCharClass_getBits = $this => {
    return null;
},
jur_AbstractCharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_AbstractCharClass_hasLowHighSurrogates = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if (!$this.$altSurrogates)
        var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
    else {
        a: {
            var$2 = $this.$lowHighSurrogates;
            var$1 = 0;
            var$3 = var$2.$length2;
            if (var$1 < var$3) {
                var$4 = var$2.$data.data;
                var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                if (var$5)
                    var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                else {
                    var$1 = (var$3 + 31 | 0) / 32 | 0;
                    var$5 = 1;
                    while (var$5 < var$1) {
                        if (var$4[var$5] != (-1)) {
                            var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                            break a;
                        }
                        var$5 = var$5 + 1 | 0;
                    }
                    var$1 = var$3;
                }
            }
        }
        var$1 = var$1 >= 2048 ? 0 : 1;
    }
    return var$1;
},
jur_AbstractCharClass_mayContainSupplCodepoints = $this => {
    return $this.$mayContainSupplCodepoints;
},
jur_AbstractCharClass_getInstance = $this => {
    return $this;
},
jur_AbstractCharClass_getSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$1;
        var$2.$this$060 = $this;
        var$2.$val$lHS = $lHS;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
    }
    return $this.$charClassWithSurrogates;
},
jur_AbstractCharClass_getWithoutSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithoutSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$2;
        var$2.$this$033 = $this;
        var$2.$val$lHS0 = $lHS;
        var$2.$val$thisClass = $this;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithoutSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$alt);
        $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
    }
    return $this.$charClassWithoutSurrogates;
},
jur_AbstractCharClass_hasUCI = $this => {
    return 0;
},
jur_AbstractCharClass_setNegative = ($this, $value) => {
    let var$2;
    var$2 = $this.$alt;
    if (var$2 ^ $value) {
        $this.$alt = var$2 ? 0 : 1;
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
    }
    if (!$this.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_AbstractCharClass_isNegative = $this => {
    return $this.$alt;
},
jur_AbstractCharClass_intersects = ($cc1, $cc2) => {
    let var$3, var$4;
    if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
        $cc1 = $cc1.$getBits();
        $cc2 = $cc2.$getBits();
        var$3 = jl_Math_min($cc1.$data.data.length, $cc2.$data.data.length);
        var$4 = 0;
        a: {
            while (var$4 < var$3) {
                if ($cc1.$data.data[var$4] & $cc2.$data.data[var$4]) {
                    var$3 = 1;
                    break a;
                }
                var$4 = var$4 + 1 | 0;
            }
            var$3 = 0;
        }
        return var$3;
    }
    return 1;
},
jur_AbstractCharClass_getPredefinedClass = ($name, $negative) => {
    let var$3, var$4;
    var$3 = 0;
    while (true) {
        var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
        if (var$3 >= var$4.length)
            break;
        var$4 = var$4[var$3].data;
        if (jl_String_equals($name, var$4[0]))
            return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
        var$3 = var$3 + 1 | 0;
    }
    $rt_throw(ju_MissingResourceException__init_0($rt_s(9), $rt_s(9), $name));
},
jur_AbstractCharClass__clinit_ = () => {
    jur_AbstractCharClass_charClasses = new jur_AbstractCharClass$PredefinedCharacterClasses;
};
function ju_MissingResourceException() {
    let a = this; jl_RuntimeException.call(a);
    a.$className = null;
    a.$key0 = null;
}
let ju_MissingResourceException__init_ = ($this, $s, $className, $key) => {
    jl_Exception__init_($this, $s);
    $this.$className = $className;
    $this.$key0 = $key;
},
ju_MissingResourceException__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ju_MissingResourceException();
    ju_MissingResourceException__init_(var_3, var_0, var_1, var_2);
    return var_3;
};
function jur_CharClass() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$ci = 0;
    a.$uci = 0;
    a.$hasUCI0 = 0;
    a.$invertedSurrogates = 0;
    a.$inverted = 0;
    a.$hideBits = 0;
    a.$bits = null;
    a.$nonBitSet = null;
}
let jur_CharClass__init_0 = $this => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_0();
},
jur_CharClass__init_ = () => {
    let var_0 = new jur_CharClass();
    jur_CharClass__init_0(var_0);
    return var_0;
},
jur_CharClass__init_2 = ($this, $ci, $uci) => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_0();
    $this.$ci = $ci;
    $this.$uci = $uci;
},
jur_CharClass__init_1 = (var_0, var_1) => {
    let var_2 = new jur_CharClass();
    jur_CharClass__init_2(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass_add0 = ($this, $ch) => {
    a: {
        if ($this.$ci) {
            b: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break b;
                    if ($ch > 90)
                        break b;
                }
                if ($this.$inverted) {
                    ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                ju_BitSet_set0($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                break a;
            }
            if ($this.$uci && $ch > 128) {
                $this.$hasUCI0 = 1;
                $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
            }
        }
    }
    if (!(!jur_Lexer_isHighSurrogate($ch) && !jur_Lexer_isLowSurrogate($ch))) {
        if ($this.$invertedSurrogates)
            ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
        else
            ju_BitSet_set0($this.$lowHighSurrogates, $ch - 55296 | 0);
    }
    if ($this.$inverted)
        ju_BitSet_clear($this.$bits, $ch);
    else
        ju_BitSet_set0($this.$bits, $ch);
    if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_CharClass_add1 = ($this, $cc) => {
    let $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($this.$invertedSurrogates) {
        if (!$cc.$altSurrogates)
            ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    } else if (!$cc.$altSurrogates)
        ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        $this.$invertedSurrogates = 1;
    }
    if (!$this.$hideBits && $cc.$getBits() !== null) {
        if ($this.$inverted) {
            if (!$cc.$alt)
                ju_BitSet_andNot($this.$bits, $cc.$getBits());
            else
                ju_BitSet_and($this.$bits, $cc.$getBits());
        } else if (!$cc.$alt)
            ju_BitSet_or($this.$bits, $cc.$getBits());
        else {
            ju_BitSet_xor($this.$bits, $cc.$getBits());
            ju_BitSet_and($this.$bits, $cc.$getBits());
            $this.$alt = $this.$alt ? 0 : 1;
            $this.$inverted = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$4 = new jur_CharClass$5;
                var$4.$this$046 = $this;
                var$4.$val$curAlt10 = $curAlt;
                var$4.$val$nb0 = $nb;
                var$4.$val$cc = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$4;
                var$4.$this$066 = $this;
                var$4.$val$curAlt1 = $curAlt;
                var$4.$val$nb3 = $nb;
                var$4.$val$cc2 = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                $nb = new jur_CharClass$1;
                $nb.$this$053 = $this;
                $nb.$val$cc3 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else if (!$curAlt) {
                $nb = new jur_CharClass$3;
                $nb.$this$06 = $this;
                $nb.$val$curAlt0 = $curAlt;
                $nb.$val$cc1 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$2;
                $nb.$this$04 = $this;
                $nb.$val$curAlt = $curAlt;
                $nb.$val$cc0 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
    return $this;
},
jur_CharClass_add = ($this, $i, $end) => {
    let var$3, var$4, var$5, var$6, var$7;
    if ($i > $end) {
        var$3 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$3);
        $rt_throw(var$3);
    }
    a: {
        b: {
            if (!$this.$ci) {
                if ($end < 55296)
                    break b;
                if ($i > 57343)
                    break b;
            }
            $end = $end + 1 | 0;
            while (true) {
                if ($i >= $end)
                    break a;
                jur_CharClass_add0($this, $i);
                $i = $i + 1 | 0;
            }
        }
        if (!$this.$inverted)
            ju_BitSet_set($this.$bits, $i, $end + 1 | 0);
        else {
            var$3 = $this.$bits;
            $end = $end + 1 | 0;
            if ($i >= 0 && $i <= $end) {
                var$4 = var$3.$length2;
                if ($i < var$4) {
                    var$5 = jl_Math_min(var$4, $end);
                    if ($i != var$5) {
                        var$6 = $i / 32 | 0;
                        $end = var$5 / 32 | 0;
                        if (var$6 == $end) {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                        } else {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                            var$4 = var$6 + 1 | 0;
                            while (var$4 < $end) {
                                var$3.$data.data[var$4] = 0;
                                var$4 = var$4 + 1 | 0;
                            }
                            if (var$5 & 31) {
                                var$7 = var$3.$data.data;
                                var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                            }
                        }
                        ju_BitSet_recalculateLength(var$3);
                    }
                }
            } else {
                var$3 = new jl_IndexOutOfBoundsException;
                jl_Throwable__init_(var$3);
                $rt_throw(var$3);
            }
        }
    }
    return $this;
},
jur_CharClass_union = ($this, $clazz) => {
    let var$2, $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    var$2 = $clazz;
    if (var$2.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_or($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        else
            ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    } else if ($curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        $this.$altSurrogates = 1;
    }
    if (!$this.$hideBits && jur_CharClass_getBits(var$2) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_or($this.$bits, jur_CharClass_getBits(var$2));
            else
                ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
        } else if ($curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits(var$2));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits(var$2));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            $this.$alt = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$2 = new jur_CharClass$11;
                var$2.$this$022 = $this;
                var$2.$val$curAlt3 = $curAlt;
                var$2.$val$nb4 = $nb;
                var$2.$val$clazz5 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            } else {
                var$2 = new jur_CharClass$10;
                var$2.$this$024 = $this;
                var$2.$val$curAlt9 = $curAlt;
                var$2.$val$nb = $nb;
                var$2.$val$clazz = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$7;
                    $nb.$this$067 = $this;
                    $nb.$val$clazz1 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$6;
                    $nb.$this$047 = $this;
                    $nb.$val$clazz9 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$9;
                $nb.$this$014 = $this;
                $nb.$val$clazz3 = $clazz;
                $nb.$val$curAlt4 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$8;
                $nb.$this$011 = $this;
                $nb.$val$clazz4 = $clazz;
                $nb.$val$curAlt6 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_intersection = ($this, $clazz) => {
    let var$2, $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    var$2 = $clazz;
    if (var$2.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        else
            ju_BitSet_or($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    } else if (!$curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        $this.$altSurrogates = 0;
    }
    if (!$this.$hideBits && jur_CharClass_getBits(var$2) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            else
                ju_BitSet_or($this.$bits, jur_CharClass_getBits(var$2));
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits(var$2));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits(var$2));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            $this.$alt = 0;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$2 = new jur_CharClass$17;
                var$2.$this$045 = $this;
                var$2.$val$curAlt8 = $curAlt;
                var$2.$val$nb2 = $nb;
                var$2.$val$clazz2 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            } else {
                var$2 = new jur_CharClass$16;
                var$2.$this$048 = $this;
                var$2.$val$curAlt7 = $curAlt;
                var$2.$val$nb1 = $nb;
                var$2.$val$clazz8 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$13;
                    $nb.$this$025 = $this;
                    $nb.$val$clazz6 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$12;
                    $nb.$this$065 = $this;
                    $nb.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$15;
                $nb.$this$018 = $this;
                $nb.$val$clazz10 = $clazz;
                $nb.$val$curAlt2 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$14;
                $nb.$this$012 = $this;
                $nb.$val$clazz7 = $clazz;
                $nb.$val$curAlt5 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_contains = ($this, $ch) => {
    let var$2;
    var$2 = $this.$nonBitSet;
    if (var$2 !== null)
        return $this.$alt ^ var$2.$contains($ch);
    return $this.$alt ^ ju_BitSet_get($this.$bits, $ch);
},
jur_CharClass_getBits = $this => {
    if (!$this.$hideBits)
        return $this.$bits;
    return null;
},
jur_CharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_CharClass_getInstance = $this => {
    let $bs, $res;
    if ($this.$nonBitSet !== null)
        return $this;
    $bs = jur_CharClass_getBits($this);
    $res = new jur_CharClass$18;
    $res.$this$041 = $this;
    $res.$val$bs = $bs;
    jur_AbstractCharClass__init_($res);
    return jur_AbstractCharClass_setNegative($res, $this.$alt);
},
jur_CharClass_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$bits, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append2($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
    }
    var$3 = $temp.$length1;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
},
jur_CharClass_hasUCI = $this => {
    return $this.$hasUCI0;
};
function jur_QuantifierSet() {
    jur_AbstractSet.call(this);
    this.$innerSet = null;
}
let jur_QuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$innerSet = $innerSet;
    $this.$type6 = $type;
},
jur_QuantifierSet_getInnerSet = $this => {
    return $this.$innerSet;
},
jur_QuantifierSet_first = ($this, $set) => {
    return !$this.$innerSet.$first1($set) && !$this.$next1.$first1($set) ? 0 : 1;
},
jur_QuantifierSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_QuantifierSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next1;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$next1.$isSecondPassVisited = 1;
            $this.$next1 = $set;
        }
        $this.$next1.$processSecondPass();
    }
    $set = $this.$innerSet;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$innerSet.$isSecondPassVisited = 1;
                $this.$innerSet = $set;
            }
            $this.$innerSet.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$innerSet = $set.$next1;
    }
};
function jur_LeafQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$leaf = null;
}
let jur_LeafQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$leaf = $innerSet;
},
jur_LeafQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_LeafQuantifierSet();
    jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_LeafQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $i, var$5;
    $i = 0;
    a: {
        while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$5 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$5 <= 0)
                break a;
            $stringIndex = $stringIndex + var$5 | 0;
            $i = $i + 1 | 0;
        }
    }
    while (true) {
        if ($i < 0)
            return (-1);
        var$5 = $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if (var$5 >= 0)
            break;
        $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
        $i = $i + (-1) | 0;
    }
    return var$5;
},
jur_LeafQuantifierSet_getName = $this => {
    return $rt_s(201);
};
function jur_CompositeQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
    this.$quantifier0 = null;
}
let jur_CompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier0 = $quant;
},
jur_CompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CompositeQuantifierSet();
    jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while ($i < $max) {
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break a;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i < $min)
                    return (-1);
                $shift = $this.$next1.$matches($stringIndex, $testString, $matchResult);
                if ($shift >= 0)
                    break;
                $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
                $i = $i + (-1) | 0;
            }
            return $shift;
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CompositeQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier0);
},
jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_GroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_GroupQuantifierSet_getName = $this => {
    return $rt_s(202);
},
jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_AltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$next1.$matches($stringIndex, $testString, $matchResult);
    return $shift;
},
jur_AltQuantifierSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
    $this.$innerSet.$setNext($next);
},
jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_UnifiedQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
        $stringIndex = $stringIndex + $this.$leaf.$charCount() | 0;
    }
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_UnifiedQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $startSearch, $newSearch, $newSearch_0;
    $startSearch = $this.$next1.$find0($stringIndex, $testString, $matchResult);
    if ($startSearch < 0)
        return (-1);
    $newSearch = $startSearch - $this.$leaf.$charCount() | 0;
    while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
        $newSearch_0 = $newSearch - $this.$leaf.$charCount() | 0;
        $startSearch = $newSearch;
        $newSearch = $newSearch_0;
    }
    return $startSearch;
},
jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields(),
jur_AbstractCharClass$PredefinedCharacterClasses_space = null,
jur_AbstractCharClass$PredefinedCharacterClasses_digit = null,
jur_AbstractCharClass$PredefinedCharacterClasses_contents = null,
jur_AbstractCharClass$PredefinedCharacterClasses__init_ = $this => {
    return;
},
jur_AbstractCharClass$PredefinedCharacterClasses__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$PredefinedCharacterClasses();
    jur_AbstractCharClass$PredefinedCharacterClasses__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$PredefinedCharacterClasses__clinit_ = () => {
    let var$1, var$2, var$3, var$4;
    jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_0();
    jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_0();
    var$1 = $rt_createArray($rt_arraycls(jl_Object), 194);
    var$2 = var$1.data;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(203);
    var$4[1] = jur_AbstractCharClass$LazyLower__init_0();
    var$2[0] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(204);
    var$4[1] = jur_AbstractCharClass$LazyUpper__init_0();
    var$2[1] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(205);
    var$4[1] = jur_AbstractCharClass$LazyASCII__init_0();
    var$2[2] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(206);
    var$4[1] = jur_AbstractCharClass$LazyAlpha__init_0();
    var$2[3] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(207);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[4] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(208);
    var$4[1] = jur_AbstractCharClass$LazyAlnum__init_0();
    var$2[5] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(209);
    var$4[1] = jur_AbstractCharClass$LazyPunct__init_0();
    var$2[6] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(210);
    var$4[1] = jur_AbstractCharClass$LazyGraph__init_0();
    var$2[7] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(211);
    var$4[1] = jur_AbstractCharClass$LazyPrint__init_0();
    var$2[8] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(212);
    var$4[1] = jur_AbstractCharClass$LazyBlank__init_0();
    var$2[9] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(213);
    var$4[1] = jur_AbstractCharClass$LazyCntrl__init_0();
    var$2[10] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(214);
    var$4[1] = jur_AbstractCharClass$LazyXDigit__init_0();
    var$2[11] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(215);
    var$4[1] = jur_AbstractCharClass$LazyJavaLowerCase__init_0();
    var$2[12] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(216);
    var$4[1] = jur_AbstractCharClass$LazyJavaUpperCase__init_0();
    var$2[13] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(217);
    var$4[1] = jur_AbstractCharClass$LazyJavaWhitespace__init_0();
    var$2[14] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(218);
    var$4[1] = jur_AbstractCharClass$LazyJavaMirrored__init_0();
    var$2[15] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(219);
    var$4[1] = jur_AbstractCharClass$LazyJavaDefined__init_0();
    var$2[16] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(220);
    var$4[1] = jur_AbstractCharClass$LazyJavaDigit__init_0();
    var$2[17] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(221);
    var$4[1] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0();
    var$2[18] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(222);
    var$4[1] = jur_AbstractCharClass$LazyJavaISOControl__init_0();
    var$2[19] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(223);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0();
    var$2[20] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(224);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0();
    var$2[21] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(225);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetter__init_0();
    var$2[22] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(226);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0();
    var$2[23] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(227);
    var$4[1] = jur_AbstractCharClass$LazyJavaSpaceChar__init_0();
    var$2[24] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(228);
    var$4[1] = jur_AbstractCharClass$LazyJavaTitleCase__init_0();
    var$2[25] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(229);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0();
    var$2[26] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(230);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0();
    var$2[27] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(231);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[28] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(232);
    var$4[1] = jur_AbstractCharClass$LazyWord__init_0();
    var$2[29] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(233);
    var$4[1] = jur_AbstractCharClass$LazyNonWord__init_0();
    var$2[30] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(234);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[31] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(235);
    var$4[1] = jur_AbstractCharClass$LazyNonSpace__init_0();
    var$2[32] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(236);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[33] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(237);
    var$4[1] = jur_AbstractCharClass$LazyNonDigit__init_0();
    var$2[34] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(238);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 127);
    var$2[35] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(239);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(128, 255);
    var$2[36] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(240);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(256, 383);
    var$2[37] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(241);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(384, 591);
    var$2[38] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(242);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(592, 687);
    var$2[39] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(243);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(688, 767);
    var$2[40] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(244);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(768, 879);
    var$2[41] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(245);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(880, 1023);
    var$2[42] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(246);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1024, 1279);
    var$2[43] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(247);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1280, 1327);
    var$2[44] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(248);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1328, 1423);
    var$2[45] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(249);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1424, 1535);
    var$2[46] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(250);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1536, 1791);
    var$2[47] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(251);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1792, 1871);
    var$2[48] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(252);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1872, 1919);
    var$2[49] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(253);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1920, 1983);
    var$2[50] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(254);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2304, 2431);
    var$2[51] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(255);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2432, 2559);
    var$2[52] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(256);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2560, 2687);
    var$2[53] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(257);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2688, 2815);
    var$2[54] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(258);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2816, 2943);
    var$2[55] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(259);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2944, 3071);
    var$2[56] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(260);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3072, 3199);
    var$2[57] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(261);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3200, 3327);
    var$2[58] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(262);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3328, 3455);
    var$2[59] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(263);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3456, 3583);
    var$2[60] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(264);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3584, 3711);
    var$2[61] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(265);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3712, 3839);
    var$2[62] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(266);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3840, 4095);
    var$2[63] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(267);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4096, 4255);
    var$2[64] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(268);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4256, 4351);
    var$2[65] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(269);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4352, 4607);
    var$2[66] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(270);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4608, 4991);
    var$2[67] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(271);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4992, 5023);
    var$2[68] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(272);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5024, 5119);
    var$2[69] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(273);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5120, 5759);
    var$2[70] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(274);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5760, 5791);
    var$2[71] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(275);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5792, 5887);
    var$2[72] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(276);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5888, 5919);
    var$2[73] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(277);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5920, 5951);
    var$2[74] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(278);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5952, 5983);
    var$2[75] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(279);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5984, 6015);
    var$2[76] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(280);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6016, 6143);
    var$2[77] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(281);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6144, 6319);
    var$2[78] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(282);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6400, 6479);
    var$2[79] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(283);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6480, 6527);
    var$2[80] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(284);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6528, 6623);
    var$2[81] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(285);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6624, 6655);
    var$2[82] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(286);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6656, 6687);
    var$2[83] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(287);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7424, 7551);
    var$2[84] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(288);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7552, 7615);
    var$2[85] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(289);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7616, 7679);
    var$2[86] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(290);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7680, 7935);
    var$2[87] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(291);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7936, 8191);
    var$2[88] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(292);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8192, 8303);
    var$2[89] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(293);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8304, 8351);
    var$2[90] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(294);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8352, 8399);
    var$2[91] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(295);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8400, 8447);
    var$2[92] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(296);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8448, 8527);
    var$2[93] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(297);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8528, 8591);
    var$2[94] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(298);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8592, 8703);
    var$2[95] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(299);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8704, 8959);
    var$2[96] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(300);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8960, 9215);
    var$2[97] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(301);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9216, 9279);
    var$2[98] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(302);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9280, 9311);
    var$2[99] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(303);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9312, 9471);
    var$2[100] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(304);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9472, 9599);
    var$2[101] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(305);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9600, 9631);
    var$2[102] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(306);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9632, 9727);
    var$2[103] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(307);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9728, 9983);
    var$2[104] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(308);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9984, 10175);
    var$2[105] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(309);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10176, 10223);
    var$2[106] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(310);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10224, 10239);
    var$2[107] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(311);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10240, 10495);
    var$2[108] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(312);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10496, 10623);
    var$2[109] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(313);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10624, 10751);
    var$2[110] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(314);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10752, 11007);
    var$2[111] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(315);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11008, 11263);
    var$2[112] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(316);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11264, 11359);
    var$2[113] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(317);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11392, 11519);
    var$2[114] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(318);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11520, 11567);
    var$2[115] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(319);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11568, 11647);
    var$2[116] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(320);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11648, 11743);
    var$2[117] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(321);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11776, 11903);
    var$2[118] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(322);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11904, 12031);
    var$2[119] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(323);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12032, 12255);
    var$2[120] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(324);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12272, 12287);
    var$2[121] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(325);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12288, 12351);
    var$2[122] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(326);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12352, 12447);
    var$2[123] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(327);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12448, 12543);
    var$2[124] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(328);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12544, 12591);
    var$2[125] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(329);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12592, 12687);
    var$2[126] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(330);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12688, 12703);
    var$2[127] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(331);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12704, 12735);
    var$2[128] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(332);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12736, 12783);
    var$2[129] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(333);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12784, 12799);
    var$2[130] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(334);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12800, 13055);
    var$2[131] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(335);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13056, 13311);
    var$2[132] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(336);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13312, 19893);
    var$2[133] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(337);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19904, 19967);
    var$2[134] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(338);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19968, 40959);
    var$2[135] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(339);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(40960, 42127);
    var$2[136] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(340);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42128, 42191);
    var$2[137] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(341);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42752, 42783);
    var$2[138] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(342);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(43008, 43055);
    var$2[139] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(343);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(44032, 55203);
    var$2[140] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(344);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(55296, 56191);
    var$2[141] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(345);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56192, 56319);
    var$2[142] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(346);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56320, 57343);
    var$2[143] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(347);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(57344, 63743);
    var$2[144] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(348);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(63744, 64255);
    var$2[145] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(349);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64256, 64335);
    var$2[146] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(350);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64336, 65023);
    var$2[147] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(351);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65024, 65039);
    var$2[148] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(352);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65040, 65055);
    var$2[149] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(353);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65056, 65071);
    var$2[150] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(354);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65072, 65103);
    var$2[151] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(355);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65104, 65135);
    var$2[152] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(356);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65136, 65279);
    var$2[153] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(357);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65280, 65519);
    var$2[154] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(358);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 1114111);
    var$2[155] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(359);
    var$4[1] = jur_AbstractCharClass$LazySpecialsBlock__init_0();
    var$2[156] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(360);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(0, 1);
    var$2[157] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(361);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(62, 1);
    var$2[158] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(362);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(1, 1);
    var$2[159] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(363);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(2, 1);
    var$2[160] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(364);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(3, 0);
    var$2[161] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(365);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(4, 0);
    var$2[162] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(366);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(5, 1);
    var$2[163] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(367);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(448, 1);
    var$2[164] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(368);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(6, 1);
    var$2[165] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(369);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(7, 0);
    var$2[166] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(370);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(8, 1);
    var$2[167] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(371);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1);
    var$2[168] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(372);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(9, 1);
    var$2[169] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(373);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(10, 1);
    var$2[170] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(374);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(11, 1);
    var$2[171] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(375);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0);
    var$2[172] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(376);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(12, 0);
    var$2[173] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(377);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(13, 0);
    var$2[174] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(378);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(14, 0);
    var$2[175] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(379);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_2(983040, 1, 1);
    var$2[176] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(380);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(15, 0);
    var$2[177] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(381);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(16, 1);
    var$2[178] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(382);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(18, 1);
    var$2[179] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(383);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_1(19, 0, 1);
    var$2[180] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(384);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1);
    var$2[181] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(385);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(20, 0);
    var$2[182] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(386);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(21, 0);
    var$2[183] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(387);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(22, 0);
    var$2[184] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(388);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(23, 0);
    var$2[185] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(389);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(24, 1);
    var$2[186] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(390);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1);
    var$2[187] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(391);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(25, 1);
    var$2[188] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(392);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(26, 0);
    var$2[189] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(393);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(27, 0);
    var$2[190] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(394);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(28, 1);
    var$2[191] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(395);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(29, 0);
    var$2[192] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(396);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(30, 0);
    var$2[193] = var$3;
    jur_AbstractCharClass$PredefinedCharacterClasses_contents = var$1;
};
function jur_AbstractCharClass$LazyCharClass() {
    let a = this; jl_Object.call(a);
    a.$posValue = null;
    a.$negValue = null;
}
let jur_AbstractCharClass$LazyCharClass_getValue = ($this, $negative) => {
    if (!$negative && $this.$posValue === null)
        $this.$posValue = $this.$computeValue();
    else if ($negative && $this.$negValue === null)
        $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
    if ($negative)
        return $this.$negValue;
    return $this.$posValue;
};
function jur_Quantifier() {
    let a = this; jur_SpecialToken.call(a);
    a.$min1 = 0;
    a.$max1 = 0;
}
let jur_Quantifier_toString = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$min1;
    var$2 = $this.$max1;
    var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(9);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append2(var$4, 123);
    jl_AbstractStringBuilder_append1(var$4, var$1);
    jl_AbstractStringBuilder_append2(var$4, 44);
    jl_AbstractStringBuilder_append(var$4, var$3);
    jl_AbstractStringBuilder_append2(var$4, 125);
    return jl_AbstractStringBuilder_toString(var$4);
},
jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet),
jur_FSet$PossessiveFSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_FSet$PossessiveFSet__init_0 = () => {
    let var_0 = new jur_FSet$PossessiveFSet();
    jur_FSet$PossessiveFSet__init_(var_0);
    return var_0;
},
jur_FSet$PossessiveFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_FSet$PossessiveFSet_getName = $this => {
    return $rt_s(397);
},
jur_FSet$PossessiveFSet_hasConsumed = ($this, $mr) => {
    return 0;
};
function ju_BitSet() {
    let a = this; jl_Object.call(a);
    a.$data = null;
    a.$length2 = 0;
}
let ju_BitSet__init_ = $this => {
    $this.$data = $rt_createIntArray(2);
},
ju_BitSet__init_0 = () => {
    let var_0 = new ju_BitSet();
    ju_BitSet__init_(var_0);
    return var_0;
},
ju_BitSet_set0 = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    if ($bitIndex >= $this.$length2) {
        ju_BitSet_ensureCapacity($this, $index + 1 | 0);
        $this.$length2 = $bitIndex + 1 | 0;
    }
    var$4 = $this.$data.data;
    var$4[$index] = var$4[$index] | 1 << ($bitIndex % 32 | 0);
},
ju_BitSet_set = ($this, $fromIndex, $toIndex) => {
    let $fromDataIndex, $toDataIndex, var$5, $i, var$7;
    if ($fromIndex >= 0) {
        $fromDataIndex = $rt_compare($fromIndex, $toIndex);
        if ($fromDataIndex <= 0) {
            if (!$fromDataIndex)
                return;
            $fromDataIndex = $fromIndex / 32 | 0;
            $toDataIndex = $toIndex / 32 | 0;
            if ($toIndex > $this.$length2) {
                ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
                $this.$length2 = $toIndex;
            }
            if ($fromDataIndex == $toDataIndex) {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
            } else {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
                $i = $fromDataIndex + 1 | 0;
                while ($i < $toDataIndex) {
                    $this.$data.data[$i] = (-1);
                    $i = $i + 1 | 0;
                }
                if ($toIndex & 31) {
                    var$5 = $this.$data.data;
                    var$5[$toDataIndex] = var$5[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
                }
            }
            return;
        }
    }
    var$7 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$7);
    $rt_throw(var$7);
},
ju_BitSet_trailingZeroBits = ($this, $num) => {
    return (-1) << ($num % 32 | 0);
},
ju_BitSet_trailingOneBits = ($this, $num) => {
    $num = $num % 32 | 0;
    return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
},
ju_BitSet_clear = ($this, $bitIndex) => {
    let var$2, $index, var$4, var$5, var$6;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    if ($index < var$4.length) {
        var$5 = var$4[$index];
        var$6 = ($bitIndex % 32 | 0) & 31;
        var$4[$index] = var$5 & ((-2) << var$6 | ((-2) >>> (32 - var$6 | 0) | 0));
        if ($bitIndex == ($this.$length2 - 1 | 0))
            ju_BitSet_recalculateLength($this);
    }
},
ju_BitSet_get = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    return $index < var$4.length && var$4[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
},
ju_BitSet_nextSetBit = ($this, $fromIndex) => {
    let var$2, $top, $index, var$5, $i;
    if ($fromIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $top = $this.$length2;
    if ($fromIndex >= $top)
        return (-1);
    $index = $fromIndex / 32 | 0;
    var$5 = $this.$data.data;
    $i = var$5[$index] >>> ($fromIndex % 32 | 0) | 0;
    if ($i)
        return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
    $top = ($top + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if (var$5[$i])
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$5[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
ju_BitSet_ensureCapacity = ($this, $capacity) => {
    let $newArrayLength, var$3, var$4, var$5;
    $newArrayLength = $this.$data.data.length;
    if ($newArrayLength >= $capacity)
        return;
    $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
    var$3 = $this.$data.data;
    var$4 = $rt_createIntArray($newArrayLength);
    var$5 = var$4.data;
    $capacity = jl_Math_min($newArrayLength, var$3.length);
    $newArrayLength = 0;
    while ($newArrayLength < $capacity) {
        var$5[$newArrayLength] = var$3[$newArrayLength];
        $newArrayLength = $newArrayLength + 1 | 0;
    }
    $this.$data = var$4;
},
ju_BitSet_recalculateLength = $this => {
    let $top, $i, $sz;
    $top = ($this.$length2 + 31 | 0) / 32 | 0;
    $this.$length2 = $top * 32 | 0;
    $i = $top - 1 | 0;
    a: {
        while (true) {
            if ($i < 0)
                break a;
            $sz = jl_Integer_numberOfLeadingZeros($this.$data.data[$i]);
            if ($sz < 32)
                break;
            $i = $i + (-1) | 0;
            $this.$length2 = $this.$length2 - 32 | 0;
        }
        $this.$length2 = $this.$length2 - $sz | 0;
    }
},
ju_BitSet_and = ($this, $set) => {
    let $i, $i_0, var$4, var$5;
    $i = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i_0 = 0;
    while ($i_0 < $i) {
        var$4 = $this.$data.data;
        var$4[$i_0] = var$4[$i_0] & $set.$data.data[$i_0];
        $i_0 = $i_0 + 1 | 0;
    }
    while (true) {
        var$5 = $this.$data.data;
        if ($i >= var$5.length)
            break;
        var$5[$i] = 0;
        $i = $i + 1 | 0;
    }
    $this.$length2 = jl_Math_min($this.$length2, $set.$length2);
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_andNot = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] & ($set.$data.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_or = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length2, $set.$length2);
    $this.$length2 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] | $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
},
ju_BitSet_xor = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length2, $set.$length2);
    $this.$length2 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] ^ $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_isEmpty = $this => {
    return $this.$length2 ? 0 : 1;
};
function jur_LowHighSurrogateRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$surrChars = null;
    a.$alt3 = 0;
}
let jur_LowHighSurrogateRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt3 ? $rt_s(398) : $rt_s(399);
    var$2 = $this.$surrChars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(400));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_CompositeRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$withoutSurrogates = null;
    a.$withSurrogates = null;
}
let jur_CompositeRangeSet__init_0 = ($this, $withoutSurrogates, $withSurrogates) => {
    jur_AbstractSet__init_($this);
    $this.$withoutSurrogates = $withoutSurrogates;
    $this.$withSurrogates = $withSurrogates;
},
jur_CompositeRangeSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_CompositeRangeSet();
    jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_CompositeRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift, var$5, var$6, var$7, var$8, var$9;
    $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        a: {
            var$5 = $this.$withSurrogates;
            var$6 = $matchResult.$leftBound;
            $shift = $matchResult.$rightBound;
            var$7 = $stringIndex + 1 | 0;
            $shift = $rt_compare(var$7, $shift);
            if ($shift > 0) {
                $matchResult.$hitEnd = 1;
                $shift = (-1);
            } else {
                var$8 = $testString;
                var$9 = jl_String_charAt(var$8, $stringIndex);
                if (!var$5.$surrChars.$contains(var$9))
                    $shift = (-1);
                else {
                    if (jl_Character_isHighSurrogate(var$9)) {
                        if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$8, var$7))) {
                            $shift = (-1);
                            break a;
                        }
                    } else if (jl_Character_isLowSurrogate(var$9) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt(var$8, $stringIndex - 1 | 0))) {
                        $shift = (-1);
                        break a;
                    }
                    $shift = var$5.$next1.$matches(var$7, $testString, $matchResult);
                }
            }
        }
    if ($shift >= 0)
        return $shift;
    return (-1);
},
jur_CompositeRangeSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
    $this.$withSurrogates.$next1 = $next;
    $this.$withoutSurrogates.$setNext($next);
},
jur_CompositeRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_String_valueOf($this.$withoutSurrogates);
    var$2 = jl_String_valueOf($this.$withSurrogates);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(401));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, $rt_s(402));
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_CompositeRangeSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_CompositeRangeSet_first = ($this, $set) => {
    return 1;
};
function jur_SupplRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$chars0 = null;
    a.$alt0 = 0;
}
let jur_SupplRangeSet__init_ = ($this, $cc) => {
    jur_AbstractSet__init_($this);
    $this.$chars0 = $cc.$getInstance0();
    $this.$alt0 = $cc.$alt;
},
jur_SupplRangeSet__init_0 = var_0 => {
    let var_1 = new jur_SupplRangeSet();
    jur_SupplRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_SupplRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $low, var$6, $high, $offset;
    $strLength = $matchResult.$rightBound;
    if ($stringIndex < $strLength) {
        $low = $stringIndex + 1 | 0;
        var$6 = $testString;
        $high = jl_String_charAt(var$6, $stringIndex);
        if ($this.$contains($high)) {
            $offset = $this.$next1.$matches($low, $testString, $matchResult);
            if ($offset > 0)
                return $offset;
        }
        if ($low < $strLength) {
            $stringIndex = $low + 1 | 0;
            $low = jl_String_charAt(var$6, $low);
            if (jl_Character_isSurrogatePair($high, $low) && $this.$contains(jl_Character_toCodePoint($high, $low)))
                return $this.$next1.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return (-1);
},
jur_SupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(398) : $rt_s(399);
    var$2 = $this.$chars0.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(400));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars0.$contains($ch);
},
jur_SupplRangeSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $this.$chars0.$contains($set.$ch1);
    if ($set instanceof jur_CharSet)
        return $this.$chars0.$contains($set.$ch0);
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars0);
    if (!($set instanceof jur_RangeSet))
        return 1;
    return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars1);
},
jur_SupplRangeSet_getChars = $this => {
    return $this.$chars0;
},
jur_SupplRangeSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_SupplRangeSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet),
jur_UCISupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars0.$contains(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
},
jur_UCISupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(398) : $rt_s(399);
    var$2 = $this.$chars0.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(403));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_UCIRangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars2 = null;
    a.$alt1 = 0;
}
let jur_UCIRangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars2 = $cc.$getInstance0();
    $this.$alt1 = $cc.$alt;
},
jur_UCIRangeSet__init_ = var_0 => {
    let var_1 = new jur_UCIRangeSet();
    jur_UCIRangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCIRangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars2.$contains(jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
},
jur_UCIRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt1 ? $rt_s(398) : $rt_s(399);
    var$2 = $this.$chars2.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(403));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_RangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars1 = null;
    a.$alt2 = 0;
}
let jur_RangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars1 = $cc.$getInstance0();
    $this.$alt2 = $cc.$alt;
},
jur_RangeSet__init_ = var_0 => {
    let var_1 = new jur_RangeSet();
    jur_RangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_RangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars1.$contains(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
},
jur_RangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt2 ? $rt_s(398) : $rt_s(399);
    var$2 = $this.$chars1.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(400));
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_RangeSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $this.$chars1.$contains($set.$ch0);
    if ($set instanceof jur_RangeSet)
        return jur_AbstractCharClass_intersects($this.$chars1, $set.$chars1);
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_AbstractCharClass_intersects($this.$chars1, $set.$chars0);
};
function jur_HangulDecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$decomposedChar = null;
    a.$decomposedCharUTF160 = null;
    a.$decomposedCharLength = 0;
}
let jur_HangulDecomposedCharSet__init_0 = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$decomposedChar = $decomposedChar;
    $this.$decomposedCharLength = $decomposedCharLength;
},
jur_HangulDecomposedCharSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_HangulDecomposedCharSet();
    jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_HangulDecomposedCharSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_HangulDecomposedCharSet_getDecomposedChar = $this => {
    if ($this.$decomposedCharUTF160 === null)
        $this.$decomposedCharUTF160 = jl_String__init_0($this.$decomposedChar);
    return $this.$decomposedCharUTF160;
},
jur_HangulDecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_HangulDecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(404));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HangulDecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, var$9, $curSymb, $i, var$12, $lIndex, $decompCurSymb, var$15, $syllIndex;
    $rightBound = $matchResult.$rightBound;
    $decompSyllable = $rt_createIntArray(3);
    $vIndex = (-1);
    $tIndex = (-1);
    if ($strIndex >= $rightBound)
        return (-1);
    var$8 = $strIndex + 1 | 0;
    var$9 = $testString;
    $curSymb = jl_String_charAt(var$9, $strIndex);
    $i = $curSymb - 44032 | 0;
    if ($i >= 0 && $i < 11172) {
        var$12 = 4352 + ($i / 588 | 0) | 0;
        $lIndex = 4449 + (($i % 588 | 0) / 28 | 0) | 0;
        $strIndex = $i % 28 | 0;
        $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([var$12, $lIndex]) : $rt_createIntArrayFromData([var$12, $lIndex, 4519 + $strIndex | 0]);
    } else
        $decompCurSymb = null;
    if ($decompCurSymb !== null) {
        var$15 = $decompCurSymb.data;
        $i = 0;
        $strIndex = var$15.length;
        $syllIndex = $this.$decomposedCharLength;
        if ($strIndex != $syllIndex)
            return (-1);
        while (true) {
            if ($i >= $syllIndex)
                return $this.$next1.$matches(var$8, $testString, $matchResult);
            if (var$15[$i] != $this.$decomposedChar.data[$i])
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    $decompSyllable = $decompSyllable.data;
    $decompSyllable[0] = $curSymb;
    $lIndex = $curSymb - 4352 | 0;
    if ($lIndex >= 0 && $lIndex < 19) {
        if (var$8 < $rightBound) {
            $curSymb = jl_String_charAt(var$9, var$8);
            $vIndex = $curSymb - 4449 | 0;
        }
        if ($vIndex >= 0 && $vIndex < 21) {
            $lIndex = var$8 + 1 | 0;
            $decompSyllable[1] = $curSymb;
            if ($lIndex < $rightBound) {
                $curSymb = jl_String_charAt(var$9, $lIndex);
                $tIndex = $curSymb - 4519 | 0;
            }
            if ($tIndex >= 0 && $tIndex < 28) {
                a: {
                    $strIndex = $lIndex + 1 | 0;
                    $decompSyllable[2] = $curSymb;
                    if ($this.$decomposedCharLength == 3) {
                        $lIndex = $decompSyllable[0];
                        var$15 = $this.$decomposedChar.data;
                        if ($lIndex == var$15[0] && $decompSyllable[1] == var$15[1] && $decompSyllable[2] == var$15[2]) {
                            $strIndex = $this.$next1.$matches($strIndex, $testString, $matchResult);
                            break a;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            b: {
                if ($this.$decomposedCharLength == 2) {
                    $syllIndex = $decompSyllable[0];
                    var$15 = $this.$decomposedChar.data;
                    if ($syllIndex == var$15[0] && $decompSyllable[1] == var$15[1]) {
                        $strIndex = $this.$next1.$matches($lIndex, $testString, $matchResult);
                        break b;
                    }
                }
                $strIndex = (-1);
            }
            return $strIndex;
        }
        return (-1);
    }
    return (-1);
},
jur_HangulDecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_HangulDecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_CharSet() {
    jur_LeafSet.call(this);
    this.$ch0 = 0;
}
let jur_CharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch0 = $ch;
},
jur_CharSet__init_ = var_0 => {
    let var_1 = new jur_CharSet();
    jur_CharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CharSet_charCount = $this => {
    return 1;
},
jur_CharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch0 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$ch0, $strIndex);
        if (var$6 < 0)
            return (-1);
        var$7 = $this.$next1;
        $strIndex = var$6 + 1 | 0;
        if (var$7.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_CharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_String_lastIndexOf0($testStr, $this.$ch0, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if ($this.$next1.$matches(var$6 + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_CharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch0;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append2(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != $this.$ch0 ? 0 : 1;
    if (!($set instanceof jur_RangeSet)) {
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains($this.$ch0);
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch0)) <= 0 ? 0 : 1;
};
function jur_UCICharSet() {
    jur_LeafSet.call(this);
    this.$ch4 = 0;
}
let jur_UCICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch4 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
},
jur_UCICharSet__init_ = var_0 => {
    let var_1 = new jur_UCICharSet();
    jur_UCICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch4 != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
},
jur_UCICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(405));
    jl_AbstractStringBuilder_append2(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CICharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$ch3 = 0;
    a.$supplement = 0;
}
let jur_CICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch3 = $ch;
    $this.$supplement = jur_Pattern_getSupplement($ch);
},
jur_CICharSet__init_ = var_0 => {
    let var_1 = new jur_CICharSet();
    jur_CICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CICharSet_accepts = ($this, $strIndex, $testString) => {
    let var$3;
    var$3 = $this.$ch3;
    $testString = $testString;
    return var$3 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch3;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(406));
    jl_AbstractStringBuilder_append2(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_DecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$readCharsForCodePoint = 0;
    a.$decomposedCharUTF16 = null;
    a.$decomposedChar0 = null;
    a.$decomposedCharLength0 = 0;
}
let jur_DecomposedCharSet__init_ = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$readCharsForCodePoint = 1;
    $this.$decomposedChar0 = $decomposedChar;
    $this.$decomposedCharLength0 = $decomposedCharLength;
},
jur_DecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_DecomposedCharSet();
    jur_DecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_DecomposedCharSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_DecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
    $decCodePoint = $rt_createIntArray(4);
    $rightBound = $matchResult.$rightBound;
    if ($strIndex >= $rightBound)
        return (-1);
    $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
    var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
    $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
    if ($decCurCodePoint === null) {
        $decCurCodePoint = $decCodePoint.data;
        $strIndex = 1;
        $decCurCodePoint[0] = $curChar;
    } else {
        $strIndex = $decCurCodePoint.data.length;
        jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
        $strIndex = 0 + $strIndex | 0;
    }
    a: {
        if (var$7 < $rightBound) {
            var$9 = $decCodePoint.data;
            $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
            while ($strIndex < 4) {
                if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                    var$10 = $strIndex + 1 | 0;
                    var$9[$strIndex] = $curChar;
                } else {
                    $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                    if ($decCurCodePoint.length != 2) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                    } else {
                        $readCodePoints = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                        var$10 = $readCodePoints + 1 | 0;
                        var$9[$readCodePoints] = $decCurCodePoint[1];
                    }
                }
                var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                if (var$7 >= $rightBound) {
                    $strIndex = var$10;
                    break a;
                }
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                $strIndex = var$10;
            }
        }
    }
    if ($strIndex != $this.$decomposedCharLength0)
        return (-1);
    $decCurCodePoint = $decCodePoint.data;
    $curChar = 0;
    while (true) {
        if ($curChar >= $strIndex)
            return $this.$next1.$matches(var$7, $testString, $matchResult);
        if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
            break;
        $curChar = $curChar + 1 | 0;
    }
    return (-1);
},
jur_DecomposedCharSet_getDecomposedChar = $this => {
    let $strBuff, $i;
    if ($this.$decomposedCharUTF16 === null) {
        $strBuff = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($strBuff);
        $i = 0;
        while ($i < $this.$decomposedCharLength0) {
            jl_AbstractStringBuilder_append3($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
            $i = $i + 1 | 0;
        }
        $this.$decomposedCharUTF16 = jl_AbstractStringBuilder_toString($strBuff);
    }
    return $this.$decomposedCharUTF16;
},
jur_DecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_DecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(407));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_DecomposedCharSet_codePointAt = ($this, $strIndex, $testString, $rightBound) => {
    let $curChar, $low, $curCodePointUTF16;
    $this.$readCharsForCodePoint = 1;
    if ($strIndex >= ($rightBound - 1 | 0))
        $curChar = jl_String_charAt($testString, $strIndex);
    else {
        $rightBound = $strIndex + 1 | 0;
        $testString = $testString;
        $curChar = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $rightBound);
        if (jl_Character_isSurrogatePair($curChar, $low)) {
            $curCodePointUTF16 = $rt_createCharArray(2).data;
            $curCodePointUTF16[0] = $curChar;
            $curCodePointUTF16[1] = $low;
            $rightBound = $curCodePointUTF16.length;
            if (0 < $rightBound && $rightBound <= $rightBound) {
                $curChar = 0 < ($rightBound - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            } else {
                $testString = new jl_IndexOutOfBoundsException;
                jl_Throwable__init_($testString);
                $rt_throw($testString);
            }
        }
    }
    return $curChar;
},
jur_DecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_DecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PossessiveGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $stringIndex_0;
    while (true) {
        $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($stringIndex_0 <= 0)
            break;
        $stringIndex = $stringIndex_0;
    }
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PosPlusGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        return (-1);
    if ($nextIndex > $stringIndex) {
        while (true) {
            $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
            if ($stringIndex <= $nextIndex)
                break;
            $nextIndex = $stringIndex;
        }
        $stringIndex = $nextIndex;
    }
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_AltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
    $this.$innerSet.$setNext($next);
},
jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_PosAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex <= 0)
        $nextIndex = $stringIndex;
    return $this.$next1.$matches($nextIndex, $testString, $matchResult);
},
jur_PosAltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
};
function jur_CompositeGroupQuantifierSet() {
    let a = this; jur_GroupQuantifierSet.call(a);
    a.$quantifier = null;
    a.$setCounter = 0;
}
let jur_CompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier = $quant;
    $this.$setCounter = $setCounter;
},
jur_CompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_CompositeGroupQuantifierSet();
    jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_CompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier.$max1)
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + 1 | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $nextIndex;
    }
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + (-1) | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    if ($enterCounter >= $this.$quantifier.$min1)
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
    return (-1);
},
jur_CompositeGroupQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier);
},
jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_PosCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $counter, $max, $nextIndex;
    $counter = 0;
    $max = $this.$quantifier.$max1;
    a: {
        while (true) {
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex <= $stringIndex)
                break a;
            if ($counter >= $max)
                break;
            $counter = $counter + 1 | 0;
            $stringIndex = $nextIndex;
        }
    }
    if ($nextIndex < 0 && $counter < $this.$quantifier.$min1)
        return (-1);
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_ReluctantGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    $res = $this.$next1.$matches($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        return $res;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_RelAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$next1.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    return $nextIndex;
},
jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_RelCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, var$5, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    var$5 = $this.$quantifier;
    if ($enterCounter >= var$5.$max1) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    }
    if ($enterCounter < var$5.$min1) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    } else {
        $nextIndex = $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    return $nextIndex;
},
jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_DotAllQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($strLength > $stringIndex)
        return $this.$next1.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_DotAllQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($this.$next1.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
        return $stringIndex;
    return (-1);
},
jur_DotAllQuantifierSet_getName = $this => {
    return $rt_s(408);
};
function jur_DotQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$lt = null;
}
let jur_DotQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startSearch;
    $strLength = $matchResult.$rightBound;
    $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
    if ($startSearch >= 0)
        $strLength = $startSearch;
    if ($strLength > $stringIndex)
        return $this.$next1.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_DotQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $res, $nextSearch, $leftBound;
    $strLength = $matchResult.$rightBound;
    $res = $this.$next1.$find0($stringIndex, $testString, $matchResult);
    if ($res < 0)
        return (-1);
    $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
    if ($nextSearch >= 0)
        $strLength = $nextSearch;
    $strLength = jl_Math_max($res, $this.$next1.$findBack($res, $strLength, $testString, $matchResult));
    if ($strLength <= 0)
        $leftBound = $strLength ? (-1) : 0;
    else {
        $leftBound = $strLength - 1 | 0;
        $matchResult = $testString;
        a: {
            while (true) {
                if ($leftBound < $stringIndex) {
                    $leftBound = (-1);
                    break a;
                }
                if ($this.$lt.$isLineTerminator(jl_String_charAt($matchResult, $leftBound)))
                    break;
                $leftBound = $leftBound + (-1) | 0;
            }
        }
    }
    if ($leftBound >= $stringIndex)
        $stringIndex = $leftBound >= $strLength ? $leftBound : $leftBound + 1 | 0;
    return $stringIndex;
},
jur_DotQuantifierSet_findLineTerminator = ($this, $i, $to, $testString) => {
    let var$4;
    var$4 = $testString;
    while (true) {
        if ($i >= $to)
            return (-1);
        if ($this.$lt.$isLineTerminator(jl_String_charAt(var$4, $i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jur_DotQuantifierSet_getName = $this => {
    return $rt_s(409);
},
jur_AbstractLineTerminator = $rt_classWithoutFields(),
jur_AbstractLineTerminator_unixLT = null,
jur_AbstractLineTerminator_unicodeLT = null,
jur_AbstractLineTerminator_getInstance = $flag => {
    let var$2;
    if (!($flag & 1)) {
        var$2 = jur_AbstractLineTerminator_unicodeLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$2;
        jur_AbstractLineTerminator_unicodeLT = var$2;
        return var$2;
    }
    var$2 = jur_AbstractLineTerminator_unixLT;
    if (var$2 !== null)
        return var$2;
    var$2 = new jur_AbstractLineTerminator$1;
    jur_AbstractLineTerminator_unixLT = var$2;
    return var$2;
},
jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_PossessiveQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    a: {
        while (true) {
            if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                break a;
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 < 1)
                break;
            $stringIndex = $stringIndex + var$4 | 0;
        }
    }
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_PossessiveAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
        var$4 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$4 >= 1)
            $stringIndex = $stringIndex + var$4 | 0;
    }
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_PossessiveCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            return $this.$next1.$matches($stringIndex, $testString, $matchResult);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_ReluctantQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    while (true) {
        var$4 = $this.$next1.$matches($stringIndex, $testString, $matchResult);
        if (var$4 >= 0)
            break;
        if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            $stringIndex = $stringIndex + var$4 | 0;
        }
        if (var$4 < 1)
            return (-1);
    }
    return var$4;
},
jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_ReluctantAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$next1.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_ReluctantCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, var$8, var$9;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    var$8 = $this.$next1.$matches($stringIndex, $testString, $matchResult);
                    if (var$8 >= 0)
                        break;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
                        var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                        $stringIndex = $stringIndex + var$8 | 0;
                        $i = $i + 1 | 0;
                    }
                    if (var$8 < 1)
                        break a;
                    if ($i > $max)
                        break a;
                }
                return var$8;
            }
            return (-1);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        var$9 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$9 < 1)
            break;
        $stringIndex = $stringIndex + var$9 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet),
jur_SOLSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_SOLSet__init_0 = () => {
    let var_0 = new jur_SOLSet();
    jur_SOLSet__init_(var_0);
    return var_0;
},
jur_SOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound))
        return (-1);
    return $this.$next1.$matches($strIndex, $testString, $matchResult);
},
jur_SOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_SOLSet_getName = $this => {
    return $rt_s(410);
};
function jur_WordBoundary() {
    jur_AbstractSet.call(this);
    this.$positive = 0;
}
let jur_WordBoundary__init_0 = ($this, $positive) => {
    jur_AbstractSet__init_($this);
    $this.$positive = $positive;
},
jur_WordBoundary__init_ = var_0 => {
    let var_1 = new jur_WordBoundary();
    jur_WordBoundary__init_0(var_1, var_0);
    return var_1;
},
jur_WordBoundary_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $ch1, $ch2, $left, $leftBound;
    $ch1 = $stringIndex >= $matchResult.$rightBound ? 32 : jl_String_charAt($testString, $stringIndex);
    if (!$stringIndex)
        $ch2 = 32;
    else {
        $left = $stringIndex - 1 | 0;
        $ch2 = jl_String_charAt($testString, $left);
    }
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_WordBoundary_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_WordBoundary_getName = $this => {
    return $rt_s(411);
},
jur_WordBoundary_isSpace = ($this, $ch, $index, $leftBound, $testString) => {
    if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
        a: {
            if (jl_Character_getType($ch) == 6) {
                $testString = $testString;
                while (true) {
                    $index = $index + (-1) | 0;
                    if ($index < $leftBound)
                        break a;
                    $ch = jl_String_charAt($testString, $index);
                    if (jl_Character_isLetterOrDigit($ch))
                        return 0;
                    if (jl_Character_getType($ch) != 6)
                        return 1;
                }
            }
        }
        return 1;
    }
    return 0;
},
jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet),
jur_PreviousMatch__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_PreviousMatch__init_0 = () => {
    let var_0 = new jur_PreviousMatch();
    jur_PreviousMatch__init_(var_0);
    return var_0;
},
jur_PreviousMatch_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex != $matchResult.$previousMatch)
        return (-1);
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_PreviousMatch_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PreviousMatch_getName = $this => {
    return $rt_s(412);
};
function jur_EOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter0 = 0;
}
let jur_EOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter0 = $counter;
},
jur_EOLSet__init_0 = var_0 => {
    let var_1 = new jur_EOLSet();
    jur_EOLSet__init_(var_1, var_0);
    return var_1;
},
jur_EOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, var$5, var$6, $ch;
    $rightBound = $matchResult.$anchoringBounds ? $matchResult.$rightBound : $testString.$nativeString.length;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
        return $this.$next1.$matches($strIndex, $testString, $matchResult);
    }
    var$5 = $rightBound - $strIndex | 0;
    if (var$5 == 2) {
        var$6 = $testString;
        if (jl_String_charAt(var$6, $strIndex) == 13 && jl_String_charAt(var$6, $strIndex + 1 | 0) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
            return $this.$next1.$matches($strIndex, $testString, $matchResult);
        }
    }
    a: {
        if (var$5 == 1) {
            $ch = jl_String_charAt($testString, $strIndex);
            if ($ch == 10)
                break a;
            if ($ch == 13)
                break a;
            if ($ch == 133)
                break a;
            if (($ch | 1) == 8233)
                break a;
        }
        return (-1);
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
    return $this.$next1.$matches($strIndex, $testString, $matchResult);
},
jur_EOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
    return $res;
},
jur_EOLSet_getName = $this => {
    return $rt_s(413);
},
jur_EOISet = $rt_classWithoutFields(jur_AbstractSet),
jur_EOISet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_EOISet__init_0 = () => {
    let var_0 = new jur_EOISet();
    jur_EOISet__init_(var_0);
    return var_0;
},
jur_EOISet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex < (!$matchResult.$transparentBounds ? $matchResult.$rightBound : $testString.$nativeString.length))
        return (-1);
    $matchResult.$hitEnd = 1;
    $matchResult.$requireEnd = 1;
    return $this.$next1.$matches($stringIndex, $testString, $matchResult);
},
jur_EOISet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_EOISet_getName = $this => {
    return $rt_s(414);
};
function jur_MultiLineSOLSet() {
    jur_AbstractSet.call(this);
    this.$lt1 = null;
}
let jur_MultiLineSOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let var$4, var$5, var$6;
    a: {
        if ($strIndex != $matchResult.$rightBound) {
            if (!$strIndex)
                break a;
            if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound)
                break a;
            var$4 = $this.$lt1;
            var$5 = $strIndex - 1 | 0;
            var$6 = $testString;
            if (var$4.$isAfterLineTerminator(jl_String_charAt(var$6, var$5), jl_String_charAt(var$6, $strIndex)))
                break a;
        }
        return (-1);
    }
    return $this.$next1.$matches($strIndex, $testString, $matchResult);
},
jur_MultiLineSOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_MultiLineSOLSet_getName = $this => {
    return $rt_s(415);
},
jur_DotAllSet = $rt_classWithoutFields(jur_JointSet),
jur_DotAllSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_DotAllSet__init_0 = () => {
    let var_0 = new jur_DotAllSet();
    jur_DotAllSet__init_(var_0);
    return var_0;
},
jur_DotAllSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, $high;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$6 = $testString;
    $high = jl_String_charAt(var$6, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt(var$6, var$5)))
            return $this.$next1.$matches($stringIndex, $testString, $matchResult);
    }
    return $this.$next1.$matches(var$5, $testString, $matchResult);
},
jur_DotAllSet_getName = $this => {
    return $rt_s(416);
},
jur_DotAllSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_DotAllSet_getType = $this => {
    return (-2147483602);
},
jur_DotAllSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_DotSet() {
    jur_JointSet.call(this);
    this.$lt0 = null;
}
let jur_DotSet__init_ = ($this, $lt) => {
    jur_AbstractSet__init_($this);
    $this.$lt0 = $lt;
},
jur_DotSet__init_0 = var_0 => {
    let var_1 = new jur_DotSet();
    jur_DotSet__init_(var_1, var_0);
    return var_1;
},
jur_DotSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, $high, $low;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$6 = $testString;
    $high = jl_String_charAt(var$6, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength) {
            $low = jl_String_charAt(var$6, var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$lt0.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next1.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return $this.$lt0.$isLineTerminator($high) ? (-1) : $this.$next1.$matches(var$5, $testString, $matchResult);
},
jur_DotSet_getName = $this => {
    return $rt_s(168);
},
jur_DotSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_DotSet_getType = $this => {
    return (-2147483602);
},
jur_DotSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_UEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter3 = 0;
}
let jur_UEOLSet__init_0 = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter3 = $counter;
},
jur_UEOLSet__init_ = var_0 => {
    let var_1 = new jur_UEOLSet();
    jur_UEOLSet__init_0(var_1, var_0);
    return var_1;
},
jur_UEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound;
    $rightBound = $matchResult.$anchoringBounds ? $matchResult.$rightBound : $testString.$nativeString.length;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 0);
        return $this.$next1.$matches($strIndex, $testString, $matchResult);
    }
    if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 1);
        return $this.$next1.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_UEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
    return $res;
},
jur_UEOLSet_getName = $this => {
    return $rt_s(413);
};
function jur_UMultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter2 = 0;
}
let jur_UMultiLineEOLSet__init_0 = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter2 = $counter;
},
jur_UMultiLineEOLSet__init_ = var_0 => {
    let var_1 = new jur_UMultiLineEOLSet();
    jur_UMultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
},
jur_UMultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if (($matchResult.$anchoringBounds ? $matchResult.$rightBound - $strIndex | 0 : $testString.$nativeString.length - $strIndex | 0) <= 0) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
        return $this.$next1.$matches($strIndex, $testString, $matchResult);
    }
    if (jl_String_charAt($testString, $strIndex) != 10)
        return (-1);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 1);
    return $this.$next1.$matches($strIndex + 1 | 0, $testString, $matchResult);
},
jur_UMultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
    return $res;
},
jur_UMultiLineEOLSet_getName = $this => {
    return $rt_s(417);
};
function jur_MultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter = 0;
}
let jur_MultiLineEOLSet__init_0 = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter = $counter;
},
jur_MultiLineEOLSet__init_ = var_0 => {
    let var_1 = new jur_MultiLineEOLSet();
    jur_MultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
},
jur_MultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $strDif, $ch1, $ch2, var$7;
    $strDif = $matchResult.$anchoringBounds ? $matchResult.$rightBound - $strIndex | 0 : $testString.$nativeString.length - $strIndex | 0;
    if (!$strDif) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next1.$matches($strIndex, $testString, $matchResult);
    }
    if ($strDif < 2) {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = 97;
    } else {
        var$7 = $testString;
        $ch1 = jl_String_charAt(var$7, $strIndex);
        $ch2 = jl_String_charAt(var$7, $strIndex + 1 | 0);
    }
    switch ($ch1) {
        case 10:
        case 133:
        case 8232:
        case 8233:
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next1.$matches($strIndex, $testString, $matchResult);
        case 13:
            if ($ch2 != 10) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
                return $this.$next1.$matches($strIndex, $testString, $matchResult);
            }
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next1.$matches($strIndex, $testString, $matchResult);
        default:
    }
    return (-1);
},
jur_MultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
    return $res;
},
jur_MultiLineEOLSet_getName = $this => {
    return $rt_s(418);
};
function jur_CIBackReferenceSet() {
    let a = this; jur_JointSet.call(a);
    a.$referencedGroup = 0;
    a.$consCounter1 = 0;
}
let jur_CIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_AbstractSet__init_($this);
    $this.$referencedGroup = $groupIndex;
    $this.$consCounter1 = $consCounter;
},
jur_CIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CIBackReferenceSet();
    jur_CIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6, var$7, var$8;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        var$6 = $testString;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next1.$matches($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            var$7 = jl_String_charAt($group, $i);
            var$8 = $stringIndex + $i | 0;
            if (var$7 != jl_String_charAt(var$6, var$8) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt(var$6, var$8))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_CIBackReferenceSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_CIBackReferenceSet_getString = ($this, $matchResult) => {
    let var$2, var$3;
    var$2 = $this.$referencedGroup;
    var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
    var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
    return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= $matchResult.$string5.$nativeString.length ? jl_String_substring($matchResult.$string5, var$3, var$2) : null;
},
jur_CIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(419));
    jl_AbstractStringBuilder_append1(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CIBackReferenceSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
    return $res;
},
jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet),
jur_BackReferenceSet__init_0 = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_BackReferenceSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_BackReferenceSet();
    jur_BackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_BackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $shift;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $shift = !jl_String_startsWith0($testString, $group, $stringIndex) ? (-1) : $group.$nativeString.length;
        if ($shift < 0)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $shift);
        return $this.$next1.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_BackReferenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $group, $strLength, $testStr;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    $strLength = $matchResult.$leftBound;
    if ($group !== null && ($strIndex + $group.$nativeString.length | 0) <= $strLength) {
        $testStr = $testString;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            $strIndex = jl_String_indexOf1($testStr, $group, $strIndex);
            if ($strIndex < 0)
                return (-1);
            if ($this.$next1.$matches($strIndex + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    return (-1);
},
jur_BackReferenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $group, $testStr, var$7;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group === null)
        return (-1);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = jl_String_lastIndexOf1($testStr, $group, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if ($this.$next1.$matches(var$7 + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_BackReferenceSet_first = ($this, $set) => {
    return 1;
},
jur_BackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(420));
    jl_AbstractStringBuilder_append1(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCIBackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
    this.$groupIndex1 = 0;
}
let jur_UCIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_UCIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_UCIBackReferenceSet();
    jur_UCIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_UCIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        var$6 = $testString;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next1.$matches($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            if (jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt(var$6, $stringIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_UCIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(421));
    jl_AbstractStringBuilder_append1(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuffer__init_ = $this => {
    jl_AbstractStringBuilder__init_($this);
},
jl_StringBuffer__init_0 = () => {
    let var_0 = new jl_StringBuffer();
    jl_StringBuffer__init_(var_0);
    return var_0;
},
jl_StringBuffer_append = ($this, $s) => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    var$2 = 0;
    $s = $s;
    var$3 = $s.$nativeString.length;
    var$4 = $this;
    var$5 = var$4.$length1;
    var$4 = var$4;
    if (var$2 <= var$3 && var$3 <= $s.$nativeString.length) {
        jl_AbstractStringBuilder_insertSpace(var$4, var$5, (var$5 + var$3 | 0) - var$2 | 0);
        while (var$2 < var$3) {
            var$6 = var$4.$buffer.data;
            var$7 = var$5 + 1 | 0;
            var$6[var$5] = jl_String_charAt($s, var$2);
            var$2 = var$2 + 1 | 0;
            var$5 = var$7;
        }
        return $this;
    }
    $s = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($s);
    $rt_throw($s);
},
jl_StringBuffer_insert = ($this, $index, $value) => {
    jl_AbstractStringBuilder_insert3($this, $index, $value, 10);
    return $this;
},
jl_StringBuffer_substring = ($this, var$1, var$2) => {
    return jl_AbstractStringBuilder_substring($this, var$1, var$2);
},
jl_StringBuffer_subSequence = ($this, var$1, var$2) => {
    return $this.$substring0(var$1, var$2);
},
jl_StringBuffer_insert0 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuffer_append0 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append4($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuffer_charAt = ($this, var$1) => {
    let var$2;
    if (var$1 >= 0 && var$1 < $this.$length1)
        return $this.$buffer.data[var$1];
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jl_StringBuffer_length = $this => {
    return $this.$length1;
},
jl_StringBuffer_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuffer_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuffer_insert3 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2);
    return $this;
},
jl_StringBuffer_insert2 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
},
jl_StringBuffer_insert1 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2);
    return $this;
};
function jur_SequenceSet() {
    let a = this; jur_LeafSet.call(a);
    a.$string0 = null;
    a.$leftToRight = null;
    a.$rightToLeft = null;
}
let jur_SequenceSet_accepts = ($this, $strIndex, $testString) => {
    return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount0;
},
jur_SequenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, var$7;
    $strLength = $matchResult.$rightBound;
    var$5 = $testString;
    while (true) {
        if ($strIndex > $strLength)
            return (-1);
        var$6 = jl_String_charAt($this.$string0, $this.$charCount0 - 1 | 0);
        a: {
            while (true) {
                var$7 = $this.$charCount0;
                if ($strIndex > ($strLength - var$7 | 0)) {
                    $strIndex = (-1);
                    break a;
                }
                var$7 = jl_String_charAt(var$5, ($strIndex + var$7 | 0) - 1 | 0);
                if (var$7 == var$6 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                    break;
                $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$7) | 0;
            }
        }
        if ($strIndex < 0)
            return (-1);
        if ($this.$next1.$matches($strIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $strIndex = $strIndex + 1 | 0;
    }
    return $strIndex;
},
jur_SequenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let var$5, var$6, var$7;
    var$5 = $testString;
    while (true) {
        if ($lastIndex < $strIndex)
            return (-1);
        var$6 = jl_String_charAt($this.$string0, 0);
        var$7 = (var$5.$nativeString.length - $lastIndex | 0) - $this.$charCount0 | 0;
        if (var$7 <= 0)
            $lastIndex = $lastIndex + var$7 | 0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex) {
                    $lastIndex = (-1);
                    break a;
                }
                var$7 = jl_String_charAt(var$5, $lastIndex);
                if (var$7 == var$6 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                    break;
                $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$7) | 0;
            }
        }
        if ($lastIndex < 0)
            return (-1);
        if ($this.$next1.$matches($lastIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $lastIndex = $lastIndex + (-1) | 0;
    }
    return $lastIndex;
},
jur_SequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string0;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(422));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_SequenceSet_first = ($this, $set) => {
    let var$2;
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != jl_String_charAt($this.$string0, 0) ? 0 : 1;
    if ($set instanceof jur_RangeSet)
        return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string0, 0, 1)) <= 0 ? 0 : 1;
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return $this.$string0.$nativeString.length > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1)) ? 1 : 0;
    }
    a: {
        b: {
            $set = $set;
            if (!$set.$contains(jl_String_charAt($this.$string0, 0))) {
                if ($this.$string0.$nativeString.length <= 1)
                    break b;
                if (!$set.$contains(jl_Character_toCodePoint(jl_String_charAt($this.$string0, 0), jl_String_charAt($this.$string0, 1))))
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    return var$2;
},
jur_SequenceSet_startsWith = ($this, $str, $from) => {
    let $i;
    $i = 0;
    $str = $str;
    while ($i < $this.$charCount0) {
        if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string0, $i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
};
function jur_UCISequenceSet() {
    jur_LeafSet.call(this);
    this.$string4 = null;
}
let jur_UCISequenceSet__init_ = ($this, $substring) => {
    let $res, $i;
    jur_LeafSet__init_($this);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $i = 0;
    while ($i < $substring.$length1) {
        jl_AbstractStringBuilder_append2($res, jl_Character_toLowerCase(jl_Character_toUpperCase(jl_StringBuffer_charAt($substring, $i))));
        $i = $i + 1 | 0;
    }
    $this.$string4 = jl_AbstractStringBuilder_toString($res);
    $this.$charCount0 = $res.$length1;
},
jur_UCISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_UCISequenceSet();
    jur_UCISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_UCISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4;
    $i = 0;
    var$4 = $testString;
    while (true) {
        if ($i >= $this.$string4.$nativeString.length)
            return $this.$string4.$nativeString.length;
        if (jl_String_charAt($this.$string4, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt(var$4, $strIndex + $i | 0))))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_UCISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(423));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CISequenceSet() {
    jur_LeafSet.call(this);
    this.$string3 = null;
}
let jur_CISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4, var$5;
    $i = 0;
    $testString = $testString;
    while (true) {
        if ($i >= $this.$string3.$nativeString.length)
            return $this.$string3.$nativeString.length;
        var$4 = jl_String_charAt($this.$string3, $i);
        var$5 = $strIndex + $i | 0;
        if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string3, $i)) != jl_String_charAt($testString, var$5))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string3;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(424));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCISupplCharSet() {
    jur_LeafSet.call(this);
    this.$ch2 = 0;
}
let jur_UCISupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $testString = $testString;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$ch2 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
},
jur_UCISupplCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jl_String__init_0(jl_Character_toChars($this.$ch2));
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(405));
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_LowSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$low = 0;
}
let jur_LowSurrogateCharSet__init_0 = ($this, $low) => {
    jur_AbstractSet__init_($this);
    $this.$low = $low;
},
jur_LowSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_LowSurrogateCharSet();
    jur_LowSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_LowSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_LowSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, var$5, $low;
    var$4 = $stringIndex + 1 | 0;
    if (var$4 > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$5 = $testString;
    $low = jl_String_charAt(var$5, $stringIndex);
    if ($stringIndex > $matchResult.$leftBound && jl_Character_isHighSurrogate(jl_String_charAt(var$5, $stringIndex - 1 | 0)))
        return (-1);
    if ($this.$low != $low)
        return (-1);
    return $this.$next1.$matches(var$4, $testString, $matchResult);
},
jur_LowSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $startStr, $strLength, var$7, var$8;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $startStr = $matchResult.$leftBound;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$7 = jl_String_indexOf($testStr, $this.$low, $strIndex);
        if (var$7 < 0)
            return (-1);
        if (var$7 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$7 - 1 | 0))) {
            $strIndex = var$7 + 1 | 0;
            continue;
        }
        var$8 = $this.$next1;
        $strIndex = var$7 + 1 | 0;
        if (var$8.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$7;
},
jur_LowSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $startStr, $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $startStr = $matchResult.$leftBound;
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf0($testStr, $this.$low, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($lastIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, $lastIndex - 1 | 0))) {
                $lastIndex = $lastIndex + (-2) | 0;
                continue;
            }
            if ($this.$next1.$matches($lastIndex + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_LowSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$low;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append2(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_LowSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_HighSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_LowSurrogateCharSet))
        return 1;
    return $set.$low != $this.$low ? 0 : 1;
},
jur_LowSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_HighSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$high = 0;
}
let jur_HighSurrogateCharSet__init_0 = ($this, $high) => {
    jur_AbstractSet__init_($this);
    $this.$high = $high;
},
jur_HighSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_HighSurrogateCharSet();
    jur_HighSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_HighSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next1 = $next;
},
jur_HighSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $low, var$7, $high;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    $low = $rt_compare(var$5, $strLength);
    if ($low > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$7 = $testString;
    $high = jl_String_charAt(var$7, $stringIndex);
    if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$7, var$5)))
        return (-1);
    if ($this.$high != $high)
        return (-1);
    return $this.$next1.$matches(var$5, $testString, $matchResult);
},
jur_HighSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$high, $strIndex);
        if (var$6 < 0)
            return (-1);
        $strIndex = var$6 + 1 | 0;
        if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
            $strIndex = var$6 + 2 | 0;
            continue;
        }
        if ($this.$next1.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_HighSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf0($testStr, $this.$high, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            var$7 = $lastIndex + 1 | 0;
            if (var$7 < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, var$7))) {
                $lastIndex = $lastIndex + (-1) | 0;
                continue;
            }
            if ($this.$next1.$matches(var$7, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_HighSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$high;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append2(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HighSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_LowSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_HighSurrogateCharSet))
        return 1;
    return $set.$high != $this.$high ? 0 : 1;
},
jur_HighSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_SupplCharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$high0 = 0;
    a.$low0 = 0;
    a.$ch1 = 0;
}
let jur_SupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $testString = $testString;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$high0 == $high && $this.$low0 == $low ? 2 : (-1);
},
jur_SupplCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, $ch;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while ($strIndex < $strLength) {
        $strIndex = jl_String_indexOf($testStr, $this.$high0, $strIndex);
        if ($strIndex < 0)
            return (-1);
        $strIndex = $strIndex + 1 | 0;
        if ($strIndex >= $strLength)
            continue;
        $ch = jl_String_charAt($testStr, $strIndex);
        if ($this.$low0 == $ch && $this.$next1.$matches($strIndex + 1 | 0, $testString, $matchResult) >= 0)
            return $strIndex + (-1) | 0;
        $strIndex = $strIndex + 1 | 0;
    }
    return (-1);
},
jur_SupplCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf0($testStr, $this.$low0, $lastIndex) + (-1) | 0;
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($this.$high0 == jl_String_charAt($testStr, $lastIndex) && $this.$next1.$matches($lastIndex + 2 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_SupplCharSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$high0;
    var$2 = $this.$low0;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append2(var$3, var$1);
    jl_AbstractStringBuilder_append2(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplCharSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $set.$ch1 != $this.$ch1 ? 0 : 1;
    if ($set instanceof jur_SupplRangeSet)
        return $set.$contains($this.$ch1);
    if ($set instanceof jur_CharSet)
        return 0;
    if (!($set instanceof jur_RangeSet))
        return 1;
    return 0;
},
jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$1__init_ = $this => {
    return;
},
jur_AbstractLineTerminator$1__init_0 = () => {
    let var_0 = new jur_AbstractLineTerminator$1();
    jur_AbstractLineTerminator$1__init_(var_0);
    return var_0;
},
jur_AbstractLineTerminator$1_isLineTerminator = ($this, $ch) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$1_isAfterLineTerminator = ($this, $ch, $ch2) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$2__init_ = $this => {
    return;
},
jur_AbstractLineTerminator$2__init_0 = () => {
    let var_0 = new jur_AbstractLineTerminator$2();
    jur_AbstractLineTerminator$2__init_(var_0);
    return var_0;
},
jur_AbstractLineTerminator$2_isLineTerminator = ($this, $ch) => {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
},
jur_AbstractLineTerminator$2_isAfterLineTerminator = ($this, $ch, $ch2) => {
    a: {
        b: {
            if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                if ($ch != 13)
                    break b;
                if ($ch2 == 10)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_SequenceSet$IntHash() {
    let a = this; jl_Object.call(a);
    a.$table = null;
    a.$values7 = null;
    a.$mask0 = 0;
    a.$size11 = 0;
}
let jur_SequenceSet$IntHash__init_0 = ($this, $size) => {
    let var$2, var$3;
    while (true) {
        var$2 = $this.$mask0;
        if ($size < var$2)
            break;
        $this.$mask0 = var$2 << 1 | 1;
    }
    var$3 = var$2 << 1 | 1;
    $this.$mask0 = var$3;
    var$3 = var$3 + 1 | 0;
    $this.$table = $rt_createIntArray(var$3);
    $this.$values7 = $rt_createIntArray(var$3);
    $this.$size11 = $size;
},
jur_SequenceSet$IntHash__init_ = var_0 => {
    let var_1 = new jur_SequenceSet$IntHash();
    jur_SequenceSet$IntHash__init_0(var_1, var_0);
    return var_1;
},
jur_SequenceSet$IntHash_put = ($this, $key, $value) => {
    let $i, var$4, $hashCode, var$6;
    $i = 0;
    var$4 = $this.$mask0;
    $hashCode = $key & var$4;
    while (true) {
        var$6 = $this.$table.data;
        if (!var$6[$hashCode])
            break;
        if (var$6[$hashCode] == $key)
            break;
        $i = ($i + 1 | 0) & var$4;
        $hashCode = ($hashCode + $i | 0) & var$4;
    }
    var$6[$hashCode] = $key;
    $this.$values7.data[$hashCode] = $value;
},
jur_SequenceSet$IntHash_get = ($this, $key) => {
    let var$2, $hashCode, $i, $storedKey;
    var$2 = $this.$mask0;
    $hashCode = $key & var$2;
    $i = 0;
    while (true) {
        $storedKey = $this.$table.data[$hashCode];
        if (!$storedKey)
            break;
        if ($storedKey == $key)
            return $this.$values7.data[$hashCode];
        $i = ($i + 1 | 0) & var$2;
        $hashCode = ($hashCode + $i | 0) & var$2;
    }
    return $this.$size11;
},
jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazySpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpace();
    jur_AbstractCharClass$LazySpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpace_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 9, 13), 32);
},
jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyDigit();
    jur_AbstractCharClass$LazyDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 48, 57);
},
jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyLower__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyLower__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyLower();
    jur_AbstractCharClass$LazyLower__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyLower_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 97, 122);
},
jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyUpper__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyUpper__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyUpper();
    jur_AbstractCharClass$LazyUpper__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyUpper_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 65, 90);
},
jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyASCII__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyASCII__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyASCII();
    jur_AbstractCharClass$LazyASCII__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyASCII_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 0, 127);
},
jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyAlpha__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlpha__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlpha();
    jur_AbstractCharClass$LazyAlpha__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlpha_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90);
},
jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha),
jur_AbstractCharClass$LazyAlnum__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlnum__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlnum();
    jur_AbstractCharClass$LazyAlnum__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlnum_computeValue = $this => {
    return jur_CharClass_add(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
},
jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyPunct__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyPunct__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyPunct();
    jur_AbstractCharClass$LazyPunct__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPunct_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum),
jur_AbstractCharClass$LazyGraph__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyGraph__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyGraph();
    jur_AbstractCharClass$LazyGraph__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyGraph_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph),
jur_AbstractCharClass$LazyPrint__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyPrint__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyPrint();
    jur_AbstractCharClass$LazyPrint__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPrint_computeValue = $this => {
    return jur_CharClass_add0(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
},
jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyBlank__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyBlank__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyBlank();
    jur_AbstractCharClass$LazyBlank__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyBlank_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_(), 32), 9);
},
jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyCntrl__init_ = $this => {
    return;
};
let jur_AbstractCharClass$LazyCntrl__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyCntrl();
    jur_AbstractCharClass$LazyCntrl__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyCntrl_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 0, 31), 127);
},
jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyXDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyXDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyXDigit();
    jur_AbstractCharClass$LazyXDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyXDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 48, 57), 97, 102), 65, 70);
},
jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLowerCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLowerCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
    jur_AbstractCharClass$LazyJavaLowerCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLowerCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
    $chCl.$this$052 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUpperCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUpperCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
    jur_AbstractCharClass$LazyJavaUpperCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUpperCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
    $chCl.$this$054 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaWhitespace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaWhitespace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
    jur_AbstractCharClass$LazyJavaWhitespace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaWhitespace_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
    var$1.$this$050 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaMirrored__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaMirrored__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
    jur_AbstractCharClass$LazyJavaMirrored__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaMirrored_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
    var$1.$this$026 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDefined__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDefined__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDefined();
    jur_AbstractCharClass$LazyJavaDefined__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDefined_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
    $chCl.$this$036 = $this;
    jur_AbstractCharClass__init_($chCl);
    ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDigit();
    jur_AbstractCharClass$LazyJavaDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
    $chCl.$this$055 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
    $chCl.$this$037 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaISOControl__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaISOControl__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
    jur_AbstractCharClass$LazyJavaISOControl__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaISOControl_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
    var$1.$this$030 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
    $chCl.$this$019 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
    $chCl.$this$032 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetter__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetter__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetter();
    jur_AbstractCharClass$LazyJavaLetter__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetter_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
    $chCl.$this$035 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
let jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
    jur_AbstractCharClass$LazyJavaLetterOrDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
    $chCl.$this$062 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaSpaceChar__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaSpaceChar__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
    jur_AbstractCharClass$LazyJavaSpaceChar__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaSpaceChar_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
    var$1.$this$028 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaTitleCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaTitleCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
    jur_AbstractCharClass$LazyJavaTitleCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaTitleCase_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
    var$1.$this$058 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
    $chCl.$this$020 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
    $chCl.$this$068 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyWord__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyWord();
    jur_AbstractCharClass$LazyWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyWord_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90), 48, 57), 95);
},
jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord),
jur_AbstractCharClass$LazyNonWord__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyNonWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonWord();
    jur_AbstractCharClass$LazyNonWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonWord_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace),
jur_AbstractCharClass$LazyNonSpace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyNonSpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonSpace();
    jur_AbstractCharClass$LazyNonSpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonSpace_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit),
jur_AbstractCharClass$LazyNonDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyNonDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonDigit();
    jur_AbstractCharClass$LazyNonDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonDigit_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
function jur_AbstractCharClass$LazyRange() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$start3 = 0;
    a.$end5 = 0;
}
let jur_AbstractCharClass$LazyRange__init_0 = ($this, $start, $end) => {
    $this.$start3 = $start;
    $this.$end5 = $end;
},
jur_AbstractCharClass$LazyRange__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyRange();
    jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyRange_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), $this.$start3, $this.$end5);
},
jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpecialsBlock__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazySpecialsBlock__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
    jur_AbstractCharClass$LazySpecialsBlock__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpecialsBlock_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 65279, 65279), 65520, 65533);
};
function jur_AbstractCharClass$LazyCategory() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category1 = 0;
    a.$mayContainSupplCodepoints1 = 0;
    a.$containsAllSurrogates0 = 0;
}
let jur_AbstractCharClass$LazyCategory__init_0 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategory__init_2 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates0 = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_1 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategory_computeValue = $this => {
    let $chCl;
    $chCl = jur_UnicodeCategory__init_0($this.$category1);
    if ($this.$containsAllSurrogates0)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
    return $chCl;
};
function jur_AbstractCharClass$LazyCategoryScope() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category0 = 0;
    a.$mayContainSupplCodepoints0 = 0;
    a.$containsAllSurrogates = 0;
}
let jur_AbstractCharClass$LazyCategoryScope__init_0 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategoryScope__init_1 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategoryScope_computeValue = $this => {
    let $chCl;
    $chCl = new jur_UnicodeCategoryScope;
    jur_UnicodeCategory__init_($chCl, $this.$category0);
    if ($this.$containsAllSurrogates)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
    return $chCl;
},
jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException),
jl_NegativeArraySizeException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_NegativeArraySizeException__init_0 = () => {
    let var_0 = new jl_NegativeArraySizeException();
    jl_NegativeArraySizeException__init_(var_0);
    return var_0;
},
jur_IntHash = $rt_classWithoutFields(),
otpp_ResourceAccessor = $rt_classWithoutFields(),
otpp_ResourceAccessor__init_ = $this => {
    return;
},
otpp_ResourceAccessor__init_0 = () => {
    let var_0 = new otpp_ResourceAccessor();
    otpp_ResourceAccessor__init_(var_0);
    return var_0;
},
otciu_UnicodeHelper = $rt_classWithoutFields(),
otciu_UnicodeHelper__init_ = $this => {
    return;
},
otciu_UnicodeHelper__init_0 = () => {
    let var_0 = new otciu_UnicodeHelper();
    otciu_UnicodeHelper__init_(var_0);
    return var_0;
},
otciu_UnicodeHelper_decodeCaseMapping = $text => {
    let $flow, $sz, $data, var$5, $last, $i, var$8;
    $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
    $sz = otci_Base46_decodeUnsigned($flow);
    $data = $rt_createIntArray($sz * 2 | 0);
    var$5 = $data.data;
    $last = 0;
    $i = 0;
    while ($i < $sz) {
        $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
        var$8 = $i * 2 | 0;
        var$5[var$8] = $last;
        var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
        $i = $i + 1 | 0;
    }
    return $data;
},
otciu_UnicodeHelper_createCharMapping = $data => {
    let $result, var$3, $last, $lastValue, $i, var$7, $key, $value, var$10, var$11;
    $result = $rt_createIntArray(65536);
    var$3 = $result.data;
    $last = 0;
    $lastValue = 0;
    $i = 0;
    a: {
        while (true) {
            var$7 = $data.data;
            if ($i >= var$7.length)
                break a;
            $key = var$7[$i];
            $value = var$7[$i + 1 | 0];
            var$10 = var$3.length;
            if ($key < var$10)
                var$10 = $key;
            else if ($key == $last)
                break;
            ju_Arrays_fill3($result, $last, var$10, $lastValue);
            $i = $i + 2 | 0;
            $last = var$10;
            $lastValue = $value;
        }
    }
    var$11 = new otciu_CharMapping;
    var$11.$binarySearchTable = $data;
    var$11.$fastTable = $result;
    return var$11;
},
otciu_UnicodeHelper_decodeByte = $c => {
    if ($c > 92)
        return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
    if ($c <= 34)
        return ($c - 32 | 0) << 24 >> 24;
    return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
};
function otciu_CharMapping() {
    let a = this; jl_Object.call(a);
    a.$binarySearchTable = null;
    a.$fastTable = null;
}
function otciu_UnicodeHelper$Range() {
    let a = this; jl_Object.call(a);
    a.$start4 = 0;
    a.$end4 = 0;
    a.$data11 = null;
}
let otciu_UnicodeHelper$Range__init_0 = ($this, $start, $end, $data) => {
    $this.$start4 = $start;
    $this.$end4 = $end;
    $this.$data11 = $data;
},
otciu_UnicodeHelper$Range__init_ = (var_0, var_1, var_2) => {
    let var_3 = new otciu_UnicodeHelper$Range();
    otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
    return var_3;
};
function otci_CharFlow() {
    let a = this; jl_Object.call(a);
    a.$characters = null;
    a.$pointer = 0;
}
let otci_CharFlow__init_0 = ($this, $characters) => {
    $this.$characters = $characters;
},
otci_CharFlow__init_ = var_0 => {
    let var_1 = new otci_CharFlow();
    otci_CharFlow__init_0(var_1, var_0);
    return var_1;
},
otci_Base46 = $rt_classWithoutFields(),
otci_Base46__init_ = $this => {
    return;
},
otci_Base46__init_0 = () => {
    let var_0 = new otci_Base46();
    otci_Base46__init_(var_0);
    return var_0;
},
otci_Base46_decodeUnsigned = $seq => {
    let $number, $pos, var$4, $hasMore, $digit;
    $number = 0;
    $pos = 1;
    while (true) {
        var$4 = $seq.$characters.data;
        $hasMore = $seq.$pointer;
        $seq.$pointer = $hasMore + 1 | 0;
        $digit = var$4[$hasMore];
        $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
        $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
        $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
        $pos = $pos * 46 | 0;
        if (!$hasMore)
            break;
    }
    return $number;
},
otci_Base46_decode = $seq => {
    let $number, $result;
    $number = otci_Base46_decodeUnsigned($seq);
    $result = $number / 2 | 0;
    if ($number % 2 | 0)
        $result =  -$result | 0;
    return $result;
},
cbgu_NumberUtils = $rt_classWithoutFields(),
cbgu_NumberUtils__init_ = $this => {
    return;
},
cbgu_NumberUtils__init_0 = () => {
    let var_0 = new cbgu_NumberUtils();
    cbgu_NumberUtils__init_(var_0);
    return var_0;
},
cbgu_NumberUtils_intToFloatColor = $value => {
    return $rt_intBitsToFloat($value & (-16777217));
},
cgxgbtd_StyleWrapper$Unit = $rt_classWithoutFields(jl_Enum),
cgxgbtd_StyleWrapper$Unit_PX = null,
cgxgbtd_StyleWrapper$Unit_PCT = null,
cgxgbtd_StyleWrapper$Unit_EM = null,
cgxgbtd_StyleWrapper$Unit_EX = null,
cgxgbtd_StyleWrapper$Unit_PT = null,
cgxgbtd_StyleWrapper$Unit_PC = null,
cgxgbtd_StyleWrapper$Unit_IN = null,
cgxgbtd_StyleWrapper$Unit_CM = null,
cgxgbtd_StyleWrapper$Unit_MM = null,
cgxgbtd_StyleWrapper$Unit_$VALUES = null,
cgxgbtd_StyleWrapper$Unit_$callClinit = () => {
    cgxgbtd_StyleWrapper$Unit_$callClinit = $rt_eraseClinit(cgxgbtd_StyleWrapper$Unit);
    cgxgbtd_StyleWrapper$Unit__clinit_();
},
cgxgbtd_StyleWrapper$Unit_values = () => {
    cgxgbtd_StyleWrapper$Unit_$callClinit();
    return cgxgbtd_StyleWrapper$Unit_$VALUES.$clone0();
},
cgxgbtd_StyleWrapper$Unit__init_ = ($this, var$1, var$2) => {
    cgxgbtd_StyleWrapper$Unit_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
cgxgbtd_StyleWrapper$Unit__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cgxgbtd_StyleWrapper$Unit$1;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(425), 0);
    cgxgbtd_StyleWrapper$Unit_PX = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$2;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(426), 1);
    cgxgbtd_StyleWrapper$Unit_PCT = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$3;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(427), 2);
    cgxgbtd_StyleWrapper$Unit_EM = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$4;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(428), 3);
    cgxgbtd_StyleWrapper$Unit_EX = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$5;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(429), 4);
    cgxgbtd_StyleWrapper$Unit_PT = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$6;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(430), 5);
    cgxgbtd_StyleWrapper$Unit_PC = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$7;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(431), 6);
    cgxgbtd_StyleWrapper$Unit_IN = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$8;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(432), 7);
    cgxgbtd_StyleWrapper$Unit_CM = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$9;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(433), 8);
    cgxgbtd_StyleWrapper$Unit_MM = var$1;
    var$2 = $rt_createArray(cgxgbtd_StyleWrapper$Unit, 9);
    var$3 = var$2.data;
    var$3[0] = cgxgbtd_StyleWrapper$Unit_PX;
    var$3[1] = cgxgbtd_StyleWrapper$Unit_PCT;
    var$3[2] = cgxgbtd_StyleWrapper$Unit_EM;
    var$3[3] = cgxgbtd_StyleWrapper$Unit_EX;
    var$3[4] = cgxgbtd_StyleWrapper$Unit_PT;
    var$3[5] = cgxgbtd_StyleWrapper$Unit_PC;
    var$3[6] = cgxgbtd_StyleWrapper$Unit_IN;
    var$3[7] = cgxgbtd_StyleWrapper$Unit_CM;
    var$3[8] = var$1;
    cgxgbtd_StyleWrapper$Unit_$VALUES = var$2;
};
function ju_HashMap$HashEntry() {
    let a = this; ju_MapEntry.call(a);
    a.$origKeyHash = 0;
    a.$next2 = null;
}
let jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_StringIndexOutOfBoundsException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_StringIndexOutOfBoundsException__init_0 = () => {
    let var_0 = new jl_StringIndexOutOfBoundsException();
    jl_StringIndexOutOfBoundsException__init_(var_0);
    return var_0;
};
function jur_AbstractCharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS = null;
    a.$this$060 = null;
}
let jur_AbstractCharClass$1_contains = ($this, $ch) => {
    let $index;
    $index = $ch - 55296 | 0;
    return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
};
function jur_AbstractCharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS0 = null;
    a.$val$thisClass = null;
    a.$this$033 = null;
}
let jur_AbstractCharClass$2_contains = ($this, $ch) => {
    let $index, $containslHS;
    $index = $ch - 55296 | 0;
    $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
    return $this.$val$thisClass.$contains($ch) && !$containslHS ? 1 : 0;
};
function jur_CharClass$18() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$bs = null;
    a.$this$041 = null;
}
let jur_CharClass$18_contains = ($this, $ch) => {
    return $this.$alt ^ ju_BitSet_get($this.$val$bs, $ch);
},
jur_CharClass$18_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append2($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
    }
    var$3 = $temp.$length1;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
};
function jur_CharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$cc3 = null;
    a.$this$053 = null;
}
let jur_CharClass$1_contains = ($this, $ch) => {
    return $this.$val$cc3.$contains($ch);
};
function jur_CharClass$3() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt0 = 0;
    a.$val$cc1 = null;
    a.$this$06 = null;
}
let jur_CharClass$3_contains = ($this, $ch) => {
    return !($this.$val$curAlt0 ^ ju_BitSet_get($this.$this$06.$bits, $ch)) && !($this.$val$curAlt0 ^ $this.$this$06.$inverted ^ $this.$val$cc1.$contains($ch)) ? 0 : 1;
};
function jur_CharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt = 0;
    a.$val$cc0 = null;
    a.$this$04 = null;
}
let jur_CharClass$2_contains = ($this, $ch) => {
    return !($this.$val$curAlt ^ ju_BitSet_get($this.$this$04.$bits, $ch)) && !($this.$val$curAlt ^ $this.$this$04.$inverted ^ $this.$val$cc0.$contains($ch)) ? 1 : 0;
};
function jur_CharClass$5() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt10 = 0;
    a.$val$nb0 = null;
    a.$val$cc = null;
    a.$this$046 = null;
}
let jur_CharClass$5_contains = ($this, $ch) => {
    return $this.$val$curAlt10 ^ (!$this.$val$nb0.$contains($ch) && !$this.$val$cc.$contains($ch) ? 0 : 1);
};
function jur_CharClass$4() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt1 = 0;
    a.$val$nb3 = null;
    a.$val$cc2 = null;
    a.$this$066 = null;
}
let jur_CharClass$4_contains = ($this, $ch) => {
    return $this.$val$curAlt1 ^ (!$this.$val$nb3.$contains($ch) && !$this.$val$cc2.$contains($ch) ? 0 : 1) ? 0 : 1;
};
function jur_CharClass$7() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz1 = null;
    a.$this$067 = null;
}
let jur_CharClass$7_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz1, $ch);
};
function jur_CharClass$6() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz9 = null;
    a.$this$047 = null;
}
let jur_CharClass$6_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz9, $ch) ? 0 : 1;
};
function jur_CharClass$9() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz3 = null;
    a.$val$curAlt4 = 0;
    a.$this$014 = null;
}
let jur_CharClass$9_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz3, $ch) && !($this.$val$curAlt4 ^ ju_BitSet_get($this.$this$014.$bits, $ch)) ? 0 : 1;
};
function jur_CharClass$8() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz4 = null;
    a.$val$curAlt6 = 0;
    a.$this$011 = null;
}
let jur_CharClass$8_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt6 ^ ju_BitSet_get($this.$this$011.$bits, $ch)) ? 1 : 0;
};
function jur_CharClass$11() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt3 = 0;
    a.$val$nb4 = null;
    a.$val$clazz5 = null;
    a.$this$022 = null;
}
let jur_CharClass$11_contains = ($this, $ch) => {
    return !($this.$val$curAlt3 ^ $this.$val$nb4.$contains($ch)) && !jur_CharClass_contains($this.$val$clazz5, $ch) ? 0 : 1;
};
function jur_CharClass$10() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt9 = 0;
    a.$val$nb = null;
    a.$val$clazz = null;
    a.$this$024 = null;
}
let jur_CharClass$10_contains = ($this, $ch) => {
    return !($this.$val$curAlt9 ^ $this.$val$nb.$contains($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 1 : 0;
};
function jur_CharClass$13() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz6 = null;
    a.$this$025 = null;
}
let jur_CharClass$13_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz6, $ch);
};
function jur_CharClass$12() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz0 = null;
    a.$this$065 = null;
}
let jur_CharClass$12_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz0, $ch) ? 0 : 1;
};
function jur_CharClass$15() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz10 = null;
    a.$val$curAlt2 = 0;
    a.$this$018 = null;
}
let jur_CharClass$15_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt2 ^ ju_BitSet_get($this.$this$018.$bits, $ch) ? 1 : 0;
};
function jur_CharClass$14() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz7 = null;
    a.$val$curAlt5 = 0;
    a.$this$012 = null;
}
let jur_CharClass$14_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz7, $ch) && $this.$val$curAlt5 ^ ju_BitSet_get($this.$this$012.$bits, $ch) ? 0 : 1;
};
function jur_CharClass$17() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt8 = 0;
    a.$val$nb2 = null;
    a.$val$clazz2 = null;
    a.$this$045 = null;
}
let jur_CharClass$17_contains = ($this, $ch) => {
    return $this.$val$curAlt8 ^ $this.$val$nb2.$contains($ch) && jur_CharClass_contains($this.$val$clazz2, $ch) ? 1 : 0;
};
function jur_CharClass$16() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt7 = 0;
    a.$val$nb1 = null;
    a.$val$clazz8 = null;
    a.$this$048 = null;
}
let jur_CharClass$16_contains = ($this, $ch) => {
    return $this.$val$curAlt7 ^ $this.$val$nb1.$contains($ch) && jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
};
function jl_Thread() {
    let a = this; jl_Object.call(a);
    a.$id1 = Long_ZERO;
    a.$timeSliceStart = Long_ZERO;
    a.$finishedLock = null;
    a.$name5 = null;
    a.$alive = 0;
    a.$target = null;
}
let jl_Thread_mainThread = null,
jl_Thread_currentThread = null,
jl_Thread_nextId = 0,
jl_Thread_activeCount = 0,
jl_Thread_defaultUncaughtExceptionHandler = null,
jl_Thread__init_ = $this => {
    jl_Thread__init_0($this, null, null);
},
jl_Thread__init_2 = () => {
    let var_0 = new jl_Thread();
    jl_Thread__init_(var_0);
    return var_0;
},
jl_Thread__init_0 = ($this, $target, $name) => {
    let var$3;
    $this.$finishedLock = new jl_Object;
    $this.$alive = 1;
    $this.$name5 = $name;
    $this.$target = $target;
    var$3 = jl_Thread_nextId;
    jl_Thread_nextId = var$3 + 1 | 0;
    $this.$id1 = Long_fromInt(var$3);
},
jl_Thread__init_1 = (var_0, var_1) => {
    let var_2 = new jl_Thread();
    jl_Thread__init_0(var_2, var_0, var_1);
    return var_2;
},
jl_Thread_setCurrentThread = $thread_0 => {
    if (jl_Thread_currentThread !== $thread_0)
        jl_Thread_currentThread = $thread_0;
    jl_Thread_currentThread.$timeSliceStart = jl_System_currentTimeMillis();
},
jl_Thread_currentThread0 = () => {
    return jl_Thread_currentThread;
},
jl_Thread__clinit_ = () => {
    let var$1;
    var$1 = jl_Thread__init_1(null, $rt_s(434));
    jl_Thread_mainThread = var$1;
    jl_Thread_currentThread = var$1;
    jl_Thread_nextId = 1;
    jl_Thread_activeCount = 1;
    jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
};
function jl_Object$Monitor() {
    let a = this; jl_Object.call(a);
    a.$enteringThreads = null;
    a.$notifyListeners = null;
    a.$owner = null;
    a.$count = 0;
}
let jl_Object$Monitor__init_ = $this => {
    $this.$owner = jl_Thread_currentThread;
},
jl_Object$Monitor__init_0 = () => {
    let var_0 = new jl_Object$Monitor();
    jl_Object$Monitor__init_(var_0);
    return var_0;
},
jl_IllegalMonitorStateException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalMonitorStateException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_IllegalMonitorStateException__init_0 = () => {
    let var_0 = new jl_IllegalMonitorStateException();
    jl_IllegalMonitorStateException__init_(var_0);
    return var_0;
},
otjf_JSMapping = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0() {
    jl_Object.call(this);
    this.$_09 = null;
}
let cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0_apply$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6;
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1 = var$1;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1 = var$1.$_09;
    var$3 = var$2.length;
    var$4 = $rt_createArray(cgxgbtf_FileData, var$3);
    var$5 = var$4.data;
    var$6 = 0;
    while (var$6 < var$3) {
        var$5[var$6] = var$2[var$6];
        var$6 = var$6 + 1 | 0;
    }
    var$1.$windowListener.$filesDropped(var$4);
    return otji_JSWrapper_javaToJs($rt_s(435));
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1 = $rt_classWithoutFields(),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1__init_ = var$0 => {
    return;
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1__init_0 = () => {
    let var_0 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1();
    cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1__init_(var_0);
    return var_0;
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1_apply$exported$0 = (var$1, var$2) => {
    otji_JSWrapper_jsToJava(var$2);
    var$1;
    return otji_JSWrapper_javaToJs($rt_s(436));
},
otjf_JSSupplier = $rt_classWithoutFields(0),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2 = $rt_classWithoutFields(),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2__init_ = var$0 => {
    return;
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2__init_0 = () => {
    let var_0 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2();
    cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2__init_(var_0);
    return var_0;
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2_get$exported$0 = var$1 => {
    var$1;
    return otji_JSWrapper_javaToJs(null);
};
function jl_Float() {
    jl_Number.call(this);
    this.$value3 = 0.0;
}
let jl_Float_TYPE = null,
jl_Float_toString = $this => {
    let var$1, var$2;
    var$1 = $this.$value3;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$2, var$1));
},
jl_Float_equals = ($this, $other) => {
    let var$2, var$3, var$4;
    if ($this === $other)
        return 1;
    a: {
        if ($other instanceof jl_Float) {
            var$2 = $this.$value3;
            var$3 = $other.$value3;
            if (var$2 !== var$2 ? (var$3 === var$3 ? 0 : 1) : $rt_floatToRawIntBits(var$2) != $rt_floatToRawIntBits(var$3) ? 0 : 1) {
                var$4 = 1;
                break a;
            }
        }
        var$4 = 0;
    }
    return var$4;
},
jl_Float_hashCode = $this => {
    return jl_Float_floatToIntBits($this.$value3);
},
jl_Float_parseFloat = $string => {
    let $start, $end, $negative, $c, $mantissa, $exp, $mantissaPos, $hasOneDigit, var$10, $negativeExp, $numExp;
    if (jl_String_isEmpty($string)) {
        $string = new jl_NumberFormatException;
        jl_Throwable__init_($string);
        $rt_throw($string);
    }
    $start = 0;
    $end = $string.$nativeString.length;
    while (true) {
        if (jl_String_charAt($string, $start) > 32) {
            while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                $end = $end + (-1) | 0;
            }
            $negative = 0;
            if (jl_String_charAt($string, $start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if (jl_String_charAt($string, $start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end) {
                $string = new jl_NumberFormatException;
                jl_Throwable__init_($string);
                $rt_throw($string);
            }
            a: {
                $c = jl_String_charAt($string, $start);
                $mantissa = 0;
                $exp = (-1);
                $mantissaPos = 100000000;
                $hasOneDigit = 0;
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if (jl_String_charAt($string, $start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$10 = jl_String_charAt($string, $start);
                            if (var$10 < 48)
                                break a;
                            if (var$10 > 57)
                                break a;
                            if ($mantissaPos > 0) {
                                $mantissa = $mantissa + $rt_imul($mantissaPos, var$10 - 48 | 0) | 0;
                                $mantissaPos = $rt_udiv($mantissaPos, 10);
                            }
                            $exp = $exp + 1 | 0;
                            $start = $start + 1 | 0;
                        }
                    } else {
                        $string = new jl_NumberFormatException;
                        jl_Throwable__init_($string);
                        $rt_throw($string);
                    }
                }
            }
            if ($start < $end && jl_String_charAt($string, $start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        $c = jl_String_charAt($string, $start);
                        var$10 = $rt_compare($c, 48);
                        if (var$10 < 0)
                            break c;
                        if ($c > 57)
                            break;
                        if (!$mantissa && !var$10)
                            $exp = $exp + (-1) | 0;
                        else if ($mantissaPos > 0) {
                            $mantissa = $mantissa + $rt_imul($mantissaPos, $c - 48 | 0) | 0;
                            $mantissaPos = $rt_udiv($mantissaPos, 10);
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
            }
            if ($start < $end) {
                $c = jl_String_charAt($string, $start);
                if ($c != 101 && $c != 69) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                $c = $start + 1 | 0;
                $negativeExp = 0;
                if ($c == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if (jl_String_charAt($string, $c) == 45) {
                    $c = $c + 1 | 0;
                    $negativeExp = 1;
                } else if (jl_String_charAt($string, $c) == 43)
                    $c = $c + 1 | 0;
                $numExp = 0;
                $start = 0;
                d: {
                    while (true) {
                        if ($c >= $end)
                            break d;
                        $mantissaPos = jl_String_charAt($string, $c);
                        if ($mantissaPos < 48)
                            break d;
                        if ($mantissaPos > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + ($mantissaPos - 48 | 0) | 0;
                        $start = 1;
                        $c = $c + 1 | 0;
                    }
                }
                if (!$start) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if ($negativeExp)
                    $numExp =  -$numExp | 0;
                $exp = $exp + $numExp | 0;
            }
            return otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $string = new jl_NumberFormatException;
    jl_Throwable__init_($string);
    $rt_throw($string);
},
jl_Float_floatToIntBits = $value => {
    if (isNaN($value) ? 1 : 0)
        return 2143289344;
    return $rt_floatToRawIntBits($value);
},
jl_Float__clinit_ = () => {
    jl_Float_TYPE = $rt_cls($rt_floatcls);
};
function cbggg_GlyphLayout$GlyphRun() {
    let a = this; jl_Object.call(a);
    a.$glyphs = null;
    a.$xAdvances = null;
    a.$x5 = 0.0;
    a.$y6 = 0.0;
    a.$width6 = 0.0;
}
let cbggg_GlyphLayout$GlyphRun__init_ = $this => {
    $this.$glyphs = cbgu_Array__init_();
    $this.$xAdvances = cbgu_FloatArray__init_();
},
cbggg_GlyphLayout$GlyphRun__init_0 = () => {
    let var_0 = new cbggg_GlyphLayout$GlyphRun();
    cbggg_GlyphLayout$GlyphRun__init_(var_0);
    return var_0;
},
cbggg_GlyphLayout$GlyphRun_appendRun = ($this, $run) => {
    let var$2, var$3;
    cbgu_Array_addAll($this.$glyphs, $run.$glyphs);
    var$2 = $this.$xAdvances;
    var$3 = var$2.$size2;
    if (var$3 <= 0 ? 0 : 1)
        var$2.$size2 = var$3 - 1 | 0;
    cbgu_FloatArray_addAll0(var$2, $run.$xAdvances);
},
cbggg_GlyphLayout$GlyphRun_reset = $this => {
    cbgu_Array_clear($this.$glyphs);
    cbgu_FloatArray_clear($this.$xAdvances);
},
cbggg_GlyphLayout$GlyphRun_toString = $this => {
    let $buffer, $glyphs, $i, $n;
    $buffer = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($buffer, $this.$glyphs.$size0 + 32 | 0);
    $glyphs = $this.$glyphs;
    $i = 0;
    $n = $glyphs.$size0;
    while ($i < $n) {
        jl_AbstractStringBuilder_append2($buffer, (cbgu_Array_get($glyphs, $i)).$id & 65535);
        $i = $i + 1 | 0;
    }
    jl_AbstractStringBuilder_append0($buffer, $rt_s(29));
    jl_StringBuilder_append1($buffer, $this.$x5);
    jl_AbstractStringBuilder_append0($buffer, $rt_s(29));
    jl_StringBuilder_append1($buffer, $this.$y6);
    jl_AbstractStringBuilder_append0($buffer, $rt_s(29));
    jl_StringBuilder_append1($buffer, $this.$width6);
    return jl_AbstractStringBuilder_toString($buffer);
},
cgxgbtu_KeyCodes = $rt_classWithoutFields(),
cgxgbtu_KeyCodes__init_ = $this => {
    return;
},
cgxgbtu_KeyCodes__init_0 = () => {
    let var_0 = new cgxgbtu_KeyCodes();
    cgxgbtu_KeyCodes__init_(var_0);
    return var_0;
},
cgxgbtu_KeyCodes_keyForCode = $keyCode => {
    a: {
        switch ($keyCode) {
            case 8:
                break;
            case 9:
                return 61;
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 28:
            case 29:
            case 30:
            case 31:
            case 41:
            case 42:
            case 43:
            case 44:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 93:
            case 94:
            case 95:
            case 108:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
                break a;
            case 13:
                return 66;
            case 16:
                return 59;
            case 17:
                return 129;
            case 18:
                return 57;
            case 19:
                return 0;
            case 20:
                return 0;
            case 27:
                return 111;
            case 32:
                return 62;
            case 33:
                return 92;
            case 34:
                return 93;
            case 35:
                return 123;
            case 36:
                return 3;
            case 37:
                return 21;
            case 38:
                return 19;
            case 39:
                return 22;
            case 40:
                return 20;
            case 45:
                return 124;
            case 46:
                return 112;
            case 48:
                return 7;
            case 49:
                return 8;
            case 50:
                return 9;
            case 51:
                return 10;
            case 52:
                return 11;
            case 53:
                return 12;
            case 54:
                return 13;
            case 55:
                return 14;
            case 56:
                return 15;
            case 57:
                return 16;
            case 65:
                return 29;
            case 66:
                return 30;
            case 67:
                return 31;
            case 68:
                return 32;
            case 69:
                return 33;
            case 70:
                return 34;
            case 71:
                return 35;
            case 72:
                return 36;
            case 73:
                return 37;
            case 74:
                return 38;
            case 75:
                return 39;
            case 76:
                return 40;
            case 77:
                return 41;
            case 78:
                return 42;
            case 79:
                return 43;
            case 80:
                return 44;
            case 81:
                return 45;
            case 82:
                return 46;
            case 83:
                return 47;
            case 84:
                return 48;
            case 85:
                return 49;
            case 86:
                return 50;
            case 87:
                return 51;
            case 88:
                return 52;
            case 89:
                return 53;
            case 90:
                return 54;
            case 91:
                return 0;
            case 92:
                return 0;
            case 96:
                return 144;
            case 97:
                return 145;
            case 98:
                return 146;
            case 99:
                return 147;
            case 100:
                return 148;
            case 101:
                return 149;
            case 102:
                return 150;
            case 103:
                return 151;
            case 104:
                return 152;
            case 105:
                return 153;
            case 106:
                return 0;
            case 107:
                return 81;
            case 109:
                return 69;
            case 110:
                return 56;
            case 111:
                return 0;
            case 112:
                return 131;
            case 113:
                return 132;
            case 114:
                return 133;
            case 115:
                return 134;
            case 116:
                return 135;
            case 117:
                return 136;
            case 118:
                return 137;
            case 119:
                return 138;
            case 120:
                return 139;
            case 121:
                return 140;
            case 122:
                return 141;
            case 123:
                return 142;
            case 144:
                return 78;
            case 145:
                return 0;
            case 186:
                return 74;
            case 187:
                return 70;
            case 188:
                return 55;
            case 189:
                return 69;
            case 190:
                return 56;
            case 191:
                return 76;
            case 192:
                return 0;
            case 219:
                return 71;
            case 220:
                return 73;
            case 221:
                return 72;
            case 222:
                return 75;
            default:
                break a;
        }
        return 67;
    }
    return 0;
},
cgxgbtu_KeyCodes_getButton = $button => {
    if (!$button)
        return 0;
    if ($button == 2)
        return 1;
    if ($button != 1)
        return 0;
    return 2;
},
cbgu_TimeUtils = $rt_classWithoutFields(),
cbgu_TimeUtils__init_ = $this => {
    return;
},
cbgu_TimeUtils__init_0 = () => {
    let var_0 = new cbgu_TimeUtils();
    cbgu_TimeUtils__init_(var_0);
    return var_0;
},
cbgu_TimeUtils_nanoTime = () => {
    return Long_fromNumber(performance.now() * 1000000.0);
},
otp_PlatformQueue = $rt_classWithoutFields(),
otp_PlatformQueue_isEmpty$static = $this => {
    return $this.length ? 0 : 1;
},
otp_PlatformRunnable = $rt_classWithoutFields(0);
function jl_Object$monitorExit$lambda$_8_0() {
    jl_Object.call(this);
    this.$_016 = null;
}
let cgxgbt_TeaWindowListener = $rt_classWithoutFields(0),
otjc_JSPromise$Executor = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl$getFile$lambda$_2_0() {
    let a = this; jl_Object.call(a);
    a.$_014 = null;
    a.$_17 = null;
    a.$_25 = null;
}
let cgxgbta_AssetLoadImpl$getFile$lambda$_2_0_onExecute$exported$0 = (var$1, var$2, var$3) => {
    let var$4, var$5;
    var$2 = otji_JS_functionAsObject(var$2, "accept");
    otji_JS_functionAsObject(var$3, "accept");
    var$1 = var$1;
    var$3 = var$1.$_014;
    var$4 = var$1.$_17;
    var$1 = var$1.$_25;
    var$5 = new FileReader();
    var$5.readAsArrayBuffer(var$4);
    var$4 = new cgxgbta_AssetLoadImpl$4;
    var$4.$this$040 = var$3;
    var$4.$val$name = var$1;
    var$4.$val$resolve = var$2;
    var$5.addEventListener("load", otji_JS_function(otji_JSWrapper_unwrap(var$4), "handleEvent"));
},
otji_IDBObjectStoreParameters = $rt_classWithoutFields(),
otji_IDBObjectStoreParameters_create$js_body$_1 = () => {
    return {  };
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0() {
    let a = this; jl_Object.call(a);
    a.$_03 = null;
    a.$_12 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_03;
    var$3 = var$1.$_12.result;
    if (var$3 !== null) {
        var$1 = cgxgbtf_MemoryFileStorage_fixPath(var$2, $rt_str(var$3.key));
        var$4 = var$3.value;
        if (var$4.type == 1)
            cgxgbtf_MemoryFileStorage_putFolderInternal0(var$2, var$1, 0);
        else
            cgxgbtf_MemoryFileStorage_putFileInternal(var$2, var$1, cgxgbtdt_TypedArrays_toByteArray(var$4.contents), 0);
        var$3.continue();
    }
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1() {
    jl_Object.call(this);
    this.$_010 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1_handleEvent$exported$0 = var$1 => {
    var$1 = var$1.$_010;
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2() {
    jl_Object.call(this);
    this.$_012 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2_handleEvent$exported$0 = var$1 => {
    var$1 = var$1.$_012;
    otcic_JsConsolePrintStream_println(jl_System_err(), $rt_s(437));
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
},
jl_AutoCloseable = $rt_classWithoutFields(0),
ji_Closeable = $rt_classWithoutFields(0),
ji_Flushable = $rt_classWithoutFields(0),
ji_OutputStream = $rt_classWithoutFields();
function ji_FilterOutputStream() {
    ji_OutputStream.call(this);
    this.$out2 = null;
}
function ji_PrintStream() {
    let a = this; ji_FilterOutputStream.call(a);
    a.$autoFlush = 0;
    a.$sb = null;
    a.$buffer8 = null;
    a.$charset = null;
}
let otcic_JsConsolePrintStream = $rt_classWithoutFields(ji_PrintStream),
otcic_JsConsolePrintStream__init_ = $this => {
    let var$1, var$2;
    var$1 = null;
    var$2 = null;
    $this.$out2 = var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    $this.$sb = var$1;
    $this.$buffer8 = $rt_createCharArray(32);
    $this.$autoFlush = 0;
    $this.$charset = var$2;
},
otcic_JsConsolePrintStream_println = ($this, $s) => {
    $this.$print($s);
    $this.$print($rt_s(36));
},
otcic_JSStderrPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStderrPrintStream__init_ = $this => {
    otcic_JsConsolePrintStream__init_($this);
},
otcic_JSStderrPrintStream__init_0 = () => {
    let var_0 = new otcic_JSStderrPrintStream();
    otcic_JSStderrPrintStream__init_(var_0);
    return var_0;
},
otcic_JSStderrPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(38);
    $rt_putStderr($rt_ustr($s));
};
function cbgu_FloatArray() {
    let a = this; jl_Object.call(a);
    a.$items0 = null;
    a.$size2 = 0;
    a.$ordered2 = 0;
}
let cbgu_FloatArray__init_0 = $this => {
    $this.$ordered2 = 1;
    $this.$items0 = $rt_createFloatArray(16);
},
cbgu_FloatArray__init_ = () => {
    let var_0 = new cbgu_FloatArray();
    cbgu_FloatArray__init_0(var_0);
    return var_0;
},
cbgu_FloatArray_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items0;
    var$3 = $items.data;
    var$4 = $this.$size2;
    if (var$4 == var$3.length)
        $items = cbgu_FloatArray_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size2;
    $this.$size2 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_FloatArray_addAll0 = ($this, $array) => {
    cbgu_FloatArray_addAll($this, $array.$items0, 0, $array.$size2);
},
cbgu_FloatArray_addAll1 = ($this, $array, $offset, $length) => {
    let var$4, var$5;
    if (($offset + $length | 0) <= $array.$size2) {
        cbgu_FloatArray_addAll($this, $array.$items0, $offset, $length);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(438));
    jl_AbstractStringBuilder_append1(var$5, $offset);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(2));
    jl_AbstractStringBuilder_append1(var$5, $length);
    jl_AbstractStringBuilder_append0(var$5, $rt_s(3));
    jl_AbstractStringBuilder_append1(var$5, $array.$size2);
    jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
    $rt_throw(var$4);
},
cbgu_FloatArray_addAll = ($this, $array, $offset, $length) => {
    let $items, var$5, $sizeNeeded;
    $items = $this.$items0;
    var$5 = $items.data;
    $sizeNeeded = $this.$size2 + $length | 0;
    if ($sizeNeeded > var$5.length)
        $items = cbgu_FloatArray_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size2 * 1.75 | 0));
    jl_System_fastArraycopy($array, $offset, $items, $this.$size2, $length);
    $this.$size2 = $this.$size2 + $length | 0;
},
cbgu_FloatArray_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size2)
        return $this.$items0.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(21));
    jl_AbstractStringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(5));
    jl_AbstractStringBuilder_append1(var$3, $this.$size2);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
cbgu_FloatArray_removeRange = ($this, $start, $end) => {
    let $n, var$4, var$5, $count, $lastIndex, var$8, $i;
    $n = $this.$size2;
    if ($end >= $n) {
        var$4 = new jl_IndexOutOfBoundsException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append0(var$5, $rt_s(4));
        jl_AbstractStringBuilder_append1(var$5, $end);
        jl_AbstractStringBuilder_append0(var$5, $rt_s(5));
        jl_AbstractStringBuilder_append1(var$5, $this.$size2);
        jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    if ($start > $end) {
        var$4 = new jl_IndexOutOfBoundsException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append0(var$5, $rt_s(6));
        jl_AbstractStringBuilder_append1(var$5, $start);
        jl_AbstractStringBuilder_append0(var$5, $rt_s(7));
        jl_AbstractStringBuilder_append1(var$5, $end);
        jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$4);
    }
    $count = ($end - $start | 0) + 1 | 0;
    $lastIndex = $n - $count | 0;
    if ($this.$ordered2) {
        var$8 = $this.$items0;
        $end = $start + $count | 0;
        jl_System_fastArraycopy(var$8, $end, var$8, $start, $n - $end | 0);
    } else {
        $i = jl_Math_max($lastIndex, $end + 1 | 0);
        var$8 = $this.$items0;
        jl_System_fastArraycopy(var$8, $i, var$8, $start, $n - $i | 0);
    }
    $this.$size2 = $lastIndex;
},
cbgu_FloatArray_first = $this => {
    let var$1;
    if ($this.$size2)
        return $this.$items0.data[0];
    var$1 = new jl_IllegalStateException;
    jl_Exception__init_(var$1, $rt_s(22));
    $rt_throw(var$1);
},
cbgu_FloatArray_clear = $this => {
    $this.$size2 = 0;
},
cbgu_FloatArray_resize = ($this, $newSize) => {
    let $newItems, var$3;
    $newItems = $rt_createFloatArray($newSize);
    var$3 = $newItems.data;
    jl_System_fastArraycopy($this.$items0, 0, $newItems, 0, jl_Math_min($this.$size2, var$3.length));
    $this.$items0 = $newItems;
    return $newItems;
},
cbgu_FloatArray_truncate = ($this, $newSize) => {
    if ($this.$size2 > $newSize)
        $this.$size2 = $newSize;
},
cgxgbtd_StyleWrapper$Unit$1 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$2 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$3 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$4 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$5 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$6 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$7 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$8 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$9 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0),
jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields(),
jl_DefaultUncaughtExceptionHandler__init_ = $this => {
    return;
},
jl_DefaultUncaughtExceptionHandler__init_0 = () => {
    let var_0 = new jl_DefaultUncaughtExceptionHandler();
    jl_DefaultUncaughtExceptionHandler__init_(var_0);
    return var_0;
};
function jnc_Charset() {
    let a = this; jl_Object.call(a);
    a.$canonicalName = null;
    a.$aliases = null;
}
let jnc_Charset__init_ = ($this, $canonicalName, $aliases) => {
    let var$3, var$4, var$5;
    var$3 = $aliases.data;
    jnc_Charset_checkCanonicalName($canonicalName);
    var$4 = var$3.length;
    var$5 = 0;
    while (var$5 < var$4) {
        jnc_Charset_checkCanonicalName(var$3[var$5]);
        var$5 = var$5 + 1 | 0;
    }
    $this.$canonicalName = $canonicalName;
    $this.$aliases = $aliases.$clone0();
},
jnc_Charset_checkCanonicalName = $name => {
    let $i, $c;
    if (jl_String_isEmpty($name))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    $i = 1;
    while ($i < $name.$nativeString.length) {
        a: {
            $c = jl_String_charAt($name, $i);
            switch ($c) {
                case 43:
                case 45:
                case 46:
                case 58:
                case 95:
                    break;
                default:
                    if (jnc_Charset_isValidCharsetStart($c))
                        break a;
                    else
                        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
            }
        }
        $i = $i + 1 | 0;
    }
},
jnc_Charset_isValidCharsetStart = $c => {
    a: {
        b: {
            if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                if ($c < 65)
                    break b;
                if ($c > 90)
                    break b;
            }
            $c = 1;
            break a;
        }
        $c = 0;
    }
    return $c;
},
jnc_Charset_forName = $charsetName => {
    let $charset, var$3, var$4;
    if ($charsetName === null) {
        $charsetName = new jl_IllegalArgumentException;
        jl_Exception__init_($charsetName, $rt_s(439));
        $rt_throw($charsetName);
    }
    jnc_Charset_checkCanonicalName($charsetName);
    jnc_Charset$Charsets_$callClinit();
    $charset = jnc_Charset$Charsets_value;
    var$3 = $charsetName.$nativeString.toUpperCase();
    var$4 = var$3 === $charsetName.$nativeString ? $charsetName : jl_String__init_1(var$3);
    $charset = ju_HashMap_get($charset, var$4);
    if ($charset !== null)
        return $charset;
    $charset = new jnc_UnsupportedCharsetException;
    jl_Throwable__init_($charset);
    $charset.$charsetName0 = $charsetName;
    $rt_throw($charset);
},
oti_AsyncCallback = $rt_classWithoutFields(0);
function otpp_AsyncCallbackWrapper() {
    jl_Object.call(this);
    this.$realAsyncCallback = null;
}
let otpp_AsyncCallbackWrapper_create = $realAsyncCallback => {
    let var$2;
    var$2 = new otpp_AsyncCallbackWrapper;
    var$2.$realAsyncCallback = $realAsyncCallback;
    return var$2;
},
otpp_AsyncCallbackWrapper_complete = ($this, $result) => {
    $this.$realAsyncCallback.$complete($result);
},
otpp_AsyncCallbackWrapper_error = ($this, $e) => {
    $this.$realAsyncCallback.$error0($e);
};
function jl_Object$monitorEnterWait$lambda$_6_0() {
    let a = this; jl_Object.call(a);
    a.$_04 = null;
    a.$_13 = null;
    a.$_22 = 0;
    a.$_31 = null;
}
let otjc_JSObjects = $rt_classWithoutFields(),
otjc_JSObjects__init_ = $this => {
    return;
},
otjc_JSObjects__init_0 = () => {
    let var_0 = new otjc_JSObjects();
    otjc_JSObjects__init_(var_0);
    return var_0;
},
otji_JSWrapper$Helper = $rt_classWithoutFields(),
otji_JSWrapper$Helper_hashCodes = null,
otji_JSWrapper$Helper_wrappers = null,
otji_JSWrapper$Helper_stringWrappers = null,
otji_JSWrapper$Helper_numberWrappers = null,
otji_JSWrapper$Helper_undefinedWrapper = null,
otji_JSWrapper$Helper_stringFinalizationRegistry = null,
otji_JSWrapper$Helper_numberFinalizationRegistry = null,
otji_JSWrapper$Helper_$callClinit = () => {
    otji_JSWrapper$Helper_$callClinit = $rt_eraseClinit(otji_JSWrapper$Helper);
    otji_JSWrapper$Helper__clinit_();
},
otji_JSWrapper$Helper__init_ = $this => {
    otji_JSWrapper$Helper_$callClinit();
},
otji_JSWrapper$Helper__init_0 = () => {
    let var_0 = new otji_JSWrapper$Helper();
    otji_JSWrapper$Helper__init_(var_0);
    return var_0;
},
otji_JSWrapper$Helper__clinit_ = () => {
    let var$1;
    otji_JSWrapper$Helper_hashCodes = new WeakMap();
    otji_JSWrapper$Helper_wrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new WeakMap();
    otji_JSWrapper$Helper_stringWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    otji_JSWrapper$Helper_numberWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    if (otji_JSWrapper$Helper_stringWrappers === null)
        var$1 = null;
    else {
        var$1 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_0;
        var$1 = new FinalizationRegistry(otji_JS_function(otji_JSWrapper_unwrap(var$1), "accept"));
    }
    otji_JSWrapper$Helper_stringFinalizationRegistry = var$1;
    if (otji_JSWrapper$Helper_numberWrappers === null)
        var$1 = null;
    else {
        var$1 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_1;
        var$1 = new FinalizationRegistry(otji_JS_function(otji_JSWrapper_unwrap(var$1), "accept"));
    }
    otji_JSWrapper$Helper_numberFinalizationRegistry = var$1;
},
otjc_JSUndefined = $rt_classWithoutFields(),
otjc_JSWeakRef = $rt_classWithoutFields(),
otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0),
otji_JSWrapper$Helper$_clinit_$lambda$_3_0 = $rt_classWithoutFields(),
otji_JSWrapper$Helper$_clinit_$lambda$_3_0__init_ = var$0 => {
    return;
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_0__init_0 = () => {
    let var_0 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_0();
    otji_JSWrapper$Helper$_clinit_$lambda$_3_0__init_(var_0);
    return var_0;
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_0_accept$exported$0 = (var$1, var$2) => {
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1;
    otji_JSWrapper$Helper_$callClinit();
    var$1 = otji_JSWrapper$Helper_stringWrappers;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1.delete(var$2);
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_1 = $rt_classWithoutFields(),
otji_JSWrapper$Helper$_clinit_$lambda$_3_1__init_ = var$0 => {
    return;
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_1__init_0 = () => {
    let var_0 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_1();
    otji_JSWrapper$Helper$_clinit_$lambda$_3_1__init_(var_0);
    return var_0;
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_1_accept$exported$0 = (var$1, var$2) => {
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1;
    otji_JSWrapper$Helper_$callClinit();
    var$1 = otji_JSWrapper$Helper_numberWrappers;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1.delete(var$2);
},
jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet),
jur_BackReferencedSingleSet_find = ($this, $startSearch, $testString, $matchResult) => {
    let $res, $lastIndex, $saveStart;
    $res = 0;
    $lastIndex = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($startSearch > $lastIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + 1 | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $res, $saveStart;
    $res = 0;
    a: {
        while (true) {
            if ($startSearch < $stringIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + (-1) | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_processBackRefReplacement = $this => {
    return null;
},
cgxgbt_TeaApplication$6 = $rt_classWithoutFields(),
cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState = null,
cgxgbt_TeaApplication$6_$callClinit = () => {
    cgxgbt_TeaApplication$6_$callClinit = $rt_eraseClinit(cgxgbt_TeaApplication$6);
    cgxgbt_TeaApplication$6__clinit_();
},
cgxgbt_TeaApplication$6__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgxgbt_TeaApplication$AppState_values()).data.length);
    var$2 = var$1.data;
    cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState = var$1;
    var$2[cgxgbt_TeaApplication$AppState_INIT.$ordinal0] = 1;
    var$2[cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS.$ordinal0] = 2;
    var$2[cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS.$ordinal0] = 3;
    var$2[cgxgbt_TeaApplication$AppState_APP_LOOP.$ordinal0] = 4;
};
function jur_AbstractCharClass$LazyJavaLowerCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$052 = null;
}
let jur_AbstractCharClass$LazyJavaLowerCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 2 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUpperCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$054 = null;
}
let jur_AbstractCharClass$LazyJavaUpperCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 1 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaWhitespace$1() {
    jur_AbstractCharClass.call(this);
    this.$this$050 = null;
}
let jur_AbstractCharClass$LazyJavaWhitespace$1_contains = ($this, $ch) => {
    return jl_Character_isWhitespace($ch);
};
function jur_AbstractCharClass$LazyJavaMirrored$1() {
    jur_AbstractCharClass.call(this);
    this.$this$026 = null;
}
let jur_AbstractCharClass$LazyJavaMirrored$1_contains = ($this, $ch) => {
    return 0;
};
function jur_AbstractCharClass$LazyJavaDefined$1() {
    jur_AbstractCharClass.call(this);
    this.$this$036 = null;
}
let jur_AbstractCharClass$LazyJavaDefined$1_contains = ($this, $ch) => {
    return !jl_Character_getType($ch) ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$055 = null;
}
let jur_AbstractCharClass$LazyJavaDigit$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 9 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
    jur_AbstractCharClass.call(this);
    this.$this$037 = null;
}
let jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains = ($this, $ch) => {
    return jl_Character_isIdentifierIgnorable($ch);
};
function jur_AbstractCharClass$LazyJavaISOControl$1() {
    jur_AbstractCharClass.call(this);
    this.$this$030 = null;
}
let jur_AbstractCharClass$LazyJavaISOControl$1_contains = ($this, $ch) => {
    a: {
        b: {
            if (!($ch >= 0 && $ch <= 31)) {
                if ($ch < 127)
                    break b;
                if ($ch > 159)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$019 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                case 26:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$032 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                case 23:
                case 26:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetter$1() {
    jur_AbstractCharClass.call(this);
    this.$this$035 = null;
}
let jur_AbstractCharClass$LazyJavaLetter$1_contains = ($this, $ch) => {
    a: {
        switch (jl_Character_getType($ch)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                $ch = 0;
                break a;
        }
        $ch = 1;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$062 = null;
}
let jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains = ($this, $ch) => {
    return jl_Character_isLetterOrDigit($ch);
};
function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
    jur_AbstractCharClass.call(this);
    this.$this$028 = null;
}
let jur_AbstractCharClass$LazyJavaSpaceChar$1_contains = ($this, $ch) => {
    return jl_Character_isSpaceChar($ch);
};
function jur_AbstractCharClass$LazyJavaTitleCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$058 = null;
}
let jur_AbstractCharClass$LazyJavaTitleCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 3 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$020 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$068 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_UnicodeCategory() {
    jur_AbstractCharClass.call(this);
    this.$category = 0;
}
let jur_UnicodeCategory__init_ = ($this, $category) => {
    jur_AbstractCharClass__init_($this);
    $this.$category = $category;
},
jur_UnicodeCategory__init_0 = var_0 => {
    let var_1 = new jur_UnicodeCategory();
    jur_UnicodeCategory__init_(var_1, var_0);
    return var_1;
},
jur_UnicodeCategory_contains = ($this, $ch) => {
    return $this.$alt ^ ($this.$category != jl_Character_getType($ch & 65535) ? 0 : 1);
},
jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory),
jur_UnicodeCategoryScope_contains = ($this, $ch) => {
    return $this.$alt ^ (!($this.$category >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
};
function ju_AbstractList$1() {
    let a = this; jl_Object.call(a);
    a.$index8 = 0;
    a.$modCount1 = 0;
    a.$size12 = 0;
    a.$removeIndex0 = 0;
    a.$this$015 = null;
}
let ju_AbstractList$1_hasNext = $this => {
    return $this.$index8 >= $this.$size12 ? 0 : 1;
},
ju_AbstractList$1_next = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$modCount1;
    var$2 = $this.$this$015;
    if (var$1 < var$2.$modCount) {
        var$2 = new ju_ConcurrentModificationException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    var$3 = $this.$index8;
    $this.$removeIndex0 = var$3;
    $this.$index8 = var$3 + 1 | 0;
    return ju_ArrayList_get(var$2, var$3);
};
function cgxgbta_AssetDownloadImpl$2() {
    let a = this; jl_Object.call(a);
    a.$val$url = null;
    a.$val$listener1 = null;
    a.$this$05 = null;
}
let cgxgbta_AssetDownloadImpl$2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_subtractQueue(var$1.$this$05);
    if (var$1.$this$05.$showLogs) {
        var$2 = jl_System_out();
        var$3 = var$1.$val$url;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(440));
        jl_AbstractStringBuilder_append(var$4, var$3);
        var$3 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$2, var$3);
    }
};
function cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0() {
    let a = this; jl_Object.call(a);
    a.$_02 = null;
    a.$_11 = null;
    a.$_21 = null;
}
let cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_02;
    var$3 = var$1.$_11;
    var$1 = var$1.$_21;
    cgxgbta_AssetDownloadImpl_subtractQueue(var$2);
    if (var$2.$showLogs) {
        var$2 = jl_System_err();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(441));
        jl_AbstractStringBuilder_append(var$4, var$3);
        var$3 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$2, var$3);
    }
},
cbgu_Collections = $rt_classWithoutFields(),
cbgu_Collections_allocateIterators = 0,
cbgu_Collections__init_ = $this => {
    return;
},
cbgu_Collections__init_0 = () => {
    let var_0 = new cbgu_Collections();
    cbgu_Collections__init_(var_0);
    return var_0;
};
function cbgu_Array$ArrayIterator() {
    let a = this; jl_Object.call(a);
    a.$array5 = null;
    a.$allowRemove0 = 0;
    a.$index3 = 0;
    a.$valid = 0;
}
let cbgu_Array$ArrayIterator__init_0 = ($this, $array, $allowRemove) => {
    $this.$valid = 1;
    $this.$array5 = $array;
    $this.$allowRemove0 = $allowRemove;
},
cbgu_Array$ArrayIterator__init_ = (var_0, var_1) => {
    let var_2 = new cbgu_Array$ArrayIterator();
    cbgu_Array$ArrayIterator__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_Array$ArrayIterator_hasNext = $this => {
    let var$1;
    if (!$this.$valid) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$1, $rt_s(86));
        $rt_throw(var$1);
    }
    return $this.$index3 >= $this.$array5.$size0 ? 0 : 1;
},
cbgu_Array$ArrayIterator_next = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index3;
    var$2 = $this.$array5;
    if (var$1 >= var$2.$size0) {
        var$2 = new ju_NoSuchElementException;
        jl_Exception__init_(var$2, jl_String_valueOf0(var$1));
        $rt_throw(var$2);
    }
    if (!$this.$valid) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$2, $rt_s(86));
        $rt_throw(var$2);
    }
    var$3 = var$2.$items.data;
    $this.$index3 = var$1 + 1 | 0;
    return var$3[var$1];
};
function cbgu_Array$ArrayIterable() {
    let a = this; jl_Object.call(a);
    a.$array3 = null;
    a.$allowRemove = 0;
    a.$iterator11 = null;
    a.$iterator20 = null;
}
let otcic_JSStdoutPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStdoutPrintStream__init_ = $this => {
    otcic_JsConsolePrintStream__init_($this);
},
otcic_JSStdoutPrintStream__init_0 = () => {
    let var_0 = new otcic_JSStdoutPrintStream();
    otcic_JSStdoutPrintStream__init_(var_0);
    return var_0;
},
otcic_JSStdoutPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(38);
    $rt_putStdout($rt_ustr($s));
},
cgxgbtd_EventTargetWrapper = $rt_classWithoutFields(0),
cgxgbtd_FileReaderWrapper = $rt_classWithoutFields();
function cgxgbta_AssetLoadImpl$4() {
    let a = this; jl_Object.call(a);
    a.$val$name = null;
    a.$val$resolve = null;
    a.$this$040 = null;
}
let cgxgbta_AssetLoadImpl$4_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1;
    var$3 = cgxgbtdt_TypedArrays_toByteArray(new Int8Array(var$2.target.result));
    var$2 = cgxgbtf_FileData__init_0(var$1.$val$name, var$3);
    var$1.$val$resolve.accept(otji_JSWrapper_javaToJs(var$2));
},
cgxgbtdt_TypedArrays = $rt_classWithoutFields(),
cgxgbtdt_TypedArrays__init_ = $this => {
    return;
},
cgxgbtdt_TypedArrays__init_0 = () => {
    let var_0 = new cgxgbtdt_TypedArrays();
    cgxgbtdt_TypedArrays__init_(var_0);
    return var_0;
},
cgxgbtdt_TypedArrays_toByteArray = $array => {
    return $rt_wrapArray($rt_bytecls, new Int8Array($array));
},
cgxgbtdt_TypedArrays_getTypedArray = $buffer => {
    let var$2, var$3;
    if ($buffer instanceof jn_ByteBuffer)
        $buffer = jn_JSBufferHelper_toInt8Array(jn_JSBufferHelper_getArrayBufferView($buffer));
    else if ($buffer instanceof jn_ShortBuffer) {
        $buffer = jn_JSBufferHelper_getArrayBufferView($buffer);
        $buffer = new Int16Array($buffer.buffer, $buffer.byteOffset, $buffer.byteLength / 2 | 0);
    } else if ($buffer instanceof jn_IntBuffer)
        $buffer = cgxgbtdt_TypedArrays_getInt32Array($buffer);
    else {
        if (!($buffer instanceof jn_FloatBuffer)) {
            var$2 = new cbgu_GdxRuntimeException;
            $buffer = jl_String_valueOf(jl_Object_getClass($buffer));
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(442));
            jl_AbstractStringBuilder_append(var$3, $buffer);
            jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
        }
        $buffer = cgxgbtdt_TypedArrays_getFloat32Array($buffer);
    }
    return $buffer;
},
cgxgbtdt_TypedArrays_getUint8Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Uint8Array($buff.buffer, $buff.byteOffset, $buff.byteLength);
},
cgxgbtdt_TypedArrays_getUint16Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Uint16Array($buff.buffer, $buff.byteOffset, $buff.byteLength / 2 | 0);
},
cgxgbtdt_TypedArrays_getInt32Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Int32Array($buff.buffer, $buff.byteOffset, $buff.byteLength / 4 | 0);
},
cgxgbtdt_TypedArrays_getFloat32Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Float32Array($buff.buffer, $buff.byteOffset, $buff.byteLength / 4 | 0);
},
cgxgbtdt_TypedArrays_getInt8Array = $buffer => {
    return $buffer.data;
},
jur_IntArrHash = $rt_classWithoutFields();
function cgxgbtf_FileData() {
    let a = this; jl_Object.call(a);
    a.$path3 = null;
    a.$bytes = null;
    a.$type7 = 0;
}
let cgxgbtf_FileData__init_2 = ($this, $path) => {
    cgxgbtf_FileData__init_($this, $path, 1, null);
},
cgxgbtf_FileData__init_1 = var_0 => {
    let var_1 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_2(var_1, var_0);
    return var_1;
},
cgxgbtf_FileData__init_3 = ($this, $path, $bytes) => {
    cgxgbtf_FileData__init_($this, $path, 2, $bytes);
},
cgxgbtf_FileData__init_0 = (var_0, var_1) => {
    let var_2 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_3(var_2, var_0, var_1);
    return var_2;
},
cgxgbtf_FileData__init_ = ($this, $path, $type, $bytes) => {
    if ($bytes !== null && jl_String_endsWith($path, $rt_s(107)))
        $path = jl_String_substring($path, 0, $path.$nativeString.length - 1 | 0);
    $this.$path3 = $path;
    $this.$bytes = $bytes;
    $this.$type7 = $type;
},
cgxgbtf_FileData__init_4 = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbtf_FileData_isDirectory = $this => {
    return $this.$type7 != 1 ? 0 : 1;
},
otjt_ArrayBufferView = $rt_classWithoutFields(),
otjt_TypedArray = $rt_classWithoutFields(otjt_ArrayBufferView),
otjt_Int8Array = $rt_classWithoutFields(otjt_TypedArray),
cbgu_GdxRuntimeException = $rt_classWithoutFields(jl_RuntimeException),
cbgu_GdxRuntimeException__init_3 = ($this, $message) => {
    jl_Exception__init_($this, $message);
},
cbgu_GdxRuntimeException__init_ = var_0 => {
    let var_1 = new cbgu_GdxRuntimeException();
    cbgu_GdxRuntimeException__init_3(var_1, var_0);
    return var_1;
},
cbgu_GdxRuntimeException__init_2 = ($this, $t) => {
    jl_Throwable__init_1($this, $t);
},
cbgu_GdxRuntimeException__init_4 = var_0 => {
    let var_1 = new cbgu_GdxRuntimeException();
    cbgu_GdxRuntimeException__init_2(var_1, var_0);
    return var_1;
},
cbgu_GdxRuntimeException__init_1 = ($this, $message, $t) => {
    jl_Throwable__init_0($this, $message, $t);
},
cbgu_GdxRuntimeException__init_0 = (var_0, var_1) => {
    let var_2 = new cbgu_GdxRuntimeException();
    cbgu_GdxRuntimeException__init_1(var_2, var_0, var_1);
    return var_2;
},
jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception),
jl_CloneNotSupportedException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_CloneNotSupportedException__init_0 = () => {
    let var_0 = new jl_CloneNotSupportedException();
    jl_CloneNotSupportedException__init_(var_0);
    return var_0;
},
pss_Section = $rt_classWithoutFields(),
pss_Section_defaultControl = null,
pss_Section_pointer = null,
pss_Section_veilPolygon1 = null,
pss_Section_veilPolygon2 = null,
pss_Section_textFonts = null,
pss_Section_pointerFill = null,
pss_Section_pointerLine = null,
pss_Section_veilColor1 = null,
pss_Section_veilColor2 = null,
pss_Section_projectionMatrix = null,
pss_Section_centroid = null,
pss_Section_control = null,
pss_Section_audio = null,
pss_Section_current = null,
pss_Section_previous = null,
pss_Section_vfxManager = null,
pss_Section_fxaaEffect = null,
pss_Section_bloomEffect = null,
pss_Section_blurEffect = null,
pss_Section_drawer = null,
pss_Section_batch = null,
pss_Section_labelFont = null,
pss_Section_textFont = null,
pss_Section_atlas = null,
pss_Section_profile = null,
pss_Section_progress = 0.0,
pss_Section_alpha = 0.0,
pss_Section_elapsedTime = 0.0,
pss_Section_frameTime = 0.0;
let pss_Section_forward = 0,
pss_Section_$callClinit = () => {
    pss_Section_$callClinit = $rt_eraseClinit(pss_Section);
    pss_Section__clinit_();
},
pss_Section__init_ = $this => {
    pss_Section_$callClinit();
},
pss_Section_createInitialize = () => {
    let var$1, var$2, var$3, $index, $index_0, $fontName, var$7;
    pss_Section_$callClinit();
    a: {
        pss_Section_profile = pss_Profile__init_0();
        var$1 = pss_Audio__init_0();
        pss_Section_audio = var$1;
        var$2 = pss_Section_profile;
        pss_Audio_setVolumes(var$1, var$2.$soundVolume * 0.10000000149011612, var$2.$musicVolume * 0.10000000149011612);
        var$1 = cbg_Gdx_graphics;
        var$2 = cbgg_Cursor$SystemCursor_None;
        var$3 = var$1.$canvas0.style;
        if (var$2 === cbgg_Cursor$SystemCursor_Arrow) {
            var$2 = $rt_s(443);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_Crosshair) {
            var$2 = $rt_s(444);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_Hand) {
            var$2 = $rt_s(445);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_HorizontalResize) {
            var$2 = $rt_s(446);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_VerticalResize) {
            var$2 = $rt_s(447);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_Ibeam) {
            var$2 = $rt_s(448);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_NWSEResize) {
            var$2 = $rt_s(449);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_NESWResize) {
            var$2 = $rt_s(450);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_AllResize) {
            var$2 = $rt_s(451);
            break a;
        }
        if (var$2 === cbgg_Cursor$SystemCursor_NotAllowed) {
            var$2 = $rt_s(452);
            break a;
        }
        if (var$2 !== cbgg_Cursor$SystemCursor_None) {
            var$1 = new cbgu_GdxRuntimeException;
            var$2 = jl_String_valueOf(var$2);
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(453));
            jl_AbstractStringBuilder_append(var$3, var$2);
            jl_Exception__init_(var$1, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$1);
        }
        var$2 = $rt_s(454);
    }
    var$3.setProperty("cursor", $rt_ustr(var$2));
    cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics);
    var$1 = new ccv_VfxManager;
    var$2 = cbgg_Pixmap$Format_RGBA8888;
    $index = cgxgbt_TeaGraphics_getBackBufferWidth(cbg_Gdx_graphics);
    $index_0 = cgxgbt_TeaGraphics_getBackBufferHeight(cbg_Gdx_graphics);
    var$1.$effects = ccvu_PrioritizedArray__init_0();
    var$1.$tmpEffectArray = cbgu_Array__init_();
    var$1.$capturing0 = 0;
    var$1.$disabled0 = 0;
    var$1.$applyingEffects = 0;
    var$1.$blendingEnabled = 0;
    var$1.$width11 = $index;
    var$1.$height9 = $index_0;
    var$3 = new ccv_VfxRenderContext;
    var$3.$bufferPool0 = ccvf_VfxFrameBufferPool__init_1(var$2, $index, $index_0, 8);
    var$3.$bufferRenderer = ccvf_VfxFrameBufferRenderer__init_0();
    var$3.$pixelFormat1 = var$2;
    var$3.$bufferWidth = $index;
    var$3.$bufferHeight = $index_0;
    var$1.$context0 = var$3;
    var$2 = new ccvf_VfxPingPongWrapper;
    $fontName = var$3.$bufferPool0;
    var$2.$bufferPool = null;
    var$2.$bufferPool = $fontName;
    var$3 = ccvf_VfxFrameBufferPool_obtain($fontName);
    $fontName = ccvf_VfxFrameBufferPool_obtain($fontName);
    if (var$2.$capturing) {
        var$2 = new jl_IllegalStateException;
        jl_RuntimeException__init_0(var$2, $rt_s(455));
        $rt_throw(var$2);
    }
    if (var$2.$bufDst !== null && var$2.$bufSrc !== null ? 1 : 0)
        ccvf_VfxPingPongWrapper_reset(var$2);
    var$2.$bufSrc = var$3;
    var$2.$bufDst = $fontName;
    var$1.$pingPongWrapper = var$2;
    pss_Section_vfxManager = var$1;
    var$2 = ccve_FxaaEffect__init_1(0.20000000298023224, 0.5, 4.0, 1);
    pss_Section_fxaaEffect = var$2;
    ccv_VfxManager_addEffect(var$1, var$2);
    var$1 = pss_Section_vfxManager;
    var$2 = ccve_BloomEffect__init_1(ccve_BloomEffect$Settings__init_(4, 0.6000000238418579, 1.0, 1.0, 1.399999976158142, 1.0));
    pss_Section_bloomEffect = var$2;
    ccv_VfxManager_addEffect(var$1, var$2);
    var$1 = pss_Section_vfxManager;
    var$2 = ccve_MotionBlurEffect__init_(cbgg_Pixmap$Format_RGBA8888, ccveu_MixEffect$Method_MAX, 0.20000000298023224);
    pss_Section_blurEffect = var$2;
    ccv_VfxManager_addEffect(var$1, var$2);
    cbg_Gdx_gl.$glClearColor(0.0, 0.0, 0.0, 1.0);
    var$1 = cbggg_PolygonSpriteBatch__init_1();
    pss_Section_batch = var$1;
    cbggg_PolygonSpriteBatch_setProjectionMatrix(var$1, cbgm_Matrix4_setToOrtho2D(pss_Section_projectionMatrix, 0.0, 0.0, 3840.0, 2400.0));
    var$1 = cbggg_TextureAtlas__init_1(cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(456)));
    pss_Section_atlas = var$1;
    var$2 = ses_ShapeDrawer__init_0(pss_Section_batch, cbggg_TextureAtlas_findRegion(var$1, $rt_s(457)));
    pss_Section_drawer = var$2;
    ses_AbstractShapeDrawer_setDefaultLineWidth(var$2, 4.0);
    pss_Shape_initialize(pss_Section_drawer);
    $index = pss_Section_textFonts.data.length;
    while (true) {
        $index_0 = $index + (-1) | 0;
        if (!$index)
            break;
        $index = 54 + ($index_0 * 4 | 0) | 0;
        var$1 = jl_StringBuilder__init_();
        jl_StringBuilder_append2(jl_StringBuilder_append(var$1, $rt_s(458)), $index);
        $fontName = jl_StringBuilder_toString(var$1);
        var$7 = pss_Section_textFonts.data;
        var$1 = new cbggg_BitmapFont;
        var$2 = cbg_Gdx_files;
        var$3 = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(459)), $fontName), $rt_s(460));
        var$3 = jl_StringBuilder_toString(var$3);
        cbggg_BitmapFont__init_1(var$1, cgxgbt_TeaFiles_internal(var$2, var$3), cbggg_TextureAtlas_findRegion(pss_Section_atlas, $fontName));
        var$7[$index_0] = var$1;
        $index = $index_0;
    }
    pss_Section_textFont = pss_Section_textFonts.data[pss_Section_profile.$textSize];
    pss_Section_labelFont = cbggg_BitmapFont__init_2(cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(461)), cbggg_TextureAtlas_findRegion(pss_Section_atlas, $rt_s(462)));
    psm_Menu_initialize();
    pse_Episode_initialize();
    pss_Section_current = pss_TitleSection__init_0();
    pss_Section_setControl(pss_Section_defaultControl);
},
pss_Section_setDrawerColor0 = $color => {
    let var$2, var$3, var$4, var$5, var$6;
    pss_Section_$callClinit();
    var$2 = pss_Section_drawer;
    var$3 = $color.$r;
    var$4 = $color.$g;
    var$5 = $color.$b;
    var$6 = $color.$a * pss_Section_alpha;
    ses_AbstractShapeDrawer_setColor0(var$2, var$3, var$4, var$5, var$6);
},
pss_Section_setFontColor = ($font, $color) => {
    pss_Section_$callClinit();
    cbggg_BitmapFont_setColor($font, $color.$r, $color.$g, $color.$b, $color.$a * pss_Section_alpha);
},
pss_Section_setDrawerColor = ($r, $g, $b, $a) => {
    let var$5;
    pss_Section_$callClinit();
    var$5 = pss_Section_drawer;
    $a = $a * pss_Section_alpha;
    ses_AbstractShapeDrawer_setColor0(var$5, $r, $g, $b, $a);
},
pss_Section_setBatchColor = ($r, $g, $b, $a) => {
    pss_Section_$callClinit();
    cbggg_PolygonSpriteBatch_setColor(pss_Section_batch, $r, $g, $b, $a * pss_Section_alpha);
},
pss_Section_setFontColor0 = ($font, $r, $g, $b, $a) => {
    pss_Section_$callClinit();
    cbggg_BitmapFont_setColor($font, $r, $g, $b, $a * pss_Section_alpha);
},
pss_Section_setControl = $control => {
    let var$2;
    pss_Section_$callClinit();
    if ($control === pss_Section_control)
        return;
    var$2 = cbg_Gdx_input;
    pss_Section_control = $control;
    var$2.$processor = $control;
    cbgc_Controllers_$callClinit();
    cbgc_Controllers_initialize();
    cbgc_Controllers_getManager();
    cbgc_Controllers_initialize();
    cbgc_Controllers_getManager();
},
pss_Section_setSection = $next => {
    pss_Section_$callClinit();
    pss_Section_previous = pss_Section_current;
    pss_Section_current = $next;
    pss_Section_progress = 0.0;
},
pss_Section_setMenu = $next => {
    pss_Section_$callClinit();
    pss_Section_setSection($next);
    psm_Menu_$callClinit();
    pss_Section_setControl(psm_Menu_repeatControl);
},
pss_Section_render = $this => {
    $this.$drawContent();
},
pss_Section_renderEnter = ($this, $progress) => {
    pss_Section_$callClinit();
    pss_Section_renderLeave(pss_Section_previous, $progress);
    pss_Section_alpha = $progress;
    $this.$drawContent();
    pss_Section_alpha = 1.0;
},
pss_Section_renderLeave = ($this, $progress) => {
    $progress = 1.0 - $progress;
    pss_Section_$callClinit();
    pss_Section_alpha = $progress;
    $this.$drawContent();
    pss_Section_alpha = 1.0;
},
pss_Section__clinit_ = () => {
    pss_Section_defaultControl = pss_Control__init_0();
    pss_Section_pointer = cbgm_Polygon__init_($rt_createFloatArrayFromData([0.0, 0.0, 0.0, (-48.0), 15.0, (-34.0), 35.0, (-34.0)]));
    pss_Section_veilPolygon1 = cbgm_Polygon__init_($rt_createFloatArrayFromData([0.0, 0.0, 0.0, 2400.0, 3840.0, 2400.0, 3840.0, 0.0]));
    pss_Section_veilPolygon2 = cbgm_Polygon__init_($rt_createFloatArrayFromData([0.0, 0.0, 0.0, 2400.0, 100.0, 100.0, 0.0]));
    pss_Section_textFonts = $rt_createArray(cbggg_BitmapFont, 3);
    pss_Section_pointerFill = cbgg_Color__init_((-2004317953));
    pss_Section_pointerLine = cbgg_Color__init_((-1));
    pss_Section_veilColor1 = cbgg_Color__init_(68);
    pss_Section_veilColor2 = cbgg_Color__init_(34);
    pss_Section_projectionMatrix = cbgm_Matrix4__init_();
    pss_Section_centroid = new cbgm_Vector2;
    pss_Section_progress = 1.0;
    pss_Section_alpha = 1.0;
    pss_Section_forward = 1;
},
ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException),
ju_NoSuchElementException__init_ = $this => {
    jl_Throwable__init_($this);
},
ju_NoSuchElementException__init_0 = () => {
    let var_0 = new ju_NoSuchElementException();
    ju_NoSuchElementException__init_(var_0);
    return var_0;
};
function cgxgbta_AssetLoadImpl$5() {
    let a = this; jl_Object.call(a);
    a.$val$config = null;
    a.$val$assetFileUrl = null;
    a.$this$03 = null;
}
let cgxgbta_AssetLoadImpl$5_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    var$3 = (jl_String_split(jl_String__init_2(cgxgbtdt_TypedArrays_toByteArray(var$2.$data10)), $rt_s(36))).data;
    var$1 = $this.$this$03;
    var$4 = var$3.length;
    var$1.$assetTotal = var$4;
    var$5 = 0;
    while (var$5 < var$4) {
        var$1 = var$3[var$5];
        var$6 = (jl_String_split(var$1, $rt_s(109))).data;
        var$7 = var$6.length;
        if (var$7 != 5) {
            var$2 = new cbgu_GdxRuntimeException;
            var$8 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$8);
            jl_AbstractStringBuilder_append(var$8, $rt_s(463));
            jl_AbstractStringBuilder_append1(var$8, var$7);
            jl_AbstractStringBuilder_append2(var$8, 32);
            jl_AbstractStringBuilder_append(var$8, var$1);
            jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$8));
            $rt_throw(var$2);
        }
        var$1 = var$6[0];
        var$8 = var$6[1];
        var$2 = jl_String_trim(var$6[2]);
        var$9 = jl_String_equals(var$6[4], $rt_s(464));
        var$2 = jl_String_trim(var$2);
        if (!jl_String_isEmpty(var$2)) {
            var$10 = cbg_Files$FileType_Internal;
            if (jl_String_equals(var$1, $rt_s(465)))
                var$10 = cbg_Files$FileType_Classpath;
            else if (jl_String_equals(var$1, $rt_s(466)))
                var$10 = cbg_Files$FileType_Local;
            var$11 = cgxgbta_AssetType_Binary;
            if (jl_String_equals(var$8, $rt_s(236)))
                var$11 = cgxgbta_AssetType_Directory;
            if (!(!$this.$val$config.$preloadAssets && var$10 !== cbg_Files$FileType_Classpath)) {
                var$12 = $this.$this$03;
                var$1 = null;
                var$2 = jl_String_replace(jl_String_trim(var$2), $rt_s(467), $rt_s(107));
                if (jl_String_startsWith(var$2, $rt_s(107)))
                    var$2 = jl_String_substring0(var$2, 1);
                if (!jl_String_isEmpty(var$2) && !(ju_HashMap_entryByKey(var$12.$assetInQueue.$backingMap, var$2) === null ? 0 : 1)) {
                    var$13 = cgxgbt_TeaFiles_getFileHandle(cbg_Gdx_files, var$2, var$10);
                    var$7 = cgxgbt_TeaFileHandle_exists(var$13);
                    if (!(!var$9 && var$7)) {
                        if (var$11 !== cgxgbta_AssetType_Directory) {
                            ju_HashSet_add(var$12.$assetInQueue, var$2);
                            var$8 = var$12.$assetDownloader;
                            var$14 = cgxgbta_AssetLoadImpl_getAssetUrl(var$12);
                            var$10 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$10);
                            jl_AbstractStringBuilder_append(var$10, var$14);
                            jl_AbstractStringBuilder_append(var$10, var$2);
                            var$10 = jl_AbstractStringBuilder_toString(var$10);
                            var$14 = cgxgbta_AssetType_Binary;
                            var$11 = new cgxgbta_AssetLoadImpl$6;
                            var$11.$this$09 = var$12;
                            var$11.$val$listener0 = var$1;
                            var$11.$val$path1 = var$2;
                            var$11.$val$fileHandle = var$13;
                            cgxgbta_AssetDownloadImpl_load(var$8, 1, var$10, var$14, var$11);
                        } else if (!var$7)
                            cgxgbtf_MemoryFileStorage_mkdirs(cgxgbt_TeaFiles_getFileDB(var$13.$teaFiles, var$13.$type0), var$13);
                    }
                }
            }
        }
        var$5 = var$5 + 1 | 0;
    }
};
function cgxgbta_AssetType() {
    jl_Enum.call(this);
    this.$code = null;
}
let cgxgbta_AssetType_Binary = null,
cgxgbta_AssetType_Directory = null,
cgxgbta_AssetType_$VALUES = null,
cgxgbta_AssetType_values = () => {
    return cgxgbta_AssetType_$VALUES.$clone0();
},
cgxgbta_AssetType__init_0 = ($this, var$1, var$2, $code) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$code = $code;
},
cgxgbta_AssetType__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbta_AssetType();
    cgxgbta_AssetType__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbta_AssetType__clinit_ = () => {
    let var$1, var$2, var$3;
    cgxgbta_AssetType_Binary = cgxgbta_AssetType__init_($rt_s(468), 0, $rt_s(469));
    var$1 = cgxgbta_AssetType__init_($rt_s(470), 1, $rt_s(236));
    cgxgbta_AssetType_Directory = var$1;
    var$2 = $rt_createArray(cgxgbta_AssetType, 2);
    var$3 = var$2.data;
    var$3[0] = cgxgbta_AssetType_Binary;
    var$3[1] = var$1;
    cgxgbta_AssetType_$VALUES = var$2;
},
cgxgbtfi_IndexedDBFileData = $rt_classWithoutFields(),
cgxgbtfi_IndexedDBFileData_create$js_body$_5 = (var$1, var$2) => {
    return { type : var$1, date : var$2 };
};
function cgxgbtft_LocalDBStorage$putFile$lambda$_2_0() {
    jl_Object.call(this);
    this.$_013 = null;
}
let cgxgbtft_LocalDBStorage$putFile$lambda$_2_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3;
    var$1 = var$1.$_013;
    var$2 = jl_System_err();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(471));
    jl_AbstractStringBuilder_append(var$3, var$1);
    var$1 = jl_AbstractStringBuilder_toString(var$3);
    otcic_JsConsolePrintStream_println(var$2, var$1);
};
function ccv_VfxManager() {
    let a = this; jl_Object.call(a);
    a.$effects = null;
    a.$tmpEffectArray = null;
    a.$context0 = null;
    a.$pingPongWrapper = null;
    a.$capturing0 = 0;
    a.$disabled0 = 0;
    a.$applyingEffects = 0;
    a.$blendingEnabled = 0;
    a.$width11 = 0;
    a.$height9 = 0;
}
let ccv_VfxManager_tmpVec = null,
ccv_VfxManager_addEffect = ($this, $effect) => {
    let var$2, var$3, var$4;
    var$2 = $this.$effects;
    var$3 = var$2.$items3;
    ccvu_PrioritizedArray$Wrapper_$callClinit();
    var$4 = cbgu_Pool_obtain(ccvu_PrioritizedArray$Wrapper_pool);
    var$4.$item = $effect;
    var$4.$priority = 0;
    ju_HashMap_put(var$3.$map, $effect, var$4);
    cbgu_Array_add(var$3.$values6, var$4);
    var$4 = var$2.$items3;
    var$2 = var$2.$comparator;
    cbgu_Array_sort(var$4.$values6, var$2);
    $effect.$resize3($this.$width11, $this.$height9);
},
ccv_VfxManager_applyEffects = $this => {
    let $effectChain, $i, $effect;
    if ($this.$capturing0) {
        $effectChain = new jl_IllegalStateException;
        jl_Exception__init_($effectChain, $rt_s(472));
        $rt_throw($effectChain);
    }
    if ($this.$disabled0)
        return;
    $effectChain = $this.$tmpEffectArray;
    $i = 0;
    while (true) {
        $effect = $this.$effects.$items3;
        if ($i >= $effect.$map.$elementCount)
            break;
        $effect = (cbgu_Array_get($effect.$values6, $i)).$item;
        if (!$effect.$disabled)
            cbgu_Array_add($effectChain, $effect);
        $i = $i + 1 | 0;
    }
    if (!$effectChain.$size0) {
        cbgu_Array_clear($effectChain);
        return;
    }
    $this.$applyingEffects = 1;
    if ($this.$blendingEnabled)
        cbg_Gdx_gl.$glEnable(3042);
    cbg_Gdx_gl.$glDisable(2884);
    cbg_Gdx_gl.$glDisable(2929);
    ccvf_VfxPingPongWrapper_swap($this.$pingPongWrapper);
    ccvf_VfxPingPongWrapper_begin($this.$pingPongWrapper);
    $i = 0;
    while ($i < $effectChain.$size0) {
        (cbgu_Array_get($effectChain, $i)).$render0($this.$context0, $this.$pingPongWrapper);
        if ($i < ($effectChain.$size0 - 1 | 0))
            ccvf_VfxPingPongWrapper_swap($this.$pingPongWrapper);
        $i = $i + 1 | 0;
    }
    cbgu_Array_clear($effectChain);
    ccvf_VfxPingPongWrapper_end($this.$pingPongWrapper);
    cbg_Gdx_gl.$glActiveTexture(33984);
    if ($this.$blendingEnabled)
        cbg_Gdx_gl.$glDisable(3042);
    $this.$applyingEffects = 0;
},
ccv_VfxManager_renderToScreen = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if ($this.$capturing0) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(473));
        $rt_throw(var$1);
    }
    if ($this.$blendingEnabled)
        cbg_Gdx_gl.$glEnable(3042);
    var$2 = $this.$context0.$bufferRenderer;
    var$3 = ccvf_VfxFrameBuffer_getTexture($this.$pingPongWrapper.$bufDst);
    var$4 = cgxgbt_TeaGraphics_getBackBufferWidth(cbg_Gdx_graphics);
    var$5 = cgxgbt_TeaGraphics_getBackBufferHeight(cbg_Gdx_graphics);
    cbgg_GLTexture_bind(var$3, 0);
    cbg_Gdx_graphics.$gl20.$glViewport(0, 0, var$4, var$5);
    cbggg_ShaderProgram_bind(var$2.$shader0);
    ccvu_ViewportQuadMesh_render(var$2.$mesh, var$2.$shader0);
    if ($this.$blendingEnabled)
        cbg_Gdx_gl.$glDisable(3042);
},
ccv_VfxManager__clinit_ = () => {
    ccv_VfxManager_tmpVec = new cbgm_Vector2;
},
ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException),
ju_ConcurrentModificationException__init_ = $this => {
    jl_Throwable__init_($this);
},
ju_ConcurrentModificationException__init_0 = () => {
    let var_0 = new ju_ConcurrentModificationException();
    ju_ConcurrentModificationException__init_(var_0);
    return var_0;
};
function pss_Profile() {
    let a = this; jl_Object.call(a);
    a.$gameState = null;
    a.$textSize = 0;
    a.$soundVolume = 0;
    a.$musicVolume = 0;
}
let pss_Profile__init_ = $this => {
    let var$1, var$2, $preferences;
    $this.$gameState = $rt_s(474);
    $this.$textSize = 0;
    $this.$soundVolume = 3;
    $this.$musicVolume = 1;
    var$1 = cgxgbt_TeaApplication_getPreferences(cbg_Gdx_app, $rt_s(79));
    cgxgbt_TeaPreferences_clear(var$1);
    cgxgbt_TeaPreferences_flush(var$1);
    $this.$textSize = cgxgbt_TeaPreferences_getInteger(var$1, $rt_s(81), $this.$textSize);
    $this.$soundVolume = cgxgbt_TeaPreferences_getInteger(var$1, $rt_s(82), $this.$soundVolume);
    $this.$musicVolume = cgxgbt_TeaPreferences_getInteger(var$1, $rt_s(83), $this.$musicVolume);
    var$2 = $this.$gameState;
    $preferences = cbgu_ObjectMap_get(var$1.$values5, $rt_s(475));
    if ($preferences === null)
        $preferences = var$2;
    $this.$gameState = $preferences;
},
pss_Profile__init_0 = () => {
    let var_0 = new pss_Profile();
    pss_Profile__init_(var_0);
    return var_0;
};
function pss_Audio() {
    let a = this; jl_Object.call(a);
    a.$music = null;
    a.$sounds = null;
    a.$optionSelect = null;
    a.$ah1zGun = null;
    a.$ka50Gun = null;
    a.$currentMusic = null;
    a.$soundVolume0 = 0.0;
    a.$musicVolume0 = 0.0;
}
let pss_Audio__init_ = $this => {
    let var$1, $entry, var$3, var$4, var$5, $index, $index_0, var$8;
    $this.$music = ju_HashMap__init_();
    $this.$sounds = ju_HashMap__init_();
    var$1 = $this.$music;
    $entry = cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(476));
    var$3 = new cgxgbtwh_HowlMusic;
    var$3.$howl = cgxgbtwh_Howl_create$js_body$_1(cgxgbtdt_TypedArrays_getInt8Array(cbgf_FileHandle_readBytes($entry)));
    $this.$currentMusic = var$3;
    ju_HashMap_put(var$1, $rt_s(477), var$3);
    $entry = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$music));
    var$1 = $entry;
    var$3 = $entry;
    while (ju_HashMap$AbstractMapIterator_hasNext(var$1)) {
        (ju_HashMap$EntryIterator_next(var$3)).$value.$howl.loop(!!1);
    }
    var$4 = $rt_createArray(cbga_Sound, 4);
    var$5 = var$4.data;
    $this.$optionSelect = var$4;
    $index = var$5.length;
    while (true) {
        $index_0 = $index + (-1) | 0;
        if (!$index)
            break;
        var$4 = $this.$optionSelect.data;
        $entry = cbg_Gdx_audio;
        var$3 = cbg_Gdx_files;
        var$1 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$1);
        jl_AbstractStringBuilder_append(var$1, $rt_s(478));
        jl_AbstractStringBuilder_append1(var$1, $index_0);
        jl_AbstractStringBuilder_append(var$1, $rt_s(479));
        var$1 = jl_AbstractStringBuilder_toString(var$1);
        var$3 = cgxgbt_TeaFiles_internal(var$3, var$1);
        var$4[$index_0] = cgxgbt_DefaultTeaAudio_newSound($entry, var$3);
        $index = $index_0;
    }
    var$4 = $rt_createArray(cbga_Sound, 4);
    var$5 = var$4.data;
    $this.$ah1zGun = var$4;
    $index = var$5.length;
    while (true) {
        $index_0 = $index + (-1) | 0;
        if (!$index)
            break;
        var$4 = $this.$ah1zGun.data;
        $entry = cbg_Gdx_audio;
        var$3 = cbg_Gdx_files;
        var$1 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$1);
        jl_AbstractStringBuilder_append(var$1, $rt_s(480));
        jl_AbstractStringBuilder_append1(var$1, $index_0);
        jl_AbstractStringBuilder_append(var$1, $rt_s(479));
        var$1 = jl_AbstractStringBuilder_toString(var$1);
        var$3 = cgxgbt_TeaFiles_internal(var$3, var$1);
        var$4[$index_0] = cgxgbt_DefaultTeaAudio_newSound($entry, var$3);
        $index = $index_0;
    }
    var$4 = $rt_createArray(cbga_Sound, 2);
    var$5 = var$4.data;
    $this.$ka50Gun = var$4;
    $index = var$5.length;
    while (true) {
        $index_0 = $index + (-1) | 0;
        if (!$index)
            break;
        var$4 = $this.$ka50Gun.data;
        $entry = cbg_Gdx_audio;
        var$3 = cbg_Gdx_files;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(var$8, $rt_s(481));
        jl_AbstractStringBuilder_append1(var$8, $index_0);
        jl_AbstractStringBuilder_append(var$8, $rt_s(479));
        var$1 = jl_AbstractStringBuilder_toString(var$8);
        var$3 = cgxgbt_TeaFiles_internal(var$3, var$1);
        var$4[$index_0] = cgxgbt_DefaultTeaAudio_newSound($entry, var$3);
        $index = $index_0;
    }
},
pss_Audio__init_0 = () => {
    let var_0 = new pss_Audio();
    pss_Audio__init_(var_0);
    return var_0;
},
pss_Audio_dispose = $this => {
    let var$1, var$2, var$3, $entry, var$5, $sound, $entry_0;
    var$1 = $this.$ka50Gun.data;
    var$2 = var$1.length;
    var$3 = 0;
    while (var$3 < var$2) {
        cgxgbtwh_HowlSound_dispose(var$1[var$3]);
        var$3 = var$3 + 1 | 0;
    }
    var$1 = $this.$ah1zGun.data;
    var$2 = var$1.length;
    var$3 = 0;
    while (var$3 < var$2) {
        cgxgbtwh_HowlSound_dispose(var$1[var$3]);
        var$3 = var$3 + 1 | 0;
    }
    var$1 = $this.$optionSelect.data;
    var$2 = var$1.length;
    var$3 = 0;
    while (var$3 < var$2) {
        cgxgbtwh_HowlSound_dispose(var$1[var$3]);
        var$3 = var$3 + 1 | 0;
    }
    $entry = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$music));
    var$5 = $entry;
    $sound = $entry;
    while (ju_HashMap$AbstractMapIterator_hasNext(var$5)) {
        $entry_0 = ju_HashMap$EntryIterator_next($sound);
        $entry_0.$value.$howl.stop();
        $entry = $entry_0.$value;
        $entry.$howl.stop();
        $entry.$howl.unload();
        $entry.$howl = null;
    }
    $entry = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$sounds));
    $sound = $entry;
    $entry = $entry;
    while (ju_HashMap$AbstractMapIterator_hasNext($sound)) {
        (ju_HashMap$EntryIterator_next($entry)).$value.$dispose();
    }
},
pss_Audio_setVolumes = ($this, $soundVolume, $musicVolume) => {
    let var$3;
    $this.$soundVolume0 = $soundVolume;
    var$3 = $this.$currentMusic;
    $this.$musicVolume0 = $musicVolume;
    cgxgbtwh_HowlMusic_setVolume(var$3, $musicVolume);
},
pss_Audio_playSound = ($this, $title, $pan) => {
    let var$3, var$4;
    if (jl_String_equals($title, $rt_s(482))) {
        var$3 = $this.$optionSelect.data;
        $title = var$3[cbgm_MathUtils_random(var$3.length - 1 | 0)];
        var$4 = $this.$soundVolume0;
        cgxgbtwh_HowlSound_play($title, var$4, 1.0, $pan);
    } else if (jl_String_equals($title, $rt_s(483))) {
        var$3 = $this.$ah1zGun.data;
        $title = var$3[cbgm_MathUtils_random(var$3.length - 1 | 0)];
        var$4 = $this.$soundVolume0;
        cgxgbtwh_HowlSound_play($title, var$4, 1.0, $pan);
    } else if (!jl_String_equals($title, $rt_s(484)))
        (ju_HashMap_get($this.$sounds, $title)).$play($this.$soundVolume0, 1.0, $pan);
    else {
        var$3 = $this.$ka50Gun.data;
        $title = var$3[cbgm_MathUtils_random(var$3.length - 1 | 0)];
        var$4 = $this.$soundVolume0;
        cgxgbtwh_HowlSound_play($title, var$4, 1.0, $pan);
    }
},
cbgg_Cursor$SystemCursor = $rt_classWithoutFields(jl_Enum),
cbgg_Cursor$SystemCursor_Arrow = null,
cbgg_Cursor$SystemCursor_Ibeam = null,
cbgg_Cursor$SystemCursor_Crosshair = null,
cbgg_Cursor$SystemCursor_Hand = null,
cbgg_Cursor$SystemCursor_HorizontalResize = null,
cbgg_Cursor$SystemCursor_VerticalResize = null,
cbgg_Cursor$SystemCursor_NWSEResize = null,
cbgg_Cursor$SystemCursor_NESWResize = null,
cbgg_Cursor$SystemCursor_AllResize = null,
cbgg_Cursor$SystemCursor_NotAllowed = null,
cbgg_Cursor$SystemCursor_None = null,
cbgg_Cursor$SystemCursor_$VALUES = null,
cbgg_Cursor$SystemCursor_values = () => {
    return cbgg_Cursor$SystemCursor_$VALUES.$clone0();
},
cbgg_Cursor$SystemCursor__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(485), 0);
    cbgg_Cursor$SystemCursor_Arrow = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(486), 1);
    cbgg_Cursor$SystemCursor_Ibeam = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(487), 2);
    cbgg_Cursor$SystemCursor_Crosshair = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(488), 3);
    cbgg_Cursor$SystemCursor_Hand = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(489), 4);
    cbgg_Cursor$SystemCursor_HorizontalResize = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(490), 5);
    cbgg_Cursor$SystemCursor_VerticalResize = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(491), 6);
    cbgg_Cursor$SystemCursor_NWSEResize = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(492), 7);
    cbgg_Cursor$SystemCursor_NESWResize = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(493), 8);
    cbgg_Cursor$SystemCursor_AllResize = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(494), 9);
    cbgg_Cursor$SystemCursor_NotAllowed = var$1;
    var$1 = new cbgg_Cursor$SystemCursor;
    jl_Enum__init_(var$1, $rt_s(495), 10);
    cbgg_Cursor$SystemCursor_None = var$1;
    var$2 = $rt_createArray(cbgg_Cursor$SystemCursor, 11);
    var$3 = var$2.data;
    var$3[0] = cbgg_Cursor$SystemCursor_Arrow;
    var$3[1] = cbgg_Cursor$SystemCursor_Ibeam;
    var$3[2] = cbgg_Cursor$SystemCursor_Crosshair;
    var$3[3] = cbgg_Cursor$SystemCursor_Hand;
    var$3[4] = cbgg_Cursor$SystemCursor_HorizontalResize;
    var$3[5] = cbgg_Cursor$SystemCursor_VerticalResize;
    var$3[6] = cbgg_Cursor$SystemCursor_NWSEResize;
    var$3[7] = cbgg_Cursor$SystemCursor_NESWResize;
    var$3[8] = cbgg_Cursor$SystemCursor_AllResize;
    var$3[9] = cbgg_Cursor$SystemCursor_NotAllowed;
    var$3[10] = var$1;
    cbgg_Cursor$SystemCursor_$VALUES = var$2;
},
cbgg_Pixmap$Format = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Format_Alpha = null,
cbgg_Pixmap$Format_Intensity = null,
cbgg_Pixmap$Format_LuminanceAlpha = null,
cbgg_Pixmap$Format_RGB565 = null,
cbgg_Pixmap$Format_RGBA4444 = null,
cbgg_Pixmap$Format_RGB888 = null,
cbgg_Pixmap$Format_RGBA8888 = null,
cbgg_Pixmap$Format_$VALUES = null,
cbgg_Pixmap$Format_values = () => {
    return cbgg_Pixmap$Format_$VALUES.$clone0();
},
cbgg_Pixmap$Format_toGdx2DPixmapFormat = $format => {
    let var$2, var$3;
    if ($format === cbgg_Pixmap$Format_Alpha)
        return 1;
    if ($format === cbgg_Pixmap$Format_Intensity)
        return 1;
    if ($format === cbgg_Pixmap$Format_LuminanceAlpha)
        return 2;
    if ($format === cbgg_Pixmap$Format_RGB565)
        return 5;
    if ($format === cbgg_Pixmap$Format_RGBA4444)
        return 6;
    if ($format === cbgg_Pixmap$Format_RGB888)
        return 3;
    if ($format === cbgg_Pixmap$Format_RGBA8888)
        return 4;
    var$2 = new cbgu_GdxRuntimeException;
    $format = jl_String_valueOf($format);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(496));
    jl_AbstractStringBuilder_append(var$3, $format);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
cbgg_Pixmap$Format__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(206), 0);
    cbgg_Pixmap$Format_Alpha = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(497), 1);
    cbgg_Pixmap$Format_Intensity = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(498), 2);
    cbgg_Pixmap$Format_LuminanceAlpha = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(499), 3);
    cbgg_Pixmap$Format_RGB565 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(500), 4);
    cbgg_Pixmap$Format_RGBA4444 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(501), 5);
    cbgg_Pixmap$Format_RGB888 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(502), 6);
    cbgg_Pixmap$Format_RGBA8888 = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Format, 7);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Format_Alpha;
    var$3[1] = cbgg_Pixmap$Format_Intensity;
    var$3[2] = cbgg_Pixmap$Format_LuminanceAlpha;
    var$3[3] = cbgg_Pixmap$Format_RGB565;
    var$3[4] = cbgg_Pixmap$Format_RGBA4444;
    var$3[5] = cbgg_Pixmap$Format_RGB888;
    var$3[6] = var$1;
    cbgg_Pixmap$Format_$VALUES = var$2;
},
ccve_VfxEffect = $rt_classWithoutFields(0);
function ccve_AbstractVfxEffect() {
    jl_Object.call(this);
    this.$disabled = 0;
}
let ccve_AbstractVfxEffect_isDisabled = $this => {
    return $this.$disabled;
};
function ccve_ShaderVfxEffect() {
    ccve_AbstractVfxEffect.call(this);
    this.$program = null;
}
let ccve_ShaderVfxEffect__init_ = ($this, $program) => {
    $this.$program = $program;
},
ccve_ShaderVfxEffect_dispose = $this => {
    cbggg_ShaderProgram_dispose($this.$program);
},
ccve_ShaderVfxEffect_resize = ($this, $width, $height) => {
    return;
},
ccve_ShaderVfxEffect_renderShader = ($this, $context, $dst) => {
    let $manualBufferBind;
    $manualBufferBind = $dst.$drawing0 ? 0 : 1;
    if ($manualBufferBind)
        ccvf_VfxFrameBuffer_begin($dst);
    cbggg_ShaderProgram_bind($this.$program);
    ccvu_ViewportQuadMesh_render($context.$bufferRenderer.$mesh, $this.$program);
    if ($manualBufferBind)
        ccvf_VfxFrameBuffer_end($dst);
},
ccve_ShaderVfxEffect_setUniform = ($this, $uniformName, $value) => {
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformf($this.$program, $uniformName, $value);
},
ccve_ChainVfxEffect = $rt_classWithoutFields(0);
function ccve_FxaaEffect() {
    let a = this; ccve_ShaderVfxEffect.call(a);
    a.$viewportInverse = null;
    a.$fxaaReduceMin = 0.0;
    a.$fxaaReduceMul = 0.0;
    a.$fxaaSpanMax = 0.0;
}
let ccve_FxaaEffect__init_ = $this => {
    ccve_FxaaEffect__init_0($this, 0.0078125, 0.125, 8.0, 1);
},
ccve_FxaaEffect__init_2 = () => {
    let var_0 = new ccve_FxaaEffect();
    ccve_FxaaEffect__init_(var_0);
    return var_0;
},
ccve_FxaaEffect__init_0 = ($this, $fxaaReduceMin, $fxaaReduceMul, $fxaaSpanMax, $supportAlpha) => {
    ccve_ShaderVfxEffect__init_($this, ccvg_VfxGLUtils_compileShader(cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503)), cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(504)), !$supportAlpha ? $rt_s(9) : $rt_s(505)));
    $this.$viewportInverse = new cbgm_Vector2;
    $this.$fxaaReduceMin = $fxaaReduceMin;
    $this.$fxaaReduceMul = $fxaaReduceMul;
    $this.$fxaaSpanMax = $fxaaSpanMax;
    ccve_FxaaEffect_rebind($this);
},
ccve_FxaaEffect__init_1 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new ccve_FxaaEffect();
    ccve_FxaaEffect__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
ccve_FxaaEffect_resize = ($this, $width, $height) => {
    let var$3, var$4;
    cbgm_Vector2_set($this.$viewportInverse, 1.0 / $width, 1.0 / $height);
    var$3 = $this.$viewportInverse;
    var$4 = $this;
    cbggg_ShaderProgram_bind(var$4.$program);
    cbggg_ShaderProgram_setUniformf0(var$4.$program, $rt_s(506), var$3);
},
ccve_FxaaEffect_rebind = $this => {
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(507), 0);
    cbggg_ShaderProgram_setUniformf0($this.$program, $rt_s(506), $this.$viewportInverse);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(508), $this.$fxaaReduceMin);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(509), $this.$fxaaReduceMul);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(510), $this.$fxaaSpanMax);
},
ccve_FxaaEffect_render = ($this, $context, $buffers) => {
    let var$3, var$4;
    var$3 = $buffers.$bufSrc;
    var$4 = $buffers.$bufDst;
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$3), 0);
    ccve_ShaderVfxEffect_renderShader($this, $context, var$4);
};
function ccve_CompositeVfxEffect() {
    ccve_AbstractVfxEffect.call(this);
    this.$managedEffects = null;
}
let ccve_CompositeVfxEffect__init_ = $this => {
    $this.$managedEffects = cbgu_Array__init_();
},
ccve_CompositeVfxEffect_resize = ($this, $width, $height) => {
    let $i, var$4;
    $i = 0;
    while (true) {
        var$4 = $this.$managedEffects;
        if ($i >= var$4.$size0)
            break;
        (cbgu_Array_get(var$4, $i)).$resize3($width, $height);
        $i = $i + 1 | 0;
    }
},
ccve_CompositeVfxEffect_rebind = $this => {
    let $i, var$2;
    $i = 0;
    while (true) {
        var$2 = $this.$managedEffects;
        if ($i >= var$2.$size0)
            break;
        (cbgu_Array_get(var$2, $i)).$rebind();
        $i = $i + 1 | 0;
    }
},
ccve_CompositeVfxEffect_dispose = $this => {
    let $i, var$2;
    $i = 0;
    while (true) {
        var$2 = $this.$managedEffects;
        if ($i >= var$2.$size0)
            break;
        (cbgu_Array_get(var$2, $i)).$dispose();
        $i = $i + 1 | 0;
    }
},
ccve_CompositeVfxEffect_register = ($this, $effect) => {
    cbgu_Array_add($this.$managedEffects, $effect);
    return $effect;
};
function ccve_BloomEffect() {
    let a = this; ccve_CompositeVfxEffect.call(a);
    a.$copy1 = null;
    a.$blur = null;
    a.$threshold2 = null;
    a.$combine = null;
    a.$blending = 0;
    a.$sfactor = 0;
    a.$dfactor = 0;
}
let ccve_BloomEffect__init_ = $this => {
    ccve_BloomEffect__init_0($this, ccve_BloomEffect$Settings__init_(10, 0.8500000238418579, 1.0, 0.8500000238418579, 1.100000023841858, 0.8500000238418579));
},
ccve_BloomEffect__init_2 = () => {
    let var_0 = new ccve_BloomEffect();
    ccve_BloomEffect__init_(var_0);
    return var_0;
},
ccve_BloomEffect__init_0 = ($this, $settings) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    ccve_CompositeVfxEffect__init_($this);
    $this.$blending = 0;
    var$2 = ccveu_CopyEffect__init_0();
    var$3 = $this;
    $this.$copy1 = ccve_CompositeVfxEffect_register(var$3, var$2);
    $this.$blur = ccve_CompositeVfxEffect_register(var$3, ccve_GaussianBlurEffect__init_0());
    var$4 = new ccveu_GammaThresholdEffect;
    var$2 = ccveu_GammaThresholdEffect$Type_RGBA;
    var$5 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503));
    var$6 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(511));
    var$7 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$7);
    jl_AbstractStringBuilder_append0(var$7, $rt_s(512));
    jl_AbstractStringBuilder_append0(var$7, var$2.$name0);
    ccve_ShaderVfxEffect__init_(var$4, ccvg_VfxGLUtils_compileShader(var$5, var$6, jl_AbstractStringBuilder_toString(var$7)));
    ccveu_GammaThresholdEffect_rebind(var$4);
    $this.$threshold2 = ccve_CompositeVfxEffect_register(var$3, var$4);
    $this.$combine = ccve_CompositeVfxEffect_register(var$3, ccveu_CombineEffect__init_0());
    var$8 = $settings.$bloomThreshold;
    var$2 = $this.$threshold2;
    var$2.$gamma = var$8;
    var$6 = var$2;
    ccve_ShaderVfxEffect_setUniform(var$6, $rt_s(513), var$8);
    ccve_ShaderVfxEffect_setUniform(var$6, $rt_s(514), 1.0 / (1.0 - var$8));
    var$8 = $settings.$baseIntensity;
    var$2 = $this.$combine;
    var$2.$s1i = var$8;
    ccve_ShaderVfxEffect_setUniform(var$2, $rt_s(515), var$8);
    var$8 = $settings.$baseSaturation;
    var$2 = $this.$combine;
    var$2.$s1s = var$8;
    ccve_ShaderVfxEffect_setUniform(var$2, $rt_s(516), var$8);
    var$8 = $settings.$bloomIntensity;
    var$2 = $this.$combine;
    var$2.$s2i = var$8;
    ccve_ShaderVfxEffect_setUniform(var$2, $rt_s(517), var$8);
    var$8 = $settings.$bloomSaturation;
    var$2 = $this.$combine;
    var$2.$s2s = var$8;
    ccve_ShaderVfxEffect_setUniform(var$2, $rt_s(518), var$8);
    var$9 = $settings.$blurPasses;
    var$2 = $this.$blur;
    if (var$9 < 1) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2, $rt_s(519));
        $rt_throw(var$2);
    }
    var$2.$passes = var$9;
    var$2.$amount = $settings.$blurAmount;
    ccve_GaussianBlurEffect_computeBlurWeightings(var$2);
    $settings = $settings.$blurType;
    ccve_GaussianBlurEffect_setType($this.$blur, $settings);
},
ccve_BloomEffect__init_1 = var_0 => {
    let var_1 = new ccve_BloomEffect();
    ccve_BloomEffect__init_0(var_1, var_0);
    return var_1;
},
ccve_BloomEffect_render = ($this, $context, $buffers) => {
    let $origSrc, $blendingWasEnabled, var$5, var$6, var$7, var$8;
    $origSrc = ccvf_VfxFrameBufferPool_obtain($context.$bufferPool0);
    ccveu_CopyEffect_render($this.$copy1, $context, $buffers.$bufSrc, $origSrc);
    ccvg_VfxGLUtils_$callClinit();
    if (!ccvg_VfxGLUtils_enableGLQueryStates)
        $blendingWasEnabled = 0;
    else
        a: {
            switch (3042) {
                case 3042:
                    cbg_Gdx_gl20.$glGetBooleanv(3042, ccvg_VfxGLUtils_tmpByteBuffer);
                    var$5 = ccvg_VfxGLUtils_tmpByteBuffer;
                    var$6 = var$5.$position0;
                    if (var$6 >= var$5.$limit0) {
                        $context = new jn_BufferUnderflowException;
                        jl_Throwable__init_($context);
                        $rt_throw($context);
                    }
                    var$7 = var$5.$data0;
                    var$5.$position0 = var$6 + 1 | 0;
                    $blendingWasEnabled = var$7[var$6] != 1 ? 0 : 1;
                    jn_Buffer_clear(ccvg_VfxGLUtils_tmpByteBuffer);
                    break a;
                default:
            }
            $blendingWasEnabled = 0;
        }
    cbg_Gdx_gl.$glDisable(3042);
    ccveu_GammaThresholdEffect_render($this.$threshold2, $context, $buffers);
    ccvf_VfxPingPongWrapper_swap($buffers);
    ccve_GaussianBlurEffect_render($this.$blur, $context, $buffers);
    ccvf_VfxPingPongWrapper_swap($buffers);
    if (!(!$this.$blending && !$blendingWasEnabled))
        cbg_Gdx_gl.$glEnable(3042);
    if ($this.$blending)
        cbg_Gdx_gl.$glBlendFunc($this.$sfactor, $this.$dfactor);
    var$5 = $this.$combine;
    var$8 = $buffers.$bufSrc;
    var$7 = $buffers.$bufDst;
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture($origSrc), 0);
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$8), 1);
    ccve_ShaderVfxEffect_renderShader(var$5, $context, var$7);
    ccvf_VfxFrameBufferPool_free($context.$bufferPool0, $origSrc);
};
function ccve_BloomEffect$Settings() {
    let a = this; jl_Object.call(a);
    a.$blurType = null;
    a.$blurPasses = 0;
    a.$blurAmount = 0.0;
    a.$bloomThreshold = 0.0;
    a.$bloomIntensity = 0.0;
    a.$bloomSaturation = 0.0;
    a.$baseIntensity = 0.0;
    a.$baseSaturation = 0.0;
}
let ccve_BloomEffect$Settings__init_0 = ($this, $blurPasses, $bloomThreshold, $baseIntensity, $baseSaturation, $bloomIntensity, $bloomSaturation) => {
    ccve_GaussianBlurEffect$BlurType_$callClinit();
    $this.$blurType = ccve_GaussianBlurEffect$BlurType_Gaussian5x5b;
    $this.$blurPasses = $blurPasses;
    $this.$blurAmount = 0.0;
    $this.$bloomThreshold = $bloomThreshold;
    $this.$baseIntensity = $baseIntensity;
    $this.$baseSaturation = $baseSaturation;
    $this.$bloomIntensity = $bloomIntensity;
    $this.$bloomSaturation = $bloomSaturation;
},
ccve_BloomEffect$Settings__init_ = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new ccve_BloomEffect$Settings();
    ccve_BloomEffect$Settings__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
};
function ccve_MotionBlurEffect() {
    let a = this; ccve_CompositeVfxEffect.call(a);
    a.$mixFilter = null;
    a.$copyFilter = null;
    a.$localBuffer = null;
    a.$firstFrameRendered = 0;
}
let ccve_MotionBlurEffect__init_0 = ($this, $pixelFormat, $mixMethod, $blurFactor) => {
    let var$4, var$5, var$6, var$7, var$8, var$9;
    ccve_CompositeVfxEffect__init_($this);
    $this.$firstFrameRendered = 0;
    var$4 = new ccveu_MixEffect;
    var$5 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503));
    var$6 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(520));
    var$7 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$7);
    jl_AbstractStringBuilder_append0(var$7, $rt_s(521));
    jl_AbstractStringBuilder_append0(var$7, $mixMethod.$name0);
    ccve_ShaderVfxEffect__init_(var$4, ccvg_VfxGLUtils_compileShader(var$5, var$6, jl_AbstractStringBuilder_toString(var$7)));
    var$4.$mixFactor = 0.5;
    ccveu_MixEffect_rebind(var$4);
    var$7 = $this;
    $mixMethod = ccve_CompositeVfxEffect_register(var$7, var$4);
    $this.$mixFilter = $mixMethod;
    $mixMethod.$mixFactor = 1.0;
    ccve_ShaderVfxEffect_setUniform($mixMethod, $rt_s(522), $blurFactor);
    $this.$copyFilter = ccve_CompositeVfxEffect_register(var$7, ccveu_CopyEffect__init_0());
    $mixMethod = new ccvf_VfxFrameBufferQueue;
    var$7 = cbg_Application$ApplicationType_WebGL;
    var$8 = var$7 !== var$7 ? 1 : 2;
    $mixMethod.$currentIdx = 0;
    var$7 = cbgg_Texture$TextureWrap_ClampToEdge;
    $mixMethod.$wrapU = var$7;
    $mixMethod.$wrapV = var$7;
    var$7 = cbgg_Texture$TextureFilter_Nearest;
    $mixMethod.$filterMin = var$7;
    $mixMethod.$filterMag = var$7;
    if (var$8 < 1) {
        $pixelFormat = new jl_IllegalArgumentException;
        jl_Exception__init_($pixelFormat, $rt_s(523));
        $rt_throw($pixelFormat);
    }
    $mixMethod.$buffers = cbgu_Array__init_1(1, var$8);
    var$9 = 0;
    while (var$9 < var$8) {
        cbgu_Array_add($mixMethod.$buffers, ccvf_VfxFrameBuffer__init_($pixelFormat));
        var$9 = var$9 + 1 | 0;
    }
    $this.$localBuffer = $mixMethod;
},
ccve_MotionBlurEffect__init_ = (var_0, var_1, var_2) => {
    let var_3 = new ccve_MotionBlurEffect();
    ccve_MotionBlurEffect__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
ccve_MotionBlurEffect_dispose = $this => {
    let var$1, var$2, var$3;
    ccve_CompositeVfxEffect_dispose($this);
    var$1 = $this.$localBuffer;
    var$2 = 0;
    while (true) {
        var$3 = var$1.$buffers;
        if (var$2 >= var$3.$size0)
            break;
        ccvf_VfxFrameBuffer_dispose(cbgu_Array_get(var$3, var$2));
        var$2 = var$2 + 1 | 0;
    }
    cbgu_Array_clear(var$3);
},
ccve_MotionBlurEffect_resize = ($this, $width, $height) => {
    let var$3, var$4, var$5;
    ccve_CompositeVfxEffect_resize($this, $width, $height);
    var$3 = $this.$localBuffer;
    var$4 = 0;
    while (true) {
        var$5 = var$3.$buffers;
        if (var$4 >= var$5.$size0)
            break;
        ccvf_VfxFrameBuffer_initialize(cbgu_Array_get(var$5, var$4), $width, $height);
        var$4 = var$4 + 1 | 0;
    }
    $this.$firstFrameRendered = 0;
},
ccve_MotionBlurEffect_rebind = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    ccve_CompositeVfxEffect_rebind($this);
    var$1 = $this.$localBuffer;
    var$2 = 0;
    while (true) {
        var$3 = var$1.$buffers;
        if (var$2 >= var$3.$size0)
            break;
        var$3 = (cbgu_Array_get(var$3, var$2)).$fbo;
        if (var$3 !== null) {
            var$3 = cbggg_GLFrameBuffer_getColorBufferTexture(var$3);
            var$4 = var$1.$wrapU;
            var$5 = var$1.$wrapV;
            var$6 = var$3;
            cbgg_GLTexture_setWrap(var$6, var$4, var$5);
            cbgg_GLTexture_setFilter(var$6, var$1.$filterMin, var$1.$filterMag);
        }
        var$2 = var$2 + 1 | 0;
    }
},
ccve_MotionBlurEffect_render = ($this, $context, $buffers) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = $this.$localBuffer;
    var$4 = var$3.$currentIdx + 1 | 0;
    var$5 = var$3.$buffers;
    var$4 = var$4 % var$5.$size0 | 0;
    var$3.$currentIdx = var$4;
    var$6 = cbgu_Array_get(var$5, var$4);
    if (!$this.$firstFrameRendered) {
        ccveu_CopyEffect_render($this.$copyFilter, $context, $buffers.$bufSrc, var$6);
        ccvf_VfxPingPongWrapper_swap($buffers);
        $this.$firstFrameRendered = 1;
        return;
    }
    var$7 = $this.$mixFilter;
    var$5 = $buffers.$bufSrc;
    var$3 = $buffers.$bufDst;
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$5), 0);
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$6), 1);
    ccve_ShaderVfxEffect_renderShader(var$7, $context, var$3);
    ccveu_CopyEffect_render($this.$copyFilter, $context, $buffers.$bufDst, var$6);
},
ccveu_MixEffect$Method = $rt_classWithoutFields(jl_Enum),
ccveu_MixEffect$Method_MAX = null,
ccveu_MixEffect$Method_MIX = null,
ccveu_MixEffect$Method_$VALUES = null,
ccveu_MixEffect$Method_values = () => {
    return ccveu_MixEffect$Method_$VALUES.$clone0();
},
ccveu_MixEffect$Method__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new ccveu_MixEffect$Method;
    jl_Enum__init_(var$1, $rt_s(524), 0);
    ccveu_MixEffect$Method_MAX = var$1;
    var$1 = new ccveu_MixEffect$Method;
    jl_Enum__init_(var$1, $rt_s(525), 1);
    ccveu_MixEffect$Method_MIX = var$1;
    var$2 = $rt_createArray(ccveu_MixEffect$Method, 2);
    var$3 = var$2.data;
    var$3[0] = ccveu_MixEffect$Method_MAX;
    var$3[1] = var$1;
    ccveu_MixEffect$Method_$VALUES = var$2;
},
cbggg_Batch = $rt_classWithoutFields(0),
cbggg_PolygonBatch = $rt_classWithoutFields(0);
function cbggg_PolygonSpriteBatch() {
    let a = this; jl_Object.call(a);
    a.$mesh2 = null;
    a.$vertices0 = null;
    a.$triangles = null;
    a.$vertexIndex = 0;
    a.$triangleIndex = 0;
    a.$lastTexture = null;
    a.$invTexWidth = 0.0;
    a.$invTexHeight = 0.0;
    a.$drawing = 0;
    a.$transformMatrix = null;
    a.$projectionMatrix = null;
    a.$combinedMatrix = null;
    a.$blendingDisabled = 0;
    a.$blendSrcFunc = 0;
    a.$blendDstFunc = 0;
    a.$blendSrcFuncAlpha = 0;
    a.$blendDstFuncAlpha = 0;
    a.$shader = null;
    a.$customShader = null;
    a.$ownsShader0 = 0;
    a.$color6 = null;
    a.$colorPacked = 0.0;
    a.$renderCalls = 0;
    a.$totalRenderCalls = 0;
    a.$maxTrianglesInBatch = 0;
}
let cbggg_PolygonSpriteBatch__init_0 = $this => {
    cbggg_PolygonSpriteBatch__init_($this, 2000, 4000, null);
},
cbggg_PolygonSpriteBatch__init_1 = () => {
    let var_0 = new cbggg_PolygonSpriteBatch();
    cbggg_PolygonSpriteBatch__init_0(var_0);
    return var_0;
},
cbggg_PolygonSpriteBatch__init_ = ($this, $maxVertices, $maxTriangles, $defaultShader) => {
    let $vertexDataType, var$5;
    $this.$invTexWidth = 0.0;
    $this.$invTexHeight = 0.0;
    $this.$transformMatrix = cbgm_Matrix4__init_();
    $this.$projectionMatrix = cbgm_Matrix4__init_();
    $this.$combinedMatrix = cbgm_Matrix4__init_();
    $this.$blendSrcFunc = 770;
    $this.$blendDstFunc = 771;
    $this.$blendSrcFuncAlpha = 770;
    $this.$blendDstFuncAlpha = 771;
    $this.$color6 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$colorPacked = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$renderCalls = 0;
    $this.$totalRenderCalls = 0;
    $this.$maxTrianglesInBatch = 0;
    if ($maxVertices > 32767) {
        $defaultShader = new jl_IllegalArgumentException;
        $vertexDataType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($vertexDataType);
        jl_AbstractStringBuilder_append0($vertexDataType, $rt_s(526));
        jl_AbstractStringBuilder_append1($vertexDataType, $maxVertices);
        jl_Exception__init_($defaultShader, jl_AbstractStringBuilder_toString($vertexDataType));
        $rt_throw($defaultShader);
    }
    $vertexDataType = cbgg_Mesh$VertexDataType_VertexArray;
    if (cbg_Gdx_gl30 !== null)
        $vertexDataType = cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO;
    var$5 = new cbgg_Mesh;
    $maxTriangles = $maxTriangles * 3 | 0;
    cbgg_Mesh__init_(var$5, $vertexDataType, 0, $maxVertices, $maxTriangles, $rt_wrapArray(cbgg_VertexAttribute, [cbgg_VertexAttribute__init_(1, 2, $rt_s(527)), cbgg_VertexAttribute__init_(4, 4, $rt_s(528)), cbgg_VertexAttribute__init_(16, 2, $rt_s(529))]));
    $this.$mesh2 = var$5;
    $this.$vertices0 = $rt_createFloatArray($maxVertices * 5 | 0);
    $this.$triangles = $rt_createShortArray($maxTriangles);
    if ($defaultShader !== null)
        $this.$shader = $defaultShader;
    else {
        $this.$shader = cbggg_SpriteBatch_createDefaultShader();
        $this.$ownsShader0 = 1;
    }
    cbgm_Matrix4_setToOrtho2D($this.$projectionMatrix, 0.0, 0.0, cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics));
},
cbggg_PolygonSpriteBatch__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_PolygonSpriteBatch();
    cbggg_PolygonSpriteBatch__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_PolygonSpriteBatch_setColor = ($this, $r, $g, $b, $a) => {
    cbgg_Color_set($this.$color6, $r, $g, $b, $a);
    $this.$colorPacked = cbgg_Color_toFloatBits($this.$color6);
},
cbggg_PolygonSpriteBatch_draw = ($this, $texture, $spriteVertices, $offset, $count) => {
    let $triangles, $vertices, $triangleCount, var$8, var$9, $batch, var$11, $vertexIndex, $vertex, $triangleIndex, $n;
    if (!$this.$drawing) {
        $texture = new jl_IllegalStateException;
        jl_Exception__init_($texture, $rt_s(530));
        $rt_throw($texture);
    }
    a: {
        $triangles = $this.$triangles;
        $vertices = $this.$vertices0;
        $triangleCount = ($count / 20 | 0) * 6 | 0;
        if ($texture !== $this.$lastTexture) {
            var$8 = $vertices.data;
            var$9 = $triangles.data;
            cbggg_PolygonSpriteBatch_switchTexture($this, $texture);
            $triangleCount = var$8.length;
            $batch = jl_Math_min(jl_Math_min($count, $triangleCount - ($triangleCount % 20 | 0) | 0), (var$9.length / 6 | 0) * 20 | 0);
            $triangleCount = ($batch / 20 | 0) * 6 | 0;
        } else {
            var$8 = $triangles.data;
            var$11 = $this.$triangleIndex + $triangleCount | 0;
            $batch = var$8.length;
            if (var$11 <= $batch) {
                var$8 = $vertices.data;
                if (($this.$vertexIndex + $count | 0) <= var$8.length) {
                    $batch = $count;
                    break a;
                }
            }
            var$8 = $vertices.data;
            cbggg_PolygonSpriteBatch_flush($this);
            var$11 = var$8.length;
            $batch = jl_Math_min(jl_Math_min($count, var$11 - (var$11 % 20 | 0) | 0), ($batch / 6 | 0) * 20 | 0);
            $triangleCount = ($batch / 20 | 0) * 6 | 0;
        }
    }
    $vertexIndex = $this.$vertexIndex;
    $vertex = ($vertexIndex / 5 | 0) << 16 >> 16;
    $triangleIndex = $this.$triangleIndex;
    $n = $triangleIndex + $triangleCount | 0;
    while ($triangleIndex < $n) {
        var$8 = $triangles.data;
        var$8[$triangleIndex] = $vertex;
        var$8[$triangleIndex + 1 | 0] = ($vertex + 1 | 0) << 16 >> 16;
        var$11 = $triangleIndex + 2 | 0;
        $triangleCount = ($vertex + 2 | 0) << 16 >> 16;
        var$8[var$11] = $triangleCount;
        var$8[$triangleIndex + 3 | 0] = $triangleCount;
        var$8[$triangleIndex + 4 | 0] = ($vertex + 3 | 0) << 16 >> 16;
        var$8[$triangleIndex + 5 | 0] = $vertex;
        $triangleIndex = $triangleIndex + 6 | 0;
        $vertex = ($vertex + 4 | 0) << 16 >> 16;
    }
    while (true) {
        jl_System_fastArraycopy($spriteVertices, $offset, $vertices, $vertexIndex, $batch);
        $this.$vertexIndex = $vertexIndex + $batch | 0;
        $this.$triangleIndex = $triangleIndex;
        $count = $count - $batch | 0;
        if (!$count)
            break;
        $offset = $offset + $batch | 0;
        cbggg_PolygonSpriteBatch_flush($this);
        $vertexIndex = 0;
        if ($batch <= $count)
            continue;
        $batch = jl_Math_min($count, ($triangles.data.length / 6 | 0) * 20 | 0);
        $triangleIndex = ($batch / 20 | 0) * 6 | 0;
    }
},
cbggg_PolygonSpriteBatch_draw0 = ($this, $region, $x, $y) => {
    cbggg_PolygonSpriteBatch_draw1($this, $region, $x, $y, $region.$regionWidth, $region.$regionHeight);
},
cbggg_PolygonSpriteBatch_draw1 = ($this, $region, $x, $y, $width, $height) => {
    let $triangles, $vertices, $texture, var$9, $triangleIndex, $idx, $startVertex, var$13, var$14, var$15, $fx2, $fy2, $u, $v, $u2, $v2, $color;
    if (!$this.$drawing) {
        $region = new jl_IllegalStateException;
        jl_Exception__init_($region, $rt_s(530));
        $rt_throw($region);
    }
    a: {
        $triangles = $this.$triangles;
        $vertices = $this.$vertices0;
        $texture = $region.$texture;
        if ($texture !== $this.$lastTexture)
            cbggg_PolygonSpriteBatch_switchTexture($this, $texture);
        else {
            var$9 = $triangles.data;
            if (($this.$triangleIndex + 6 | 0) <= var$9.length) {
                var$9 = $vertices.data;
                if (($this.$vertexIndex + 20 | 0) <= var$9.length)
                    break a;
            }
            cbggg_PolygonSpriteBatch_flush($this);
        }
    }
    var$9 = $triangles.data;
    $triangles = $vertices.data;
    $triangleIndex = $this.$triangleIndex;
    $idx = $this.$vertexIndex;
    $startVertex = $idx / 5 | 0;
    var$13 = $triangleIndex + 1 | 0;
    var$14 = $startVertex << 16 >> 16;
    var$9[$triangleIndex] = var$14;
    $triangleIndex = var$13 + 1 | 0;
    var$9[var$13] = ($startVertex + 1 | 0) << 16 >> 16;
    var$15 = $triangleIndex + 1 | 0;
    var$13 = ($startVertex + 2 | 0) << 16 >> 16;
    var$9[$triangleIndex] = var$13;
    $triangleIndex = var$15 + 1 | 0;
    var$9[var$15] = var$13;
    var$15 = $triangleIndex + 1 | 0;
    var$9[$triangleIndex] = ($startVertex + 3 | 0) << 16 >> 16;
    $triangleIndex = var$15 + 1 | 0;
    var$9[var$15] = var$14;
    $this.$triangleIndex = $triangleIndex;
    $fx2 = $x + $width;
    $fy2 = $y + $height;
    $u = $region.$u;
    $v = $region.$v2;
    $u2 = $region.$u2;
    $v2 = $region.$v;
    $color = $this.$colorPacked;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $x;
    $triangleIndex = var$15 + 1 | 0;
    $triangles[var$15] = $y;
    $idx = $triangleIndex + 1 | 0;
    $triangles[$triangleIndex] = $color;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $u;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $v;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $x;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $fy2;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $color;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $u;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $v2;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $fx2;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $fy2;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $color;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $u2;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $v2;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $fx2;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $y;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $color;
    $idx = var$15 + 1 | 0;
    $triangles[var$15] = $u2;
    var$15 = $idx + 1 | 0;
    $triangles[$idx] = $v;
    $this.$vertexIndex = var$15;
},
cbggg_PolygonSpriteBatch_flush = $this => {
    let $trianglesInBatch, $mesh, var$3, var$4, var$5, var$6;
    if (!$this.$vertexIndex)
        return;
    $this.$renderCalls = $this.$renderCalls + 1 | 0;
    $this.$totalRenderCalls = $this.$totalRenderCalls + 1 | 0;
    $trianglesInBatch = $this.$triangleIndex;
    if ($trianglesInBatch > $this.$maxTrianglesInBatch)
        $this.$maxTrianglesInBatch = $trianglesInBatch;
    cbgg_GLTexture_bind0($this.$lastTexture);
    $mesh = $this.$mesh2;
    var$3 = $this.$vertices0;
    var$4 = $this.$vertexIndex;
    $mesh.$vertices.$setVertices(var$3, 0, var$4);
    var$3 = $this.$triangles;
    $mesh.$indices.$setIndices(var$3, 0, $trianglesInBatch);
    if ($this.$blendingDisabled)
        cbg_Gdx_gl.$glDisable(3042);
    else {
        cbg_Gdx_gl.$glEnable(3042);
        var$5 = $this.$blendSrcFunc;
        if (var$5 != (-1))
            cbg_Gdx_gl.$glBlendFuncSeparate(var$5, $this.$blendDstFunc, $this.$blendSrcFuncAlpha, $this.$blendDstFuncAlpha);
    }
    var$6 = $this.$customShader;
    if (var$6 === null)
        var$6 = $this.$shader;
    cbgg_Mesh_render($mesh, var$6, 4, 0, $trianglesInBatch);
    $this.$vertexIndex = 0;
    $this.$triangleIndex = 0;
},
cbggg_PolygonSpriteBatch_setProjectionMatrix = ($this, $projection) => {
    if ($this.$drawing)
        cbggg_PolygonSpriteBatch_flush($this);
    cbgm_Matrix4_set($this.$projectionMatrix, $projection);
    if ($this.$drawing)
        cbggg_PolygonSpriteBatch_setupMatrices($this);
},
cbggg_PolygonSpriteBatch_setupMatrices = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    cbgm_Matrix4_mul0(cbgm_Matrix4_set($this.$combinedMatrix, $this.$projectionMatrix), $this.$transformMatrix);
    var$1 = $this.$customShader;
    if (var$1 !== null) {
        var$1.$setUniformMatrix($rt_s(531), $this.$combinedMatrix);
        $this.$customShader.$setUniformi($rt_s(532), 0);
    } else {
        var$1 = $this.$shader;
        var$2 = $this.$combinedMatrix;
        var$3 = cbggg_ShaderProgram_fetchUniformLocation(var$1, $rt_s(531));
        var$4 = cbg_Gdx_gl20;
        cbggg_ShaderProgram_checkManaged(var$1);
        var$5 = var$2.$val;
        cgxgbt_TeaGL20_glUniformMatrix4fv(var$4, var$3, 1, 0, var$5, 0);
        cbggg_ShaderProgram_setUniformi($this.$shader, $rt_s(532), 0);
    }
},
cbggg_PolygonSpriteBatch_switchTexture = ($this, $texture) => {
    cbggg_PolygonSpriteBatch_flush($this);
    $this.$lastTexture = $texture;
    $this.$invTexWidth = 1.0 / cbgg_Texture_getWidth($texture);
    $this.$invTexHeight = 1.0 / cbgg_Texture_getHeight($texture);
};
function cbggg_TextureAtlas() {
    let a = this; jl_Object.call(a);
    a.$textures0 = null;
    a.$regions0 = null;
}
let cbggg_TextureAtlas__init_ = $this => {
    $this.$textures0 = cbgu_ObjectSet__init_1(4);
    $this.$regions0 = cbgu_Array__init_();
},
cbggg_TextureAtlas__init_2 = () => {
    let var_0 = new cbggg_TextureAtlas();
    cbggg_TextureAtlas__init_(var_0);
    return var_0;
},
cbggg_TextureAtlas__init_0 = ($this, $packFile) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    var$2 = cgxgbt_TeaFileHandle_parent($packFile);
    var$3 = new cbggg_TextureAtlas$TextureAtlasData;
    var$3.$pages = cbgu_Array__init_();
    var$3.$regions1 = cbgu_Array__init_();
    cbggg_TextureAtlas$TextureAtlasData_load(var$3, $packFile, var$2, 0);
    $this.$textures0 = cbgu_ObjectSet__init_1(4);
    $this.$regions0 = cbgu_Array__init_();
    $packFile = $this.$textures0;
    var$4 = var$3.$pages.$size0;
    var$4 = cbgu_ObjectSet_tableSize($packFile.$size8 + var$4 | 0, $packFile.$loadFactor);
    if ($packFile.$keyTable0.data.length < var$4)
        cbgu_ObjectSet_resize($packFile, var$4);
    var$5 = cbgu_Array_iterator(var$3.$pages);
    while (true) {
        if (!cbgu_Array$ArrayIterator_hasNext(var$5)) {
            cbgu_Array_ensureCapacity($this.$regions0, var$3.$regions1.$size0);
            var$3 = cbgu_Array_iterator(var$3.$regions1);
            while (cbgu_Array$ArrayIterator_hasNext(var$3)) {
                $packFile = cbgu_Array$ArrayIterator_next(var$3);
                var$2 = new cbggg_TextureAtlas$AtlasRegion;
                var$6 = $packFile.$page2.$texture0;
                var$4 = $packFile.$left0;
                var$7 = $packFile.$top;
                var$8 = $packFile.$rotate;
                var$9 = !var$8 ? $packFile.$width0 : $packFile.$height1;
                var$8 = !var$8 ? $packFile.$height1 : $packFile.$width0;
                var$2.$texture = var$6;
                cbggg_TextureRegion_setRegion(var$2, var$4, var$7, var$9, var$8);
                var$2.$index10 = (-1);
                var$2.$originalWidth0 = var$9;
                var$2.$originalHeight0 = var$8;
                var$2.$packedWidth = var$9;
                var$2.$packedHeight = var$8;
                var$2.$index10 = $packFile.$index5;
                var$2.$name2 = $packFile.$name3;
                var$2.$offsetX0 = $packFile.$offsetX;
                var$10 = $packFile.$offsetY0;
                var$2.$offsetY = var$10;
                var$7 = $packFile.$originalHeight;
                var$2.$originalHeight0 = var$7;
                var$2.$originalWidth0 = $packFile.$originalWidth;
                var$11 = $packFile.$rotate;
                var$2.$rotate0 = var$11;
                var$2.$degrees0 = $packFile.$degrees;
                var$2.$names0 = $packFile.$names;
                var$2.$values9 = $packFile.$values8;
                if ($packFile.$flip0) {
                    var$12 = var$2.$v;
                    var$2.$v = var$2.$v2;
                    var$2.$v2 = var$12;
                    var$2.$offsetY = var$7 - var$10 - (!var$11 ? var$8 : var$9);
                }
                cbgu_Array_add($this.$regions0, var$2);
            }
            return;
        }
        $packFile = cbgu_Array$ArrayIterator_next(var$5);
        if ($packFile.$texture0 === null)
            $packFile.$texture0 = cbgg_Texture__init_2($packFile.$textureFile, $packFile.$format10, $packFile.$useMipMaps0);
        var$2 = $packFile.$texture0;
        var$6 = $packFile.$minFilter;
        var$13 = $packFile.$magFilter0;
        cbgg_GLTexture_setFilter(var$2, var$6, var$13);
        var$2 = $packFile.$texture0;
        var$6 = $packFile.$uWrap0;
        var$13 = $packFile.$vWrap0;
        cbgg_GLTexture_setWrap(var$2, var$6, var$13);
        var$2 = $this.$textures0;
        $packFile = $packFile.$texture0;
        if ($packFile === null)
            break;
        var$14 = var$2.$keyTable0;
        var$4 = cbgu_ObjectSet_place(var$2, $packFile);
        a: {
            while (true) {
                var$6 = var$14.data[var$4];
                if (var$6 === null) {
                    var$4 =  -(var$4 + 1 | 0) | 0;
                    break a;
                }
                if (var$6.$equals($packFile))
                    break;
                var$4 = (var$4 + 1 | 0) & var$2.$mask4;
            }
        }
        if (var$4 < 0) {
            var$4 =  -(var$4 + 1 | 0) | 0;
            var$14 = var$2.$keyTable0.data;
            var$14[var$4] = $packFile;
            var$4 = var$2.$size8 + 1 | 0;
            var$2.$size8 = var$4;
            if (var$4 >= var$2.$threshold5)
                cbgu_ObjectSet_resize(var$2, var$14.length << 1);
        }
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2, $rt_s(32));
    $rt_throw(var$2);
},
cbggg_TextureAtlas__init_1 = var_0 => {
    let var_1 = new cbggg_TextureAtlas();
    cbggg_TextureAtlas__init_0(var_1, var_0);
    return var_1;
},
cbggg_TextureAtlas_findRegion = ($this, $name) => {
    let $i, $n;
    $i = 0;
    $n = $this.$regions0.$size0;
    while ($i < $n) {
        if (jl_String_equals((cbgu_Array_get($this.$regions0, $i)).$name2, $name))
            return cbgu_Array_get($this.$regions0, $i);
        $i = $i + 1 | 0;
    }
    return null;
};
function ses_AbstractShapeDrawer() {
    let a = this; jl_Object.call(a);
    a.$batchManager0 = null;
    a.$defaultLineWidth = 0.0;
    a.$defaultSnap = 0;
    a.$lineDrawer = null;
    a.$pathDrawer = null;
    a.$polygonDrawer = null;
    a.$filledPolygonDrawer = null;
}
let ses_AbstractShapeDrawer_mat4 = null,
ses_AbstractShapeDrawer_trianglePathPoints = null,
ses_AbstractShapeDrawer_$callClinit = () => {
    ses_AbstractShapeDrawer_$callClinit = $rt_eraseClinit(ses_AbstractShapeDrawer);
    ses_AbstractShapeDrawer__clinit_();
},
ses_AbstractShapeDrawer_isJoinNecessary = ($this, $lineWidth) => {
    return $lineWidth <= 3.0 * $this.$batchManager0.$pixelSize ? 0 : 1;
},
ses_AbstractShapeDrawer_setDefaultLineWidth = ($this, $defaultLineWidth) => {
    let $oldWidth;
    $oldWidth = $this.$defaultLineWidth;
    $this.$defaultLineWidth = $defaultLineWidth;
    return $oldWidth;
},
ses_AbstractShapeDrawer_setColor = ($this, $floatBits) => {
    return ses_BatchManager_setColor($this.$batchManager0, $floatBits);
},
ses_AbstractShapeDrawer_setColor0 = ($this, $r, $g, $b, $a) => {
    return ses_AbstractShapeDrawer_setColor($this, cbgu_NumberUtils_intToFloatColor((255.0 * $a | 0) << 24 | (255.0 * $b | 0) << 16 | (255.0 * $g | 0) << 8 | 255.0 * $r | 0));
},
ses_AbstractShapeDrawer__clinit_ = () => {
    ses_AbstractShapeDrawer_mat4 = cbgm_Matrix4__init_();
    ses_AbstractShapeDrawer_trianglePathPoints = $rt_createFloatArray(6);
};
function ses_ShapeDrawer() {
    ses_AbstractShapeDrawer.call(this);
    this.$rectangleCorners = null;
}
let ses_ShapeDrawer__init_ = ($this, $batch, $region) => {
    let var$3;
    ses_AbstractShapeDrawer_$callClinit();
    $this.$defaultLineWidth = 1.0;
    $this.$defaultSnap = 0;
    if (!$rt_isInstance($batch, cbggg_PolygonBatch)) {
        var$3 = ses_BatchManager__init_0($batch, $region);
        $this.$batchManager0 = var$3;
        $batch = new ses_FilledPolygonDrawer$BatchFilledPolygonDrawer;
        ses_DrawerTemplate__init_($batch, var$3, $this);
        $this.$filledPolygonDrawer = $batch;
    } else {
        var$3 = new ses_PolygonBatchManager;
        ses_BatchManager__init_(var$3, $batch, $region);
        var$3.$triangleCount = 0;
        var$3.$triangles0 = $rt_createShortArray(jl_Math_ceil((var$3.$verts.data.length / 5 | 0) * 3 | 0) | 0);
        $batch = new ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer;
        ses_DrawerTemplate__init_($batch, var$3, $this);
        $this.$filledPolygonDrawer = $batch;
        $this.$batchManager0 = var$3;
    }
    $batch = new ses_LineDrawer;
    ses_DrawerTemplate__init_($batch, $this.$batchManager0, $this);
    $this.$lineDrawer = $batch;
    $batch = new ses_PathDrawer;
    ses_DrawerTemplate__init_($batch, $this.$batchManager0, $this);
    $batch.$path2 = cbgu_FloatArray__init_();
    $batch.$tempPath = cbgu_FloatArray__init_();
    $this.$pathDrawer = $batch;
    $batch = new ses_PolygonDrawer;
    ses_DrawerTemplate__init_($batch, $this.$batchManager0, $this);
    $this.$polygonDrawer = $batch;
    $this.$rectangleCorners = $rt_createFloatArray(8);
},
ses_ShapeDrawer__init_0 = (var_0, var_1) => {
    let var_2 = new ses_ShapeDrawer();
    ses_ShapeDrawer__init_(var_2, var_0, var_1);
    return var_2;
},
ses_ShapeDrawer_line = ($this, $x1, $y1, $x2, $y2, $lineWidth) => {
    let var$6, var$7;
    var$6 = $this.$defaultSnap;
    var$7 = $this.$batchManager0.$floatBits;
    ses_LineDrawer_line0($this.$lineDrawer, $x1, $y1, $x2, $y2, $lineWidth, var$6, var$7, var$7);
},
ses_ShapeDrawer_polygon = ($this, $polygon) => {
    let var$2, var$3, var$4, var$5;
    var$2 = $this.$defaultLineWidth;
    var$3 = !ses_AbstractShapeDrawer_isJoinNecessary($this, var$2) ? ses_JoinType_NONE : ses_JoinType_POINTY;
    var$4 = cbgm_Polygon_getTransformedVertices($polygon);
    var$5 = var$4.data;
    ses_PathDrawer_path($this.$pathDrawer, var$4, 0, var$5.length, var$2, var$3, 0);
},
ses_ShapeDrawer_filledPolygon = ($this, $polygon) => {
    let var$2;
    var$2 = cbgm_Polygon_getTransformedVertices($polygon);
    ses_FilledPolygonDrawer_polygon1($this.$filledPolygonDrawer, var$2);
},
ses_ShapeDrawer_triangle = ($this, $x1, $y1, $x2, $y2, $x3, $y3) => {
    let var$7, var$8, var$9, var$10, var$11, var$12;
    var$7 = $this;
    var$8 = var$7.$defaultLineWidth;
    var$9 = !ses_AbstractShapeDrawer_isJoinNecessary(var$7, var$8) ? ses_JoinType_NONE : ses_JoinType_POINTY;
    var$10 = ses_AbstractShapeDrawer_setColor(var$7, var$7.$batchManager0.$floatBits);
    if (var$9 === ses_JoinType_NONE) {
        ses_ShapeDrawer_line($this, $x1, $y1, $x2, $y2, var$8);
        ses_ShapeDrawer_line($this, $x2, $y2, $x3, $y3, var$8);
        ses_ShapeDrawer_line($this, $x3, $y3, $x1, $y1, var$8);
    } else {
        var$11 = ses_AbstractShapeDrawer_trianglePathPoints;
        var$12 = var$11.data;
        var$12[0] = $x1;
        var$12[1] = $y1;
        var$12[2] = $x2;
        var$12[3] = $y2;
        var$12[4] = $x3;
        var$12[5] = $y3;
        ses_PathDrawer_path0($this.$pathDrawer, var$11, var$8, var$9, 0);
    }
    ses_AbstractShapeDrawer_setColor(var$7, var$10);
},
ses_ShapeDrawer_filledTriangle = ($this, $x1, $y1, $x2, $y2, $x3, $y3) => {
    let var$7;
    var$7 = $this.$batchManager0.$floatBits;
    ses_FilledPolygonDrawer_triangle($this.$filledPolygonDrawer, $x1, $y1, $x2, $y2, $x3, $y3, var$7, var$7, var$7);
},
ses_ShapeDrawer_rectangle = ($this, $x, $y, $width, $height, $lineWidth, $rotation) => {
    ses_ShapeDrawer_rectangle0($this, $x, $y, $width, $height, $lineWidth, $rotation, ses_JoinType_POINTY);
},
ses_ShapeDrawer_rectangle0 = ($this, $x, $y, $width, $height, $lineWidth, $rotation, $joinType) => {
    let $halfWidth, $X, $Y, $caching, var$12, $centreX, $centreY, $cos, $sin, $j, $i, $rotatedX, $rotatedY;
    if ($joinType === ses_JoinType_POINTY && jl_Math_abs($rotation) < 9.999999974752427E-7) {
        $halfWidth = 0.5 * $lineWidth;
        $X = $x + $width;
        $Y = $y + $height;
        $caching = $this.$batchManager0.$cacheDraws;
        $joinType = $this.$lineDrawer;
        $height = $x + $halfWidth;
        $width = $X - $halfWidth;
        ses_LineDrawer_pushLine($joinType, $height, $y, $width, $y, $lineWidth, 0);
        ses_LineDrawer_pushLine($this.$lineDrawer, $height, $Y, $width, $Y, $lineWidth, 0);
        $joinType = $this.$lineDrawer;
        $y = $y - $halfWidth;
        $width = $Y + $halfWidth;
        ses_LineDrawer_pushLine($joinType, $x, $y, $x, $width, $lineWidth, 0);
        ses_LineDrawer_pushLine($this.$lineDrawer, $X, $y, $X, $width, $lineWidth, 0);
        if (!$caching)
            $this.$batchManager0.$pushToBatch();
        return;
    }
    a: {
        var$12 = $this.$rectangleCorners.data;
        var$12[0] = $x;
        var$12[1] = $y;
        $halfWidth = $x + $width;
        var$12[2] = $halfWidth;
        var$12[3] = $y;
        var$12[4] = $halfWidth;
        $halfWidth = $y + $height;
        var$12[5] = $halfWidth;
        var$12[6] = $x;
        var$12[7] = $halfWidth;
        if (jl_Math_abs($rotation) > 9.999999974752427E-7) {
            $centreX = $x + $width / 2.0;
            $centreY = $y + $height / 2.0;
            $cos = cbgm_MathUtils_cos($rotation);
            $sin = cbgm_MathUtils_sin($rotation);
            $j = 0;
            while (true) {
                if ($j >= 8)
                    break a;
                var$12 = $this.$rectangleCorners.data;
                var$12[$j] = var$12[$j] - $centreX;
                $i = $j + 1 | 0;
                var$12[$i] = var$12[$i] - $centreY;
                $rotatedX = var$12[$j] * $cos - var$12[$i] * $sin;
                $rotatedY = var$12[$j] * $sin + var$12[$i] * $cos;
                var$12[$j] = $rotatedX + $centreX;
                var$12[$i] = $rotatedY + $centreY;
                $j = $j + 2 | 0;
            }
        }
    }
    var$12 = $this.$rectangleCorners;
    ses_PathDrawer_path0($this.$pathDrawer, var$12, $lineWidth, $joinType, 0);
},
ses_ShapeDrawer_filledRectangle = ($this, $x, $y, $width, $height, $rotation) => {
    ses_FilledPolygonDrawer_rectangle0($this.$filledPolygonDrawer, $x, $y, $width, $height, $rotation);
},
pss_Shape = $rt_classWithoutFields(),
pss_Shape_drawer = null,
pss_Shape_initialize = $drawer => {
    pss_Shape_drawer = $drawer;
},
pss_Shape_createEllipse = ($points, $width, $height) => {
    let $coordinates, var$5, $index, var$7, var$8, var$9;
    $coordinates = $rt_createFloatArray($points * 2 | 0);
    var$5 = $coordinates.data;
    $index = 0;
    var$7 = var$5.length;
    var$8 = $points;
    while ($index != var$7) {
        var$9 = $index * 3.1415927410125732 / var$8;
        var$5[$index] = cbgm_MathUtils_cos(var$9) * $width;
        var$5[$index + 1 | 0] = cbgm_MathUtils_sin(var$9) * $height;
        $index = $index + 2 | 0;
    }
    cbgm_GeometryUtils_ensureClockwise($coordinates);
    return cbgm_Polygon__init_($coordinates);
};
function psm_Menu() {
    pss_Section.call(this);
    this.$selectedBox = null;
}
let psm_Menu_repeatControl = null,
psm_Menu_main = null,
psm_Menu_overview = null,
psm_Menu_$callClinit = () => {
    psm_Menu_$callClinit = $rt_eraseClinit(psm_Menu);
    psm_Menu__clinit_();
},
psm_Menu__init_ = $this => {
    psm_Menu_$callClinit();
    pss_Section__init_($this);
},
psm_Menu_initialize = () => {
    let var$1;
    psm_Menu_$callClinit();
    psm_Menu_main = psm_MainMenu__init_0();
    var$1 = new psm_OverviewMenu;
    psm_Menu__init_(var$1);
    psm_Menu_overview = var$1;
},
psm_Menu_isPointed = ($this, $box) => {
    let var$2;
    psm_Menu_$callClinit();
    var$2 = psm_Menu_repeatControl;
    $box = $box.$polygon4;
    return pss_Control_isPointed(var$2, $box);
},
psm_Menu_isSelected = ($this, $selectedBox) => {
    return $this.$selectedBox !== $selectedBox ? 0 : 1;
},
psm_Menu_isClicked = ($this, $box, $accept) => {
    let var$3;
    psm_Menu_$callClinit();
    var$3 = psm_Menu_repeatControl;
    $box = $box.$polygon4;
    return pss_Control_isClicked(var$3, $box, $accept);
},
psm_Menu_isPushed = ($this, $selectedBox, $accept) => {
    let var$3, var$4;
    a: {
        b: {
            if ($this.$selectedBox === $selectedBox) {
                var$3 = pss_Control_buttons;
                var$4 = !$accept ? 1 : 0;
                var$3 = var$3.data;
                if (var$3[var$4])
                    break b;
                if (var$3[!$accept ? 3 : 2])
                    break b;
            }
            $accept = 0;
            break a;
        }
        $accept = 1;
    }
    return $accept;
},
psm_Menu_isAxisPushed = ($this, $selectedBox) => {
    let var$2, var$3;
    a: {
        b: {
            if ($this.$selectedBox === $selectedBox) {
                var$2 = pss_Control_axisX;
                if (var$2 != 1) {
                    var$3 = pss_Control_buttons.data;
                    if (!var$3[0] && !var$3[2]) {
                        if (var$2 == (-1))
                            break a;
                        if (var$3[1])
                            break a;
                        if (!var$3[3])
                            break b;
                        else
                            break a;
                    }
                }
                return 1;
            }
        }
        return 0;
    }
    return (-1);
},
psm_Menu__clinit_ = () => {
    let var$1;
    var$1 = new psm_Menu$RepeatControl;
    pss_Control__init_(var$1);
    psm_Menu_repeatControl = var$1;
},
pse_Episode = $rt_classWithoutFields(pss_Section),
pse_Episode_s01e01 = null,
pse_Episode_bullets = null,
pse_Episode_chimeraLogic = null,
pse_Episode_counterBuffer = null,
pse_Episode_counterColor = null,
pse_Episode_counterMillis = 0,
pse_Episode_initialize = () => {
    pse_Episode_s01e01 = pse_S01E01Episode__init_0();
},
pse_Episode_drawCounter = () => {
    let var$1, var$2;
    pss_Section_$callClinit();
    var$1 = 300000 - ((pss_Section_elapsedTime % 300.0) * 1000.0 | 0) | 0;
    pse_Episode_counterMillis = var$1;
    pse_Episode_counterColor.$r = 0.5 + jl_Math_max0(0.0, 1.0 - var$1 * 2.0 / 300000.0) * 0.5;
    var$2 = pse_Episode_counterColor;
    var$1 = pse_Episode_counterMillis;
    var$2.$g = 0.5 + (var$1 < 150000 ? var$1 * 2.0 / 300000.0 : 2.0 - var$1 * 2.0 / 300000.0) * 0.5;
    var$2.$b = 0.5 + jl_Math_max0(0.0, var$1 * 2.0 / 300000.0 - 1.0) * 0.5;
    pss_Section_setFontColor(pss_Section_labelFont, pse_Episode_counterColor);
    cbggg_BitmapFont_draw(pss_Section_labelFont, pss_Section_batch, $rt_s(109), 1664.0, 2330.0, 512.0, 1, 0);
    var$2 = pse_Episode_counterBuffer;
    var$2.$length1 = 0;
    jl_StringBuffer_insert(var$2, 0, pse_Episode_counterMillis / 1000 | 0);
    while (true) {
        var$2 = pse_Episode_counterBuffer;
        if (var$2.$length1 >= 3)
            break;
        jl_AbstractStringBuilder_insert(var$2, 0, 48);
    }
    cbggg_BitmapFont_draw(pss_Section_labelFont, pss_Section_batch, var$2, 1392.0, 2320.0, 512.0, 16, 0);
    var$2 = pse_Episode_counterBuffer;
    var$2.$length1 = 0;
    jl_StringBuffer_insert(var$2, 0, pse_Episode_counterMillis % 1000 | 0);
    while (true) {
        var$2 = pse_Episode_counterBuffer;
        if (var$2.$length1 >= 3)
            break;
        jl_AbstractStringBuilder_insert(var$2, 0, 48);
    }
    cbggg_BitmapFont_draw(pss_Section_labelFont, pss_Section_batch, var$2, 1936.0, 2320.0, 512.0, 8, 0);
},
pse_Episode_addBullet = ($type, $owner, $x, $y, $rotation) => {
    let $bulletLogic, var$7, var$8;
    if (ju_ArrayDeque_size(pse_Episode_bullets) == 1024)
        $bulletLogic = ju_ArrayDeque_pollFirst(pse_Episode_bullets);
    else {
        $bulletLogic = psl_BulletLogic_deque;
        if ($bulletLogic.$head != $bulletLogic.$tail ? 0 : 1)
            $bulletLogic = psl_BulletLogic__init_0();
        else {
            $bulletLogic = ju_ArrayDeque_pollFirst($bulletLogic);
            if ($bulletLogic === null) {
                $bulletLogic = new ju_NoSuchElementException;
                jl_Throwable__init_($bulletLogic);
                $rt_throw($bulletLogic);
            }
            $bulletLogic = $bulletLogic;
        }
    }
    $bulletLogic.$type4 = $type;
    $bulletLogic.$owner0 = $owner;
    var$7 = $bulletLogic.$position2;
    var$7.$x = $x;
    var$7.$y = $y;
    $bulletLogic.$rotation = $rotation;
    var$7 = pse_Episode_bullets;
    ju_Objects_requireNonNull($bulletLogic);
    ju_ArrayDeque_ensureCapacity(var$7, ju_ArrayDeque_size(var$7) + 1 | 0);
    var$8 = var$7.$array1.data;
    $type = var$7.$tail;
    var$8[$type] = $bulletLogic;
    var$7.$tail = ju_ArrayDeque_modInc($type, var$8.length);
    var$7.$version = var$7.$version + 1 | 0;
},
pse_Episode_drawBullets = () => {
    let var$1, $bulletLogic, var$3, var$4, var$5, var$6, var$7;
    var$1 = ju_ArrayDeque_iterator(pse_Episode_bullets);
    while (ju_ArrayDeque$1_hasNext(var$1)) {
        $bulletLogic = ju_ArrayDeque$1_next(var$1);
        pss_BulletShape_$callClinit();
        cbgm_Polygon_resetTransformations(pss_BulletShape_ellipses.data[$bulletLogic.$type4]);
        var$3 = pss_BulletShape_ellipses.data;
        var$4 = $bulletLogic.$type4;
        var$5 = var$3[var$4];
        var$6 = $bulletLogic.$rotation * 57.2957763671875;
        var$5.$rotation0 = var$5.$rotation0 + var$6;
        var$5.$dirty = 1;
        var$5 = var$3[var$4];
        var$7 = $bulletLogic.$position2;
        cbgm_Polygon_translate(var$5, var$7.$x, var$7.$y);
        pss_Section_setDrawerColor0(pss_BulletShape_fillColors.data[$bulletLogic.$owner0]);
        ses_ShapeDrawer_filledPolygon(pss_Shape_drawer, pss_BulletShape_ellipses.data[$bulletLogic.$type4]);
        pss_Section_setDrawerColor0(pss_BulletShape_outlineColors.data[$bulletLogic.$owner0]);
        ses_ShapeDrawer_polygon(pss_Shape_drawer, pss_BulletShape_ellipses.data[$bulletLogic.$type4]);
    }
},
pse_Episode__clinit_ = () => {
    let var$1;
    pse_Episode_bullets = ju_ArrayDeque__init_0(1024);
    var$1 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_0(var$1, 3);
    pse_Episode_counterBuffer = var$1;
    pse_Episode_counterColor = cbgg_Color__init_((-1));
};
function pss_TitleSection() {
    let a = this; pss_Section.call(a);
    a.$htmlPosition = null;
    a.$clickPosition = null;
    a.$madePosition = null;
    a.$logoScale = null;
    a.$logoPosition = null;
    a.$logotextPosition = null;
    a.$titlePosition = null;
    a.$htmlColor = null;
    a.$clickColor = null;
    a.$madeColor = null;
    a.$gdxColor = null;
    a.$logoColor = null;
    a.$logotextColor = null;
    a.$titleColor = null;
    a.$logoVertices = null;
    a.$timeStamp = 0.0;
}
let pss_TitleSection__init_ = $this => {
    let var$1, var$2, var$3;
    pss_Section__init_($this);
    $this.$htmlPosition = cbgm_Vector2__init_(0.0, 1400.0);
    $this.$clickPosition = cbgm_Vector2__init_(0.0, 1100.0);
    $this.$madePosition = cbgm_Vector2__init_(3680.0, 80.0);
    var$1 = cbgm_Vector2__init_(100.0, 100.0);
    $this.$logoScale = var$1;
    $this.$logoPosition = cbgm_Vector2__init_((3840.0 - var$1.$x) / 2.0 - 400.0, (2400.0 - var$1.$y) / 2.0);
    $this.$logotextPosition = cbgm_Vector2__init_(1820.0, 1332.0);
    $this.$titlePosition = cbgm_Vector2__init_(1820.0, 1132.0);
    $this.$htmlColor = cbgg_Color__init_((-572653569));
    $this.$clickColor = cbgg_Color__init_((-1431633921));
    $this.$madeColor = cbgg_Color__init_((-858993409));
    $this.$gdxColor = cbgg_Color__init_((-10067457));
    $this.$logoColor = cbgg_Color__init_((-1431633921));
    $this.$logotextColor = cbgg_Color__init_((-1431633921));
    $this.$titleColor = cbgg_Color__init_((-1));
    var$2 = $rt_createArray($rt_arraycls($rt_floatcls), 2);
    var$3 = var$2.data;
    var$3[0] = $rt_createFloatArrayFromData([10.0, 0.0, 0.0, 10.0, 0.0, 100.0, 20.0, 120.0, 110.0, 120.0, 120.0, 110.0, 120.0, 20.0, 100.0, 0.0]);
    var$3[1] = $rt_createFloatArrayFromData([10.0, 0.0, 0.0, 10.0, 0.0, 100.0, 20.0, 120.0, 110.0, 120.0, 120.0, 110.0, 120.0, 20.0, 100.0, 0.0]);
    $this.$logoVertices = var$2;
    $this.$timeStamp = 0.0;
},
pss_TitleSection__init_0 = () => {
    let var_0 = new pss_TitleSection();
    pss_TitleSection__init_(var_0);
    return var_0;
},
pss_TitleSection_update = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$timeStamp;
    if (var$1 === 0.0) {
        pss_Section_$callClinit();
        $this.$timeStamp = pss_Section_elapsedTime;
    } else {
        pss_Section_$callClinit();
        if (pss_Section_elapsedTime - var$1 > 2.0) {
            var$2 = pss_Section_audio;
            var$2.$currentMusic.$howl.pause();
            var$3 = ju_HashMap_get(var$2.$music, $rt_s(477));
            var$2.$currentMusic = var$3;
            var$4 = var$2.$musicVolume0;
            cgxgbtwh_HowlMusic_setVolume(var$3, var$4);
            var$2 = var$2.$currentMusic;
            if (!(var$2.$howl.playing() ? 1 : 0))
                var$2.$howl.play();
            psm_Menu_$callClinit();
            pss_Section_setMenu(psm_Menu_main);
        }
    }
},
pss_TitleSection_drawContent = $this => {
    let var$1, var$2, var$3, var$4;
    pss_Section_$callClinit();
    pss_Section_setFontColor(pss_Section_labelFont, $this.$logotextColor);
    var$1 = pss_Section_labelFont;
    var$2 = pss_Section_batch;
    var$3 = $this.$logotextPosition;
    cbggg_BitmapFont_draw(var$1, var$2, $rt_s(533), var$3.$x, var$3.$y, 1920.0, 8, 0);
    pss_Section_setFontColor(pss_Section_labelFont, $this.$titleColor);
    var$4 = pss_Section_labelFont;
    var$1 = pss_Section_batch;
    var$3 = $this.$titlePosition;
    cbggg_BitmapFont_draw(var$4, var$1, $rt_s(534), var$3.$x, var$3.$y, 1920.0, 8, 0);
    pss_Section_setFontColor(pss_Section_textFont, $this.$madeColor);
    var$4 = pss_Section_textFont;
    var$1 = pss_Section_batch;
    var$3 = $this.$madePosition;
    cbggg_BitmapFont_draw(var$4, var$1, $rt_s(535), var$3.$x - 3840.0 - 12.0, var$3.$y, 3840.0, 16, 0);
    pss_Section_setFontColor(pss_Section_textFont, $this.$gdxColor);
    var$4 = pss_Section_textFont;
    var$1 = pss_Section_batch;
    var$3 = $this.$madePosition;
    cbggg_BitmapFont_draw(var$4, var$1, $rt_s(536), var$3.$x, var$3.$y, 3840.0, 8, 0);
},
cbg_InputProcessor = $rt_classWithoutFields(0),
cbgc_ControllerListener = $rt_classWithoutFields(0),
pss_Control = $rt_classWithoutFields(),
pss_Control_pointer = null,
pss_Control_buttons = null,
pss_Control_clicks = null,
pss_Control_axisX = 0,
pss_Control_axisY = 0,
pss_Control_triggers = null,
pss_Control__init_ = $this => {
    let $catchKeys, var$2, var$3, $key;
    $catchKeys = $rt_createIntArray(14).data;
    $catchKeys[0] = 19;
    $catchKeys[1] = 20;
    $catchKeys[2] = 21;
    $catchKeys[3] = 22;
    $catchKeys[4] = 51;
    $catchKeys[5] = 62;
    $catchKeys[6] = 66;
    $catchKeys[7] = 29;
    $catchKeys[8] = 67;
    $catchKeys[9] = 47;
    $catchKeys[10] = 32;
    $catchKeys[11] = 111;
    $catchKeys[12] = 129;
    $catchKeys[13] = 130;
    var$2 = $catchKeys.length;
    var$3 = 0;
    while (var$3 < var$2) {
        $key = $catchKeys[var$3];
        cbgu_IntSet_add(cbg_Gdx_input.$keysToCatch, $key);
        var$3 = var$3 + 1 | 0;
    }
},
pss_Control__init_0 = () => {
    let var_0 = new pss_Control();
    pss_Control__init_(var_0);
    return var_0;
},
pss_Control_keyDown = ($this, $keyCode) => {
    if ($keyCode == 19)
        pss_Control_triggers.data[0] = 1;
    else if ($keyCode == 20)
        pss_Control_triggers.data[1] = 1;
    else if ($keyCode == 21)
        pss_Control_triggers.data[2] = 1;
    else if ($keyCode == 22)
        pss_Control_triggers.data[3] = 1;
    else if ($keyCode != 51 && $keyCode != 62 && $keyCode != 66) {
        if ($keyCode != 29 && $keyCode != 67) {
            if ($keyCode == 47)
                pss_Control_triggers.data[6] = 1;
            else if ($keyCode == 32)
                pss_Control_triggers.data[7] = 1;
            else {
                if ($keyCode != 111)
                    return 0;
                pss_Control_triggers.data[8] = 1;
            }
        } else
            pss_Control_triggers.data[5] = 1;
    } else
        pss_Control_triggers.data[4] = 1;
    return 1;
},
pss_Control_keyUp = ($this, $keyCode) => {
    if ($keyCode == 19)
        pss_Control_triggers.data[0] = 0;
    else if ($keyCode == 20)
        pss_Control_triggers.data[1] = 0;
    else if ($keyCode == 21)
        pss_Control_triggers.data[2] = 0;
    else {
        if ($keyCode != 22)
            return 0;
        pss_Control_triggers.data[3] = 0;
    }
    return 1;
},
pss_Control_mouseMoved = ($this, $x, $y) => {
    cbgm_Vector2_set(pss_Control_pointer, 3840.0 * $x / cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics), 2400.0 - 2400.0 * $y / cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics));
    return 1;
},
pss_Control_touchDown = ($this, $x, $y, $identifier, $button) => {
    if ($button && $button != 1)
        return 0;
    cbgm_Vector2_set(pss_Control_pointer, 3840.0 * $x / cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics), 2400.0 - 2400.0 * $y / cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics));
    if (!$button)
        pss_Control_triggers.data[9] = 1;
    else if ($button == 1)
        pss_Control_triggers.data[10] = 1;
    return 1;
},
pss_Control_process = $this => {
    let var$1, var$2, $index, $index_0;
    jl_Object_monitorEnterSync($this);
    try {
        var$1 = pss_Control_triggers.data;
        pss_Control_axisX = !var$1[2] ? (!var$1[3] ? 0 : 1) : !var$1[3] ? (-1) : 0;
        pss_Control_axisY = !var$1[0] ? (!var$1[1] ? 0 : (-1)) : !var$1[1] ? 1 : 0;
        var$2 = pss_Control_buttons.data;
        $index = var$2.length;
        while (true) {
            $index_0 = $index + (-1) | 0;
            if (!$index)
                break;
            var$2[$index_0] = var$1[$index_0 + 4 | 0];
            $index = $index_0;
        }
        var$2 = pss_Control_clicks.data;
        $index = var$2.length;
        while (true) {
            $index_0 = $index + (-1) | 0;
            if (!$index)
                break;
            var$2[$index_0] = var$1[$index_0 + 9 | 0];
            $index = $index_0;
        }
        $index = var$1.length;
        while (true) {
            $index_0 = $index + (-1) | 0;
            if ($index == 4)
                break;
            var$1[$index_0] = 0;
            $index = $index_0;
        }
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
pss_Control_isPointed = ($this, $polygon) => {
    return cbgm_Polygon_contains($polygon, pss_Control_pointer);
},
pss_Control_isClicked = ($this, $polygon, $accept) => {
    let var$3;
    var$3 = pss_Control_clicks;
    $accept = !$accept ? 1 : 0;
    return var$3.data[$accept] && cbgm_Polygon_contains($polygon, pss_Control_pointer) ? 1 : 0;
},
pss_Control_keyTyped = ($this, $character) => {
    return 1;
},
pss_Control_scrolled = ($this, $x, $y) => {
    return 1;
},
pss_Control_touchUp = ($this, $screenX, $screenY, $pointer, $button) => {
    return 1;
},
pss_Control_touchDragged = ($this, $screenX, $screenY, $pointer) => {
    return 1;
},
pss_Control__clinit_ = () => {
    pss_Control_pointer = new cbgm_Vector2;
    pss_Control_buttons = $rt_createBooleanArray(5);
    pss_Control_clicks = $rt_createBooleanArray(2);
    pss_Control_triggers = $rt_createBooleanArray(11);
},
cbgm_Vector = $rt_classWithoutFields(0);
function cbgm_Vector2() {
    let a = this; jl_Object.call(a);
    a.$x = 0.0;
    a.$y = 0.0;
}
let cbgm_Vector2_X = null,
cbgm_Vector2_Y = null,
cbgm_Vector2_Zero = null,
cbgm_Vector2__init_0 = $this => {
    return;
},
cbgm_Vector2__init_2 = () => {
    let var_0 = new cbgm_Vector2();
    cbgm_Vector2__init_0(var_0);
    return var_0;
},
cbgm_Vector2__init_1 = ($this, $x, $y) => {
    $this.$x = $x;
    $this.$y = $y;
},
cbgm_Vector2__init_ = (var_0, var_1) => {
    let var_2 = new cbgm_Vector2();
    cbgm_Vector2__init_1(var_2, var_0, var_1);
    return var_2;
},
cbgm_Vector2_set0 = ($this, $v) => {
    $this.$x = $v.$x;
    $this.$y = $v.$y;
    return $this;
},
cbgm_Vector2_set = ($this, $x, $y) => {
    $this.$x = $x;
    $this.$y = $y;
    return $this;
},
cbgm_Vector2_sub = ($this, $v) => {
    $this.$x = $this.$x - $v.$x;
    $this.$y = $this.$y - $v.$y;
    return $this;
},
cbgm_Vector2_add0 = ($this, $v) => {
    $this.$x = $this.$x + $v.$x;
    $this.$y = $this.$y + $v.$y;
    return $this;
},
cbgm_Vector2_add1 = ($this, $x, $y) => {
    $this.$x = $this.$x + $x;
    $this.$y = $this.$y + $y;
    return $this;
},
cbgm_Vector2_dst = ($this, $v) => {
    let $x_d, $y_d;
    $x_d = $v.$x - $this.$x;
    $y_d = $v.$y - $this.$y;
    return jl_Math_sqrt($x_d * $x_d + $y_d * $y_d);
},
cbgm_Vector2_setLength = ($this, $len) => {
    let var$2, var$3;
    $len = $len * $len;
    var$2 = $this.$x;
    var$2 = var$2 * var$2;
    var$3 = $this.$y;
    var$3 = var$2 + var$3 * var$3;
    if (var$3 !== 0.0 && var$3 !== $len) {
        $len = jl_Math_sqrt($len / var$3);
        $this.$x = $this.$x * $len;
        $this.$y = $this.$y * $len;
    }
    return $this;
},
cbgm_Vector2_angleRad0 = $this => {
    return jl_Math_atan2($this.$y, $this.$x);
},
cbgm_Vector2_angleRad = ($x, $y) => {
    return jl_Math_atan2($y, $x);
},
cbgm_Vector2_add = ($this, var$1) => {
    return cbgm_Vector2_add0($this, var$1);
},
cbgm_Vector2_sub0 = ($this, var$1) => {
    return cbgm_Vector2_sub($this, var$1);
},
cbgm_Vector2_set1 = ($this, var$1) => {
    return cbgm_Vector2_set0($this, var$1);
},
cbgm_Vector2__clinit_ = () => {
    cbgm_Vector2_X = cbgm_Vector2__init_(1.0, 0.0);
    cbgm_Vector2_Y = cbgm_Vector2__init_(0.0, 1.0);
    cbgm_Vector2_Zero = cbgm_Vector2__init_(0.0, 0.0);
},
cbgm_Shape2D = $rt_classWithoutFields(0);
function cbgm_Polygon() {
    let a = this; jl_Object.call(a);
    a.$localVertices = null;
    a.$worldVertices = null;
    a.$x6 = 0.0;
    a.$y5 = 0.0;
    a.$originX = 0.0;
    a.$originY = 0.0;
    a.$rotation0 = 0.0;
    a.$scaleX0 = 0.0;
    a.$scaleY = 0.0;
    a.$dirty = 0;
}
let cbgm_Polygon__init_0 = $this => {
    $this.$scaleX0 = 1.0;
    $this.$scaleY = 1.0;
    $this.$dirty = 1;
    $this.$localVertices = $rt_createFloatArray(0);
},
cbgm_Polygon__init_2 = () => {
    let var_0 = new cbgm_Polygon();
    cbgm_Polygon__init_0(var_0);
    return var_0;
},
cbgm_Polygon__init_1 = ($this, $vertices) => {
    let var$2, var$3;
    var$2 = $vertices.data;
    $this.$scaleX0 = 1.0;
    $this.$scaleY = 1.0;
    $this.$dirty = 1;
    if (var$2.length >= 6) {
        $this.$localVertices = $vertices;
        return;
    }
    var$3 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$3, $rt_s(537));
    $rt_throw(var$3);
},
cbgm_Polygon__init_ = var_0 => {
    let var_1 = new cbgm_Polygon();
    cbgm_Polygon__init_1(var_1, var_0);
    return var_1;
},
cbgm_Polygon_getTransformedVertices = $this => {
    let $localVertices, $worldVertices, $positionX, $positionY, $originX, $originY, $scaleX, $scaleY, $scale, var$10, $rotation, $cos, $sin, $i, $n, var$16, $x, var$18, $y;
    if (!$this.$dirty)
        return $this.$worldVertices;
    $this.$dirty = 0;
    $localVertices = $this.$localVertices;
    $worldVertices = $this.$worldVertices;
    if (!($worldVertices !== null && $worldVertices.data.length == $localVertices.data.length))
        $this.$worldVertices = $rt_createFloatArray($localVertices.data.length);
    $worldVertices = $this.$worldVertices;
    $positionX = $this.$x6;
    $positionY = $this.$y5;
    $originX = $this.$originX;
    $originY = $this.$originY;
    $scaleX = $this.$scaleX0;
    $scaleY = $this.$scaleY;
    $scale = $scaleX === 1.0 && $scaleY === 1.0 ? 0 : 1;
    var$10 = $localVertices.data;
    $rotation = $this.$rotation0;
    $localVertices = cbgm_MathUtils$Sin_table.data;
    $cos = $localVertices[(($rotation + 90.0) * 45.511112213134766 | 0) & 16383];
    $sin = $localVertices[($rotation * 45.511112213134766 | 0) & 16383];
    $i = 0;
    $n = var$10.length;
    var$16 = $rt_compare($rotation, 0.0);
    while ($i < $n) {
        $x = var$10[$i] - $originX;
        var$18 = $i + 1 | 0;
        $y = var$10[var$18] - $originY;
        if ($scale) {
            $x = $x * $scaleX;
            $y = $y * $scaleY;
        }
        if (!var$16)
            $rotation = $x;
        else {
            $rotation = $cos * $x - $sin * $y;
            $y = $sin * $x + $cos * $y;
        }
        $localVertices = $worldVertices.data;
        $localVertices[$i] = $positionX + $rotation + $originX;
        $localVertices[var$18] = $positionY + $y + $originY;
        $i = $i + 2 | 0;
    }
    return $worldVertices;
},
cbgm_Polygon_translate = ($this, $x, $y) => {
    $this.$x6 = $this.$x6 + $x;
    $this.$y5 = $this.$y5 + $y;
    $this.$dirty = 1;
},
cbgm_Polygon_scale = ($this, $amount) => {
    $this.$scaleX0 = $this.$scaleX0 + $amount;
    $this.$scaleY = $this.$scaleY + $amount;
    $this.$dirty = 1;
},
cbgm_Polygon_getCentroid = ($this, $centroid) => {
    let $vertices, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13;
    $vertices = (cbgm_Polygon_getTransformedVertices($this)).data;
    var$3 = 0;
    var$4 = $vertices.length;
    if (var$4 < 6) {
        $centroid = new jl_IllegalArgumentException;
        jl_Exception__init_($centroid, $rt_s(538));
        $rt_throw($centroid);
    }
    var$5 = 0.0;
    var$6 = 0.0;
    var$7 = 0.0;
    var$8 = (var$3 + var$4 | 0) - 2 | 0;
    var$9 = $vertices[var$8];
    var$10 = $vertices[var$8 + 1 | 0];
    while (var$3 <= var$8) {
        var$11 = $vertices[var$3];
        var$12 = $vertices[var$3 + 1 | 0];
        var$13 = var$9 * var$12 - var$11 * var$10;
        var$5 = var$5 + var$13;
        var$6 = var$6 + (var$9 + var$11) * var$13;
        var$7 = var$7 + (var$10 + var$12) * var$13;
        var$3 = var$3 + 2 | 0;
        var$9 = var$11;
        var$10 = var$12;
    }
    if (var$5 === 0.0) {
        $centroid.$x = 0.0;
        $centroid.$y = 0.0;
    } else {
        var$9 = 6.0 * var$5 * 0.5;
        $centroid.$x = var$6 / var$9;
        $centroid.$y = var$7 / var$9;
    }
    return $centroid;
},
cbgm_Polygon_contains = ($this, $point) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    var$2 = $point.$x;
    var$3 = $point.$y;
    var$4 = (cbgm_Polygon_getTransformedVertices($this)).data;
    var$5 = var$4.length;
    var$6 = 0;
    var$7 = 0;
    while (var$7 < var$5) {
        a: {
            var$8 = var$4[var$7];
            var$9 = var$4[var$7 + 1 | 0];
            var$10 = var$7 + 2 | 0;
            var$11 = var$4[var$10 % var$5 | 0];
            var$12 = var$4[(var$7 + 3 | 0) % var$5 | 0];
            if (!(var$9 <= var$3 && var$3 < var$12)) {
                if (var$12 > var$3)
                    break a;
                if (var$3 >= var$9)
                    break a;
            }
            if (var$2 < (var$11 - var$8) / (var$12 - var$9) * (var$3 - var$9) + var$8)
                var$6 = var$6 + 1 | 0;
        }
        var$7 = var$10;
    }
    return (var$6 & 1) != 1 ? 0 : 1;
},
cbgm_Polygon_resetTransformations = $this => {
    $this.$scaleX0 = 1.0;
    $this.$scaleY = 1.0;
    $this.$originX = 0.0;
    $this.$originY = 0.0;
    $this.$x6 = 0.0;
    $this.$y5 = 0.0;
    $this.$rotation0 = 0.0;
    $this.$dirty = 1;
};
function cbgm_Matrix4() {
    jl_Object.call(this);
    this.$val = null;
}
let cbgm_Matrix4_tmp = null,
cbgm_Matrix4_quat = null,
cbgm_Matrix4_quat2 = null,
cbgm_Matrix4_l_vez = null,
cbgm_Matrix4_l_vex = null,
cbgm_Matrix4_l_vey = null,
cbgm_Matrix4_tmpVec = null,
cbgm_Matrix4_tmpMat = null,
cbgm_Matrix4_right = null,
cbgm_Matrix4_tmpForward = null,
cbgm_Matrix4_tmpUp = null,
cbgm_Matrix4_$callClinit = () => {
    cbgm_Matrix4_$callClinit = $rt_eraseClinit(cbgm_Matrix4);
    cbgm_Matrix4__clinit_();
},
cbgm_Matrix4__init_0 = $this => {
    let var$1, var$2;
    cbgm_Matrix4_$callClinit();
    var$1 = $rt_createFloatArray(16);
    var$2 = var$1.data;
    $this.$val = var$1;
    var$2[0] = 1.0;
    var$2[5] = 1.0;
    var$2[10] = 1.0;
    var$2[15] = 1.0;
},
cbgm_Matrix4__init_ = () => {
    let var_0 = new cbgm_Matrix4();
    cbgm_Matrix4__init_0(var_0);
    return var_0;
},
cbgm_Matrix4_set = ($this, $matrix) => {
    return cbgm_Matrix4_set0($this, $matrix.$val);
},
cbgm_Matrix4_set0 = ($this, $values) => {
    let var$2;
    var$2 = $values.data;
    $values = $this.$val.data;
    $values[0] = var$2[0];
    $values[1] = var$2[1];
    $values[2] = var$2[2];
    $values[3] = var$2[3];
    $values[4] = var$2[4];
    $values[5] = var$2[5];
    $values[6] = var$2[6];
    $values[7] = var$2[7];
    $values[8] = var$2[8];
    $values[9] = var$2[9];
    $values[10] = var$2[10];
    $values[11] = var$2[11];
    $values[12] = var$2[12];
    $values[13] = var$2[13];
    $values[14] = var$2[14];
    $values[15] = var$2[15];
    return $this;
},
cbgm_Matrix4_mul0 = ($this, $matrix) => {
    let var$2, var$3, var$4, var$5, var$6;
    cbgm_Matrix4_$callClinit();
    var$2 = cbgm_Matrix4_tmp;
    var$3 = var$2.data;
    var$4 = $this.$val.data;
    var$5 = var$4[0];
    var$6 = $matrix.$val.data;
    var$3[0] = var$5 * var$6[0] + var$4[4] * var$6[1] + var$4[8] * var$6[2] + var$4[12] * var$6[3];
    var$3[4] = var$4[0] * var$6[4] + var$4[4] * var$6[5] + var$4[8] * var$6[6] + var$4[12] * var$6[7];
    var$3[8] = var$4[0] * var$6[8] + var$4[4] * var$6[9] + var$4[8] * var$6[10] + var$4[12] * var$6[11];
    var$3[12] = var$4[0] * var$6[12] + var$4[4] * var$6[13] + var$4[8] * var$6[14] + var$4[12] * var$6[15];
    var$3[1] = var$4[1] * var$6[0] + var$4[5] * var$6[1] + var$4[9] * var$6[2] + var$4[13] * var$6[3];
    var$3[5] = var$4[1] * var$6[4] + var$4[5] * var$6[5] + var$4[9] * var$6[6] + var$4[13] * var$6[7];
    var$3[9] = var$4[1] * var$6[8] + var$4[5] * var$6[9] + var$4[9] * var$6[10] + var$4[13] * var$6[11];
    var$3[13] = var$4[1] * var$6[12] + var$4[5] * var$6[13] + var$4[9] * var$6[14] + var$4[13] * var$6[15];
    var$3[2] = var$4[2] * var$6[0] + var$4[6] * var$6[1] + var$4[10] * var$6[2] + var$4[14] * var$6[3];
    var$3[6] = var$4[2] * var$6[4] + var$4[6] * var$6[5] + var$4[10] * var$6[6] + var$4[14] * var$6[7];
    var$3[10] = var$4[2] * var$6[8] + var$4[6] * var$6[9] + var$4[10] * var$6[10] + var$4[14] * var$6[11];
    var$3[14] = var$4[2] * var$6[12] + var$4[6] * var$6[13] + var$4[10] * var$6[14] + var$4[14] * var$6[15];
    var$3[3] = var$4[3] * var$6[0] + var$4[7] * var$6[1] + var$4[11] * var$6[2] + var$4[15] * var$6[3];
    var$3[7] = var$4[3] * var$6[4] + var$4[7] * var$6[5] + var$4[11] * var$6[6] + var$4[15] * var$6[7];
    var$3[11] = var$4[3] * var$6[8] + var$4[7] * var$6[9] + var$4[11] * var$6[10] + var$4[15] * var$6[11];
    var$3[15] = var$4[3] * var$6[12] + var$4[7] * var$6[13] + var$4[11] * var$6[14] + var$4[15] * var$6[15];
    return cbgm_Matrix4_set0($this, var$2);
},
cbgm_Matrix4_idt = $this => {
    let var$1;
    var$1 = $this.$val.data;
    var$1[0] = 1.0;
    var$1[4] = 0.0;
    var$1[8] = 0.0;
    var$1[12] = 0.0;
    var$1[1] = 0.0;
    var$1[5] = 1.0;
    var$1[9] = 0.0;
    var$1[13] = 0.0;
    var$1[2] = 0.0;
    var$1[6] = 0.0;
    var$1[10] = 1.0;
    var$1[14] = 0.0;
    var$1[3] = 0.0;
    var$1[7] = 0.0;
    var$1[11] = 0.0;
    var$1[15] = 1.0;
    return $this;
},
cbgm_Matrix4_setToOrtho2D = ($this, $x, $y, $width, $height) => {
    cbgm_Matrix4_setToOrtho($this, $x, $x + $width, $y, $y + $height, 0.0, 1.0);
    return $this;
},
cbgm_Matrix4_setToOrtho = ($this, $left, $right, $bottom, $top, $near, $far) => {
    let $tx, $x_orth, $ty, $y_orth, $tz, $z_orth, var$13;
    cbgm_Matrix4_idt($this);
    $tx = $right - $left;
    $x_orth = 2.0 / $tx;
    $ty = $top - $bottom;
    $y_orth = 2.0 / $ty;
    $tz = $far - $near;
    $z_orth = (-2.0) / $tz;
    $tx =  -($right + $left) / $tx;
    $ty =  -($top + $bottom) / $ty;
    $tz =  -($far + $near) / $tz;
    var$13 = $this.$val.data;
    var$13[0] = $x_orth;
    var$13[1] = 0.0;
    var$13[2] = 0.0;
    var$13[3] = 0.0;
    var$13[4] = 0.0;
    var$13[5] = $y_orth;
    var$13[6] = 0.0;
    var$13[7] = 0.0;
    var$13[8] = 0.0;
    var$13[9] = 0.0;
    var$13[10] = $z_orth;
    var$13[11] = 0.0;
    var$13[12] = $tx;
    var$13[13] = $ty;
    var$13[14] = $tz;
    var$13[15] = 1.0;
    return $this;
},
cbgm_Matrix4_matrix4_mul = ($mata, $matb) => {
    let var$3, $tmp_0, var$5;
    cbgm_Matrix4_$callClinit();
    var$3 = $mata.data;
    $matb = $matb.data;
    $tmp_0 = $rt_createFloatArray(16);
    var$5 = $tmp_0.data;
    var$5[0] = var$3[0] * $matb[0] + var$3[4] * $matb[1] + var$3[8] * $matb[2] + var$3[12] * $matb[3];
    var$5[4] = var$3[0] * $matb[4] + var$3[4] * $matb[5] + var$3[8] * $matb[6] + var$3[12] * $matb[7];
    var$5[8] = var$3[0] * $matb[8] + var$3[4] * $matb[9] + var$3[8] * $matb[10] + var$3[12] * $matb[11];
    var$5[12] = var$3[0] * $matb[12] + var$3[4] * $matb[13] + var$3[8] * $matb[14] + var$3[12] * $matb[15];
    var$5[1] = var$3[1] * $matb[0] + var$3[5] * $matb[1] + var$3[9] * $matb[2] + var$3[13] * $matb[3];
    var$5[5] = var$3[1] * $matb[4] + var$3[5] * $matb[5] + var$3[9] * $matb[6] + var$3[13] * $matb[7];
    var$5[9] = var$3[1] * $matb[8] + var$3[5] * $matb[9] + var$3[9] * $matb[10] + var$3[13] * $matb[11];
    var$5[13] = var$3[1] * $matb[12] + var$3[5] * $matb[13] + var$3[9] * $matb[14] + var$3[13] * $matb[15];
    var$5[2] = var$3[2] * $matb[0] + var$3[6] * $matb[1] + var$3[10] * $matb[2] + var$3[14] * $matb[3];
    var$5[6] = var$3[2] * $matb[4] + var$3[6] * $matb[5] + var$3[10] * $matb[6] + var$3[14] * $matb[7];
    var$5[10] = var$3[2] * $matb[8] + var$3[6] * $matb[9] + var$3[10] * $matb[10] + var$3[14] * $matb[11];
    var$5[14] = var$3[2] * $matb[12] + var$3[6] * $matb[13] + var$3[10] * $matb[14] + var$3[14] * $matb[15];
    var$5[3] = var$3[3] * $matb[0] + var$3[7] * $matb[1] + var$3[11] * $matb[2] + var$3[15] * $matb[3];
    var$5[7] = var$3[3] * $matb[4] + var$3[7] * $matb[5] + var$3[11] * $matb[6] + var$3[15] * $matb[7];
    var$5[11] = var$3[3] * $matb[8] + var$3[7] * $matb[9] + var$3[11] * $matb[10] + var$3[15] * $matb[11];
    var$5[15] = var$3[3] * $matb[12] + var$3[7] * $matb[13] + var$3[11] * $matb[14] + var$3[15] * $matb[15];
    jl_System_fastArraycopy($tmp_0, 0, $mata, 0, 16);
},
cbgm_Matrix4_matrix4_det = $val => {
    cbgm_Matrix4_$callClinit();
    $val = $val.data;
    return $val[3] * $val[6] * $val[9] * $val[12] - $val[2] * $val[7] * $val[9] * $val[12] - $val[3] * $val[5] * $val[10] * $val[12] + $val[1] * $val[7] * $val[10] * $val[12] + $val[2] * $val[5] * $val[11] * $val[12] - $val[1] * $val[6] * $val[11] * $val[12] - $val[3] * $val[6] * $val[8] * $val[13] + $val[2] * $val[7] * $val[8] * $val[13] + $val[3] * $val[4] * $val[10] * $val[13] - $val[0] * $val[7] * $val[10] * $val[13] - $val[2] * $val[4] * $val[11] * $val[13] + $val[0] * $val[6] * $val[11] * $val[13] + $val[3]
    * $val[5] * $val[8] * $val[14] - $val[1] * $val[7] * $val[8] * $val[14] - $val[3] * $val[4] * $val[9] * $val[14] + $val[0] * $val[7] * $val[9] * $val[14] + $val[1] * $val[4] * $val[11] * $val[14] - $val[0] * $val[5] * $val[11] * $val[14] - $val[2] * $val[5] * $val[8] * $val[15] + $val[1] * $val[6] * $val[8] * $val[15] + $val[2] * $val[4] * $val[9] * $val[15] - $val[0] * $val[6] * $val[9] * $val[15] - $val[1] * $val[4] * $val[10] * $val[15] + $val[0] * $val[5] * $val[10] * $val[15];
},
cbgm_Matrix4_matrix4_inv = $val => {
    let $tmp_0, $l_det, $inv_det;
    cbgm_Matrix4_$callClinit();
    $tmp_0 = $rt_createFloatArray(16);
    $l_det = cbgm_Matrix4_matrix4_det($val);
    if ($l_det === 0.0)
        return 0;
    $tmp_0 = $tmp_0.data;
    $val = $val.data;
    $tmp_0[0] = $val[9] * $val[14] * $val[7] - $val[13] * $val[10] * $val[7] + $val[13] * $val[6] * $val[11] - $val[5] * $val[14] * $val[11] - $val[9] * $val[6] * $val[15] + $val[5] * $val[10] * $val[15];
    $tmp_0[4] = $val[12] * $val[10] * $val[7] - $val[8] * $val[14] * $val[7] - $val[12] * $val[6] * $val[11] + $val[4] * $val[14] * $val[11] + $val[8] * $val[6] * $val[15] - $val[4] * $val[10] * $val[15];
    $tmp_0[8] = $val[8] * $val[13] * $val[7] - $val[12] * $val[9] * $val[7] + $val[12] * $val[5] * $val[11] - $val[4] * $val[13] * $val[11] - $val[8] * $val[5] * $val[15] + $val[4] * $val[9] * $val[15];
    $tmp_0[12] = $val[12] * $val[9] * $val[6] - $val[8] * $val[13] * $val[6] - $val[12] * $val[5] * $val[10] + $val[4] * $val[13] * $val[10] + $val[8] * $val[5] * $val[14] - $val[4] * $val[9] * $val[14];
    $tmp_0[1] = $val[13] * $val[10] * $val[3] - $val[9] * $val[14] * $val[3] - $val[13] * $val[2] * $val[11] + $val[1] * $val[14] * $val[11] + $val[9] * $val[2] * $val[15] - $val[1] * $val[10] * $val[15];
    $tmp_0[5] = $val[8] * $val[14] * $val[3] - $val[12] * $val[10] * $val[3] + $val[12] * $val[2] * $val[11] - $val[0] * $val[14] * $val[11] - $val[8] * $val[2] * $val[15] + $val[0] * $val[10] * $val[15];
    $tmp_0[9] = $val[12] * $val[9] * $val[3] - $val[8] * $val[13] * $val[3] - $val[12] * $val[1] * $val[11] + $val[0] * $val[13] * $val[11] + $val[8] * $val[1] * $val[15] - $val[0] * $val[9] * $val[15];
    $tmp_0[13] = $val[8] * $val[13] * $val[2] - $val[12] * $val[9] * $val[2] + $val[12] * $val[1] * $val[10] - $val[0] * $val[13] * $val[10] - $val[8] * $val[1] * $val[14] + $val[0] * $val[9] * $val[14];
    $tmp_0[2] = $val[5] * $val[14] * $val[3] - $val[13] * $val[6] * $val[3] + $val[13] * $val[2] * $val[7] - $val[1] * $val[14] * $val[7] - $val[5] * $val[2] * $val[15] + $val[1] * $val[6] * $val[15];
    $tmp_0[6] = $val[12] * $val[6] * $val[3] - $val[4] * $val[14] * $val[3] - $val[12] * $val[2] * $val[7] + $val[0] * $val[14] * $val[7] + $val[4] * $val[2] * $val[15] - $val[0] * $val[6] * $val[15];
    $tmp_0[10] = $val[4] * $val[13] * $val[3] - $val[12] * $val[5] * $val[3] + $val[12] * $val[1] * $val[7] - $val[0] * $val[13] * $val[7] - $val[4] * $val[1] * $val[15] + $val[0] * $val[5] * $val[15];
    $tmp_0[14] = $val[12] * $val[5] * $val[2] - $val[4] * $val[13] * $val[2] - $val[12] * $val[1] * $val[6] + $val[0] * $val[13] * $val[6] + $val[4] * $val[1] * $val[14] - $val[0] * $val[5] * $val[14];
    $tmp_0[3] = $val[9] * $val[6] * $val[3] - $val[5] * $val[10] * $val[3] - $val[9] * $val[2] * $val[7] + $val[1] * $val[10] * $val[7] + $val[5] * $val[2] * $val[11] - $val[1] * $val[6] * $val[11];
    $tmp_0[7] = $val[4] * $val[10] * $val[3] - $val[8] * $val[6] * $val[3] + $val[8] * $val[2] * $val[7] - $val[0] * $val[10] * $val[7] - $val[4] * $val[2] * $val[11] + $val[0] * $val[6] * $val[11];
    $tmp_0[11] = $val[8] * $val[5] * $val[3] - $val[4] * $val[9] * $val[3] - $val[8] * $val[1] * $val[7] + $val[0] * $val[9] * $val[7] + $val[4] * $val[1] * $val[11] - $val[0] * $val[5] * $val[11];
    $tmp_0[15] = $val[4] * $val[9] * $val[2] - $val[8] * $val[5] * $val[2] + $val[8] * $val[1] * $val[6] - $val[0] * $val[9] * $val[6] - $val[4] * $val[1] * $val[10] + $val[0] * $val[5] * $val[10];
    $inv_det = 1.0 / $l_det;
    $val[0] = $tmp_0[0] * $inv_det;
    $val[4] = $tmp_0[4] * $inv_det;
    $val[8] = $tmp_0[8] * $inv_det;
    $val[12] = $tmp_0[12] * $inv_det;
    $val[1] = $tmp_0[1] * $inv_det;
    $val[5] = $tmp_0[5] * $inv_det;
    $val[9] = $tmp_0[9] * $inv_det;
    $val[13] = $tmp_0[13] * $inv_det;
    $val[2] = $tmp_0[2] * $inv_det;
    $val[6] = $tmp_0[6] * $inv_det;
    $val[10] = $tmp_0[10] * $inv_det;
    $val[14] = $tmp_0[14] * $inv_det;
    $val[3] = $tmp_0[3] * $inv_det;
    $val[7] = $tmp_0[7] * $inv_det;
    $val[11] = $tmp_0[11] * $inv_det;
    $val[15] = $tmp_0[15] * $inv_det;
    return 1;
},
cbgm_Matrix4_mul = ($mata, $matb) => {
    cbgm_Matrix4_$callClinit();
    cbgm_Matrix4_matrix4_mul($mata, $matb);
},
cbgm_Matrix4_translate = ($this, $x, $y, $z) => {
    let var$4, var$5;
    cbgm_Matrix4_$callClinit();
    var$4 = cbgm_Matrix4_tmp;
    var$5 = var$4.data;
    var$5[0] = 1.0;
    var$5[4] = 0.0;
    var$5[8] = 0.0;
    var$5[12] = $x;
    var$5[1] = 0.0;
    var$5[5] = 1.0;
    var$5[9] = 0.0;
    var$5[13] = $y;
    var$5[2] = 0.0;
    var$5[6] = 0.0;
    var$5[10] = 1.0;
    var$5[14] = $z;
    var$5[3] = 0.0;
    var$5[7] = 0.0;
    var$5[11] = 0.0;
    var$5[15] = 1.0;
    cbgm_Matrix4_mul($this.$val, var$4);
    return $this;
},
cbgm_Matrix4__clinit_ = () => {
    let var$1;
    cbgm_Matrix4_tmp = $rt_createFloatArray(16);
    cbgm_Matrix4_quat = cbgm_Quaternion__init_();
    cbgm_Matrix4_quat2 = cbgm_Quaternion__init_();
    var$1 = new cbgm_Vector3;
    cbgm_Vector3_$callClinit();
    cbgm_Matrix4_l_vez = var$1;
    cbgm_Matrix4_l_vex = new cbgm_Vector3;
    cbgm_Matrix4_l_vey = new cbgm_Vector3;
    cbgm_Matrix4_tmpVec = new cbgm_Vector3;
    cbgm_Matrix4_tmpMat = cbgm_Matrix4__init_();
    cbgm_Matrix4_right = new cbgm_Vector3;
    cbgm_Matrix4_tmpForward = new cbgm_Vector3;
    cbgm_Matrix4_tmpUp = new cbgm_Vector3;
},
cbga_Sound = $rt_classWithoutFields(0),
cbga_Music = $rt_classWithoutFields(0),
ccvg_VfxGLUtils = $rt_classWithoutFields(),
ccvg_VfxGLUtils_TAG = null,
ccvg_VfxGLUtils_tmpIntBuf = null,
ccvg_VfxGLUtils_tmpByteBuffer = null,
ccvg_VfxGLUtils_tmpViewport = null,
ccvg_VfxGLUtils_prependVertexCode = null,
ccvg_VfxGLUtils_prependFragmentCode = null,
ccvg_VfxGLUtils_glExtension = null,
ccvg_VfxGLUtils_enableGLQueryStates = 0,
ccvg_VfxGLUtils_$callClinit = () => {
    ccvg_VfxGLUtils_$callClinit = $rt_eraseClinit(ccvg_VfxGLUtils);
    ccvg_VfxGLUtils__clinit_();
},
ccvg_VfxGLUtils__init_ = $this => {
    ccvg_VfxGLUtils_$callClinit();
},
ccvg_VfxGLUtils__init_0 = () => {
    let var_0 = new ccvg_VfxGLUtils();
    ccvg_VfxGLUtils__init_(var_0);
    return var_0;
},
ccvg_VfxGLUtils_compileShader0 = ($vertexFile, $fragmentFile) => {
    ccvg_VfxGLUtils_$callClinit();
    return ccvg_VfxGLUtils_compileShader($vertexFile, $fragmentFile, $rt_s(9));
},
ccvg_VfxGLUtils_compileShader = ($vertexFile, $fragmentFile, $defines) => {
    let $sb, var$5, var$6, $prependVert, $prependFrag, $srcVert, $srcFrag, $shader;
    ccvg_VfxGLUtils_$callClinit();
    if ($fragmentFile === null) {
        $vertexFile = new jl_IllegalArgumentException;
        jl_Exception__init_($vertexFile, $rt_s(539));
        $rt_throw($vertexFile);
    }
    if ($vertexFile === null) {
        $vertexFile = new jl_IllegalArgumentException;
        jl_Exception__init_($vertexFile, $rt_s(540));
        $rt_throw($vertexFile);
    }
    if ($defines === null) {
        $vertexFile = new jl_IllegalArgumentException;
        jl_Exception__init_($vertexFile, $rt_s(541));
        $rt_throw($vertexFile);
    }
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    jl_AbstractStringBuilder_append0($sb, $rt_s(542));
    var$5 = $vertexFile;
    jl_AbstractStringBuilder_append0($sb, cgxgbt_TeaFileHandle_name(var$5));
    jl_AbstractStringBuilder_append2($sb, 47);
    var$6 = $fragmentFile;
    jl_AbstractStringBuilder_append0($sb, cgxgbt_TeaFileHandle_name(var$6));
    jl_AbstractStringBuilder_append2($sb, 34);
    if ($defines.$nativeString.length > 0) {
        jl_AbstractStringBuilder_append0($sb, $rt_s(543));
        jl_AbstractStringBuilder_append0($sb, jl_String_replace($defines, $rt_s(36), $rt_s(29)));
        jl_AbstractStringBuilder_append0($sb, $rt_s(26));
    }
    jl_AbstractStringBuilder_append0($sb, $rt_s(544));
    $vertexFile = cbg_Gdx_app;
    $fragmentFile = ccvg_VfxGLUtils_TAG;
    $sb = jl_AbstractStringBuilder_toString($sb);
    cgxgbt_TeaApplication_log($vertexFile, $fragmentFile, $sb);
    $vertexFile = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($vertexFile);
    jl_AbstractStringBuilder_append0($vertexFile, ccvg_VfxGLUtils_prependVertexCode);
    jl_AbstractStringBuilder_append0($vertexFile, $defines);
    $prependVert = jl_AbstractStringBuilder_toString($vertexFile);
    $vertexFile = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($vertexFile);
    jl_AbstractStringBuilder_append0($vertexFile, ccvg_VfxGLUtils_prependFragmentCode);
    jl_AbstractStringBuilder_append0($vertexFile, $defines);
    $prependFrag = jl_AbstractStringBuilder_toString($vertexFile);
    $srcVert = cgxgbt_TeaFileHandle_readString(var$5);
    $srcFrag = cgxgbt_TeaFileHandle_readString(var$6);
    $shader = new cbggg_ShaderProgram;
    $vertexFile = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($vertexFile);
    jl_AbstractStringBuilder_append0($vertexFile, $prependVert);
    jl_AbstractStringBuilder_append0($vertexFile, $rt_s(36));
    jl_AbstractStringBuilder_append0($vertexFile, $srcVert);
    $defines = jl_AbstractStringBuilder_toString($vertexFile);
    $vertexFile = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($vertexFile);
    jl_AbstractStringBuilder_append0($vertexFile, $prependFrag);
    jl_AbstractStringBuilder_append0($vertexFile, $rt_s(36));
    jl_AbstractStringBuilder_append0($vertexFile, $srcFrag);
    cbggg_ShaderProgram__init_0($shader, $defines, jl_AbstractStringBuilder_toString($vertexFile));
    if ($shader.$isCompiled)
        return $shader;
    $vertexFile = new cbgu_GdxRuntimeException;
    $fragmentFile = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($fragmentFile);
    jl_AbstractStringBuilder_append0($fragmentFile, $rt_s(545));
    jl_AbstractStringBuilder_append0($fragmentFile, cgxgbt_TeaFileHandle_name(var$5));
    jl_AbstractStringBuilder_append0($fragmentFile, $rt_s(107));
    jl_AbstractStringBuilder_append0($fragmentFile, cgxgbt_TeaFileHandle_name(var$6));
    jl_AbstractStringBuilder_append0($fragmentFile, $rt_s(36));
    jl_AbstractStringBuilder_append0($fragmentFile, cbggg_ShaderProgram_getLog($shader));
    jl_Exception__init_($vertexFile, jl_AbstractStringBuilder_toString($fragmentFile));
    $rt_throw($vertexFile);
},
ccvg_VfxGLUtils__clinit_ = () => {
    let $e, var$2, var$3, $$je;
    a: {
        ccvg_VfxGLUtils_TAG = jl_Class_getSimpleName($rt_cls(ccvg_VfxGLUtils));
        ccvg_VfxGLUtils_tmpIntBuf = jn_ByteBufferJsImpl_asIntBuffer(jn_ByteBuffer_order(jn_ByteBuffer_allocateDirect(64), jn_ByteOrder_nativeOrder()));
        ccvg_VfxGLUtils_tmpByteBuffer = cbgu_BufferUtils_newByteBuffer(32);
        ccvg_VfxGLUtils_tmpViewport = new ccvg_VfxGlViewport;
        ccvg_VfxGLUtils_prependVertexCode = $rt_s(9);
        ccvg_VfxGLUtils_prependFragmentCode = $rt_s(9);
        $e = cbg_Application$ApplicationType_WebGL;
        if ($e !== $e) {
            $e = new ccvg_DefaultVfxGlExtension;
            ccvg_DefaultVfxGlExtension_$callClinit();
            ccvg_VfxGLUtils_glExtension = $e;
        } else
            try {
                ccvg_VfxGLUtils_glExtension = cbgur_ClassReflection_newInstance(cbgur_ClassReflection_forName($rt_s(546)));
                var$2 = cbg_Gdx_app;
                var$3 = ccvg_VfxGLUtils_TAG;
                cgxgbt_TeaApplication_log(var$2, var$3, $rt_s(547));
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof cbgur_ReflectionException) {
                    $e = $$je;
                    var$2 = new cbgu_GdxRuntimeException;
                    jl_Throwable__init_0(var$2, $rt_s(548), $e);
                    $rt_throw(var$2);
                } else {
                    throw $$e;
                }
            }
    }
    ccvg_VfxGLUtils_enableGLQueryStates = 0;
};
function ccve_GaussianBlurEffect$BlurType() {
    jl_Enum.call(this);
    this.$tap = null;
}
let ccve_GaussianBlurEffect$BlurType_Gaussian3x3 = null,
ccve_GaussianBlurEffect$BlurType_Gaussian3x3b = null,
ccve_GaussianBlurEffect$BlurType_Gaussian5x5 = null,
ccve_GaussianBlurEffect$BlurType_Gaussian5x5b = null,
ccve_GaussianBlurEffect$BlurType_$VALUES = null,
ccve_GaussianBlurEffect$BlurType_$callClinit = () => {
    ccve_GaussianBlurEffect$BlurType_$callClinit = $rt_eraseClinit(ccve_GaussianBlurEffect$BlurType);
    ccve_GaussianBlurEffect$BlurType__clinit_();
},
ccve_GaussianBlurEffect$BlurType_values = () => {
    ccve_GaussianBlurEffect$BlurType_$callClinit();
    return ccve_GaussianBlurEffect$BlurType_$VALUES.$clone0();
},
ccve_GaussianBlurEffect$BlurType__init_0 = ($this, var$1, var$2, $tap) => {
    ccve_GaussianBlurEffect$BlurType_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
    $this.$tap = $tap;
},
ccve_GaussianBlurEffect$BlurType__init_ = (var_0, var_1, var_2) => {
    let var_3 = new ccve_GaussianBlurEffect$BlurType();
    ccve_GaussianBlurEffect$BlurType__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
ccve_GaussianBlurEffect$BlurType__clinit_ = () => {
    let var$1, var$2, var$3;
    ccve_GaussianBlurEffect$BlurType_Gaussian3x3 = ccve_GaussianBlurEffect$BlurType__init_($rt_s(549), 0, ccve_GaussianBlurEffect$Tap_Tap3x3);
    ccve_GaussianBlurEffect$BlurType_Gaussian3x3b = ccve_GaussianBlurEffect$BlurType__init_($rt_s(550), 1, ccve_GaussianBlurEffect$Tap_Tap3x3);
    ccve_GaussianBlurEffect$BlurType_Gaussian5x5 = ccve_GaussianBlurEffect$BlurType__init_($rt_s(551), 2, ccve_GaussianBlurEffect$Tap_Tap5x5);
    var$1 = ccve_GaussianBlurEffect$BlurType__init_($rt_s(552), 3, ccve_GaussianBlurEffect$Tap_Tap5x5);
    ccve_GaussianBlurEffect$BlurType_Gaussian5x5b = var$1;
    var$2 = $rt_createArray(ccve_GaussianBlurEffect$BlurType, 4);
    var$3 = var$2.data;
    var$3[0] = ccve_GaussianBlurEffect$BlurType_Gaussian3x3;
    var$3[1] = ccve_GaussianBlurEffect$BlurType_Gaussian3x3b;
    var$3[2] = ccve_GaussianBlurEffect$BlurType_Gaussian5x5;
    var$3[3] = var$1;
    ccve_GaussianBlurEffect$BlurType_$VALUES = var$2;
},
ccveu_CopyEffect = $rt_classWithoutFields(ccve_ShaderVfxEffect),
ccveu_CopyEffect__init_ = $this => {
    ccve_ShaderVfxEffect__init_($this, ccvg_VfxGLUtils_compileShader0(cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503)), cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(553))));
    ccveu_CopyEffect_rebind($this);
},
ccveu_CopyEffect__init_0 = () => {
    let var_0 = new ccveu_CopyEffect();
    ccveu_CopyEffect__init_(var_0);
    return var_0;
},
ccveu_CopyEffect_rebind = $this => {
    let var$1;
    var$1 = $this;
    cbggg_ShaderProgram_bind(var$1.$program);
    cbggg_ShaderProgram_setUniformi(var$1.$program, $rt_s(507), 0);
},
ccveu_CopyEffect_render0 = ($this, $context, $buffers) => {
    ccveu_CopyEffect_render($this, $context, $buffers.$bufSrc, $buffers.$bufDst);
},
ccveu_CopyEffect_render = ($this, $context, $src, $dst) => {
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture($src), 0);
    ccve_ShaderVfxEffect_renderShader($this, $context, $dst);
};
function ccve_GaussianBlurEffect() {
    let a = this; ccve_AbstractVfxEffect.call(a);
    a.$type5 = null;
    a.$amount = 0.0;
    a.$passes = 0;
    a.$invWidth = 0.0;
    a.$invHeight = 0.0;
    a.$convolve = null;
}
let ccve_GaussianBlurEffect__init_ = $this => {
    let var$1;
    ccve_GaussianBlurEffect$BlurType_$callClinit();
    var$1 = ccve_GaussianBlurEffect$BlurType_Gaussian5x5;
    $this.$amount = 1.0;
    $this.$passes = 1;
    ccve_GaussianBlurEffect_setType($this, var$1);
},
ccve_GaussianBlurEffect__init_0 = () => {
    let var_0 = new ccve_GaussianBlurEffect();
    ccve_GaussianBlurEffect__init_(var_0);
    return var_0;
},
ccve_GaussianBlurEffect_dispose = $this => {
    ccve_CompositeVfxEffect_dispose($this.$convolve);
},
ccve_GaussianBlurEffect_resize = ($this, $width, $height) => {
    $this.$invWidth = 1.0 / $width;
    $this.$invHeight = 1.0 / $height;
    ccve_CompositeVfxEffect_resize($this.$convolve, $width, $height);
    ccve_GaussianBlurEffect_computeBlurWeightings($this);
},
ccve_GaussianBlurEffect_rebind = $this => {
    ccve_CompositeVfxEffect_rebind($this.$convolve);
    ccve_GaussianBlurEffect_computeBlurWeightings($this);
},
ccve_GaussianBlurEffect_render = ($this, $context, $buffers) => {
    let $i, var$4;
    $i = 0;
    while ($i < $this.$passes) {
        var$4 = $this.$convolve;
        ccve_GaussianBlurEffect$Convolve1DEffect_render(var$4.$hor, $context, $buffers);
        ccvf_VfxPingPongWrapper_swap($buffers);
        ccve_GaussianBlurEffect$Convolve1DEffect_render(var$4.$vert, $context, $buffers);
        if ($i < ($this.$passes - 1 | 0))
            ccvf_VfxPingPongWrapper_swap($buffers);
        $i = $i + 1 | 0;
    }
},
ccve_GaussianBlurEffect_setType = ($this, $type) => {
    let var$2, var$3, var$4, var$5;
    if ($type === null) {
        $type = new jl_IllegalArgumentException;
        jl_Exception__init_($type, $rt_s(554));
        $rt_throw($type);
    }
    if ($this.$type5 !== $type) {
        $this.$type5 = $type;
        $type = $this.$convolve;
        if ($type !== null)
            ccve_CompositeVfxEffect_dispose($type);
        $type = new ccve_GaussianBlurEffect$Convolve2DEffect;
        var$2 = $this.$type5.$tap.$radius;
        ccve_CompositeVfxEffect__init_($type);
        $type.$radius0 = var$2;
        var$2 = (var$2 * 2 | 0) + 1 | 0;
        $type.$length5 = var$2;
        var$3 = ccve_GaussianBlurEffect$Convolve1DEffect__init_0(var$2, $rt_createFloatArray(var$2), $rt_createFloatArray(var$2 * 2 | 0));
        var$4 = $type;
        var$3 = ccve_CompositeVfxEffect_register(var$4, var$3);
        $type.$hor = var$3;
        var$5 = new ccve_GaussianBlurEffect$Convolve1DEffect;
        var$2 = $type.$length5;
        ccve_GaussianBlurEffect$Convolve1DEffect__init_(var$5, var$2, var$3.$weights, $rt_createFloatArray(var$2 * 2 | 0));
        var$3 = ccve_CompositeVfxEffect_register(var$4, var$5);
        $type.$vert = var$3;
        var$5 = $type.$hor;
        $type.$weights0 = var$5.$weights;
        $type.$offsetsHor = var$5.$offsets;
        $type.$offsetsVert = var$3.$offsets;
        $this.$convolve = $type;
        ccve_GaussianBlurEffect_computeBlurWeightings($this);
    }
},
ccve_GaussianBlurEffect_computeBlurWeightings = $this => {
    let $hasData, var$2, $outWeights, $outOffsetsH, $outOffsetsV, $dx, $dy, var$8, var$9, $i, var$11, var$12, var$13, $i_0, var$15, var$16, var$17;
    a: {
        $hasData = 1;
        var$2 = $this.$convolve;
        $outWeights = var$2.$weights0;
        $outOffsetsH = var$2.$offsetsHor;
        $outOffsetsV = var$2.$offsetsVert;
        $dx = $this.$invWidth;
        $dy = $this.$invHeight;
        ccve_GaussianBlurEffect$1_$callClinit();
        var$8 = ccve_GaussianBlurEffect$1_$SwitchMap$com$crashinvaders$vfx$effects$GaussianBlurEffect$BlurType.data;
        var$9 = $this.$type5;
        switch (var$8[var$9.$ordinal0]) {
            case 1:
            case 2:
                $i = var$9.$tap.$radius;
                var$11 = $this.$amount;
                var$11 = 2.0 * var$11 * var$11;
                $dx = jl_Math_sqrt(var$11 * 3.141592653589793);
                $dy = 0.0;
                var$12 =  -$i | 0;
                while (var$12 <= $i) {
                    var$8 = $outWeights.data;
                    var$13 = $rt_imul(var$12, var$12);
                    $i_0 = var$12 + $i | 0;
                    var$8[$i_0] = jl_Math_exp( -var$13 / var$11) / $dx;
                    $dy = $dy + var$8[$i_0];
                    var$12 = var$12 + 1 | 0;
                }
                $i = ($i * 2 | 0) + 1 | 0;
                var$12 = 0;
                while (var$12 < $i) {
                    var$8 = $outWeights.data;
                    var$8[var$12] = var$8[var$12] / $dy;
                    var$12 = var$12 + 1 | 0;
                }
                $i = $this.$type5.$tap.$radius;
                var$11 = $this.$invWidth;
                $dx = $this.$invHeight;
                $i_0 =  -$i | 0;
                var$15 = 0;
                while ($i_0 <= $i) {
                    var$8 = $outOffsetsH.data;
                    $outWeights = $outOffsetsV.data;
                    var$12 = var$15 + 0 | 0;
                    $dy = $i_0;
                    var$8[var$12] = $dy * var$11;
                    var$16 = var$15 + 1 | 0;
                    var$8[var$16] = 0.0;
                    $outWeights[var$12] = 0.0;
                    $outWeights[var$16] = $dy * $dx;
                    $i_0 = $i_0 + 1 | 0;
                    var$15 = var$15 + 2 | 0;
                }
                break a;
            case 3:
                var$17 = $outWeights.data;
                var$8 = $outOffsetsH.data;
                $outWeights = $outOffsetsV.data;
                var$17[0] = 0.35294100642204285;
                var$17[1] = 0.2941179871559143;
                var$17[2] = 0.35294100642204285;
                var$8[0] = (-1.3333300352096558);
                var$8[1] = 0.0;
                var$8[2] = 0.0;
                var$8[3] = 0.0;
                var$8[4] = 1.3333300352096558;
                var$8[5] = 0.0;
                $outWeights[0] = 0.0;
                $outWeights[1] = (-1.3333300352096558);
                $outWeights[2] = 0.0;
                $outWeights[3] = 0.0;
                $outWeights[4] = 0.0;
                $outWeights[5] = 1.3333300352096558;
                $i = 0;
                while ($i < (var$2.$length5 * 2 | 0)) {
                    var$8[$i] = var$8[$i] * $dx;
                    $outWeights[$i] = $outWeights[$i] * $dy;
                    $i = $i + 1 | 0;
                }
                break a;
            case 4:
                var$8 = $outWeights.data;
                $outWeights = $outOffsetsH.data;
                $outOffsetsV = $outOffsetsV.data;
                var$8[0] = 0.07027029991149902;
                var$8[1] = 0.31621599197387695;
                var$8[2] = 0.22702699899673462;
                var$8[3] = 0.31621599197387695;
                var$8[4] = 0.07027029991149902;
                $outWeights[0] = (-3.2307701110839844);
                $outWeights[1] = 0.0;
                $outWeights[2] = (-1.384619951248169);
                $outWeights[3] = 0.0;
                $outWeights[4] = 0.0;
                $outWeights[5] = 0.0;
                $outWeights[6] = 1.384619951248169;
                $outWeights[7] = 0.0;
                $outWeights[8] = 3.2307701110839844;
                $outWeights[9] = 0.0;
                $outOffsetsV[0] = 0.0;
                $outOffsetsV[1] = (-3.2307701110839844);
                $outOffsetsV[2] = 0.0;
                $outOffsetsV[3] = (-1.384619951248169);
                $outOffsetsV[4] = 0.0;
                $outOffsetsV[5] = 0.0;
                $outOffsetsV[6] = 0.0;
                $outOffsetsV[7] = 1.384619951248169;
                $outOffsetsV[8] = 0.0;
                $outOffsetsV[9] = 3.2307701110839844;
                $i_0 = 0;
                while ($i_0 < (var$2.$length5 * 2 | 0)) {
                    $outWeights[$i_0] = $outWeights[$i_0] * $dx;
                    $outOffsetsV[$i_0] = $outOffsetsV[$i_0] * $dy;
                    $i_0 = $i_0 + 1 | 0;
                }
                break a;
            default:
        }
        $hasData = 0;
    }
    if ($hasData)
        ccve_CompositeVfxEffect_rebind($this.$convolve);
};
function ccveu_GammaThresholdEffect() {
    ccve_ShaderVfxEffect.call(this);
    this.$gamma = 0.0;
}
let ccveu_GammaThresholdEffect_rebind = $this => {
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(507), 0);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(513), $this.$gamma);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(514), 1.0 / (1.0 - $this.$gamma));
},
ccveu_GammaThresholdEffect_render = ($this, $context, $buffers) => {
    let var$3, var$4;
    var$3 = $buffers.$bufSrc;
    var$4 = $buffers.$bufDst;
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$3), 0);
    ccve_ShaderVfxEffect_renderShader($this, $context, var$4);
},
ccveu_GammaThresholdEffect$Type = $rt_classWithoutFields(jl_Enum),
ccveu_GammaThresholdEffect$Type_RGBA = null,
ccveu_GammaThresholdEffect$Type_RGB = null,
ccveu_GammaThresholdEffect$Type_ALPHA_PREMULTIPLIED = null,
ccveu_GammaThresholdEffect$Type_$VALUES = null,
ccveu_GammaThresholdEffect$Type_values = () => {
    return ccveu_GammaThresholdEffect$Type_$VALUES.$clone0();
},
ccveu_GammaThresholdEffect$Type__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new ccveu_GammaThresholdEffect$Type;
    jl_Enum__init_(var$1, $rt_s(555), 0);
    ccveu_GammaThresholdEffect$Type_RGBA = var$1;
    var$1 = new ccveu_GammaThresholdEffect$Type;
    jl_Enum__init_(var$1, $rt_s(556), 1);
    ccveu_GammaThresholdEffect$Type_RGB = var$1;
    var$1 = new ccveu_GammaThresholdEffect$Type;
    jl_Enum__init_(var$1, $rt_s(557), 2);
    ccveu_GammaThresholdEffect$Type_ALPHA_PREMULTIPLIED = var$1;
    var$2 = $rt_createArray(ccveu_GammaThresholdEffect$Type, 3);
    var$3 = var$2.data;
    var$3[0] = ccveu_GammaThresholdEffect$Type_RGBA;
    var$3[1] = ccveu_GammaThresholdEffect$Type_RGB;
    var$3[2] = var$1;
    ccveu_GammaThresholdEffect$Type_$VALUES = var$2;
};
function ccveu_CombineEffect() {
    let a = this; ccve_ShaderVfxEffect.call(a);
    a.$s1i = 0.0;
    a.$s1s = 0.0;
    a.$s2i = 0.0;
    a.$s2s = 0.0;
}
let ccveu_CombineEffect__init_ = $this => {
    ccve_ShaderVfxEffect__init_($this, ccvg_VfxGLUtils_compileShader0(cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503)), cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(558))));
    $this.$s1i = 1.0;
    $this.$s2i = 1.0;
    $this.$s1s = 1.0;
    $this.$s2s = 1.0;
    ccveu_CombineEffect_rebind($this);
},
ccveu_CombineEffect__init_0 = () => {
    let var_0 = new ccveu_CombineEffect();
    ccveu_CombineEffect__init_(var_0);
    return var_0;
},
ccveu_CombineEffect_rebind = $this => {
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(507), 0);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(559), 1);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(515), $this.$s1i);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(517), $this.$s2i);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(516), $this.$s1s);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(518), $this.$s2s);
};
function ccveu_MixEffect() {
    ccve_ShaderVfxEffect.call(this);
    this.$mixFactor = 0.0;
}
let ccveu_MixEffect_rebind = $this => {
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(507), 0);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(559), 1);
    cbggg_ShaderProgram_setUniformf($this.$program, $rt_s(522), $this.$mixFactor);
};
function ccvf_VfxFrameBufferQueue() {
    let a = this; jl_Object.call(a);
    a.$buffers = null;
    a.$currentIdx = 0;
    a.$wrapU = null;
    a.$wrapV = null;
    a.$filterMin = null;
    a.$filterMag = null;
}
function psm_MainMenu() {
    let a = this; psm_Menu.call(a);
    a.$episodes = null;
    a.$guide = null;
    a.$settings = null;
    a.$gameButton = null;
    a.$guideButton = null;
    a.$settingsButton = null;
    a.$exitButton = null;
    a.$gamePosition = null;
    a.$guidePosition = null;
    a.$settingsPosition = null;
    a.$exitPosition = null;
    a.$subMenu = null;
}
let psm_MainMenu__init_ = $this => {
    let $labelTexts, var$2, var$3, var$4, var$5, var$6;
    psm_Menu__init_($this);
    $this.$episodes = psm_EpisodesMenu__init_0();
    $this.$guide = psm_GuideMenu__init_0();
    $this.$settings = psm_SettingsMenu__init_0();
    $labelTexts = cbgu_I18NBundle_createBundle(cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(560)));
    $this.$gameButton = psm_Menu$LabelButton__init_(cbgu_I18NBundle_format($labelTexts, $rt_s(561), $rt_createArray(jl_Object, 0)), 800.0, 200.0, 20.0, 10.0, 20.0, 10.0);
    $this.$guideButton = psm_Menu$LabelButton__init_(cbgu_I18NBundle_format($labelTexts, $rt_s(562), $rt_createArray(jl_Object, 0)), 800.0, 200.0, 20.0, 10.0, 20.0, 10.0);
    $this.$settingsButton = psm_Menu$LabelButton__init_(cbgu_I18NBundle_format($labelTexts, $rt_s(563), $rt_createArray(jl_Object, 0)), 800.0, 200.0, 20.0, 10.0, 20.0, 10.0);
    var$2 = psm_Menu$LabelButton__init_(cbgu_I18NBundle_format($labelTexts, $rt_s(564), $rt_createArray(jl_Object, 0)), 800.0, 200.0, 20.0, 10.0, 20.0, 10.0);
    $this.$exitButton = var$2;
    var$3 = $this.$gameButton.$boxColors.data;
    var$4 = $this.$guideButton.$boxColors.data;
    var$5 = $this.$settingsButton.$boxColors.data;
    var$6 = var$2.$boxColors.data;
    var$2 = cbgg_Color__init_(572662306);
    var$6[0] = var$2;
    var$5[0] = var$2;
    var$4[0] = var$2;
    var$3[0] = var$2;
    var$5 = $this.$gameButton.$boxColors.data;
    var$3 = $this.$guideButton.$boxColors.data;
    var$4 = $this.$settingsButton.$boxColors.data;
    var$6 = $this.$exitButton.$boxColors.data;
    var$2 = cbgg_Color__init_(0);
    var$6[1] = var$2;
    var$4[1] = var$2;
    var$3[1] = var$2;
    var$5[1] = var$2;
    var$5 = $this.$gameButton.$cursorColors.data;
    var$3 = $this.$guideButton.$cursorColors.data;
    var$4 = $this.$settingsButton.$cursorColors.data;
    var$6 = $this.$exitButton.$cursorColors.data;
    var$2 = cbgg_Color__init_((-2135700446));
    var$6[0] = var$2;
    var$4[0] = var$2;
    var$3[0] = var$2;
    var$5[0] = var$2;
    var$5 = $this.$gameButton.$cursorColors.data;
    var$3 = $this.$guideButton.$cursorColors.data;
    var$4 = $this.$settingsButton.$cursorColors.data;
    var$6 = $this.$exitButton.$cursorColors.data;
    var$2 = cbgg_Color__init_((-857276638));
    var$6[1] = var$2;
    var$4[1] = var$2;
    var$3[1] = var$2;
    var$5[1] = var$2;
    var$5 = $this.$gameButton.$labelColors.data;
    var$3 = $this.$guideButton.$labelColors.data;
    var$4 = $this.$settingsButton.$labelColors.data;
    var$6 = $this.$exitButton.$labelColors.data;
    var$2 = cbgg_Color__init_((-1431646977));
    var$6[0] = var$2;
    var$4[0] = var$2;
    var$3[0] = var$2;
    var$5[0] = var$2;
    var$5 = $this.$gameButton.$labelColors.data;
    var$3 = $this.$guideButton.$labelColors.data;
    var$4 = $this.$settingsButton.$labelColors.data;
    var$6 = $this.$exitButton.$labelColors.data;
    var$2 = cbgg_Color__init_((-286326785));
    var$6[1] = var$2;
    var$4[1] = var$2;
    var$3[1] = var$2;
    var$5[1] = var$2;
    $this.$gamePosition = cbgm_Vector2__init_(100.0, 850.0);
    $this.$guidePosition = cbgm_Vector2__init_(100.0, 600.0);
    $this.$settingsPosition = cbgm_Vector2__init_(100.0, 350.0);
    $this.$exitPosition = cbgm_Vector2__init_(100.0, 100.0);
    $this.$selectedBox = $this.$gameButton;
},
psm_MainMenu__init_0 = () => {
    let var_0 = new psm_MainMenu();
    psm_MainMenu__init_(var_0);
    return var_0;
},
psm_MainMenu_update = $this => {
    let var$1, var$2, var$3, var$4;
    a: {
        var$1 = $this.$subMenu;
        if (var$1 === null) {
            var$1 = $this.$gameButton;
            var$2 = $this;
            if (!psm_Menu_isPushed(var$2, var$1, 1) && !psm_Menu_isClicked(var$2, $this.$gameButton, 1)) {
                if (!psm_Menu_isPushed(var$2, $this.$guideButton, 1) && !psm_Menu_isClicked(var$2, $this.$guideButton, 1)) {
                    if (!pss_Control_buttons.data[4] && !psm_Menu_isPushed(var$2, $this.$settingsButton, 1) && !psm_Menu_isClicked(var$2, $this.$settingsButton, 1)) {
                        if (!psm_Menu_isPushed(var$2, $this.$exitButton, 1) && !psm_Menu_isClicked(var$2, $this.$exitButton, 1)) {
                            var$1 = $this.$selectedBox;
                            var$2 = $this.$gameButton;
                            if (var$1 !== var$2) {
                                var$3 = $this.$guideButton;
                                if (var$1 === var$3) {
                                    var$4 = pss_Control_axisY;
                                    if (var$4 == (-1))
                                        $this.$selectedBox = $this.$settingsButton;
                                    else if (var$4 == 1)
                                        $this.$selectedBox = var$2;
                                } else {
                                    var$2 = $this.$settingsButton;
                                    if (var$1 === var$2) {
                                        var$4 = pss_Control_axisY;
                                        if (var$4 == (-1))
                                            $this.$selectedBox = $this.$exitButton;
                                        else if (var$4 == 1)
                                            $this.$selectedBox = var$3;
                                    } else if (var$1 === $this.$exitButton && pss_Control_axisY == 1)
                                        $this.$selectedBox = var$2;
                                }
                            } else if (pss_Control_axisY == (-1))
                                $this.$selectedBox = $this.$guideButton;
                        } else
                            $this.$selectedBox = $this.$exitButton;
                    } else {
                        $this.$selectedBox = $this.$settingsButton;
                        pss_Section_$callClinit();
                        pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
                        $this.$subMenu = $this.$settings;
                    }
                } else {
                    $this.$selectedBox = $this.$guideButton;
                    pss_Section_$callClinit();
                    pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
                    $this.$subMenu = $this.$guide;
                }
            } else {
                $this.$selectedBox = $this.$gameButton;
                pss_Section_$callClinit();
                pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
                $this.$subMenu = $this.$episodes;
            }
        } else {
            b: {
                c: {
                    d: {
                        if (!pss_Control_buttons.data[4]) {
                            var$2 = $this.$episodes;
                            if (var$1 === var$2) {
                                var$1 = var$2.$backButton0;
                                if (psm_Menu_isPushed(var$2, var$1, 1))
                                    break d;
                                var$1 = $this.$episodes;
                                var$2 = var$1.$backButton0;
                                if (psm_Menu_isClicked(var$1, var$2, 1))
                                    break d;
                            }
                            var$1 = $this.$subMenu;
                            var$2 = $this.$guide;
                            if (var$1 === var$2) {
                                var$1 = var$2.$backButton;
                                if (psm_Menu_isPushed(var$2, var$1, 1))
                                    break d;
                                var$1 = $this.$guide;
                                var$2 = var$1.$backButton;
                                if (psm_Menu_isClicked(var$1, var$2, 1))
                                    break d;
                            }
                            var$1 = $this.$subMenu;
                            var$2 = $this.$settings;
                            if (var$1 !== var$2)
                                break c;
                            var$1 = var$2.$backButton1;
                            if (!psm_Menu_isPushed(var$2, var$1, 1)) {
                                var$1 = $this.$settings;
                                var$2 = var$1.$backButton1;
                                if (!psm_Menu_isClicked(var$1, var$2, 1))
                                    break c;
                            }
                        }
                    }
                    $this.$subMenu = null;
                    break b;
                }
                $this.$subMenu.$update();
            }
            var$1 = $this.$subMenu;
            var$2 = $this.$episodes;
            if (var$1 === var$2) {
                var$1 = var$2.$startButton;
                if (!psm_Menu_isPushed(var$2, var$1, 1)) {
                    var$1 = $this.$episodes;
                    var$2 = var$1.$startButton;
                    if (!psm_Menu_isClicked(var$1, var$2, 1))
                        break a;
                }
                $this.$subMenu = null;
            }
        }
    }
},
psm_MainMenu_drawContent = $this => {
    let var$1, var$2, var$3, var$4;
    a: {
        b: {
            var$1 = $this.$gameButton;
            var$2 = $this.$gamePosition;
            if ($this.$subMenu === null) {
                if (psm_Menu_isSelected($this, var$1))
                    break b;
                pss_Section_$callClinit();
                if (pss_Control_isPointed(pss_Section_control, $this.$gameButton.$polygon4))
                    break b;
            }
            var$3 = 0;
            break a;
        }
        var$3 = 1;
    }
    c: {
        d: {
            psm_Menu$LabelButton_draw(var$1, var$2, var$3);
            var$1 = $this.$guideButton;
            var$2 = $this.$guidePosition;
            var$4 = $this.$subMenu;
            if (var$4 !== $this.$guide) {
                if (var$4 !== null)
                    break d;
                if (!psm_Menu_isSelected($this, var$1)) {
                    pss_Section_$callClinit();
                    if (!pss_Control_isPointed(pss_Section_control, $this.$guideButton.$polygon4))
                        break d;
                }
            }
            var$3 = 1;
            break c;
        }
        var$3 = 0;
    }
    e: {
        f: {
            psm_Menu$LabelButton_draw(var$1, var$2, var$3);
            var$1 = $this.$settingsButton;
            var$2 = $this.$settingsPosition;
            var$4 = $this.$subMenu;
            if (var$4 !== $this.$settings) {
                if (var$4 !== null)
                    break f;
                if (!psm_Menu_isSelected($this, var$1)) {
                    pss_Section_$callClinit();
                    if (!pss_Control_isPointed(pss_Section_control, $this.$settingsButton.$polygon4))
                        break f;
                }
            }
            var$3 = 1;
            break e;
        }
        var$3 = 0;
    }
    g: {
        h: {
            psm_Menu$LabelButton_draw(var$1, var$2, var$3);
            var$1 = $this.$exitButton;
            var$2 = $this.$exitPosition;
            if ($this.$subMenu === null) {
                if (psm_Menu_isSelected($this, var$1))
                    break h;
                pss_Section_$callClinit();
                if (pss_Control_isPointed(pss_Section_control, $this.$exitButton.$polygon4))
                    break h;
            }
            var$3 = 0;
            break g;
        }
        var$3 = 1;
    }
    psm_Menu$LabelButton_draw(var$1, var$2, var$3);
    var$1 = $this.$subMenu;
    if (var$1 !== null)
        var$1.$drawContent();
},
psm_OverviewMenu = $rt_classWithoutFields(psm_Menu),
psm_OverviewMenu__init_ = $this => {
    psm_Menu__init_($this);
},
psm_OverviewMenu__init_0 = () => {
    let var_0 = new psm_OverviewMenu();
    psm_OverviewMenu__init_(var_0);
    return var_0;
};
function pse_S01E01Episode() {
    let a = this; pse_Episode.call(a);
    a.$logo = null;
    a.$menuButton = null;
    a.$axes0 = null;
    a.$vector1 = null;
    a.$vector2 = null;
    a.$vector3 = null;
    a.$vector4 = null;
    a.$speed1 = null;
    a.$speed2 = null;
    a.$speed3 = null;
    a.$speed4 = null;
    a.$fastTime = 0.0;
    a.$normalTime = 0.0;
    a.$heavyTime = 0.0;
    a.$respawnTime = 0.0;
    a.$hp1 = 0;
    a.$hp2 = 0;
    a.$hp3 = 0;
    a.$hp4 = 0;
    a.$blink1 = 0;
    a.$blink2 = 0;
    a.$blink3 = 0;
    a.$blink4 = 0;
}
let pse_S01E01Episode_buttonPosition = null,
pse_S01E01Episode__init_ = $this => {
    let var$1, var$2, var$3, var$4;
    pss_Section__init_($this);
    $this.$axes0 = new cbgm_Vector2;
    $this.$vector1 = cbgm_Vector2__init_(40.0, 320.0);
    $this.$vector2 = cbgm_Vector2__init_(320.0, 40.0);
    $this.$vector3 = cbgm_Vector2__init_(3800.0, 2080.0);
    $this.$vector4 = cbgm_Vector2__init_(3520.0, 2360.0);
    $this.$speed1 = cbgm_Vector2__init_((-600.0), 300.0);
    $this.$speed2 = cbgm_Vector2__init_((-600.0), 300.0);
    $this.$speed3 = cbgm_Vector2__init_(520.0, (-240.0));
    $this.$speed4 = cbgm_Vector2__init_(520.0, (-240.0));
    $this.$hp1 = 200;
    $this.$hp2 = 200;
    $this.$hp3 = 200;
    $this.$hp4 = 200;
    if (psl_ChimeraLogic_chimera === null)
        psl_ChimeraLogic_chimera = psl_ChimeraLogic__init_0();
    cbgm_Vector2_set(psl_ChimeraLogic_chimera.$position1, 1920.0, 1200.0);
    var$1 = psl_ChimeraLogic_chimera;
    var$1.$forceRadius = 80.0;
    var$1.$gravityRadius = 400.0;
    var$1.$lives = 500;
    pse_Episode_chimeraLogic = var$1;
    $this.$logo = cbggg_TextureAtlas_findRegion(pss_Section_atlas, $rt_s(565));
    var$1 = new psm_Menu$IconButton;
    var$2 = cbggg_TextureAtlas_findRegion(pss_Section_atlas, $rt_s(566));
    psm_Menu$CursorBox__init_(var$1, 120.0, 120.0, 10.0, 20.0, 10.0, 20.0);
    var$3 = $rt_createArray(cbgg_Color, 2);
    var$4 = var$3.data;
    var$4[0] = cbgg_Color__init_((-2135700250));
    var$4[1] = cbgg_Color__init_((-857276417));
    var$1.$iconColors = var$3;
    var$1.$icon = var$2;
    $this.$menuButton = var$1;
},
pse_S01E01Episode__init_0 = () => {
    let var_0 = new pse_S01E01Episode();
    pse_S01E01Episode__init_(var_0);
    return var_0;
},
pse_S01E01Episode_update = $this => {
    let var$1, $iterator, var$3, $bulletSpeed, $previousDistance, $bullet, $bulletAngle, var$8, $closestVector, var$10;
    var$1 = pss_Control_buttons.data;
    if (var$1[0]) {
        $iterator = pse_Episode_chimeraLogic;
        $iterator.$gravityRadius = jl_Math_min0(800.0, $iterator.$gravityRadius + 80.0);
        pss_Section_$callClinit();
        pss_Audio_playSound(pss_Section_audio, $rt_s(482), 0.0);
    } else if (var$1[1]) {
        $iterator = pse_Episode_chimeraLogic;
        $iterator.$gravityRadius = jl_Math_max0(160.0, $iterator.$gravityRadius - 80.0);
        pss_Section_$callClinit();
        pss_Audio_playSound(pss_Section_audio, $rt_s(482), 0.0);
    }
    if (pss_Control_buttons.data[2]) {
        $iterator = pse_Episode_chimeraLogic;
        $iterator.$gravity = $iterator.$gravity ? 0 : 1;
        pss_Section_$callClinit();
        pss_Audio_playSound(pss_Section_audio, $rt_s(482), 0.0);
    }
    a: {
        var$1 = pss_Control_buttons.data;
        if (!var$1[3]) {
            if (!var$1[4]) {
                pss_Section_$callClinit();
                if (!pss_Control_isClicked(pss_Section_control, $this.$menuButton.$polygon4, 1))
                    break a;
            }
            pss_Section_$callClinit();
            pss_Audio_playSound(pss_Section_audio, $rt_s(482), 0.800000011920929);
            psm_Menu_$callClinit();
            pss_Section_setMenu(psm_Menu_main);
        } else {
            $this.$hp4 = 200;
            $this.$hp3 = 200;
            $this.$hp2 = 200;
            $this.$hp1 = 200;
            pse_Episode_chimeraLogic.$lives = 500;
            $this.$respawnTime = 0.0;
            pss_Section_$callClinit();
            pss_Audio_playSound(pss_Section_audio, $rt_s(482), 0.0);
        }
    }
    b: {
        var$3 = $this.$hp1;
        if (!(!var$3 && !$this.$hp2 && !pse_Episode_chimeraLogic.$lives) && !(!var$3 && !$this.$hp2 && !$this.$hp3 && !$this.$hp4)) {
            if (pse_Episode_chimeraLogic.$lives)
                break b;
            if ($this.$hp3)
                break b;
            if ($this.$hp4)
                break b;
        }
        $bulletSpeed = $this.$respawnTime;
        if ($bulletSpeed === 0.0) {
            pss_Section_$callClinit();
            $this.$respawnTime = pss_Section_frameTime;
        } else {
            pss_Section_$callClinit();
            $this.$respawnTime = $bulletSpeed + pss_Section_frameTime;
        }
        if ($this.$respawnTime >= 3.0) {
            $this.$hp4 = 200;
            $this.$hp3 = 200;
            $this.$hp2 = 200;
            $this.$hp1 = 200;
            pse_Episode_chimeraLogic.$lives = 500;
            $this.$respawnTime = 0.0;
        }
    }
    c: {
        $iterator = pse_Episode_chimeraLogic;
        pss_Section_$callClinit();
        psl_ChimeraLogic_update($iterator, pss_Section_frameTime, pss_Control_axisX, pss_Control_axisY);
        $iterator = $this.$vector1;
        $bulletSpeed = $iterator.$x;
        $previousDistance = pss_Section_frameTime;
        $bullet = $this.$speed1;
        $bulletSpeed = $bulletSpeed + $previousDistance * $bullet.$x;
        $iterator.$x = $bulletSpeed;
        $bulletAngle = $iterator.$y + $previousDistance * $bullet.$y;
        $iterator.$y = $bulletAngle;
        var$8 = $bullet.$x;
        var$3 = $rt_compare(var$8, 0.0);
        if (!(var$3 < 0 && $bulletSpeed < 70.0)) {
            if (var$3 <= 0)
                break c;
            if ($bulletSpeed <= 3770.0)
                break c;
        }
        $bullet.$x = var$8 * (-1.0);
    }
    d: {
        $bulletSpeed = $bullet.$y;
        var$3 = $rt_compare($bulletSpeed, 0.0);
        if (!(var$3 < 0 && $bulletAngle < 70.0)) {
            if (var$3 <= 0)
                break d;
            if ($bulletAngle <= 2330.0)
                break d;
        }
        $bullet.$y = $bulletSpeed * (-1.0);
    }
    e: {
        $bullet = $this.$vector2;
        $bulletSpeed = $bullet.$x;
        $closestVector = $this.$speed2;
        $bulletSpeed = $bulletSpeed + $previousDistance * $closestVector.$x;
        $bullet.$x = $bulletSpeed;
        $bulletAngle = $bullet.$y + $previousDistance * $closestVector.$y;
        $bullet.$y = $bulletAngle;
        var$8 = $closestVector.$x;
        var$3 = $rt_compare(var$8, 0.0);
        if (!(var$3 < 0 && $bulletSpeed < 70.0)) {
            if (var$3 <= 0)
                break e;
            if ($bulletSpeed <= 3770.0)
                break e;
        }
        $closestVector.$x = var$8 * (-1.0);
    }
    f: {
        $bulletSpeed = $closestVector.$y;
        var$3 = $rt_compare($bulletSpeed, 0.0);
        if (!(var$3 < 0 && $bulletAngle < 70.0)) {
            if (var$3 <= 0)
                break f;
            if ($bulletAngle <= 2330.0)
                break f;
        }
        $closestVector.$y = $bulletSpeed * (-1.0);
    }
    g: {
        $bullet = $this.$vector3;
        $bulletSpeed = $bullet.$x;
        $closestVector = $this.$speed3;
        $bulletSpeed = $bulletSpeed + $previousDistance * $closestVector.$x;
        $bullet.$x = $bulletSpeed;
        $bulletAngle = $bullet.$y + $previousDistance * $closestVector.$y;
        $bullet.$y = $bulletAngle;
        var$8 = $closestVector.$x;
        var$3 = $rt_compare(var$8, 0.0);
        if (!(var$3 < 0 && $bulletSpeed < 70.0)) {
            if (var$3 <= 0)
                break g;
            if ($bulletSpeed <= 3770.0)
                break g;
        }
        $closestVector.$x = var$8 * (-1.0);
    }
    h: {
        $bulletSpeed = $closestVector.$y;
        var$3 = $rt_compare($bulletSpeed, 0.0);
        if (!(var$3 < 0 && $bulletAngle < 70.0)) {
            if (var$3 <= 0)
                break h;
            if ($bulletAngle <= 2330.0)
                break h;
        }
        $closestVector.$y = $bulletSpeed * (-1.0);
    }
    i: {
        $bullet = $this.$vector4;
        $bulletSpeed = $bullet.$x;
        $closestVector = $this.$speed4;
        $bulletSpeed = $bulletSpeed + $previousDistance * $closestVector.$x;
        $bullet.$x = $bulletSpeed;
        $bulletAngle = $bullet.$y + $previousDistance * $closestVector.$y;
        $bullet.$y = $bulletAngle;
        var$8 = $closestVector.$x;
        var$3 = $rt_compare(var$8, 0.0);
        if (!(var$3 < 0 && $bulletSpeed < 70.0)) {
            if (var$3 <= 0)
                break i;
            if ($bulletSpeed <= 3770.0)
                break i;
        }
        $closestVector.$x = var$8 * (-1.0);
    }
    j: {
        $bulletSpeed = $closestVector.$y;
        var$3 = $rt_compare($bulletSpeed, 0.0);
        if (!(var$3 < 0 && $bulletAngle < 70.0)) {
            if (var$3 <= 0)
                break j;
            if ($bulletAngle <= 2330.0)
                break j;
        }
        $closestVector.$y = $bulletSpeed * (-1.0);
    }
    $this.$fastTime = $this.$fastTime + $previousDistance;
    $this.$normalTime = $this.$normalTime + $previousDistance;
    $this.$heavyTime = $this.$heavyTime + $previousDistance;
    if ($this.$hp1) {
        $bullet = pse_Episode_chimeraLogic;
        $closestVector = $bullet.$lives ? $bullet.$position1 : null;
        k: {
            if ($closestVector !== null) {
                if (!$this.$hp3)
                    break k;
                if (cbgm_Vector2_dst($iterator, $closestVector) <= cbgm_Vector2_dst($this.$vector1, $this.$vector3))
                    break k;
            }
            $closestVector = $this.$vector3;
        }
        l: {
            if ($closestVector !== null) {
                if (!$this.$hp4)
                    break l;
                if (cbgm_Vector2_dst($this.$vector1, $closestVector) <= cbgm_Vector2_dst($this.$vector1, $this.$vector4))
                    break l;
            }
            $closestVector = $this.$vector4;
        }
        if ($closestVector !== null) {
            if ($this.$heavyTime <= 0.5) {
                if ($this.$normalTime > 0.25) {
                    $iterator = $this.$vector1;
                    $bulletSpeed = $iterator.$x;
                    $previousDistance = $iterator.$y;
                    $bulletAngle = $closestVector.$x - $bulletSpeed;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    pse_Episode_addBullet(1, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
                } else if ($this.$fastTime > 0.11999999731779099) {
                    $iterator = $this.$vector1;
                    $bulletSpeed = $iterator.$x;
                    $previousDistance = $iterator.$y;
                    $bulletAngle = $closestVector.$x - $bulletSpeed;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    pse_Episode_addBullet(0, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
                }
            } else {
                $iterator = $this.$vector1;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(2, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
            }
        }
    }
    if ($this.$hp2) {
        $iterator = pse_Episode_chimeraLogic;
        $closestVector = $iterator.$lives ? $iterator.$position1 : null;
        m: {
            if ($closestVector !== null) {
                if (!$this.$hp3)
                    break m;
                if (cbgm_Vector2_dst($this.$vector1, $closestVector) <= cbgm_Vector2_dst($this.$vector1, $this.$vector3))
                    break m;
            }
            $closestVector = $this.$vector3;
        }
        n: {
            if ($closestVector !== null) {
                if (!$this.$hp4)
                    break n;
                if (cbgm_Vector2_dst($this.$vector1, $closestVector) <= cbgm_Vector2_dst($this.$vector1, $this.$vector4))
                    break n;
            }
            $closestVector = $this.$vector4;
        }
        if ($closestVector !== null) {
            if ($this.$heavyTime <= 0.5) {
                if ($this.$normalTime > 0.25) {
                    $iterator = $this.$vector2;
                    $bulletSpeed = $iterator.$x;
                    $previousDistance = $iterator.$y;
                    $bulletAngle = $closestVector.$x - $bulletSpeed;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    pse_Episode_addBullet(1, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
                } else if ($this.$fastTime > 0.11999999731779099) {
                    $iterator = $this.$vector2;
                    $bulletSpeed = $iterator.$x;
                    $previousDistance = $iterator.$y;
                    $bulletAngle = $closestVector.$x - $bulletSpeed;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    pse_Episode_addBullet(0, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
                }
            } else {
                $iterator = $this.$vector2;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(2, 1, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed3.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed3.$y)));
            }
        }
    }
    if ($this.$hp3) {
        $iterator = pse_Episode_chimeraLogic;
        $closestVector = $iterator.$lives ? $iterator.$position1 : null;
        o: {
            p: {
                if ($closestVector !== null) {
                    if ($this.$hp1) {
                        if (cbgm_Vector2_dst($this.$vector3, $closestVector) > cbgm_Vector2_dst($this.$vector3, $this.$vector1))
                            break p;
                        break o;
                    }
                    break o;
                }
            }
            $closestVector = $this.$vector1;
        }
        q: {
            if ($closestVector !== null) {
                if (!$this.$hp2)
                    break q;
                if (cbgm_Vector2_dst($this.$vector3, $closestVector) <= cbgm_Vector2_dst($this.$vector3, $this.$vector2))
                    break q;
            }
            $closestVector = $this.$vector2;
        }
        if ($closestVector !== null) {
            if ($this.$heavyTime > 0.5) {
                $iterator = $this.$vector3;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(2, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            } else if ($this.$normalTime > 0.25) {
                $iterator = $this.$vector3;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(1, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            } else if ($this.$fastTime > 0.11999999731779099) {
                $iterator = $this.$vector3;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(0, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            }
        }
    }
    if ($this.$hp4) {
        $iterator = pse_Episode_chimeraLogic;
        $closestVector = $iterator.$lives ? $iterator.$position1 : null;
        r: {
            if ($closestVector !== null) {
                if (!$this.$hp1)
                    break r;
                if (cbgm_Vector2_dst($this.$vector3, $closestVector) <= cbgm_Vector2_dst($this.$vector3, $this.$vector1))
                    break r;
            }
            $closestVector = $this.$vector1;
        }
        s: {
            if ($closestVector !== null) {
                if (!$this.$hp2)
                    break s;
                if (cbgm_Vector2_dst($this.$vector3, $closestVector) <= cbgm_Vector2_dst($this.$vector3, $this.$vector2))
                    break s;
            }
            $closestVector = $this.$vector2;
        }
        if ($closestVector !== null) {
            if ($this.$heavyTime > 0.5) {
                $iterator = $this.$vector4;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(2, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            } else if ($this.$normalTime > 0.25) {
                $iterator = $this.$vector4;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(1, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            } else if ($this.$fastTime > 0.11999999731779099) {
                $iterator = $this.$vector4;
                $bulletSpeed = $iterator.$x;
                $previousDistance = $iterator.$y;
                $bulletAngle = $closestVector.$x - $bulletSpeed;
                $iterator = pse_Episode_chimeraLogic.$position1;
                pse_Episode_addBullet(0, 0, $bulletSpeed, $previousDistance, cbgm_Vector2_angleRad($bulletAngle + ($closestVector === $iterator ? 0.0 : $this.$speed1.$x), $closestVector.$y - $previousDistance + ($closestVector === $iterator ? 0.0 : $this.$speed1.$y)));
            }
        }
    }
    $bulletSpeed = $this.$fastTime;
    if ($bulletSpeed > 0.11999999731779099)
        $this.$fastTime = $bulletSpeed % 0.125;
    $bulletSpeed = $this.$normalTime;
    if ($bulletSpeed > 0.25)
        $this.$normalTime = $bulletSpeed % 0.25;
    $bulletSpeed = $this.$heavyTime;
    if ($bulletSpeed > 0.5)
        $this.$heavyTime = $bulletSpeed % 0.5;
    $iterator = pse_Episode_chimeraLogic;
    $this.$blink4 = 0;
    $this.$blink3 = 0;
    $this.$blink2 = 0;
    $this.$blink1 = 0;
    $iterator.$blink = 0;
    var$10 = ju_ArrayDeque_iterator(pse_Episode_bullets);
    while (ju_ArrayDeque$1_hasNext(var$10)) {
        $bullet = ju_ArrayDeque$1_next(var$10);
        $bulletSpeed = 15.0;
        var$3 = $bullet.$type4;
        if (!var$3)
            $bulletSpeed = 18.75;
        else if (var$3 == 2)
            $bulletSpeed = 12.0;
        $previousDistance = cbgm_Vector2_dst(pse_Episode_chimeraLogic.$position1, $bullet.$position2);
        $iterator = $bullet.$position2;
        $iterator.$x = $iterator.$x + $bulletSpeed * cbgm_MathUtils_cos($bullet.$rotation);
        $iterator = $bullet.$position2;
        $iterator.$y = $iterator.$y + $bulletSpeed * cbgm_MathUtils_sin($bullet.$rotation);
        $iterator = $bullet.$position2;
        $bulletSpeed = $iterator.$x;
        if ($bulletSpeed >= (-2304.0) && $bulletSpeed <= 6144.0) {
            $bulletSpeed = $iterator.$y;
            if ($bulletSpeed >= (-1920.0) && $bulletSpeed <= 4320.0) {
                var$3 = $bullet.$owner0;
                if (!var$3) {
                    if ($this.$hp1 && cbgm_Vector2_dst($iterator, $this.$vector1) < 50.0) {
                        $this.$hp1 = jl_Math_max(0, $this.$hp1 - 1 | 0);
                        $this.$blink1 = 1;
                        psl_BulletLogic_push($bullet);
                        ju_ArrayDeque$1_remove(var$10);
                        continue;
                    }
                    if ($this.$hp2 && cbgm_Vector2_dst($bullet.$position2, $this.$vector2) < 50.0) {
                        $this.$hp2 = jl_Math_max(0, $this.$hp2 - 1 | 0);
                        $this.$blink2 = 1;
                        psl_BulletLogic_push($bullet);
                        ju_ArrayDeque$1_remove(var$10);
                        continue;
                    }
                    $iterator = pse_Episode_chimeraLogic;
                    if (!$iterator.$lives)
                        continue;
                    if (psl_ChimeraLogic_contains($iterator, $bullet.$position2, 1)) {
                        $iterator = pse_Episode_chimeraLogic;
                        $iterator.$lives = jl_Math_max(0, $iterator.$lives - 1 | 0);
                        $iterator = pse_Episode_chimeraLogic;
                        $iterator.$blink = 1;
                        $bullet.$owner0 = 2;
                        $closestVector = $bullet.$position2;
                        $bulletSpeed = $closestVector.$x;
                        $iterator = $iterator.$position1;
                        $bullet.$rotation = cbgm_Vector2_angleRad($bulletSpeed - $iterator.$x, $closestVector.$y - $iterator.$y);
                        continue;
                    }
                    $iterator = pse_Episode_chimeraLogic;
                    if (!$iterator.$gravity)
                        continue;
                    if (!psl_ChimeraLogic_contains($iterator, $bullet.$position2, 0))
                        continue;
                    if ($previousDistance < cbgm_Vector2_dst(pse_Episode_chimeraLogic.$position1, $bullet.$position2))
                        $bullet.$owner0 = 2;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    $bulletSpeed = $iterator.$x;
                    $closestVector = $bullet.$position2;
                    $bulletAngle = cbgm_Vector2_angleRad($bulletSpeed - $closestVector.$x, $iterator.$y - $closestVector.$y);
                    $bulletSpeed = $bullet.$rotation;
                    if ($bulletSpeed >= $bulletAngle && jl_Math_abs($bulletSpeed - $bulletAngle) <= 3.1415927410125732) {
                        $bullet.$rotation = ($bullet.$rotation + 2.4000000953674316 * pss_Section_frameTime) % 6.2831854820251465;
                        continue;
                    }
                    $bullet.$rotation = ($bullet.$rotation - 2.4000000953674316 * pss_Section_frameTime + 6.2831854820251465) % 6.2831854820251465;
                    continue;
                }
                if (var$3 != 2) {
                    if ($this.$hp3 && cbgm_Vector2_dst($iterator, $this.$vector3) < 50.0) {
                        $this.$hp3 = jl_Math_max(0, $this.$hp3 - 3 | 0);
                        $this.$blink3 = 1;
                        psl_BulletLogic_push($bullet);
                        ju_ArrayDeque$1_remove(var$10);
                        continue;
                    }
                    if ($this.$hp4 && cbgm_Vector2_dst($bullet.$position2, $this.$vector4) < 50.0) {
                        $this.$hp4 = jl_Math_max(0, $this.$hp4 - 3 | 0);
                        $this.$blink4 = 1;
                        psl_BulletLogic_push($bullet);
                        ju_ArrayDeque$1_remove(var$10);
                        continue;
                    }
                    $iterator = pse_Episode_chimeraLogic;
                    if (!$iterator.$lives)
                        continue;
                    if (psl_ChimeraLogic_contains($iterator, $bullet.$position2, 1)) {
                        $iterator = pse_Episode_chimeraLogic;
                        $iterator.$lives = jl_Math_max(0, $iterator.$lives - 3 | 0);
                        $iterator = pse_Episode_chimeraLogic;
                        $iterator.$blink = 1;
                        $bullet.$owner0 = 2;
                        $closestVector = $bullet.$position2;
                        $bulletSpeed = $closestVector.$x;
                        $iterator = $iterator.$position1;
                        $bullet.$rotation = cbgm_Vector2_angleRad($bulletSpeed - $iterator.$x, $closestVector.$y - $iterator.$y);
                        continue;
                    }
                    $iterator = pse_Episode_chimeraLogic;
                    if (!$iterator.$gravity)
                        continue;
                    if (!psl_ChimeraLogic_contains($iterator, $bullet.$position2, 0))
                        continue;
                    if ($previousDistance < cbgm_Vector2_dst(pse_Episode_chimeraLogic.$position1, $bullet.$position2))
                        $bullet.$owner0 = 2;
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    $bulletSpeed = $iterator.$x;
                    $closestVector = $bullet.$position2;
                    $bulletAngle = cbgm_Vector2_angleRad($bulletSpeed - $closestVector.$x, $iterator.$y - $closestVector.$y);
                    $bulletSpeed = $bullet.$rotation;
                    if ($bulletSpeed >= $bulletAngle && jl_Math_abs($bulletSpeed - $bulletAngle) <= 3.1415927410125732) {
                        $bullet.$rotation = ($bullet.$rotation + 2.4000000953674316 * pss_Section_frameTime) % 6.2831854820251465;
                        continue;
                    }
                    $bullet.$rotation = ($bullet.$rotation - 2.4000000953674316 * pss_Section_frameTime + 6.2831854820251465) % 6.2831854820251465;
                    continue;
                }
                $closestVector = pse_Episode_chimeraLogic;
                if ($closestVector.$gravity && psl_ChimeraLogic_contains($closestVector, $iterator, 0)) {
                    $iterator = pse_Episode_chimeraLogic.$position1;
                    $bulletSpeed = $iterator.$x;
                    $closestVector = $bullet.$position2;
                    $bulletAngle = cbgm_Vector2_angleRad($bulletSpeed - $closestVector.$x, $iterator.$y - $closestVector.$y);
                    $bulletSpeed = $bullet.$rotation;
                    if ($bulletSpeed >= $bulletAngle && jl_Math_abs($bulletSpeed - $bulletAngle) <= 3.1415927410125732)
                        $bullet.$rotation = ($bullet.$rotation - 1.7999999523162842 * pss_Section_frameTime) % 6.2831854820251465;
                    else
                        $bullet.$rotation = ($bullet.$rotation + 1.7999999523162842 * pss_Section_frameTime + 6.2831854820251465) % 6.2831854820251465;
                }
                if ($this.$hp1 && cbgm_Vector2_dst($bullet.$position2, $this.$vector1) < 50.0) {
                    $this.$hp1 = jl_Math_max(0, $this.$hp1 - 8 | 0);
                    $this.$blink1 = 1;
                    psl_BulletLogic_push($bullet);
                    ju_ArrayDeque$1_remove(var$10);
                    continue;
                }
                if ($this.$hp2 && cbgm_Vector2_dst($bullet.$position2, $this.$vector2) < 50.0) {
                    $this.$hp2 = jl_Math_max(0, $this.$hp2 - 8 | 0);
                    $this.$blink2 = 1;
                    psl_BulletLogic_push($bullet);
                    ju_ArrayDeque$1_remove(var$10);
                    continue;
                }
                if ($this.$hp3 && cbgm_Vector2_dst($bullet.$position2, $this.$vector3) < 50.0) {
                    $this.$hp3 = jl_Math_max(0, $this.$hp3 - 8 | 0);
                    $this.$blink3 = 1;
                    psl_BulletLogic_push($bullet);
                    ju_ArrayDeque$1_remove(var$10);
                    continue;
                }
                if (!$this.$hp4)
                    continue;
                if (cbgm_Vector2_dst($bullet.$position2, $this.$vector4) >= 50.0)
                    continue;
                $this.$hp4 = jl_Math_max(0, $this.$hp4 - 8 | 0);
                $this.$blink4 = 1;
                psl_BulletLogic_push($bullet);
                ju_ArrayDeque$1_remove(var$10);
                continue;
            }
        }
        psl_BulletLogic_push($bullet);
        ju_ArrayDeque$1_remove(var$10);
    }
},
pse_S01E01Episode_render = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7;
    pss_Section_$callClinit();
    cbggg_PolygonSpriteBatch_setProjectionMatrix(pss_Section_batch, cbgm_Matrix4_setToOrtho2D(pss_Section_projectionMatrix, 0.0, (-400.0), 3840.0, 3200.0));
    pse_S01E01Episode_drawContent($this);
    pss_Section_setFontColor0(pss_Section_textFont, 1.0, 0.8999999761581421, 0.8999999761581421, $this.$hp1 ? 1.0 : 0.5);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = $this.$hp1;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(567));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 2320.0);
    pss_Section_setFontColor0(pss_Section_textFont, 1.0, 0.8999999761581421, 0.8999999761581421, $this.$hp2 ? 1.0 : 0.5);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = $this.$hp2;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(568));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 2250.0);
    pss_Section_setFontColor0(pss_Section_textFont, 0.8999999761581421, 0.8999999761581421, 1.0, $this.$hp3 ? 1.0 : 0.5);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = $this.$hp3;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(569));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 2180.0);
    pss_Section_setFontColor0(pss_Section_textFont, 0.8999999761581421, 0.8999999761581421, 1.0, $this.$hp4 ? 1.0 : 0.5);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = $this.$hp4;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(570));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 2110.0);
    pss_Section_setFontColor0(pss_Section_textFont, 0.8999999761581421, 0.8999999761581421, 0.8999999761581421, pse_Episode_chimeraLogic.$lives ? 1.0 : 0.5);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = pse_Episode_chimeraLogic.$lives;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(571));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 2040.0);
    pss_Section_setFontColor0(pss_Section_textFont, 1.0, 1.0, 1.0, 1.0);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = cbg_Gdx_graphics.$fps | 0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(572));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 1970.0);
    pss_Section_setFontColor(pss_Section_textFont, cbgg_Color_WHITE);
    cbggg_BitmapFont_draw0(pss_Section_textFont, pss_Section_batch, $rt_s(573), 80.0, 270.0);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = ju_ArrayDeque_size(pse_Episode_bullets);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(574));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 190.0);
    var$1 = pss_Section_textFont;
    var$2 = pss_Section_batch;
    var$3 = ju_ArrayDeque_size(psl_BulletLogic_deque);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(575));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    cbggg_BitmapFont_draw0(var$1, var$2, jl_AbstractStringBuilder_toString(var$4), 80.0, 110.0);
    pse_Episode_drawCounter();
    var$1 = $this.$menuButton;
    var$2 = pse_S01E01Episode_buttonPosition;
    var$3 = pss_Control_isPointed(pss_Section_control, var$1.$polygon4);
    psm_Menu$CursorBox_draw(var$1, var$2, var$3);
    var$2 = var$1.$polygon4;
    psm_Menu_$callClinit();
    cbgm_Polygon_getCentroid(var$2, pss_Section_centroid);
    var$5 = var$1.$iconColors;
    var$3 = !var$3 ? 0 : 1;
    var$2 = var$5.data[var$3];
    cbggg_PolygonSpriteBatch_setColor(pss_Section_batch, var$2.$r, var$2.$g, var$2.$b, var$2.$a * pss_Section_alpha);
    var$2 = pss_Section_batch;
    var$1 = var$1.$icon;
    var$6 = pss_Section_centroid;
    var$7 = var$6.$x;
    var$4 = var$1;
    cbggg_PolygonSpriteBatch_draw0(var$2, var$1, var$7 - var$4.$regionWidth / 2.0, var$6.$y - var$4.$regionHeight / 2.0);
},
pse_S01E01Episode_renderEnter = ($this, $progress) => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    pss_Section_$callClinit();
    var$2 = pss_Section_previous;
    psm_Menu_$callClinit();
    pss_Section_alpha = var$2 !== psm_Menu_overview ? $progress : 0.10000000149011612 + $progress * 0.8999999761581421;
    var$3 = 1.0 - $progress;
    var$2 = pss_Section_batch;
    var$4 = pss_Section_projectionMatrix;
    var$5 = 3840.0 * var$3;
    var$6 = var$5 * (-0.5);
    var$7 = 2400.0 * var$3;
    cbggg_PolygonSpriteBatch_setProjectionMatrix(var$2, cbgm_Matrix4_setToOrtho2D(var$4, var$6, var$7 * (-0.5) - 400.0, 3840.0 + var$5, 2400.0 + var$7 + 800.0));
    pse_S01E01Episode_drawContent($this);
    pss_Section_alpha = 1.0;
    pss_Section_renderLeave(pss_Section_previous, $progress);
    pss_Section_alpha = 1.0;
},
pse_S01E01Episode_drawContent = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7;
    pss_Section_setBatchColor(1.0, 1.0, 1.0, 1.0);
    var$1 = pss_Section_batch;
    var$2 = $this.$logo;
    cbggg_PolygonSpriteBatch_draw0(var$1, var$2, (3840.0 - cbggg_TextureRegion_getRegionWidth(var$2)) / 2.0, (2400.0 - cbggg_TextureRegion_getRegionHeight($this.$logo)) / 2.0);
    pss_ChimeraShape_draw(pse_Episode_chimeraLogic);
    if ($this.$blink4)
        pss_Section_setDrawerColor(0.949999988079071, 0.949999988079071, 1.0, 1.0);
    else if ($this.$hp4)
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.5);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.10000000149011612);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector4;
    var$3 = var$2.$x;
    var$4 = var$3 - 50.0;
    var$5 = var$2.$y;
    var$6 = var$5 - 40.0;
    ses_ShapeDrawer_filledTriangle(var$1, var$4, var$6, var$3 + 50.0, var$6, var$3, var$5 + 50.0);
    if ($this.$hp4)
        pss_Section_setDrawerColor(0.8500000238418579, 0.8500000238418579, 1.0, 1.0);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.20000000298023224);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector4;
    var$7 = var$2.$x;
    var$3 = var$7 - 50.0;
    var$4 = var$2.$y;
    var$5 = var$4 - 40.0;
    ses_ShapeDrawer_triangle(var$1, var$3, var$5, var$7 + 50.0, var$5, var$7, var$4 + 50.0);
    if ($this.$blink3)
        pss_Section_setDrawerColor(0.949999988079071, 0.949999988079071, 1.0, 1.0);
    else if ($this.$hp3)
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.5);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.10000000149011612);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector3;
    var$7 = var$2.$x;
    var$3 = var$7 - 50.0;
    var$4 = var$2.$y;
    var$5 = var$4 - 40.0;
    ses_ShapeDrawer_filledTriangle(var$1, var$3, var$5, var$7 + 50.0, var$5, var$7, var$4 + 50.0);
    if ($this.$hp3)
        pss_Section_setDrawerColor(0.8500000238418579, 0.8500000238418579, 1.0, 1.0);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.8999999761581421, 0.20000000298023224);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector3;
    var$7 = var$2.$x;
    var$3 = var$7 - 50.0;
    var$4 = var$2.$y;
    var$5 = var$4 - 40.0;
    ses_ShapeDrawer_triangle(var$1, var$3, var$5, var$7 + 50.0, var$5, var$7, var$4 + 50.0);
    if ($this.$blink2)
        pss_Section_setDrawerColor(1.0, 0.949999988079071, 0.949999988079071, 1.0);
    else if ($this.$hp2)
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.5);
    else
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.10000000149011612);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector2;
    ses_ShapeDrawer_filledRectangle(var$1, var$2.$x - 50.0, var$2.$y - 50.0, 100.0, 100.0, cbgm_Vector2_angleRad0($this.$speed2));
    if ($this.$hp2)
        pss_Section_setDrawerColor(1.0, 0.8500000238418579, 0.8500000238418579, 1.0);
    else
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.20000000298023224);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector2;
    ses_ShapeDrawer_rectangle(var$1, var$2.$x - 50.0, var$2.$y - 50.0, 100.0, 100.0, 4.0, cbgm_Vector2_angleRad0($this.$speed2));
    if ($this.$blink1)
        pss_Section_setDrawerColor(1.0, 0.949999988079071, 0.949999988079071, 1.0);
    else if ($this.$hp1)
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.5);
    else
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.10000000149011612);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector1;
    ses_ShapeDrawer_filledRectangle(var$1, var$2.$x - 50.0, var$2.$y - 50.0, 100.0, 100.0, cbgm_Vector2_angleRad0($this.$speed1));
    if ($this.$hp1)
        pss_Section_setDrawerColor(1.0, 0.8500000238418579, 0.8500000238418579, 1.0);
    else
        pss_Section_setDrawerColor(0.8999999761581421, 0.800000011920929, 0.800000011920929, 0.20000000298023224);
    var$1 = pss_Section_drawer;
    var$2 = $this.$vector1;
    ses_ShapeDrawer_rectangle(var$1, var$2.$x - 50.0, var$2.$y - 50.0, 100.0, 100.0, 4.0, cbgm_Vector2_angleRad0($this.$speed1));
    pse_Episode_drawBullets();
    cbggg_PolygonSpriteBatch_setProjectionMatrix(pss_Section_batch, cbgm_Matrix4_setToOrtho2D(pss_Section_projectionMatrix, 0.0, 0.0, 3840.0, 2400.0));
},
pse_S01E01Episode__clinit_ = () => {
    pse_S01E01Episode_buttonPosition = cbgm_Vector2__init_(3620.0, 80.0);
},
cbgc_Controllers = $rt_classWithoutFields(),
cbgc_Controllers_managers = null,
cbgc_Controllers_preferredManager = null,
cbgc_Controllers_$callClinit = () => {
    cbgc_Controllers_$callClinit = $rt_eraseClinit(cbgc_Controllers);
    cbgc_Controllers__clinit_();
},
cbgc_Controllers__init_ = $this => {
    cbgc_Controllers_$callClinit();
},
cbgc_Controllers__init_0 = () => {
    let var_0 = new cbgc_Controllers();
    cbgc_Controllers__init_(var_0);
    return var_0;
},
cbgc_Controllers_getManager = () => {
    cbgc_Controllers_$callClinit();
    return cbgu_ObjectMap_get(cbgc_Controllers_managers, cbg_Gdx_app);
},
cbgc_Controllers_initialize = () => {
    let $className, $type, $manager, $app, $controllerManagerClass, $ex, $$je;
    cbgc_Controllers_$callClinit();
    if (cbgu_ObjectMap_containsKey(cbgc_Controllers_managers, cbg_Gdx_app))
        return;
    $className = null;
    $type = cbg_Application$ApplicationType_WebGL;
    $manager = null;
    $app = cbgc_Controllers_preferredManager;
    if ($app === null) {
        if ($type === cbg_Application$ApplicationType_Android)
            $app = $rt_s(576);
        else if ($type === cbg_Application$ApplicationType_Desktop)
            $app = $rt_s(577);
        else if ($type === $type)
            $app = $rt_s(578);
        else if ($type === cbg_Application$ApplicationType_iOS)
            $app = $rt_s(579);
        else {
            $app = cbg_Gdx_app;
            $manager = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($manager);
            jl_AbstractStringBuilder_append0($manager, $rt_s(580));
            jl_AbstractStringBuilder_append($manager, cbg_Application$ApplicationType_WebGL);
            $controllerManagerClass = jl_AbstractStringBuilder_toString($manager);
            cgxgbt_TeaApplication_log($app, $rt_s(581), $controllerManagerClass);
            $manager = cbgc_ControllerManagerStub__init_0();
            $app = $className;
        }
    }
    if ($manager === null)
        a: {
            try {
                $manager = cbgur_ClassReflection_newInstance(cbgur_ClassReflection_forName($app));
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                    $ex = $$je;
                } else {
                    throw $$e;
                }
            }
            $manager = new cbgu_GdxRuntimeException;
            $className = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($className);
            jl_AbstractStringBuilder_append0($className, $rt_s(582));
            jl_AbstractStringBuilder_append0($className, $app);
            jl_Throwable__init_0($manager, jl_AbstractStringBuilder_toString($className), $ex);
            $rt_throw($manager);
        }
    cbgu_ObjectMap_put(cbgc_Controllers_managers, cbg_Gdx_app, $manager);
    $app = cbg_Gdx_app;
    $manager = new cbgc_Controllers$1;
    $manager.$val$app = $app;
    $className = $app.$lifecycleListeners;
    jl_Object_monitorEnterSync($className);
    b: {
        try {
            cbgu_Array_add($className, $manager);
            jl_Object_monitorExitSync($className);
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $manager = $$je;

        }
        jl_Object_monitorExitSync($className);
        $rt_throw($manager);
    }
    $manager = cbg_Gdx_app;
    $app = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($app);
    jl_AbstractStringBuilder_append0($app, $rt_s(583));
    jl_AbstractStringBuilder_append1($app, cbgc_Controllers_managers.$size6);
    jl_AbstractStringBuilder_append0($app, $rt_s(584));
    $app = jl_AbstractStringBuilder_toString($app);
    cgxgbt_TeaApplication_log($manager, $rt_s(581), $app);
},
cbgc_Controllers__clinit_ = () => {
    cbgc_Controllers_managers = cbgu_ObjectMap__init_();
    cbgc_Controllers_preferredManager = null;
};
function ccvf_VfxPingPongWrapper() {
    let a = this; jl_Object.call(a);
    a.$bufDst = null;
    a.$bufSrc = null;
    a.$capturing = 0;
    a.$bufferPool = null;
}
let ccvf_VfxPingPongWrapper__init_ = $this => {
    $this.$bufferPool = null;
},
ccvf_VfxPingPongWrapper__init_0 = () => {
    let var_0 = new ccvf_VfxPingPongWrapper();
    ccvf_VfxPingPongWrapper__init_(var_0);
    return var_0;
},
ccvf_VfxPingPongWrapper_reset = $this => {
    let var$1, var$2;
    if ($this.$capturing) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(585));
        $rt_throw(var$1);
    }
    var$2 = $this.$bufferPool;
    if (var$2 !== null) {
        ccvf_VfxFrameBufferPool_free(var$2, $this.$bufSrc);
        ccvf_VfxFrameBufferPool_free($this.$bufferPool, $this.$bufDst);
        $this.$bufferPool = null;
    }
    $this.$bufSrc = null;
    $this.$bufDst = null;
},
ccvf_VfxPingPongWrapper_begin = $this => {
    let var$1;
    if (!$this.$capturing) {
        $this.$capturing = 1;
        ccvf_VfxFrameBuffer_begin($this.$bufDst);
        return;
    }
    var$1 = new jl_IllegalStateException;
    jl_Exception__init_(var$1, $rt_s(586));
    $rt_throw(var$1);
},
ccvf_VfxPingPongWrapper_end = $this => {
    let var$1;
    if ($this.$capturing) {
        ccvf_VfxFrameBuffer_end($this.$bufDst);
        $this.$capturing = 0;
        return;
    }
    var$1 = new jl_IllegalStateException;
    jl_Exception__init_(var$1, $rt_s(587));
    $rt_throw(var$1);
},
ccvf_VfxPingPongWrapper_swap = $this => {
    let $tmp_0, var$2;
    if ($this.$capturing)
        ccvf_VfxFrameBuffer_end($this.$bufDst);
    $tmp_0 = $this.$bufDst;
    var$2 = $this.$bufSrc;
    $this.$bufDst = var$2;
    $this.$bufSrc = $tmp_0;
    if ($this.$capturing)
        ccvf_VfxFrameBuffer_begin(var$2);
};
function ccv_VfxRenderContext() {
    let a = this; jl_Object.call(a);
    a.$bufferPool0 = null;
    a.$bufferRenderer = null;
    a.$pixelFormat1 = null;
    a.$bufferWidth = 0;
    a.$bufferHeight = 0;
}
function ccvu_PrioritizedArray() {
    let a = this; jl_Object.call(a);
    a.$comparator = null;
    a.$items3 = null;
}
let ccvu_PrioritizedArray__init_ = $this => {
    $this.$comparator = new ccvu_PrioritizedArray$WrapperComparator;
    $this.$items3 = ccvu_ValueArrayMap__init_0();
},
ccvu_PrioritizedArray__init_0 = () => {
    let var_0 = new ccvu_PrioritizedArray();
    ccvu_PrioritizedArray__init_(var_0);
    return var_0;
};
function cbggg_ShaderProgram() {
    let a = this; jl_Object.call(a);
    a.$log0 = null;
    a.$isCompiled = 0;
    a.$uniforms0 = null;
    a.$uniformTypes = null;
    a.$uniformSizes = null;
    a.$uniformNames = null;
    a.$attributes2 = null;
    a.$attributeTypes = null;
    a.$attributeSizes = null;
    a.$attributeNames = null;
    a.$program0 = 0;
    a.$vertexShaderHandle = 0;
    a.$fragmentShaderHandle = 0;
    a.$matrix = null;
    a.$vertexShaderSource = null;
    a.$fragmentShaderSource = null;
    a.$invalidated = 0;
    a.$refCount = 0;
    a.$params = null;
    a.$type2 = null;
}
let cbggg_ShaderProgram_pedantic = 0,
cbggg_ShaderProgram_prependVertexCode = null,
cbggg_ShaderProgram_prependFragmentCode = null,
cbggg_ShaderProgram_shaders = null,
cbggg_ShaderProgram_intbuf = null,
cbggg_ShaderProgram_$callClinit = () => {
    cbggg_ShaderProgram_$callClinit = $rt_eraseClinit(cbggg_ShaderProgram);
    cbggg_ShaderProgram__clinit_();
},
cbggg_ShaderProgram__init_0 = ($this, $vertexShader, $fragmentShader) => {
    let var$3, var$4, var$5, var$6;
    cbggg_ShaderProgram_$callClinit();
    $this.$log0 = $rt_s(9);
    $this.$uniforms0 = cbgu_ObjectIntMap__init_();
    $this.$uniformTypes = cbgu_ObjectIntMap__init_();
    $this.$uniformSizes = cbgu_ObjectIntMap__init_();
    $this.$attributes2 = cbgu_ObjectIntMap__init_();
    $this.$attributeTypes = cbgu_ObjectIntMap__init_();
    $this.$attributeSizes = cbgu_ObjectIntMap__init_();
    $this.$refCount = 0;
    $this.$params = cbgu_BufferUtils_newIntBuffer(1);
    $this.$type2 = cbgu_BufferUtils_newIntBuffer(1);
    if ($vertexShader === null) {
        $vertexShader = new jl_IllegalArgumentException;
        jl_Exception__init_($vertexShader, $rt_s(588));
        $rt_throw($vertexShader);
    }
    if ($fragmentShader === null) {
        $vertexShader = new jl_IllegalArgumentException;
        jl_Exception__init_($vertexShader, $rt_s(589));
        $rt_throw($vertexShader);
    }
    var$3 = cbggg_ShaderProgram_prependVertexCode;
    if (var$3 !== null && var$3.$nativeString.length > 0) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, cbggg_ShaderProgram_prependVertexCode);
        jl_AbstractStringBuilder_append0(var$3, $vertexShader);
        $vertexShader = jl_AbstractStringBuilder_toString(var$3);
    }
    var$3 = cbggg_ShaderProgram_prependFragmentCode;
    if (var$3 !== null && var$3.$nativeString.length > 0) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, cbggg_ShaderProgram_prependFragmentCode);
        jl_AbstractStringBuilder_append0(var$3, $fragmentShader);
        $fragmentShader = jl_AbstractStringBuilder_toString(var$3);
    }
    $this.$vertexShaderSource = $vertexShader;
    $this.$fragmentShaderSource = $fragmentShader;
    $this.$matrix = cbgu_BufferUtils_newFloatBuffer(16);
    cbggg_ShaderProgram_compileShaders($this, $vertexShader, $fragmentShader);
    if ($this.$isCompiled) {
        jn_Buffer_clear($this.$params);
        cbg_Gdx_gl20.$glGetProgramiv($this.$program0, 35721, $this.$params);
        var$4 = jn_IntBufferImpl_get($this.$params, 0);
        $this.$attributeNames = $rt_createArray(jl_String, var$4);
        var$5 = 0;
        while (var$5 < var$4) {
            jn_Buffer_clear($this.$params);
            jn_IntBufferImpl_put($this.$params, 0, 1);
            jn_Buffer_clear($this.$type2);
            $fragmentShader = cbg_Gdx_gl20.$glGetActiveAttrib($this.$program0, var$5, $this.$params, $this.$type2);
            var$6 = cbg_Gdx_gl20.$glGetAttribLocation($this.$program0, $fragmentShader);
            cbgu_ObjectIntMap_put($this.$attributes2, $fragmentShader, var$6);
            cbgu_ObjectIntMap_put($this.$attributeTypes, $fragmentShader, jn_IntBufferImpl_get($this.$type2, 0));
            cbgu_ObjectIntMap_put($this.$attributeSizes, $fragmentShader, jn_IntBufferImpl_get($this.$params, 0));
            $this.$attributeNames.data[var$5] = $fragmentShader;
            var$5 = var$5 + 1 | 0;
        }
        jn_Buffer_clear($this.$params);
        cbg_Gdx_gl20.$glGetProgramiv($this.$program0, 35718, $this.$params);
        var$4 = jn_IntBufferImpl_get($this.$params, 0);
        $this.$uniformNames = $rt_createArray(jl_String, var$4);
        var$5 = 0;
        while (var$5 < var$4) {
            jn_Buffer_clear($this.$params);
            jn_IntBufferImpl_put($this.$params, 0, 1);
            jn_Buffer_clear($this.$type2);
            $vertexShader = cbg_Gdx_gl20.$glGetActiveUniform($this.$program0, var$5, $this.$params, $this.$type2);
            var$6 = cbg_Gdx_gl20.$glGetUniformLocation($this.$program0, $vertexShader);
            cbgu_ObjectIntMap_put($this.$uniforms0, $vertexShader, var$6);
            cbgu_ObjectIntMap_put($this.$uniformTypes, $vertexShader, jn_IntBufferImpl_get($this.$type2, 0));
            cbgu_ObjectIntMap_put($this.$uniformSizes, $vertexShader, jn_IntBufferImpl_get($this.$params, 0));
            $this.$uniformNames.data[var$5] = $vertexShader;
            var$5 = var$5 + 1 | 0;
        }
        $vertexShader = cbg_Gdx_app;
        $fragmentShader = cbgu_ObjectMap_get(cbggg_ShaderProgram_shaders, $vertexShader);
        if ($fragmentShader === null)
            $fragmentShader = cbgu_Array__init_();
        cbgu_Array_add($fragmentShader, $this);
        cbgu_ObjectMap_put(cbggg_ShaderProgram_shaders, $vertexShader, $fragmentShader);
    }
},
cbggg_ShaderProgram__init_ = (var_0, var_1) => {
    let var_2 = new cbggg_ShaderProgram();
    cbggg_ShaderProgram__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_ShaderProgram_compileShaders = ($this, $vertexShader, $fragmentShader) => {
    let var$3;
    $this.$vertexShaderHandle = cbggg_ShaderProgram_loadShader($this, 35633, $vertexShader);
    var$3 = cbggg_ShaderProgram_loadShader($this, 35632, $fragmentShader);
    $this.$fragmentShaderHandle = var$3;
    if ($this.$vertexShaderHandle != (-1) && var$3 != (-1)) {
        var$3 = cbg_Gdx_gl20.$glCreateProgram();
        if (!var$3)
            var$3 = (-1);
        $vertexShader = cbg_Gdx_gl20;
        if (var$3 == (-1))
            var$3 = (-1);
        else {
            $vertexShader.$glAttachShader(var$3, $this.$vertexShaderHandle);
            $vertexShader.$glAttachShader(var$3, $this.$fragmentShaderHandle);
            $vertexShader.$glLinkProgram(var$3);
            $fragmentShader = jn_ByteBuffer_allocateDirect(4);
            jn_ByteBuffer_order($fragmentShader, jn_ByteOrder_nativeOrder());
            $fragmentShader = jn_ByteBufferJsImpl_asIntBuffer($fragmentShader);
            $vertexShader.$glGetProgramiv(var$3, 35714, $fragmentShader);
            if (!jn_IntBufferImpl_get($fragmentShader, 0)) {
                $this.$log0 = cbg_Gdx_gl20.$glGetProgramInfoLog(var$3);
                var$3 = (-1);
            }
        }
        $this.$program0 = var$3;
        if (var$3 != (-1)) {
            $this.$isCompiled = 1;
            return;
        }
        $this.$isCompiled = 0;
        return;
    }
    $this.$isCompiled = 0;
},
cbggg_ShaderProgram_loadShader = ($this, $type, $source) => {
    let $gl, $intbuf, $shader, $infoLog;
    $gl = cbg_Gdx_gl20;
    $intbuf = cbgu_BufferUtils_newIntBuffer(1);
    $shader = $gl.$glCreateShader($type);
    if (!$shader)
        return (-1);
    $gl.$glShaderSource($shader, $source);
    $gl.$glCompileShader($shader);
    $gl.$glGetShaderiv($shader, 35713, $intbuf);
    if (jn_IntBufferImpl_get($intbuf, 0))
        return $shader;
    $infoLog = $gl.$glGetShaderInfoLog($shader);
    $gl = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($gl);
    jl_AbstractStringBuilder_append0($gl, $this.$log0);
    jl_AbstractStringBuilder_append0($gl, $type != 35633 ? $rt_s(590) : $rt_s(591));
    $this.$log0 = jl_AbstractStringBuilder_toString($gl);
    $source = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($source);
    jl_AbstractStringBuilder_append0($source, $this.$log0);
    jl_AbstractStringBuilder_append0($source, $infoLog);
    $this.$log0 = jl_AbstractStringBuilder_toString($source);
    return (-1);
},
cbggg_ShaderProgram_getLog = $this => {
    let var$1;
    if (!$this.$isCompiled)
        return $this.$log0;
    var$1 = cbg_Gdx_gl20.$glGetProgramInfoLog($this.$program0);
    $this.$log0 = var$1;
    return var$1;
},
cbggg_ShaderProgram_fetchUniformLocation = ($this, $name) => {
    let var$2, var$3, var$4, var$5;
    cbggg_ShaderProgram_$callClinit();
    var$2 = cbggg_ShaderProgram_pedantic;
    var$3 = cbgu_ObjectIntMap_get($this.$uniforms0, $name, (-2));
    if (var$3 == (-2)) {
        var$3 = cbg_Gdx_gl20.$glGetUniformLocation($this.$program0, $name);
        if (var$3 == (-1) && var$2) {
            if (!$this.$isCompiled) {
                $name = new jl_IllegalStateException;
                var$4 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$4);
                jl_AbstractStringBuilder_append0(var$4, $rt_s(592));
                jl_AbstractStringBuilder_append0(var$4, cbggg_ShaderProgram_getLog($this));
                jl_Exception__init_($name, jl_AbstractStringBuilder_toString(var$4));
                $rt_throw($name);
            }
            var$4 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append0(var$5, $rt_s(593));
            jl_AbstractStringBuilder_append0(var$5, $name);
            jl_AbstractStringBuilder_append0(var$5, $rt_s(594));
            jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$4);
        }
        cbgu_ObjectIntMap_put($this.$uniforms0, $name, var$3);
    }
    return var$3;
},
cbggg_ShaderProgram_setUniformi = ($this, $name, $value) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUniform1i(cbggg_ShaderProgram_fetchUniformLocation($this, $name), $value);
},
cbggg_ShaderProgram_setUniformf = ($this, $name, $value) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUniform1f(cbggg_ShaderProgram_fetchUniformLocation($this, $name), $value);
},
cbggg_ShaderProgram_setUniformf0 = ($this, $name, $values) => {
    let var$3, var$4;
    var$3 = $values.$x;
    var$4 = $values.$y;
    $values = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $values.$glUniform2f(cbggg_ShaderProgram_fetchUniformLocation($this, $name), var$3, var$4);
},
cbggg_ShaderProgram_setVertexAttribute = ($this, $location, $size, $type, $normalize, $stride, $offset) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glVertexAttribPointer($location, $size, $type, $normalize, $stride, $offset);
},
cbggg_ShaderProgram_bind = $this => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUseProgram($this.$program0);
},
cbggg_ShaderProgram_dispose = $this => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    $gl.$glUseProgram(0);
    $gl.$glDeleteShader($this.$vertexShaderHandle);
    $gl.$glDeleteShader($this.$fragmentShaderHandle);
    $gl.$glDeleteProgram($this.$program0);
    cbggg_ShaderProgram_$callClinit();
    if (cbgu_ObjectMap_get(cbggg_ShaderProgram_shaders, cbg_Gdx_app) !== null)
        cbgu_Array_removeValue(cbgu_ObjectMap_get(cbggg_ShaderProgram_shaders, cbg_Gdx_app), $this, 1);
},
cbggg_ShaderProgram_disableVertexAttribute0 = ($this, $name) => {
    let $gl, var$3, $location;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    var$3 = cbg_Gdx_gl20;
    $location = cbgu_ObjectIntMap_get($this.$attributes2, $name, (-2));
    if ($location == (-2)) {
        $location = var$3.$glGetAttribLocation($this.$program0, $name);
        cbgu_ObjectIntMap_put($this.$attributes2, $name, $location);
    }
    if ($location == (-1))
        return;
    $gl.$glDisableVertexAttribArray($location);
},
cbggg_ShaderProgram_disableVertexAttribute = ($this, $location) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glDisableVertexAttribArray($location);
},
cbggg_ShaderProgram_enableVertexAttribute = ($this, $location) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glEnableVertexAttribArray($location);
},
cbggg_ShaderProgram_checkManaged = $this => {
    if ($this.$invalidated) {
        cbggg_ShaderProgram_compileShaders($this, $this.$vertexShaderSource, $this.$fragmentShaderSource);
        $this.$invalidated = 0;
    }
},
cbggg_ShaderProgram_getAttributeLocation = ($this, $name) => {
    return cbgu_ObjectIntMap_get($this.$attributes2, $name, (-1));
},
cbggg_ShaderProgram__clinit_ = () => {
    cbggg_ShaderProgram_pedantic = 1;
    cbggg_ShaderProgram_prependVertexCode = $rt_s(9);
    cbggg_ShaderProgram_prependFragmentCode = $rt_s(9);
    cbggg_ShaderProgram_shaders = cbgu_ObjectMap__init_();
    cbggg_ShaderProgram_intbuf = cbgu_BufferUtils_newIntBuffer(1);
};
function cbgg_Texture$TextureWrap() {
    jl_Enum.call(this);
    this.$glEnum0 = 0;
}
let cbgg_Texture$TextureWrap_MirroredRepeat = null,
cbgg_Texture$TextureWrap_ClampToEdge = null,
cbgg_Texture$TextureWrap_Repeat = null,
cbgg_Texture$TextureWrap_$VALUES = null,
cbgg_Texture$TextureWrap_values = () => {
    return cbgg_Texture$TextureWrap_$VALUES.$clone0();
},
cbgg_Texture$TextureWrap__init_0 = ($this, var$1, var$2, $glEnum) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$glEnum0 = $glEnum;
},
cbgg_Texture$TextureWrap__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture$TextureWrap();
    cbgg_Texture$TextureWrap__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture$TextureWrap__clinit_ = () => {
    let var$1, var$2, var$3;
    cbgg_Texture$TextureWrap_MirroredRepeat = cbgg_Texture$TextureWrap__init_($rt_s(595), 0, 33648);
    cbgg_Texture$TextureWrap_ClampToEdge = cbgg_Texture$TextureWrap__init_($rt_s(596), 1, 33071);
    var$1 = cbgg_Texture$TextureWrap__init_($rt_s(597), 2, 10497);
    cbgg_Texture$TextureWrap_Repeat = var$1;
    var$2 = $rt_createArray(cbgg_Texture$TextureWrap, 3);
    var$3 = var$2.data;
    var$3[0] = cbgg_Texture$TextureWrap_MirroredRepeat;
    var$3[1] = cbgg_Texture$TextureWrap_ClampToEdge;
    var$3[2] = var$1;
    cbgg_Texture$TextureWrap_$VALUES = var$2;
};
function cbgg_Texture$TextureFilter() {
    jl_Enum.call(this);
    this.$glEnum = 0;
}
let cbgg_Texture$TextureFilter_Nearest = null,
cbgg_Texture$TextureFilter_Linear = null,
cbgg_Texture$TextureFilter_MipMap = null,
cbgg_Texture$TextureFilter_MipMapNearestNearest = null,
cbgg_Texture$TextureFilter_MipMapLinearNearest = null,
cbgg_Texture$TextureFilter_MipMapNearestLinear = null,
cbgg_Texture$TextureFilter_MipMapLinearLinear = null,
cbgg_Texture$TextureFilter_$VALUES = null,
cbgg_Texture$TextureFilter_values = () => {
    return cbgg_Texture$TextureFilter_$VALUES.$clone0();
},
cbgg_Texture$TextureFilter_valueOf = $name => {
    return jl_Enum_valueOf($rt_cls(cbgg_Texture$TextureFilter), $name);
},
cbgg_Texture$TextureFilter__init_0 = ($this, var$1, var$2, $glEnum) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$glEnum = $glEnum;
},
cbgg_Texture$TextureFilter__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture$TextureFilter();
    cbgg_Texture$TextureFilter__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture$TextureFilter__clinit_ = () => {
    let var$1, var$2, var$3;
    cbgg_Texture$TextureFilter_Nearest = cbgg_Texture$TextureFilter__init_($rt_s(598), 0, 9728);
    cbgg_Texture$TextureFilter_Linear = cbgg_Texture$TextureFilter__init_($rt_s(599), 1, 9729);
    cbgg_Texture$TextureFilter_MipMap = cbgg_Texture$TextureFilter__init_($rt_s(600), 2, 9987);
    cbgg_Texture$TextureFilter_MipMapNearestNearest = cbgg_Texture$TextureFilter__init_($rt_s(601), 3, 9984);
    cbgg_Texture$TextureFilter_MipMapLinearNearest = cbgg_Texture$TextureFilter__init_($rt_s(602), 4, 9985);
    cbgg_Texture$TextureFilter_MipMapNearestLinear = cbgg_Texture$TextureFilter__init_($rt_s(603), 5, 9986);
    var$1 = cbgg_Texture$TextureFilter__init_($rt_s(604), 6, 9987);
    cbgg_Texture$TextureFilter_MipMapLinearLinear = var$1;
    var$2 = $rt_createArray(cbgg_Texture$TextureFilter, 7);
    var$3 = var$2.data;
    var$3[0] = cbgg_Texture$TextureFilter_Nearest;
    var$3[1] = cbgg_Texture$TextureFilter_Linear;
    var$3[2] = cbgg_Texture$TextureFilter_MipMap;
    var$3[3] = cbgg_Texture$TextureFilter_MipMapNearestNearest;
    var$3[4] = cbgg_Texture$TextureFilter_MipMapLinearNearest;
    var$3[5] = cbgg_Texture$TextureFilter_MipMapNearestLinear;
    var$3[6] = var$1;
    cbgg_Texture$TextureFilter_$VALUES = var$2;
};
function ccvf_VfxFrameBuffer() {
    let a = this; jl_Object.call(a);
    a.$localProjection = null;
    a.$localTransform = null;
    a.$renderers = null;
    a.$preservedViewport = null;
    a.$pixelFormat = null;
    a.$previousFboHandle = 0;
    a.$fbo = null;
    a.$initialized = 0;
    a.$drawing0 = 0;
}
let ccvf_VfxFrameBuffer_bufferNesting = 0,
ccvf_VfxFrameBuffer_tmpCam = null,
ccvf_VfxFrameBuffer_zeroTransform = null,
ccvf_VfxFrameBuffer_$callClinit = () => {
    ccvf_VfxFrameBuffer_$callClinit = $rt_eraseClinit(ccvf_VfxFrameBuffer);
    ccvf_VfxFrameBuffer__clinit_();
},
ccvf_VfxFrameBuffer__init_0 = ($this, $pixelFormat) => {
    ccvf_VfxFrameBuffer_$callClinit();
    $this.$localProjection = cbgm_Matrix4__init_();
    $this.$localTransform = cbgm_Matrix4__init_();
    $this.$renderers = ccvf_VfxFrameBuffer$RendererManager__init_0();
    $this.$preservedViewport = new ccvg_VfxGlViewport;
    $this.$fbo = null;
    $this.$pixelFormat = $pixelFormat;
},
ccvf_VfxFrameBuffer__init_ = var_0 => {
    let var_1 = new ccvf_VfxFrameBuffer();
    ccvf_VfxFrameBuffer__init_0(var_1, var_0);
    return var_1;
},
ccvf_VfxFrameBuffer_dispose = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    if ($this.$initialized) {
        $this.$initialized = 0;
        var$1 = $this.$fbo;
        var$2 = cbg_Gdx_gl20;
        var$3 = cbgu_Array_iterator(var$1.$textureAttachments);
        var$4 = var$1;
        while (cbgu_Array$ArrayIterator_hasNext(var$3)) {
            cbggg_FrameBuffer_disposeColorTexture(var$4, cbgu_Array$ArrayIterator_next(var$3));
        }
        var$5 = var$1.$depthStencilPackedBufferHandle;
        var$2 = var$2;
        cgxgbt_TeaGL20_glDeleteRenderbuffer(var$2, var$5);
        cgxgbt_TeaGL20_glDeleteRenderbuffer(var$2, var$1.$depthbufferHandle);
        cgxgbt_TeaGL20_glDeleteRenderbuffer(var$2, var$1.$stencilbufferHandle);
        cgxgbt_TeaGL20_glDeleteFramebuffer(var$2, var$1.$framebufferHandle);
        cbggg_GLFrameBuffer_$callClinit();
        var$2 = cbggg_GLFrameBuffer_buffers;
        var$6 = cbg_Gdx_app;
        if (ju_HashMap_get(var$2, var$6) !== null) {
            var$2 = cbggg_GLFrameBuffer_buffers;
            var$6 = cbg_Gdx_app;
            cbgu_Array_removeValue(ju_HashMap_get(var$2, var$6), var$1, 1);
        }
        $this.$fbo = null;
    }
},
ccvf_VfxFrameBuffer_initialize = ($this, $width, $height) => {
    let $boundFboHandle, $cam, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15;
    if ($this.$initialized)
        ccvf_VfxFrameBuffer_dispose($this);
    $this.$initialized = 1;
    $boundFboHandle = ccvf_VfxFrameBuffer_getBoundFboHandle($this);
    $cam = new cbggg_FrameBuffer;
    var$5 = $this.$pixelFormat;
    cbggg_GLFrameBuffer__init_($cam);
    var$6 = new cbggg_GLFrameBuffer$FrameBufferBuilder;
    var$6.$textureAttachmentSpecs = cbgu_Array__init_();
    var$6.$colorRenderBufferSpecs = cbgu_Array__init_();
    var$6.$width4 = $width;
    var$6.$height6 = $height;
    var$6.$samples = 0;
    var$7 = var$6;
    var$8 = cbggg_Gdx2DPixmap_toGlFormat(cbgg_Pixmap$Format_toGdx2DPixmapFormat(var$5));
    var$9 = cbggg_Gdx2DPixmap_toGlType(cbgg_Pixmap$Format_toGdx2DPixmapFormat(var$5));
    var$7 = var$7.$textureAttachmentSpecs;
    var$5 = new cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec;
    var$5.$internalFormat0 = var$8;
    var$5.$format12 = var$8;
    var$5.$type9 = var$9;
    cbgu_Array_add(var$7, var$5);
    $cam.$bufferBuilder = var$6;
    var$5 = $cam;
    cbggg_GLFrameBuffer_build(var$5);
    $this.$fbo = $cam;
    $cam = cbggg_GLFrameBuffer_getColorBufferTexture(var$5);
    var$5 = cbgg_Texture$TextureFilter_Nearest;
    cbgg_GLTexture_setFilter($cam, var$5, var$5);
    cbg_Gdx_gl20.$glBindFramebuffer(36160, $boundFboHandle);
    $cam = ccvf_VfxFrameBuffer_tmpCam;
    var$10 = $width;
    var$11 = $height;
    cbgm_Vector3_set($cam.$up, 0.0, 1.0, 0.0);
    cbgm_Vector3_set($cam.$direction, 0.0, 0.0, (-1.0));
    var$5 = $cam.$position5;
    var$12 = $cam.$zoom;
    cbgm_Vector3_set(var$5, var$12 * var$10 / 2.0, var$12 * var$11 / 2.0, 0.0);
    $cam.$viewportWidth = var$10;
    $cam.$viewportHeight = var$11;
    var$5 = $cam.$projection;
    var$13 = $cam.$zoom;
    cbgm_Matrix4_setToOrtho(var$5, var$13 *  -var$10 / 2.0, var$13 * var$10 / 2.0, var$13 *  -(var$11 / 2.0), var$13 * var$11 / 2.0, $cam.$near, $cam.$far);
    var$7 = $cam.$view;
    var$6 = $cam.$direction;
    var$14 = $cam.$up;
    cbgm_Vector3_nor(cbgm_Vector3_set0(cbgm_Matrix4_l_vez, var$6));
    cbgm_Vector3_nor(cbgm_Vector3_set0(cbgm_Matrix4_l_vex, var$6));
    cbgm_Vector3_nor(cbgm_Vector3_crs(cbgm_Matrix4_l_vex, var$14));
    cbgm_Vector3_nor(cbgm_Vector3_crs(cbgm_Vector3_set0(cbgm_Matrix4_l_vey, cbgm_Matrix4_l_vex), cbgm_Matrix4_l_vez));
    cbgm_Matrix4_idt(var$7);
    var$15 = var$7.$val.data;
    var$5 = cbgm_Matrix4_l_vex;
    var$15[0] = var$5.$x0;
    var$15[4] = var$5.$y0;
    var$15[8] = var$5.$z;
    var$5 = cbgm_Matrix4_l_vey;
    var$15[1] = var$5.$x0;
    var$15[5] = var$5.$y0;
    var$15[9] = var$5.$z;
    var$5 = cbgm_Matrix4_l_vez;
    var$15[2] =  -var$5.$x0;
    var$15[6] =  -var$5.$y0;
    var$15[10] =  -var$5.$z;
    var$5 = $cam.$view;
    var$6 = $cam.$position5;
    cbgm_Matrix4_translate(var$5,  -var$6.$x0,  -var$6.$y0,  -var$6.$z);
    cbgm_Matrix4_set($cam.$combined, $cam.$projection);
    cbgm_Matrix4_mul($cam.$combined.$val, $cam.$view.$val);
    cbgm_Matrix4_set($cam.$invProjectionView, $cam.$combined);
    cbgm_Matrix4_matrix4_inv($cam.$invProjectionView.$val);
    cbgm_Frustum_update($cam.$frustum, $cam.$invProjectionView);
    cbgm_Matrix4_set($this.$localProjection, $cam.$combined);
    cbgm_Matrix4_set($this.$localTransform, ccvf_VfxFrameBuffer_zeroTransform);
},
ccvf_VfxFrameBuffer_getTexture = $this => {
    let var$1;
    var$1 = $this.$fbo;
    return var$1 === null ? null : cbggg_GLFrameBuffer_getColorBufferTexture(var$1);
},
ccvf_VfxFrameBuffer_begin = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    ccvf_VfxFrameBuffer_$callClinit();
    ccvf_VfxFrameBuffer_bufferNesting = ccvf_VfxFrameBuffer_bufferNesting + 1 | 0;
    if (!$this.$initialized) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(605));
        $rt_throw(var$1);
    }
    if ($this.$drawing0) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(606));
        $rt_throw(var$1);
    }
    $this.$drawing0 = 1;
    ccvf_VfxFrameBuffer$RendererManager_flush($this.$renderers);
    $this.$previousFboHandle = ccvf_VfxFrameBuffer_getBoundFboHandle($this);
    var$1 = $this.$preservedViewport;
    ccvg_VfxGLUtils_$callClinit();
    var$2 = ccvg_VfxGLUtils_tmpIntBuf;
    cbg_Gdx_gl.$glGetIntegerv(2978, var$2);
    var$3 = ccvg_VfxGLUtils_tmpViewport;
    var$2 = var$2;
    var$4 = jn_IntBufferImpl_get(var$2, 0);
    var$5 = jn_IntBufferImpl_get(var$2, 1);
    var$6 = jn_IntBufferImpl_get(var$2, 2);
    var$7 = jn_IntBufferImpl_get(var$2, 3);
    var$3.$x7 = var$4;
    var$3.$y7 = var$5;
    var$3.$width9 = var$6;
    var$3.$height7 = var$7;
    var$1.$x7 = var$4;
    var$1.$y7 = var$5;
    var$1.$width9 = var$6;
    var$1.$height7 = var$7;
    cbg_Gdx_gl20.$glBindFramebuffer(36160, $this.$fbo.$framebufferHandle);
    cbg_Gdx_gl20.$glViewport(0, 0, cbggg_GLFrameBuffer_getWidth($this.$fbo), cbggg_GLFrameBuffer_getHeight($this.$fbo));
    var$1 = $this.$renderers;
    var$2 = $this.$localProjection;
    var$3 = $this.$localTransform;
    var$7 = 0;
    while (true) {
        var$8 = var$1.$renderers0;
        if (var$7 >= var$8.$size0)
            break;
        (cbgu_Array_get(var$8, var$7)).$assignLocalMatrices(var$2, var$3);
        var$7 = var$7 + 1 | 0;
    }
},
ccvf_VfxFrameBuffer_end = $this => {
    let var$1, var$2, var$3;
    ccvf_VfxFrameBuffer_$callClinit();
    ccvf_VfxFrameBuffer_bufferNesting = ccvf_VfxFrameBuffer_bufferNesting - 1 | 0;
    if (!$this.$initialized) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(605));
        $rt_throw(var$1);
    }
    if (!$this.$drawing0) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(607));
        $rt_throw(var$1);
    }
    if (ccvf_VfxFrameBuffer_getBoundFboHandle($this) != $this.$fbo.$framebufferHandle) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(608));
        $rt_throw(var$1);
    }
    $this.$drawing0 = 0;
    ccvf_VfxFrameBuffer$RendererManager_flush($this.$renderers);
    cbg_Gdx_gl20.$glBindFramebuffer(36160, $this.$previousFboHandle);
    var$1 = cbg_Gdx_gl20;
    var$2 = $this.$preservedViewport;
    var$1.$glViewport(var$2.$x7, var$2.$y7, var$2.$width9, var$2.$height7);
    var$1 = $this.$renderers;
    var$3 = 0;
    while (true) {
        var$2 = var$1.$renderers0;
        if (var$3 >= var$2.$size0)
            break;
        (cbgu_Array_get(var$2, var$3)).$restoreOwnMatrices();
        var$3 = var$3 + 1 | 0;
    }
},
ccvf_VfxFrameBuffer_getBoundFboHandle = $this => {
    let var$1;
    ccvg_VfxGLUtils_$callClinit();
    ccvg_DefaultVfxGlExtension_$callClinit();
    var$1 = ccvg_DefaultVfxGlExtension_tmpIntBuf;
    cbg_Gdx_gl.$glGetIntegerv(36006, var$1);
    return jn_IntBufferImpl_get(var$1, 0);
},
ccvf_VfxFrameBuffer__clinit_ = () => {
    ccvf_VfxFrameBuffer_bufferNesting = 0;
    ccvf_VfxFrameBuffer_tmpCam = cbgg_OrthographicCamera__init_0();
    ccvf_VfxFrameBuffer_zeroTransform = cbgm_Matrix4__init_();
},
cbgf_FileHandle = $rt_classWithoutFields(),
cbgf_FileHandle__init_ = $this => {
    return;
},
cbgf_FileHandle__init_0 = () => {
    let var_0 = new cbgf_FileHandle();
    cbgf_FileHandle__init_(var_0);
    return var_0;
},
cbgf_FileHandle_readBytes = $this => {
    let $input, var$2, $ex, var$4, $$je;
    $input = cgxgbt_TeaFileHandle_read($this);
    a: {
        b: {
            try {
                var$2 = cbgu_StreamUtils_copyStreamToByteArray($input, cbgf_FileHandle_estimateLength($this));
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $ex = $$je;
                    break b;
                } else{
                    var$4 = $$je;
                    break a;
                }
            }
            cbgu_StreamUtils_closeQuietly($input);
            return var$2;
        }
        try {
            $rt_throw(cbgu_GdxRuntimeException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(609)), $this)), $ex));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            var$4 = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly($input);
    $rt_throw(var$4);
},
cbgf_FileHandle_estimateLength = $this => {
    let var$1, $length;
    var$1 = $this;
    $length = Long_lo((cgxgbtf_MemoryFileStorage_length(cgxgbt_TeaFiles_getFileDB(var$1.$teaFiles, var$1.$type0), var$1)));
    if (!$length)
        $length = 512;
    return $length;
};
function ses_BatchManager() {
    let a = this; jl_Object.call(a);
    a.$batch = null;
    a.$r0 = null;
    a.$floatBits = 0.0;
    a.$verts = null;
    a.$vertexCount = 0;
    a.$pixelSize = 0.0;
    a.$halfPixelSize = 0.0;
    a.$offset2 = 0.0;
    a.$cacheDraws = 0;
    a.$drawing1 = null;
}
let ses_BatchManager_mat4 = null,
ses_BatchManager_$callClinit = () => {
    ses_BatchManager_$callClinit = $rt_eraseClinit(ses_BatchManager);
    ses_BatchManager__clinit_();
},
ses_BatchManager__init_ = ($this, $batch, $region) => {
    ses_BatchManager_$callClinit();
    $this.$pixelSize = 1.0;
    $this.$halfPixelSize = 0.5;
    $this.$offset2 = 0.0010000000474974513;
    $this.$cacheDraws = 0;
    $this.$drawing1 = null;
    $this.$batch = $batch;
    $this.$verts = $rt_createFloatArray(2000);
    ses_BatchManager_setTextureRegion($this, $region);
    ses_BatchManager_setColor0($this, cbgg_Color_WHITE);
},
ses_BatchManager__init_0 = (var_0, var_1) => {
    let var_2 = new ses_BatchManager();
    ses_BatchManager__init_(var_2, var_0, var_1);
    return var_2;
},
ses_BatchManager_setTextureRegion = ($this, $region) => {
    let $oldRegion;
    $oldRegion = $this.$r0;
    $this.$r0 = $region;
    ses_BatchManager_setTextureRegionUV($this);
    return $oldRegion;
},
ses_BatchManager_setTextureRegionUV = $this => {
    let var$1, $u, $v, $i, var$5;
    a: {
        var$1 = $this.$r0;
        if (var$1 !== null) {
            $u = 0.5 * (var$1.$u + var$1.$u2);
            $v = 0.5 * (var$1.$v + var$1.$v2);
            $i = 0;
            while (true) {
                var$5 = $this.$verts.data;
                if ($i >= var$5.length)
                    break a;
                var$5[$i + 3 | 0] = $u;
                var$5[$i + 4 | 0] = $v;
                $i = $i + 5 | 0;
            }
        }
    }
},
ses_BatchManager_setColor0 = ($this, $color) => {
    return ses_BatchManager_setColor($this, cbgg_Color_toFloatBits($color));
},
ses_BatchManager_setColor = ($this, $floatBits) => {
    let $oldColor;
    $oldColor = $this.$floatBits;
    $this.$floatBits = $floatBits;
    return $oldColor;
},
ses_BatchManager_getPackedColor = $this => {
    return $this.$floatBits;
},
ses_BatchManager_isCachingDraws = $this => {
    return $this.$cacheDraws;
},
ses_BatchManager_startCaching = $this => {
    let $wasCaching;
    $wasCaching = $this.$cacheDraws;
    $this.$cacheDraws = 1;
    return $wasCaching;
},
ses_BatchManager_endCaching = $this => {
    $this.$cacheDraws = 0;
    if ($this.$vertexCount > 0)
        $this.$pushToBatch();
},
ses_BatchManager_getPixelSize = $this => {
    return $this.$pixelSize;
},
ses_BatchManager_isRecording = $this => {
    return $this.$drawing1 === null ? 0 : 1;
},
ses_BatchManager_pushQuad = $this => {
    $this.$vertexCount = $this.$vertexCount + 4 | 0;
},
ses_BatchManager_pushTriangle = $this => {
    ses_BatchManager_x4($this, ses_BatchManager_x3($this));
    ses_BatchManager_y4($this, ses_BatchManager_y3($this));
    $this.$pushQuad();
},
ses_BatchManager_ensureSpaceForTriangle = $this => {
    ses_BatchManager_ensureSpace($this, 4);
},
ses_BatchManager_ensureSpaceForQuad = $this => {
    ses_BatchManager_ensureSpace($this, 4);
},
ses_BatchManager_ensureSpace = ($this, $vertices) => {
    let var$2;
    var$2 = $vertices * 5 | 0;
    if (var$2 > $this.$verts.data.length)
        $this.$increaseCacheSize(var$2);
    else if (ses_BatchManager_verticesRemaining($this) < $vertices)
        $this.$pushToBatch();
},
ses_BatchManager_increaseCacheSize = ($this, $minSize) => {
    let $newSize;
    $this.$pushToBatch();
    $newSize = $this.$verts.data.length;
    while ($minSize > $newSize) {
        $newSize = $newSize * 2 | 0;
    }
    $this.$verts = $rt_createFloatArray($newSize);
    ses_BatchManager_setTextureRegionUV($this);
},
ses_BatchManager_verticesRemaining = $this => {
    return ($this.$verts.data.length - (20 * $this.$vertexCount | 0) | 0) / 5 | 0;
},
ses_BatchManager_pushToBatch = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if (!$this.$vertexCount)
        return;
    if (ses_BatchManager_isRecording($this))
        $this.$drawing1.$pushVertices();
    else {
        var$1 = $this.$r0;
        if (var$1 === null) {
            var$1 = new jl_IllegalStateException;
            jl_Exception__init_(var$1, $rt_s(610));
            $rt_throw(var$1);
        }
        var$2 = $this.$batch;
        var$3 = var$1.$texture;
        var$4 = $this.$verts;
        var$5 = ses_BatchManager_getVerticesArrayIndex($this);
        cbggg_PolygonSpriteBatch_draw(var$2, var$3, var$4, 0, var$5);
    }
    $this.$vertexCount = 0;
},
ses_BatchManager_getVerticesArrayIndex = $this => {
    return 5 * $this.$vertexCount | 0;
},
ses_BatchManager_x1 = ($this, $x1) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 0 | 0] = $x1;
},
ses_BatchManager_y1 = ($this, $y1) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 1 | 0] = $y1;
},
ses_BatchManager_x2 = ($this, $x2) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 5 | 0] = $x2;
},
ses_BatchManager_y2 = ($this, $y2) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 6 | 0] = $y2;
},
ses_BatchManager_x30 = ($this, $x3) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 10 | 0] = $x3;
},
ses_BatchManager_y30 = ($this, $y3) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 11 | 0] = $y3;
},
ses_BatchManager_x4 = ($this, $x4) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 15 | 0] = $x4;
},
ses_BatchManager_y4 = ($this, $y4) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 16 | 0] = $y4;
},
ses_BatchManager_x3 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 10 | 0];
},
ses_BatchManager_y3 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 11 | 0];
},
ses_BatchManager_x40 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 15 | 0];
},
ses_BatchManager_y40 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 16 | 0];
},
ses_BatchManager_color1 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 2 | 0] = $c;
},
ses_BatchManager_color2 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 7 | 0] = $c;
},
ses_BatchManager_color3 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 12 | 0] = $c;
},
ses_BatchManager_color4 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 17 | 0] = $c;
},
ses_BatchManager__clinit_ = () => {
    ses_BatchManager_mat4 = cbgm_Matrix4__init_();
};
function ses_DrawerTemplate() {
    let a = this; jl_Object.call(a);
    a.$drawer = null;
    a.$batchManager = null;
}
let ses_DrawerTemplate_A = null,
ses_DrawerTemplate_B = null,
ses_DrawerTemplate_C = null,
ses_DrawerTemplate_D = null,
ses_DrawerTemplate_E = null,
ses_DrawerTemplate_dir = null,
ses_DrawerTemplate_vec1 = null,
ses_DrawerTemplate__init_ = ($this, $batchManager, $drawer) => {
    $this.$drawer = $drawer;
    $this.$batchManager = $batchManager;
},
ses_DrawerTemplate_drawSmoothJoinFill = ($this, $A, $B, $C, $D, $E, $halfLineWidth) => {
    let $bendsLeft, $c;
    $this.$batchManager.$ensureSpaceForTriangle();
    $bendsLeft = ses_Joiner_prepareSmoothJoin($A, $B, $C, $D, $E, $halfLineWidth, 0);
    ses_DrawerTemplate_vert1($this, !$bendsLeft ? $D : $E);
    ses_DrawerTemplate_vert2($this, !$bendsLeft ? $E : $D);
    if (ses_Joiner_prepareSmoothJoin($A, $B, $C, $D, $E, $halfLineWidth, 1))
        $D = $E;
    ses_DrawerTemplate_vert3($this, $D);
    $c = $this.$batchManager.$floatBits;
    ses_DrawerTemplate_color0($this, $c, $c, $c);
    $this.$batchManager.$pushTriangle();
},
ses_DrawerTemplate_x1 = ($this, $x1) => {
    ses_BatchManager_x1($this.$batchManager, $x1);
},
ses_DrawerTemplate_y1 = ($this, $y1) => {
    ses_BatchManager_y1($this.$batchManager, $y1);
},
ses_DrawerTemplate_x2 = ($this, $x2) => {
    ses_BatchManager_x2($this.$batchManager, $x2);
},
ses_DrawerTemplate_y2 = ($this, $y2) => {
    ses_BatchManager_y2($this.$batchManager, $y2);
},
ses_DrawerTemplate_x3 = ($this, $x3) => {
    ses_BatchManager_x30($this.$batchManager, $x3);
},
ses_DrawerTemplate_y3 = ($this, $y3) => {
    ses_BatchManager_y30($this.$batchManager, $y3);
},
ses_DrawerTemplate_x4 = ($this, $x4) => {
    ses_BatchManager_x4($this.$batchManager, $x4);
},
ses_DrawerTemplate_y4 = ($this, $y4) => {
    ses_BatchManager_y4($this.$batchManager, $y4);
},
ses_DrawerTemplate_vert10 = ($this, $x, $y) => {
    ses_DrawerTemplate_x1($this, $x);
    ses_DrawerTemplate_y1($this, $y);
},
ses_DrawerTemplate_vert20 = ($this, $x, $y) => {
    ses_DrawerTemplate_x2($this, $x);
    ses_DrawerTemplate_y2($this, $y);
},
ses_DrawerTemplate_vert30 = ($this, $x, $y) => {
    ses_DrawerTemplate_x3($this, $x);
    ses_DrawerTemplate_y3($this, $y);
},
ses_DrawerTemplate_vert1 = ($this, $V) => {
    ses_DrawerTemplate_vert10($this, $V.$x, $V.$y);
},
ses_DrawerTemplate_vert2 = ($this, $V) => {
    ses_DrawerTemplate_vert20($this, $V.$x, $V.$y);
},
ses_DrawerTemplate_vert3 = ($this, $V) => {
    ses_DrawerTemplate_vert30($this, $V.$x, $V.$y);
},
ses_DrawerTemplate_vert4 = ($this, $V) => {
    let var$2, var$3;
    var$2 = $V.$x;
    var$3 = $V.$y;
    ses_DrawerTemplate_x4($this, var$2);
    ses_DrawerTemplate_y4($this, var$3);
},
ses_DrawerTemplate_color1 = ($this, $c) => {
    ses_BatchManager_color1($this.$batchManager, $c);
},
ses_DrawerTemplate_color2 = ($this, $c) => {
    ses_BatchManager_color2($this.$batchManager, $c);
},
ses_DrawerTemplate_color3 = ($this, $c) => {
    ses_BatchManager_color3($this.$batchManager, $c);
},
ses_DrawerTemplate_color4 = ($this, $c) => {
    ses_BatchManager_color4($this.$batchManager, $c);
},
ses_DrawerTemplate_color0 = ($this, $c1, $c2, $c3) => {
    ses_DrawerTemplate_color1($this, $c1);
    ses_DrawerTemplate_color2($this, $c2);
    ses_DrawerTemplate_color3($this, $c3);
},
ses_DrawerTemplate_color = ($this, $c1, $c2, $c3, $c4) => {
    ses_DrawerTemplate_color1($this, $c1);
    ses_DrawerTemplate_color2($this, $c2);
    ses_DrawerTemplate_color3($this, $c3);
    ses_DrawerTemplate_color4($this, $c4);
},
ses_DrawerTemplate__clinit_ = () => {
    ses_DrawerTemplate_A = new cbgm_Vector2;
    ses_DrawerTemplate_B = new cbgm_Vector2;
    ses_DrawerTemplate_C = new cbgm_Vector2;
    ses_DrawerTemplate_D = new cbgm_Vector2;
    ses_DrawerTemplate_E = new cbgm_Vector2;
    ses_DrawerTemplate_dir = new cbgm_Vector2;
    ses_DrawerTemplate_vec1 = new cbgm_Vector2;
},
ses_FilledPolygonDrawer = $rt_classWithoutFields(ses_DrawerTemplate),
ses_FilledPolygonDrawer_triangulator = null,
ses_FilledPolygonDrawer_polygon1 = ($this, $vertices) => {
    ses_FilledPolygonDrawer_polygon0($this, $vertices, 0, $vertices.data.length);
},
ses_FilledPolygonDrawer_polygon0 = ($this, $vertices, $offset, $count) => {
    let var$4, var$5, var$6, $triangles, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, var$23, var$24;
    a: {
        var$4 = ses_FilledPolygonDrawer_triangulator;
        var$4.$vertices1 = $vertices;
        var$5 = $count / 2 | 0;
        var$4.$vertexCount0 = var$5;
        var$6 = $offset / 2 | 0;
        $triangles = var$4.$indicesArray;
        cbgu_ShortArray_clear($triangles);
        cbgu_ShortArray_ensureCapacity($triangles, var$5);
        $triangles.$size4 = var$5;
        var$8 = $triangles.$items2;
        var$4.$indices0 = var$8;
        if (cbgm_GeometryUtils_isClockwise($vertices, $offset, $count)) {
            $count = 0;
            while ($count < var$5) {
                var$8.data[$count] = (var$6 + $count | 0) << 16 >> 16;
                $count = ($count + 1 | 0) << 16 >> 16;
            }
        } else {
            $offset = 0;
            var$6 = var$6 + (var$5 - 1 | 0) | 0;
            while (true) {
                if ($offset >= var$5)
                    break a;
                var$8.data[$offset] = (var$6 - $offset | 0) << 16 >> 16;
                $offset = $offset + 1 | 0;
            }
        }
    }
    $triangles = var$4.$vertexTypes;
    cbgu_IntArray_clear($triangles);
    cbgu_IntArray_ensureCapacity($triangles, var$5);
    $offset = 0;
    while ($offset < var$5) {
        cbgu_IntArray_add($triangles, cbgm_EarClippingTriangulator_classifyVertex(var$4, $offset));
        $offset = $offset + 1 | 0;
    }
    $triangles = var$4.$triangles1;
    cbgu_ShortArray_clear($triangles);
    cbgu_ShortArray_ensureCapacity($triangles, jl_Math_max(0, var$5 - 2 | 0) * 3 | 0);
    var$9 = var$4.$vertexTypes.$items1;
    while (true) {
        var$10 = var$4.$vertexCount0;
        $offset = $rt_compare(var$10, 3);
        if ($offset <= 0) {
            if (!$offset) {
                var$11 = var$4.$triangles1;
                var$9 = var$4.$indices0.data;
                cbgu_ShortArray_add(var$11, var$9[0]);
                cbgu_ShortArray_add(var$11, var$9[1]);
                cbgu_ShortArray_add(var$11, var$9[2]);
            }
            ses_FilledPolygonDrawer_polygon($this, $vertices, $triangles);
            return;
        }
        var$12 = 0;
        b: {
            while (true) {
                if (var$12 >= var$10) {
                    var$8 = var$4.$vertexTypes.$items1;
                    var$12 = 0;
                    while (true) {
                        if (var$12 >= var$10) {
                            var$12 = 0;
                            break b;
                        }
                        if (var$8.data[var$12] != (-1))
                            break;
                        var$12 = var$12 + 1 | 0;
                    }
                    break b;
                }
                c: {
                    var$13 = var$4.$vertexTypes.$items1.data;
                    if (var$13[var$12] == (-1))
                        $offset = 0;
                    else {
                        var$14 = cbgm_EarClippingTriangulator_previousIndex(var$4, var$12);
                        var$15 = cbgm_EarClippingTriangulator_nextIndex(var$4, var$12);
                        var$16 = var$4.$indices0.data;
                        $offset = var$16[var$14] * 2 | 0;
                        $count = var$16[var$12] * 2 | 0;
                        var$5 = var$16[var$15] * 2 | 0;
                        var$8 = var$4.$vertices1.data;
                        var$17 = var$8[$offset];
                        var$18 = var$8[$offset + 1 | 0];
                        var$19 = var$8[$count];
                        var$20 = var$8[$count + 1 | 0];
                        var$21 = var$8[var$5];
                        var$22 = var$8[var$5 + 1 | 0];
                        $offset = cbgm_EarClippingTriangulator_nextIndex(var$4, var$15);
                        while ($offset != var$14) {
                            if (var$13[$offset] != 1) {
                                $count = var$16[$offset] * 2 | 0;
                                var$23 = var$8[$count];
                                var$24 = var$8[$count + 1 | 0];
                                if (cbgm_EarClippingTriangulator_computeSpannedAreaSign(var$21, var$22, var$17, var$18, var$23, var$24) >= 0 && cbgm_EarClippingTriangulator_computeSpannedAreaSign(var$17, var$18, var$19, var$20, var$23, var$24) >= 0 && cbgm_EarClippingTriangulator_computeSpannedAreaSign(var$19, var$20, var$21, var$22, var$23, var$24) >= 0) {
                                    $offset = 0;
                                    break c;
                                }
                            }
                            $offset = cbgm_EarClippingTriangulator_nextIndex(var$4, $offset);
                        }
                        $offset = 1;
                    }
                }
                if ($offset)
                    break;
                var$12 = var$12 + 1 | 0;
            }
        }
        var$8 = var$4.$indices0.data;
        var$11 = var$4.$triangles1;
        cbgu_ShortArray_add(var$11, var$8[cbgm_EarClippingTriangulator_previousIndex(var$4, var$12)]);
        cbgu_ShortArray_add(var$11, var$8[var$12]);
        cbgu_ShortArray_add(var$11, var$8[cbgm_EarClippingTriangulator_nextIndex(var$4, var$12)]);
        var$11 = var$4.$indicesArray;
        $count = var$11.$size4;
        if (var$12 >= $count) {
            var$4 = new jl_IndexOutOfBoundsException;
            $triangles = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($triangles);
            jl_AbstractStringBuilder_append0($triangles, $rt_s(21));
            jl_AbstractStringBuilder_append1($triangles, var$12);
            jl_AbstractStringBuilder_append0($triangles, $rt_s(5));
            jl_AbstractStringBuilder_append1($triangles, var$11.$size4);
            jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString($triangles));
            $rt_throw(var$4);
        }
        var$8 = var$11.$items2;
        var$13 = var$8.data;
        $offset = $count - 1 | 0;
        var$11.$size4 = $offset;
        if (!var$11.$ordered1)
            var$13[var$12] = var$13[$offset];
        else
            jl_System_fastArraycopy(var$8, var$12 + 1 | 0, var$8, var$12, $offset - var$12 | 0);
        var$11 = var$4.$vertexTypes;
        $count = var$11.$size1;
        if (var$12 >= $count)
            break;
        var$8 = var$11.$items1;
        var$13 = var$8.data;
        $offset = $count - 1 | 0;
        var$11.$size1 = $offset;
        if (!var$11.$ordered0)
            var$13[var$12] = var$13[$offset];
        else
            jl_System_fastArraycopy(var$8, var$12 + 1 | 0, var$8, var$12, $offset - var$12 | 0);
        var$4.$vertexCount0 = var$4.$vertexCount0 - 1 | 0;
        $offset = cbgm_EarClippingTriangulator_previousIndex(var$4, var$12);
        if (var$12 == var$4.$vertexCount0)
            var$12 = 0;
        var$8 = var$9.data;
        var$8[$offset] = cbgm_EarClippingTriangulator_classifyVertex(var$4, $offset);
        var$8[var$12] = cbgm_EarClippingTriangulator_classifyVertex(var$4, var$12);
    }
    var$4 = new jl_IndexOutOfBoundsException;
    $triangles = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($triangles);
    jl_AbstractStringBuilder_append0($triangles, $rt_s(21));
    jl_AbstractStringBuilder_append1($triangles, var$12);
    jl_AbstractStringBuilder_append0($triangles, $rt_s(5));
    jl_IndexOutOfBoundsException__init_0(var$4, jl_StringBuilder_toString(jl_StringBuilder_append2($triangles, var$11.$size1)));
    $rt_throw(var$4);
},
ses_FilledPolygonDrawer_polygon = ($this, $vertices, $triangles) => {
    $this.$polygon3($vertices, $triangles.$items2, $triangles.$size4);
},
ses_FilledPolygonDrawer_rectangle0 = ($this, $x, $y, $width, $height, $rotation) => {
    let $c;
    $c = $this.$batchManager.$floatBits;
    ses_FilledPolygonDrawer_rectangle($this, $x, $y, $width, $height, $rotation, $c, $c, $c, $c);
},
ses_FilledPolygonDrawer_rectangle = ($this, $x, $y, $width, $height, $rotation, $c1, $c2, $c3, $c4) => {
    let var$10, $caching, var$12, $cos, $sin, $halfWidth, $halfHeight, $centreX, $centreY;
    var$10 = $this.$batchManager;
    $caching = var$10.$cacheDraws;
    ses_BatchManager_ensureSpaceForQuad(var$10);
    var$12 = $rotation;
    $cos = jl_Math_cos(var$12);
    $sin = jl_Math_sin(var$12);
    $halfWidth = 0.5 * $width;
    $halfHeight = 0.5 * $height;
    $centreX = $x + $halfWidth;
    $centreY = $y + $halfHeight;
    $width = $halfWidth * $cos;
    $x = $halfHeight * $sin;
    $y = $width - $x + $centreX;
    var$10 = $this;
    ses_DrawerTemplate_x1(var$10, $y);
    $height = $halfWidth * $sin;
    $rotation = $halfHeight * $cos;
    ses_DrawerTemplate_y1(var$10, $height + $rotation + $centreY);
    $y =  -$halfWidth;
    $halfWidth = $y * $cos;
    ses_DrawerTemplate_x2(var$10, $halfWidth - $x + $centreX);
    $y = $y * $sin;
    ses_DrawerTemplate_y2(var$10, $y + $rotation + $centreY);
    $x =  -$halfHeight;
    $rotation = $x * $sin;
    ses_DrawerTemplate_x3(var$10, $halfWidth - $rotation + $centreX);
    $x = $x * $cos;
    ses_DrawerTemplate_y3(var$10, $y + $x + $centreY);
    ses_DrawerTemplate_x4(var$10, $width - $rotation + $centreX);
    ses_DrawerTemplate_y4(var$10, $height + $x + $centreY);
    ses_DrawerTemplate_color(var$10, $c1, $c2, $c3, $c4);
    $this.$batchManager.$pushQuad();
    if (!$caching)
        $this.$batchManager.$pushToBatch();
},
ses_FilledPolygonDrawer_triangle = ($this, $x1, $y1, $x2, $y2, $x3, $y3, $color1, $color2, $color3) => {
    let $caching, var$11;
    $caching = $this.$batchManager.$cacheDraws;
    var$11 = $this;
    ses_DrawerTemplate_vert10(var$11, $x1, $y1);
    ses_DrawerTemplate_vert20(var$11, $x2, $y2);
    ses_DrawerTemplate_vert30(var$11, $x3, $y3);
    ses_DrawerTemplate_color0(var$11, $color1, $color2, $color3);
    $this.$batchManager.$pushTriangle();
    if (!$caching)
        $this.$batchManager.$pushToBatch();
},
ses_FilledPolygonDrawer__clinit_ = () => {
    ses_FilledPolygonDrawer_triangulator = cbgm_EarClippingTriangulator__init_0();
},
ses_FilledPolygonDrawer$BatchFilledPolygonDrawer = $rt_classWithoutFields(ses_FilledPolygonDrawer),
ses_FilledPolygonDrawer$BatchFilledPolygonDrawer_polygon = ($this, $vertices, $triangles, $trianglesCount) => {
    let $c, $i, var$6, var$7, var$8, var$9, var$10;
    $c = $this.$batchManager.$floatBits;
    $i = 0;
    var$6 = $this;
    while ($i < $trianglesCount) {
        var$7 = $triangles.data;
        var$8 = $vertices.data;
        $this.$batchManager.$ensureSpaceForTriangle();
        ses_DrawerTemplate_vert10(var$6, var$8[2 * var$7[$i] | 0], var$8[(2 * var$7[$i] | 0) + 1 | 0]);
        var$9 = $i + 1 | 0;
        ses_DrawerTemplate_vert20(var$6, var$8[2 * var$7[var$9] | 0], var$8[(2 * var$7[var$9] | 0) + 1 | 0]);
        var$10 = $i + 2 | 0;
        ses_DrawerTemplate_vert30(var$6, var$8[2 * var$7[var$10] | 0], var$8[(2 * var$7[var$10] | 0) + 1 | 0]);
        ses_DrawerTemplate_color0(var$6, $c, $c, $c);
        $this.$batchManager.$pushTriangle();
        $i = $i + 3 | 0;
    }
    $this.$batchManager.$pushToBatch();
};
function ses_PolygonBatchManager() {
    let a = this; ses_BatchManager.call(a);
    a.$triangles0 = null;
    a.$triangleCount = 0;
}
let ses_PolygonBatchManager_pushQuad = $this => {
    let var$1, var$2;
    var$1 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$1 << 16 >> 16, (var$1 + 1 | 0) << 16 >> 16, (var$1 + 2 | 0) << 16 >> 16);
    var$2 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$2 << 16 >> 16, (var$2 + 2 | 0) << 16 >> 16, (var$2 + 3 | 0) << 16 >> 16);
    ses_BatchManager_pushQuad($this);
},
ses_PolygonBatchManager_pushTriangle = $this => {
    let var$1;
    var$1 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$1 << 16 >> 16, (var$1 + 1 | 0) << 16 >> 16, (var$1 + 2 | 0) << 16 >> 16);
    $this.$vertexCount = $this.$vertexCount + 3 | 0;
},
ses_PolygonBatchManager_pushTriangleIndices = ($this, $t1, $t2, $t3) => {
    let $t, var$5;
    $t = ses_PolygonBatchManager_getTrianglesArrayOffset($this);
    var$5 = $this.$triangles0.data;
    var$5[$t] = $t1;
    var$5[$t + 1 | 0] = $t2;
    var$5[$t + 2 | 0] = $t3;
    $this.$triangleCount = $this.$triangleCount + 1 | 0;
},
ses_PolygonBatchManager_ensureSpaceForTriangle = $this => {
    ses_BatchManager_ensureSpace($this, 3);
},
ses_PolygonBatchManager_pushToBatch = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
    if (!$this.$vertexCount)
        return;
    var$1 = $this;
    if (ses_BatchManager_isRecording(var$1))
        $this.$drawing1.$pushVertices();
    else {
        var$2 = $this.$batch;
        var$3 = $this.$r0.$texture;
        var$4 = $this.$verts;
        var$5 = ses_BatchManager_getVerticesArrayIndex(var$1);
        var$6 = $this.$triangles0;
        var$7 = 0;
        var$8 = ses_PolygonBatchManager_getTrianglesArrayOffset($this);
        var$1 = var$2;
        if (!var$1.$drawing) {
            var$1 = new jl_IllegalStateException;
            jl_Exception__init_(var$1, $rt_s(530));
            $rt_throw(var$1);
        }
        a: {
            var$9 = var$1.$triangles;
            var$10 = var$1.$vertices0;
            if (var$3 !== var$1.$lastTexture)
                cbggg_PolygonSpriteBatch_switchTexture(var$1, var$3);
            else {
                var$11 = var$9.data;
                if ((var$1.$triangleIndex + var$8 | 0) <= var$11.length) {
                    var$11 = var$10.data;
                    if ((var$1.$vertexIndex + var$5 | 0) <= var$11.length)
                        break a;
                }
                cbggg_PolygonSpriteBatch_flush(var$1);
            }
        }
        var$12 = var$1.$triangleIndex;
        var$13 = var$1.$vertexIndex;
        var$14 = var$13 / 5 | 0;
        var$8 = var$7 + var$8 | 0;
        while (var$7 < var$8) {
            var$11 = var$6.data;
            var$15 = var$9.data;
            var$16 = var$12 + 1 | 0;
            var$15[var$12] = (var$11[var$7] + var$14 | 0) << 16 >> 16;
            var$7 = var$7 + 1 | 0;
            var$12 = var$16;
        }
        var$1.$triangleIndex = var$12;
        jl_System_fastArraycopy(var$4, 0, var$10, var$13, var$5);
        var$1.$vertexIndex = var$1.$vertexIndex + var$5 | 0;
    }
    $this.$vertexCount = 0;
    $this.$triangleCount = 0;
},
ses_PolygonBatchManager_increaseCacheSize = ($this, $minSize) => {
    ses_BatchManager_increaseCacheSize($this, $minSize);
    $this.$triangles0 = $rt_createShortArray(jl_Math_ceil(($this.$verts.data.length / 5 | 0) * 3 | 0) | 0);
},
ses_PolygonBatchManager_getTrianglesArrayOffset = $this => {
    return 3 * $this.$triangleCount | 0;
},
ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer = $rt_classWithoutFields(ses_FilledPolygonDrawer),
ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer_polygon = ($this, $vertices, $triangles, $trianglesCount) => {
    let var$4, $n, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    $vertices = $vertices.data;
    var$4 = $vertices.length;
    $n = var$4 / 2 | 0;
    ses_BatchManager_ensureSpace($this.$batchManager, $n);
    var$6 = $this.$batchManager;
    var$7 = var$6.$floatBits;
    var$8 = ses_BatchManager_getVerticesArrayIndex(var$6);
    var$9 = ses_PolygonBatchManager_getTrianglesArrayOffset(var$6);
    var$10 = 0;
    while (var$10 < $trianglesCount) {
        var$11 = $triangles.data;
        var$6.$triangles0.data[var$9 + var$10 | 0] = (var$6.$vertexCount + var$11[var$10] | 0) << 16 >> 16;
        var$10 = var$10 + 1 | 0;
    }
    var$6.$triangleCount = var$6.$triangleCount + ($trianglesCount / 3 | 0) | 0;
    var$12 = 0;
    while (var$12 < var$4) {
        var$13 = $vertices[var$12];
        var$14 = $vertices[var$12 + 1 | 0];
        $triangles = var$6.$verts.data;
        $triangles[var$8 + 0 | 0] = var$13;
        $triangles[var$8 + 1 | 0] = var$14;
        $triangles[var$8 + 2 | 0] = var$7;
        var$8 = var$8 + 5 | 0;
        var$12 = var$12 + 2 | 0;
    }
    var$6.$vertexCount = var$6.$vertexCount + $n | 0;
    ses_PolygonBatchManager_pushToBatch($this.$batchManager);
},
ses_LineDrawer = $rt_classWithoutFields(ses_DrawerTemplate),
ses_LineDrawer_line = ($this, $x1, $y1, $x2, $y2, $lineWidth, $snap) => {
    let var$7;
    var$7 = $this.$batchManager.$floatBits;
    ses_LineDrawer_line0($this, $x1, $y1, $x2, $y2, $lineWidth, $snap, var$7, var$7);
},
ses_LineDrawer_line0 = ($this, $x1, $y1, $x2, $y2, $lineWidth, $snap, $c1, $c2) => {
    ses_LineDrawer_pushLine0($this, $x1, $y1, $x2, $y2, $lineWidth, $snap, $c1, $c2);
    $this.$batchManager.$pushToBatch();
},
ses_LineDrawer_pushLine = ($this, $x1, $y1, $x2, $y2, $lineWidth, $snap) => {
    let var$7;
    var$7 = $this.$batchManager.$floatBits;
    ses_LineDrawer_pushLine0($this, $x1, $y1, $x2, $y2, $lineWidth, $snap, var$7, var$7);
},
ses_LineDrawer_pushLine0 = ($this, $x1, $y1, $x2, $y2, $lineWidth, $snap, $c1, $c2) => {
    let $ydif, $lx, $ly, var$12, $offset, $pixelSize, $halfPixelSize, $halfLineWidth, $s;
    ses_BatchManager_ensureSpaceForQuad($this.$batchManager);
    $ydif = 0.0;
    $lx = $x2 - $x1;
    $ly = $y2 - $y1;
    if ($snap) {
        var$12 = $this.$batchManager;
        $offset = var$12.$offset2;
        $pixelSize = var$12.$pixelSize;
        $halfPixelSize = var$12.$halfPixelSize;
        $x1 = ses_ShapeUtils_snap($x1, $pixelSize, $halfPixelSize) - jl_Math_signum($lx) * $offset;
        $y1 = ses_ShapeUtils_snap($y1, $pixelSize, $halfPixelSize) - jl_Math_signum($ly) * $offset;
        $x2 = ses_ShapeUtils_snap($x2, $pixelSize, $halfPixelSize) + jl_Math_signum($lx) * $offset;
        $y2 = ses_ShapeUtils_snap($y2, $pixelSize, $halfPixelSize) + jl_Math_signum($ly) * $offset;
    }
    $halfLineWidth = 0.5 * $lineWidth;
    if ($x1 !== $x2) {
        if ($y1 === $y2) {
            $ydif = $halfLineWidth;
            $halfLineWidth = 0.0;
        } else {
            $offset = $y2 - $y1;
            $halfPixelSize = $x2 - $x1;
            $s = 1.0 / jl_Math_sqrt($offset * $offset + $halfPixelSize * $halfPixelSize) * $halfLineWidth;
            $halfLineWidth = $offset * $s;
            $ydif = $halfPixelSize * $s;
        }
    }
    $lineWidth = $x1 + $halfLineWidth;
    var$12 = $this;
    ses_DrawerTemplate_x1(var$12, $lineWidth);
    ses_DrawerTemplate_y1(var$12, $y1 - $ydif);
    ses_DrawerTemplate_x2(var$12, $x1 - $halfLineWidth);
    ses_DrawerTemplate_y2(var$12, $y1 + $ydif);
    ses_DrawerTemplate_x3(var$12, $x2 - $halfLineWidth);
    ses_DrawerTemplate_y3(var$12, $y2 + $ydif);
    ses_DrawerTemplate_x4(var$12, $x2 + $halfLineWidth);
    ses_DrawerTemplate_y4(var$12, $y2 - $ydif);
    ses_DrawerTemplate_color1(var$12, $c1);
    ses_DrawerTemplate_color2(var$12, $c1);
    ses_DrawerTemplate_color3(var$12, $c2);
    ses_DrawerTemplate_color4(var$12, $c2);
    $this.$batchManager.$pushQuad();
    var$12 = $this.$batchManager;
    if (!var$12.$cacheDraws)
        var$12.$pushToBatch();
};
function ses_PathDrawer() {
    let a = this; ses_DrawerTemplate.call(a);
    a.$path2 = null;
    a.$tempPath = null;
}
let ses_PathDrawer_D0 = null,
ses_PathDrawer_E0 = null,
ses_PathDrawer_path0 = ($this, $userPath, $lineWidth, $joinType, $open) => {
    ses_PathDrawer_path($this, $userPath, 0, $userPath.data.length, $lineWidth, $joinType, $open);
},
ses_PathDrawer_path = ($this, $userPath, $start, $end, $lineWidth, $joinType, $open) => {
    let $i, var$8, var$9, var$10, var$11, var$12, $wasCaching, var$14, var$15, var$16;
    $userPath = $userPath.data;
    if ($userPath.length < 4)
        return;
    cbgu_FloatArray_add($this.$path2, $userPath[$start]);
    cbgu_FloatArray_add($this.$path2, $userPath[$start + 1 | 0]);
    $i = $start + 2 | 0;
    while ($i < $end) {
        if (!(ses_ShapeUtils_epsilonEquals($userPath[$i - 2 | 0], $userPath[$i]) && ses_ShapeUtils_epsilonEquals($userPath[$i - 1 | 0], $userPath[$i + 1 | 0]))) {
            var$8 = $this.$path2;
            var$9 = $userPath[$i];
            var$10 = $userPath[$i + 1 | 0];
            var$11 = var$8.$items0;
            var$12 = var$11.data;
            $wasCaching = var$8.$size2;
            if (($wasCaching + 1 | 0) >= var$12.length)
                var$11 = cbgu_FloatArray_resize(var$8, jl_Math_max(8, $wasCaching * 1.75 | 0));
            var$11 = var$11.data;
            $start = var$8.$size2;
            var$11[$start] = var$9;
            var$11[$start + 1 | 0] = var$10;
            var$8.$size2 = $start + 2 | 0;
        }
        $i = $i + 2 | 0;
    }
    var$8 = $this.$path2;
    $start = $rt_compare(var$8.$size2, 4);
    if ($start < 0) {
        cbgu_FloatArray_clear(var$8);
        return;
    }
    if (!$start) {
        $joinType = $this.$drawer.$lineDrawer;
        $userPath = var$8.$items0.data;
        ses_LineDrawer_line($joinType, $userPath[0], $userPath[1], $userPath[2], $userPath[3], $lineWidth, 0);
        cbgu_FloatArray_clear($this.$path2);
        return;
    }
    $wasCaching = ses_BatchManager_startCaching($this.$batchManager);
    if ($joinType !== ses_JoinType_NONE) {
        var$8 = $this.$path2;
        ses_PathDrawer_drawPathWithJoin($this, var$8.$items0, var$8.$size2, $lineWidth, $open, $joinType !== ses_JoinType_POINTY ? 0 : 1);
    } else {
        $joinType = $this.$path2;
        $userPath = $joinType.$items0;
        $i = $joinType.$size2;
        $end = !$open ? $i : $i - 2 | 0;
        $open = 0;
        while ($open < $end) {
            var$11 = $userPath.data;
            $joinType = $this.$drawer.$lineDrawer;
            var$14 = var$11[$open];
            var$15 = var$11[$open + 1 | 0];
            var$16 = $open + 2 | 0;
            ses_LineDrawer_line($joinType, var$14, var$15, var$11[var$16 % $i | 0], var$11[($open + 3 | 0) % $i | 0], $lineWidth, 0);
            $open = var$16;
        }
    }
    if (!$wasCaching)
        ses_BatchManager_endCaching($this.$batchManager);
    cbgu_FloatArray_clear($this.$path2);
},
ses_PathDrawer_drawPathWithJoin = ($this, $path, $size, $lineWidth, $open, $pointyJoin) => {
    let $halfLineWidth, var$7, $c, $i, var$10, var$11, var$12, var$13, $i_0, $x3, $y3, $x4, $y4;
    $halfLineWidth = 0.5 * $lineWidth;
    var$7 = $this.$batchManager;
    $c = var$7.$floatBits;
    ses_BatchManager_ensureSpaceForQuad(var$7);
    $i = 2;
    var$10 = $size - 2 | 0;
    var$11 = $this;
    var$12 = $size - 1 | 0;
    while ($i < var$10) {
        var$13 = $path.data;
        cbgm_Vector2_set(ses_DrawerTemplate_A, var$13[$i - 2 | 0], var$13[$i - 1 | 0]);
        cbgm_Vector2_set(ses_DrawerTemplate_B, var$13[$i], var$13[$i + 1 | 0]);
        var$7 = ses_DrawerTemplate_C;
        $i_0 = $i + 2 | 0;
        cbgm_Vector2_set(var$7, var$13[$i_0], var$13[$i + 3 | 0]);
        if ($pointyJoin)
            ses_Joiner_preparePointyJoin(ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
        else
            ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth, 0);
        ses_DrawerTemplate_vert3(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_vert4(var$11, ses_DrawerTemplate_E);
        if ($i == 2) {
            if ($open) {
                ses_Joiner_prepareFlatEndpoint(var$13[2], var$13[3], var$13[0], var$13[1], ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
                ses_DrawerTemplate_vert1(var$11, ses_DrawerTemplate_E);
                ses_DrawerTemplate_vert2(var$11, ses_DrawerTemplate_D);
            } else {
                cbgm_Vector2_set(ses_DrawerTemplate_vec1, var$13[var$10], var$13[var$12]);
                if ($pointyJoin)
                    ses_Joiner_preparePointyJoin(ses_DrawerTemplate_vec1, ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_PathDrawer_D0, ses_PathDrawer_E0, $halfLineWidth);
                else
                    ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_vec1, ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_PathDrawer_D0, ses_PathDrawer_E0, $halfLineWidth, 1);
                ses_DrawerTemplate_vert1(var$11, ses_PathDrawer_E0);
                ses_DrawerTemplate_vert2(var$11, ses_PathDrawer_D0);
            }
        }
        if (!$pointyJoin) {
            ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth, 1);
            var$7 = ses_DrawerTemplate_D;
            $x3 = var$7.$x;
            $y3 = var$7.$y;
            var$7 = ses_DrawerTemplate_E;
            $x4 = var$7.$x;
            $y4 = var$7.$y;
        } else {
            $x3 = ses_BatchManager_x3(var$11.$batchManager);
            $y3 = ses_BatchManager_y3(var$11.$batchManager);
            $x4 = ses_BatchManager_x40(var$11.$batchManager);
            $y4 = ses_BatchManager_y40(var$11.$batchManager);
        }
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
        if (!$pointyJoin)
            ses_DrawerTemplate_drawSmoothJoinFill(var$11, ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
        ses_BatchManager_ensureSpaceForQuad($this.$batchManager);
        ses_DrawerTemplate_vert10(var$11, $x4, $y4);
        ses_DrawerTemplate_vert20(var$11, $x3, $y3);
        $i = $i_0;
    }
    if ($open) {
        ses_Joiner_prepareFlatEndpoint0(ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
        ses_DrawerTemplate_vert3(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_vert4(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
    } else if ($pointyJoin) {
        $path = $path.data;
        cbgm_Vector2_set(ses_DrawerTemplate_A, $path[0], $path[1]);
        ses_Joiner_preparePointyJoin(ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_A, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
        ses_DrawerTemplate_vert3(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_vert4(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
        ses_BatchManager_ensureSpaceForQuad($this.$batchManager);
        ses_DrawerTemplate_vert1(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_vert2(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_vert3(var$11, ses_PathDrawer_E0);
        ses_DrawerTemplate_vert4(var$11, ses_PathDrawer_D0);
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
    } else {
        $path = $path.data;
        cbgm_Vector2_set0(ses_DrawerTemplate_A, ses_DrawerTemplate_B);
        cbgm_Vector2_set0(ses_DrawerTemplate_B, ses_DrawerTemplate_C);
        cbgm_Vector2_set(ses_DrawerTemplate_C, $path[0], $path[1]);
        ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth, 0);
        ses_DrawerTemplate_vert3(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_vert4(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
        ses_DrawerTemplate_drawSmoothJoinFill(var$11, ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
        ses_BatchManager_ensureSpaceForQuad($this.$batchManager);
        ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_A, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth, 1);
        ses_DrawerTemplate_vert3(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_vert4(var$11, ses_DrawerTemplate_D);
        cbgm_Vector2_set(ses_DrawerTemplate_A, $path[2], $path[3]);
        ses_Joiner_prepareSmoothJoin(ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_A, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth, 0);
        ses_DrawerTemplate_vert1(var$11, ses_DrawerTemplate_D);
        ses_DrawerTemplate_vert2(var$11, ses_DrawerTemplate_E);
        ses_DrawerTemplate_color(var$11, $c, $c, $c, $c);
        $this.$batchManager.$pushQuad();
        ses_DrawerTemplate_drawSmoothJoinFill(var$11, ses_DrawerTemplate_B, ses_DrawerTemplate_C, ses_DrawerTemplate_A, ses_DrawerTemplate_D, ses_DrawerTemplate_E, $halfLineWidth);
    }
},
ses_PathDrawer__clinit_ = () => {
    ses_PathDrawer_D0 = new cbgm_Vector2;
    ses_PathDrawer_E0 = new cbgm_Vector2;
},
ses_PolygonDrawer = $rt_classWithoutFields(ses_DrawerTemplate),
ses_PolygonDrawer_centre = null,
ses_PolygonDrawer_radius = null,
ses_PolygonDrawer__clinit_ = () => {
    ses_PolygonDrawer_centre = new cbgm_Vector2;
    ses_PolygonDrawer_radius = new cbgm_Vector2;
};
function cbggg_BitmapFont$BitmapFontData() {
    let a = this; jl_Object.call(a);
    a.$name9 = null;
    a.$imagePaths = null;
    a.$fontFile = null;
    a.$flipped = 0;
    a.$padTop = 0.0;
    a.$padRight = 0.0;
    a.$padBottom = 0.0;
    a.$padLeft = 0.0;
    a.$lineHeight = 0.0;
    a.$capHeight = 0.0;
    a.$ascent = 0.0;
    a.$descent = 0.0;
    a.$down = 0.0;
    a.$blankLineScale = 0.0;
    a.$scaleX = 0.0;
    a.$scaleY0 = 0.0;
    a.$markupEnabled = 0;
    a.$glyphs0 = null;
    a.$missingGlyph = null;
    a.$spaceXadvance = 0.0;
    a.$xHeight = 0.0;
    a.$breakChars = null;
    a.$xChars = null;
    a.$capChars = null;
}
let cbggg_BitmapFont$BitmapFontData__init_ = $this => {
    $this.$capHeight = 1.0;
    $this.$blankLineScale = 1.0;
    $this.$scaleX = 1.0;
    $this.$scaleY0 = 1.0;
    $this.$glyphs0 = $rt_createArray($rt_arraycls(cbggg_BitmapFont$Glyph), 128);
    $this.$xHeight = 1.0;
    $this.$xChars = $rt_createCharArrayFromData([120, 101, 97, 111, 110, 115, 114, 99, 117, 109, 118, 119, 122]);
    $this.$capChars = $rt_createCharArrayFromData([77, 78, 66, 68, 67, 69, 70, 75, 65, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]);
},
cbggg_BitmapFont$BitmapFontData__init_2 = () => {
    let var_0 = new cbggg_BitmapFont$BitmapFontData();
    cbggg_BitmapFont$BitmapFontData__init_(var_0);
    return var_0;
},
cbggg_BitmapFont$BitmapFontData__init_1 = ($this, $fontFile, $flip) => {
    $this.$capHeight = 1.0;
    $this.$blankLineScale = 1.0;
    $this.$scaleX = 1.0;
    $this.$scaleY0 = 1.0;
    $this.$glyphs0 = $rt_createArray($rt_arraycls(cbggg_BitmapFont$Glyph), 128);
    $this.$xHeight = 1.0;
    $this.$xChars = $rt_createCharArrayFromData([120, 101, 97, 111, 110, 115, 114, 99, 117, 109, 118, 119, 122]);
    $this.$capChars = $rt_createCharArrayFromData([77, 78, 66, 68, 67, 69, 70, 75, 65, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]);
    $this.$fontFile = $fontFile;
    $this.$flipped = $flip;
    cbggg_BitmapFont$BitmapFontData_load($this, $fontFile, $flip);
},
cbggg_BitmapFont$BitmapFontData__init_0 = (var_0, var_1) => {
    let var_2 = new cbggg_BitmapFont$BitmapFontData();
    cbggg_BitmapFont$BitmapFontData__init_1(var_2, var_0, var_1);
    return var_2;
},
cbggg_BitmapFont$BitmapFontData_load = ($this, $fontFile, $flip) => {
    let $tokens, $reader, $line, $padding, $padY, $p, $baseLine, $pageCount, $ch, $matcher, $id, $ex, $fileName, $glyph, $first, $second, $amount, $hasMetricsOverride, $overrideAscent, $overrideDescent, $overrideDown, $overrideCapHeight, $overrideLineHeight, $overrideSpaceXAdvance, $overrideXHeight, $spaceGlyph, $xadvanceGlyph, var$30, $xGlyph, $capGlyph, $page, $common, $$je;
    if ($this.$imagePaths !== null)
        $rt_throw(jl_IllegalStateException__init_($rt_s(611)));
    $tokens = $fontFile;
    $this.$name9 = cgxgbt_TeaFileHandle_nameWithoutExtension($tokens);
    $reader = ji_BufferedReader__init_(ji_InputStreamReader__init_1(cgxgbt_TeaFileHandle_read($tokens)), 512);
    a: {
        b: {
            try {
                $line = ji_BufferedReader_readLine($reader);
                if ($line === null)
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(612)));
                $line = jl_String_substring0($line, jl_String_indexOf2($line, $rt_s(613)) + 8 | 0);
                $padding = (jl_String_split0(jl_String_substring($line, 0, jl_String_indexOf0($line, 32)), $rt_s(614), 4)).data;
                if ($padding.length != 4)
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(615)));
                $this.$padTop = jl_Integer_parseInt($padding[0]);
                $this.$padRight = jl_Integer_parseInt($padding[1]);
                $this.$padBottom = jl_Integer_parseInt($padding[2]);
                $this.$padLeft = jl_Integer_parseInt($padding[3]);
                $padY = $this.$padTop + $this.$padBottom;
                $line = ji_BufferedReader_readLine($reader);
                if ($line === null)
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(616)));
                $padding = (jl_String_split0($line, $rt_s(398), 9)).data;
                $p = $padding.length;
                if ($p < 3)
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(617)));
                if (!jl_String_startsWith($padding[1], $rt_s(618)))
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(619)));
                $this.$lineHeight = jl_Integer_parseInt(jl_String_substring0($padding[1], 11));
                if (!jl_String_startsWith($padding[2], $rt_s(620)))
                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(621)));
                c: {
                    $baseLine = jl_Integer_parseInt(jl_String_substring0($padding[2], 5));
                    $pageCount = 1;
                    if ($p < 6)
                        $ch = $pageCount;
                    else if ($padding[5] === null)
                        $ch = $pageCount;
                    else if (!jl_String_startsWith($padding[5], $rt_s(622)))
                        $ch = $pageCount;
                    else {
                        try {
                            $ch = jl_Math_max(1, jl_Integer_parseInt(jl_String_substring0($padding[5], 6)));
                            $pageCount = $ch;
                            break c;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_NumberFormatException) {
                            } else {
                                throw $$e;
                            }
                        }
                        $ch = $pageCount;
                    }
                }
                $this.$imagePaths = $rt_createArray(jl_String, $ch);
                $p = 0;
                d: {
                    e: {
                        f: {
                            while (true) {
                                if ($p >= $ch)
                                    break d;
                                $line = ji_BufferedReader_readLine($reader);
                                if ($line === null)
                                    $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(623)));
                                g: {
                                    $matcher = jur_Pattern_matcher(jur_Pattern_compile($rt_s(624)), $line);
                                    if (jur_Matcher_find($matcher)) {
                                        $id = jur_Matcher_group($matcher, 1);
                                        try {
                                            if (jl_Integer_parseInt($id) != $p)
                                                break f;
                                            break g;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_NumberFormatException) {
                                                $ex = $$je;
                                                break e;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                    }
                                }
                                $line = jur_Pattern_matcher(jur_Pattern_compile($rt_s(625)), $line);
                                if (!jur_Matcher_find($line))
                                    break;
                                $fileName = jur_Matcher_group($line, 1);
                                $this.$imagePaths.data[$p] = jl_String_replaceAll(cgxgbt_TeaFileHandle_path(cgxgbt_TeaFileHandle_child(cgxgbt_TeaFileHandle_parent($tokens), $fileName)), $rt_s(626), $rt_s(107));
                                $p = $p + 1 | 0;
                            }
                            $rt_throw(cbgu_GdxRuntimeException__init_($rt_s(627)));
                        }
                        try {
                            $rt_throw(cbgu_GdxRuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(628)), $id))));
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_NumberFormatException) {
                                $ex = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                    }
                    $rt_throw(cbgu_GdxRuntimeException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(629)), $id)), $ex));
                }
                $this.$descent = 0.0;
                h: {
                    while (true) {
                        $line = ji_BufferedReader_readLine($reader);
                        if ($line === null)
                            break;
                        if (jl_String_startsWith($line, $rt_s(630)))
                            break h;
                        if (jl_String_startsWith($line, $rt_s(631)))
                            break h;
                        if (!jl_String_startsWith($line, $rt_s(632)))
                            continue;
                        $glyph = cbggg_BitmapFont$Glyph__init_();
                        $tokens = ju_StringTokenizer__init_($line, $rt_s(633));
                        ju_StringTokenizer_nextToken($tokens);
                        ju_StringTokenizer_nextToken($tokens);
                        $ch = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        if ($ch <= 0)
                            $this.$missingGlyph = $glyph;
                        else {
                            if ($ch > 65535)
                                continue;
                            cbggg_BitmapFont$BitmapFontData_setGlyph($this, $ch, $glyph);
                        }
                        $glyph.$id = $ch;
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$srcX = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$srcY = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$width = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$height = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$xoffset = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        if ($flip)
                            $glyph.$yoffset = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        else
                            $glyph.$yoffset =  -($glyph.$height + jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens)) | 0) | 0;
                        ju_StringTokenizer_nextToken($tokens);
                        $glyph.$xadvance = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        if (ju_StringTokenizer_hasMoreTokens($tokens))
                            ju_StringTokenizer_nextToken($tokens);
                        i: {
                            if (ju_StringTokenizer_hasMoreTokens($tokens))
                                try {
                                    $glyph.$page = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                                    break i;
                                } catch ($$e) {
                                    $$je = $rt_wrapException($$e);
                                    if ($$je instanceof jl_NumberFormatException) {
                                    } else {
                                        throw $$e;
                                    }
                                }
                        }
                        if ($glyph.$width > 0 && $glyph.$height > 0)
                            $this.$descent = jl_Math_min0($baseLine + $glyph.$yoffset, $this.$descent);
                    }
                }
                $this.$descent = $this.$descent + $this.$padBottom;
                j: {
                    while (true) {
                        $line = ji_BufferedReader_readLine($reader);
                        if ($line === null)
                            break;
                        if (!jl_String_startsWith($line, $rt_s(634)))
                            break j;
                        $tokens = ju_StringTokenizer__init_($line, $rt_s(633));
                        ju_StringTokenizer_nextToken($tokens);
                        ju_StringTokenizer_nextToken($tokens);
                        $first = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        ju_StringTokenizer_nextToken($tokens);
                        $second = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        if ($first < 0)
                            continue;
                        if ($first > 65535)
                            continue;
                        if ($second < 0)
                            continue;
                        if ($second > 65535)
                            continue;
                        $glyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, $first & 65535);
                        ju_StringTokenizer_nextToken($tokens);
                        $amount = jl_Integer_parseInt(ju_StringTokenizer_nextToken($tokens));
                        if ($glyph !== null)
                            cbggg_BitmapFont$Glyph_setKerning($glyph, $second, $amount);
                    }
                }
                $hasMetricsOverride = 0;
                $overrideAscent = 0.0;
                $overrideDescent = 0.0;
                $overrideDown = 0.0;
                $overrideCapHeight = 0.0;
                $overrideLineHeight = 0.0;
                $overrideSpaceXAdvance = 0.0;
                $overrideXHeight = 0.0;
                if ($line !== null && jl_String_startsWith($line, $rt_s(631))) {
                    $hasMetricsOverride = 1;
                    $tokens = ju_StringTokenizer__init_($line, $rt_s(633));
                    ju_StringTokenizer_nextToken($tokens);
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideAscent = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideDescent = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideDown = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideCapHeight = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideLineHeight = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideSpaceXAdvance = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                    ju_StringTokenizer_nextToken($tokens);
                    $overrideXHeight = jl_Float_parseFloat(ju_StringTokenizer_nextToken($tokens));
                }
                $spaceGlyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, 32);
                if ($spaceGlyph === null) {
                    $spaceGlyph = cbggg_BitmapFont$Glyph__init_();
                    $spaceGlyph.$id = 32;
                    $xadvanceGlyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, 108);
                    if ($xadvanceGlyph === null)
                        $xadvanceGlyph = cbggg_BitmapFont$BitmapFontData_getFirstGlyph($this);
                    $spaceGlyph.$xadvance = $xadvanceGlyph.$xadvance;
                    cbggg_BitmapFont$BitmapFontData_setGlyph($this, 32, $spaceGlyph);
                }
                if (!$spaceGlyph.$width) {
                    var$30 = $this.$padLeft;
                    $spaceGlyph.$width = var$30 + $spaceGlyph.$xadvance + $this.$padRight | 0;
                    $spaceGlyph.$xoffset =  -var$30 | 0;
                }
                $this.$spaceXadvance = $spaceGlyph.$xadvance;
                $xGlyph = null;
                $padding = $this.$xChars.data;
                $ch = $padding.length;
                $p = 0;
                k: {
                    while ($p < $ch) {
                        $xGlyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, $padding[$p]);
                        if ($xGlyph !== null)
                            break k;
                        $p = $p + 1 | 0;
                    }
                }
                if ($xGlyph === null)
                    $xGlyph = cbggg_BitmapFont$BitmapFontData_getFirstGlyph($this);
                $this.$xHeight = $xGlyph.$height - $padY;
                $capGlyph = null;
                $padding = $this.$capChars.data;
                $ch = $padding.length;
                $p = 0;
                l: {
                    while ($p < $ch) {
                        $capGlyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, $padding[$p]);
                        if ($capGlyph !== null)
                            break l;
                        $p = $p + 1 | 0;
                    }
                }
                if ($capGlyph !== null)
                    $this.$capHeight = $capGlyph.$height;
                else {
                    $padding = $this.$glyphs0.data;
                    $pageCount = $padding.length;
                    $ch = 0;
                    while ($ch < $pageCount) {
                        m: {
                            $page = $padding[$ch];
                            if ($page !== null) {
                                $common = $page.data;
                                $p = $common.length;
                                $first = 0;
                                while (true) {
                                    if ($first >= $p)
                                        break m;
                                    $glyph = $common[$first];
                                    if ($glyph !== null) {
                                        $second = $glyph.$height;
                                        if ($second && $glyph.$width)
                                            $this.$capHeight = jl_Math_max0($this.$capHeight, $second);
                                    }
                                    $first = $first + 1 | 0;
                                }
                            }
                        }
                        $ch = $ch + 1 | 0;
                    }
                }
                $padY = $this.$capHeight - $padY;
                $this.$capHeight = $padY;
                $baseLine = $baseLine - $padY;
                $this.$ascent = $baseLine;
                $padY =  -$this.$lineHeight;
                $this.$down = $padY;
                if ($flip) {
                    $this.$ascent =  -$baseLine;
                    $this.$down =  -$padY;
                }
                if ($hasMetricsOverride) {
                    $this.$ascent = $overrideAscent;
                    $this.$descent = $overrideDescent;
                    $this.$down = $overrideDown;
                    $this.$capHeight = $overrideCapHeight;
                    $this.$lineHeight = $overrideLineHeight;
                    $this.$spaceXadvance = $overrideSpaceXAdvance;
                    $this.$xHeight = $overrideXHeight;
                }
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $ex = $$je;
                    break b;
                } else{
                    $fontFile = $$je;
                    break a;
                }
            }
            cbgu_StreamUtils_closeQuietly($reader);
            return;
        }
        try {
            $rt_throw(cbgu_GdxRuntimeException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(635)), $fontFile)), $ex));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $fontFile = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly($reader);
    $rt_throw($fontFile);
},
cbggg_BitmapFont$BitmapFontData_setGlyphRegion = ($this, $glyph, $region) => {
    let $texture, $invTexWidth, $invTexHeight, $offsetX, $offsetY, $u, $v, $regionWidth, $regionHeight, $atlasRegion, var$13, $x, var$15, $x2, $y, var$18, $y2, $amount;
    $texture = $region.$texture;
    $invTexWidth = 1.0 / cbgg_Texture_getWidth($texture);
    $invTexHeight = 1.0 / cbgg_Texture_getHeight($texture);
    $offsetX = 0.0;
    $offsetY = 0.0;
    $u = $region.$u;
    $v = $region.$v;
    $regionWidth = $region.$regionWidth;
    $regionHeight = $region.$regionHeight;
    if ($region instanceof cbggg_TextureAtlas$AtlasRegion) {
        $atlasRegion = $region;
        $offsetX = $atlasRegion.$offsetX0;
        $offsetY = ($atlasRegion.$originalHeight0 - $atlasRegion.$packedHeight | 0) - $atlasRegion.$offsetY;
    }
    var$13 = $glyph.$srcX;
    $x = var$13;
    var$15 = $glyph.$width;
    $x2 = var$13 + var$15 | 0;
    var$13 = $glyph.$srcY;
    $y = var$13;
    var$18 = $glyph.$height;
    $y2 = var$13 + var$18 | 0;
    if ($offsetX <= 0.0)
        $regionWidth = $x2;
    else {
        $x = $x - $offsetX;
        if ($x < 0.0) {
            $glyph.$width = var$15 + $x | 0;
            $glyph.$xoffset = $glyph.$xoffset - $x | 0;
            $x = 0.0;
        }
        $offsetX = $x2 - $offsetX;
        if ($offsetX <= $regionWidth)
            $regionWidth = $offsetX;
        else
            $glyph.$width = $glyph.$width - ($offsetX - $regionWidth) | 0;
    }
    if ($offsetY <= 0.0)
        $regionHeight = $y2;
    else {
        $y = $y - $offsetY;
        if ($y < 0.0) {
            var$13 = var$18 + $y | 0;
            $glyph.$height = var$13;
            if (var$13 < 0)
                $glyph.$height = 0;
            $y = 0.0;
        }
        $offsetX = $y2 - $offsetY;
        if ($offsetX <= $regionHeight)
            $regionHeight = $offsetX;
        else {
            $amount = $offsetX - $regionHeight;
            $glyph.$height = $glyph.$height - $amount | 0;
            $glyph.$yoffset = $glyph.$yoffset + $amount | 0;
        }
    }
    $glyph.$u0 = $u + $x * $invTexWidth;
    $glyph.$u20 = $u + $regionWidth * $invTexWidth;
    if (!$this.$flipped) {
        $glyph.$v20 = $v + $y * $invTexHeight;
        $glyph.$v0 = $v + $regionHeight * $invTexHeight;
    } else {
        $glyph.$v0 = $v + $y * $invTexHeight;
        $glyph.$v20 = $v + $regionHeight * $invTexHeight;
    }
},
cbggg_BitmapFont$BitmapFontData_setGlyph = ($this, $ch, $glyph) => {
    let var$3, var$4, $page;
    var$3 = $this.$glyphs0.data;
    var$4 = $ch / 512 | 0;
    $page = var$3[var$4];
    if ($page === null) {
        $page = $rt_createArray(cbggg_BitmapFont$Glyph, 512);
        var$3[var$4] = $page;
    }
    $page.data[$ch & 511] = $glyph;
},
cbggg_BitmapFont$BitmapFontData_getFirstGlyph = $this => {
    let var$1, var$2, var$3, var$4, $page, var$6, var$7, $glyph;
    var$1 = $this.$glyphs0.data;
    var$2 = var$1.length;
    var$3 = 0;
    a: while (true) {
        if (var$3 >= var$2) {
            var$4 = new cbgu_GdxRuntimeException;
            jl_Exception__init_(var$4, $rt_s(636));
            $rt_throw(var$4);
        }
        b: {
            $page = var$1[var$3];
            if ($page !== null) {
                $page = $page.data;
                var$6 = $page.length;
                var$7 = 0;
                while (true) {
                    if (var$7 >= var$6)
                        break b;
                    $glyph = $page[var$7];
                    if ($glyph !== null && $glyph.$height && $glyph.$width)
                        break a;
                    var$7 = var$7 + 1 | 0;
                }
            }
        }
        var$3 = var$3 + 1 | 0;
    }
    return $glyph;
},
cbggg_BitmapFont$BitmapFontData_getGlyph = ($this, $ch) => {
    let $page;
    $page = $this.$glyphs0.data[$ch / 512 | 0];
    if ($page === null)
        return null;
    return $page.data[$ch & 511];
},
cbggg_BitmapFont$BitmapFontData_getGlyphs = ($this, $run, $str, $start, $end, $lastGlyph) => {
    let $max, $markupEnabled, $scaleX, $glyphs, $xAdvances, $ch, var$12, $glyph, $lastGlyphWidth, var$15;
    $max = $end - $start | 0;
    if (!$max)
        return;
    $markupEnabled = $this.$markupEnabled;
    $scaleX = $this.$scaleX;
    $glyphs = $run.$glyphs;
    $xAdvances = $run.$xAdvances;
    cbgu_Array_ensureCapacity($glyphs, $max);
    $run = $run.$xAdvances;
    $ch = $max + 1 | 0;
    if ($ch < 0) {
        $run = new jl_IllegalArgumentException;
        $str = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($str);
        jl_AbstractStringBuilder_append0($str, $rt_s(23));
        jl_AbstractStringBuilder_append1($str, $ch);
        jl_Exception__init_($run, jl_AbstractStringBuilder_toString($str));
        $rt_throw($run);
    }
    var$12 = $run.$size2 + $ch | 0;
    if (var$12 > $run.$items0.data.length)
        cbgu_FloatArray_resize($run, jl_Math_max(jl_Math_max(8, var$12), $run.$size2 * 1.75 | 0));
    while (true) {
        a: {
            var$12 = $start + 1 | 0;
            $ch = $str.$charAt($start);
            if ($ch != 13) {
                $glyph = cbggg_BitmapFont$BitmapFontData_getGlyph($this, $ch);
                if ($glyph === null) {
                    $glyph = $this.$missingGlyph;
                    if ($glyph === null)
                        break a;
                }
                cbgu_Array_add($glyphs, $glyph);
                if ($lastGlyph === null)
                    $lastGlyphWidth = $glyph.$fixedWidth ? 0.0 : ( -$glyph.$xoffset | 0) * $scaleX - $this.$padLeft;
                else {
                    b: {
                        $max = $lastGlyph.$xadvance;
                        var$15 = $lastGlyph.$kerning;
                        if (var$15 !== null) {
                            var$15 = var$15.data[$ch >>> 9 | 0];
                            if (var$15 !== null) {
                                $start = var$15.data[$ch & 511];
                                break b;
                            }
                        }
                        $start = 0;
                    }
                    $lastGlyphWidth = ($max + $start | 0) * $scaleX;
                }
                cbgu_FloatArray_add($xAdvances, $lastGlyphWidth);
                if (!$markupEnabled)
                    $lastGlyph = $glyph;
                else if ($ch != 91)
                    $lastGlyph = $glyph;
                else if (var$12 >= $end)
                    $lastGlyph = $glyph;
                else if ($str.$charAt(var$12) != 91)
                    $lastGlyph = $glyph;
                else {
                    var$12 = var$12 + 1 | 0;
                    $lastGlyph = $glyph;
                }
            }
        }
        if (var$12 >= $end)
            break;
        $start = var$12;
    }
    if ($lastGlyph !== null)
        cbgu_FloatArray_add($xAdvances, $lastGlyph.$fixedWidth ? $lastGlyph.$xadvance * $scaleX : ($lastGlyph.$width + $lastGlyph.$xoffset | 0) * $scaleX - $this.$padRight);
},
cbggg_BitmapFont$BitmapFontData_getWrapIndex = ($this, $glyphs, $start) => {
    let $i, $glyphsItems, $ch;
    $i = $start - 1 | 0;
    $glyphsItems = $glyphs.$items.data;
    $ch = $glyphsItems[$i].$id & 65535;
    if (cbggg_BitmapFont$BitmapFontData_isWhitespace($this, $ch))
        return $i;
    if (cbggg_BitmapFont$BitmapFontData_isBreakChar($this, $ch))
        $i = $i + (-1) | 0;
    a: {
        while ($i > 0) {
            $start = $glyphsItems[$i].$id & 65535;
            if (cbggg_BitmapFont$BitmapFontData_isWhitespace($this, $start))
                break a;
            if (cbggg_BitmapFont$BitmapFontData_isBreakChar($this, $start))
                break a;
            $i = $i + (-1) | 0;
        }
        return 0;
    }
    return $i + 1 | 0;
},
cbggg_BitmapFont$BitmapFontData_isBreakChar = ($this, $c) => {
    let var$2, var$3, var$4;
    var$2 = $this.$breakChars;
    if (var$2 === null)
        return 0;
    var$2 = var$2.data;
    var$3 = var$2.length;
    var$4 = 0;
    while (var$4 < var$3) {
        if ($c == var$2[var$4])
            return 1;
        var$4 = var$4 + 1 | 0;
    }
    return 0;
},
cbggg_BitmapFont$BitmapFontData_isWhitespace = ($this, $c) => {
    switch ($c) {
        case 9:
        case 10:
        case 13:
        case 32:
            break;
        default:
            return 0;
    }
    return 1;
},
psm_Menu$RepeatControl = $rt_classWithoutFields(pss_Control),
psm_Menu$RepeatControl_timeStamps = null,
psm_Menu$RepeatControl__init_ = $this => {
    pss_Control__init_($this);
},
psm_Menu$RepeatControl__init_0 = () => {
    let var_0 = new psm_Menu$RepeatControl();
    psm_Menu$RepeatControl__init_(var_0);
    return var_0;
},
psm_Menu$RepeatControl_process = $this => {
    let var$1, var$2;
    jl_Object_monitorEnterSync($this);
    try {
        pss_Control_process($this);
        if (pss_Control_axisX != 1)
            psm_Menu$RepeatControl_timeStamps.data[3] = 0.0;
        else {
            psm_Menu_$callClinit();
            pss_Section_$callClinit();
            var$1 = pss_Section_elapsedTime;
            var$2 = psm_Menu$RepeatControl_timeStamps.data;
            if (var$1 - var$2[3] <= 0.25)
                pss_Control_axisX = 0;
            else
                var$2[3] = var$1;
        }
        if (pss_Control_axisX != (-1))
            psm_Menu$RepeatControl_timeStamps.data[2] = 0.0;
        else {
            psm_Menu_$callClinit();
            pss_Section_$callClinit();
            var$1 = pss_Section_elapsedTime;
            var$2 = psm_Menu$RepeatControl_timeStamps.data;
            if (var$1 - var$2[2] <= 0.25)
                pss_Control_axisX = 0;
            else
                var$2[2] = var$1;
        }
        if (pss_Control_axisY != 1)
            psm_Menu$RepeatControl_timeStamps.data[1] = 0.0;
        else {
            psm_Menu_$callClinit();
            pss_Section_$callClinit();
            var$1 = pss_Section_elapsedTime;
            var$2 = psm_Menu$RepeatControl_timeStamps.data;
            if (var$1 - var$2[1] <= 0.25)
                pss_Control_axisY = 0;
            else
                var$2[1] = var$1;
        }
        if (pss_Control_axisY != (-1))
            psm_Menu$RepeatControl_timeStamps.data[0] = 0.0;
        else {
            psm_Menu_$callClinit();
            pss_Section_$callClinit();
            var$1 = pss_Section_elapsedTime;
            var$2 = psm_Menu$RepeatControl_timeStamps.data;
            if (var$1 - var$2[0] <= 0.25)
                pss_Control_axisY = 0;
            else
                var$2[0] = var$1;
        }
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
psm_Menu$RepeatControl__clinit_ = () => {
    psm_Menu$RepeatControl_timeStamps = $rt_createFloatArray(4);
};
function psm_EpisodesMenu() {
    let a = this; psm_Menu.call(a);
    a.$pagesBox = null;
    a.$backButton0 = null;
    a.$startButton = null;
    a.$backgroundBox0 = null;
    a.$backgroundPosition0 = null;
    a.$pagesPosition = null;
    a.$backPosition0 = null;
    a.$startPosition = null;
    a.$page0 = 0;
}
let psm_EpisodesMenu__init_ = $this => {
    let $pageTexts, $pages, var$3, $index, var$5, var$6;
    psm_Menu__init_($this);
    $pageTexts = cbgu_I18NBundle_createBundle(cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(637)));
    $pages = $rt_createArray(jl_String, jl_Integer_parseInt(cbgu_I18NBundle_format($pageTexts, $rt_s(638), $rt_createArray(jl_Object, 0))));
    var$3 = $pages.data;
    $index = 0;
    var$5 = var$3.length;
    while ($index != var$5) {
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, $rt_s(639));
        jl_AbstractStringBuilder_append1(var$6, $index);
        var$3[$index] = cbgu_I18NBundle_format($pageTexts, jl_AbstractStringBuilder_toString(var$6), $rt_createArray(jl_Object, 0));
        $index = $index + 1 | 0;
    }
    $this.$backgroundBox0 = psm_Menu$Box__init_(2400.0, 2200.0, 40.0, 20.0, 40.0, 20.0);
    $this.$pagesBox = psm_Menu$PagesBox__init_($pages, 2200.0, 1800.0, 20.0, 10.0, 10.0, 10.0, 100.0, 240.0, 50.0, 60.0);
    $this.$backButton0 = psm_Menu$TextButton__init_($rt_s(640), 1050.0, 175.0, 20.0, 10.0, 20.0, 10.0);
    $this.$startButton = psm_Menu$TextButton__init_($rt_s(641), 1050.0, 175.0, 20.0, 10.0, 20.0, 10.0);
    $this.$backgroundPosition0 = cbgm_Vector2__init_(1100.0, (2400.0 - $this.$backgroundBox0.$height2) / 2.0);
    $this.$pagesPosition = cbgm_Vector2__init_(1200.0, 425.0);
    $this.$backPosition0 = cbgm_Vector2__init_(1200.0, 175.0);
    $this.$startPosition = cbgm_Vector2__init_(2350.0, 175.0);
    $this.$selectedBox = $this.$backButton0;
},
psm_EpisodesMenu__init_0 = () => {
    let var_0 = new psm_EpisodesMenu();
    psm_EpisodesMenu__init_(var_0);
    return var_0;
},
psm_EpisodesMenu_update = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$pagesBox;
    var$2 = $this;
    if (psm_Menu_isClicked(var$2, var$1, 1)) {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox;
        if (var$1 !== var$2)
            $this.$selectedBox = var$2;
        else
            psm_EpisodesMenu_turnPage($this, 1);
    } else if (psm_Menu_isClicked(var$2, $this.$pagesBox, 0)) {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox;
        if (var$1 !== var$2)
            $this.$selectedBox = var$2;
        else
            psm_EpisodesMenu_turnPage($this, 0);
    } else if (psm_Menu_isAxisPushed(var$2, $this.$pagesBox) == 1)
        psm_EpisodesMenu_turnPage($this, 1);
    else if (psm_Menu_isAxisPushed(var$2, $this.$pagesBox) == (-1))
        psm_EpisodesMenu_turnPage($this, 0);
    else if (!psm_Menu_isPushed(var$2, $this.$startButton, 1) && !psm_Menu_isClicked(var$2, $this.$startButton, 1)) {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox;
        if (var$1 === var$2) {
            var$3 = $rt_compare(pss_Control_axisY, (-1));
            if (!var$3)
                $this.$selectedBox = $this.$startButton;
            else if (!var$3)
                $this.$selectedBox = $this.$backButton0;
        } else {
            var$4 = $this.$backButton0;
            if (var$1 === var$4) {
                if (pss_Control_axisY == 1)
                    $this.$selectedBox = var$2;
                else if (pss_Control_axisX == 1)
                    $this.$selectedBox = $this.$startButton;
            } else if (var$1 === $this.$startButton) {
                if (pss_Control_axisY == 1)
                    $this.$selectedBox = var$2;
                else if (pss_Control_axisX == (-1))
                    $this.$selectedBox = var$4;
            }
        }
    } else {
        $this.$selectedBox = $this.$startButton;
        pss_Section_$callClinit();
        pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
        pss_Section_setSection(pse_Episode_s01e01);
        pss_Section_setControl(pss_Section_defaultControl);
    }
},
psm_EpisodesMenu_drawContent = $this => {
    let var$1, var$2, var$3, var$4;
    psm_Menu$Box_draw($this.$backgroundBox0, $this.$backgroundPosition0);
    var$1 = $this.$pagesBox;
    var$2 = $this.$pagesPosition;
    var$3 = $this.$page0;
    var$4 = $this;
    psm_Menu$PagesBox_draw(var$1, var$2, var$3, !psm_Menu_isSelected(var$4, var$1) && !psm_Menu_isPointed(var$4, $this.$pagesBox) ? 0 : 1);
    var$1 = $this.$backButton0;
    psm_Menu$TextButton_draw(var$1, $this.$backPosition0, !psm_Menu_isSelected(var$4, var$1) && !psm_Menu_isPointed(var$4, $this.$backButton0) ? 0 : 1);
    var$1 = $this.$startButton;
    psm_Menu$TextButton_draw(var$1, $this.$startPosition, !psm_Menu_isSelected(var$4, var$1) && !psm_Menu_isPointed(var$4, $this.$startButton) ? 0 : 1);
},
psm_EpisodesMenu_turnPage = ($this, $forward) => {
    a: {
        if (!($forward && $this.$page0 == ($this.$pagesBox.$pages0.data.length - 1 | 0))) {
            if ($forward)
                break a;
            if ($this.$page0)
                break a;
        }
        return;
    }
    $this.$page0 = $this.$page0 + (!$forward ? (-1) : 1) | 0;
    pss_Section_$callClinit();
    pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
};
function psm_GuideMenu() {
    let a = this; psm_Menu.call(a);
    a.$pagesBox0 = null;
    a.$backButton = null;
    a.$backgroundBox1 = null;
    a.$backgroundPosition1 = null;
    a.$pagesPosition0 = null;
    a.$backPosition = null;
    a.$page1 = 0;
}
let psm_GuideMenu__init_ = $this => {
    let $pageTexts, $pages, var$3, $index, var$5, var$6;
    psm_Menu__init_($this);
    $pageTexts = cbgu_I18NBundle_createBundle(cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(642)));
    $pages = $rt_createArray(jl_String, jl_Integer_parseInt(cbgu_I18NBundle_format($pageTexts, $rt_s(638), $rt_createArray(jl_Object, 0))));
    var$3 = $pages.data;
    $index = 0;
    var$5 = var$3.length;
    while ($index != var$5) {
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, $rt_s(639));
        jl_AbstractStringBuilder_append1(var$6, $index);
        var$3[$index] = cbgu_I18NBundle_format($pageTexts, jl_AbstractStringBuilder_toString(var$6), $rt_createArray(jl_Object, 0));
        $index = $index + 1 | 0;
    }
    $this.$backgroundBox1 = psm_Menu$Box__init_(2400.0, 2200.0, 40.0, 20.0, 40.0, 20.0);
    $this.$pagesBox0 = psm_Menu$PagesBox__init_($pages, 2200.0, 1800.0, 20.0, 10.0, 10.0, 10.0, 100.0, 240.0, 50.0, 60.0);
    $this.$backButton = psm_Menu$TextButton__init_($rt_s(640), 2200.0, 175.0, 20.0, 10.0, 20.0, 10.0);
    $this.$backgroundPosition1 = cbgm_Vector2__init_(1100.0, (2400.0 - $this.$backgroundBox1.$height2) / 2.0);
    $this.$pagesPosition0 = cbgm_Vector2__init_(1200.0, 425.0);
    $this.$backPosition = cbgm_Vector2__init_(1200.0, 175.0);
    $this.$selectedBox = $this.$backButton;
},
psm_GuideMenu__init_0 = () => {
    let var_0 = new psm_GuideMenu();
    psm_GuideMenu__init_(var_0);
    return var_0;
},
psm_GuideMenu_update = $this => {
    let var$1, var$2;
    var$1 = $this.$pagesBox0;
    var$2 = $this;
    if (psm_Menu_isClicked(var$2, var$1, 1)) {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox0;
        if (var$1 !== var$2)
            $this.$selectedBox = var$2;
        else
            psm_GuideMenu_turnPage($this, 1);
    } else if (psm_Menu_isClicked(var$2, $this.$pagesBox0, 0)) {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox0;
        if (var$1 !== var$2)
            $this.$selectedBox = var$2;
        else
            psm_GuideMenu_turnPage($this, 0);
    } else if (psm_Menu_isAxisPushed(var$2, $this.$pagesBox0) == 1)
        psm_GuideMenu_turnPage($this, 1);
    else if (psm_Menu_isAxisPushed(var$2, $this.$pagesBox0) == (-1))
        psm_GuideMenu_turnPage($this, 0);
    else {
        var$1 = $this.$selectedBox;
        var$2 = $this.$pagesBox0;
        if (var$1 === var$2) {
            if (pss_Control_axisY == (-1))
                $this.$selectedBox = $this.$backButton;
        } else if (var$1 === $this.$backButton && pss_Control_axisY == 1)
            $this.$selectedBox = var$2;
    }
},
psm_GuideMenu_drawContent = $this => {
    let var$1, var$2, var$3, var$4;
    psm_Menu$Box_draw($this.$backgroundBox1, $this.$backgroundPosition1);
    var$1 = $this.$pagesBox0;
    var$2 = $this.$pagesPosition0;
    var$3 = $this.$page1;
    var$4 = $this;
    psm_Menu$PagesBox_draw(var$1, var$2, var$3, !psm_Menu_isSelected(var$4, var$1) && !psm_Menu_isPointed(var$4, $this.$pagesBox0) ? 0 : 1);
    var$1 = $this.$backButton;
    psm_Menu$TextButton_draw(var$1, $this.$backPosition, !psm_Menu_isSelected(var$4, var$1) && !psm_Menu_isPointed(var$4, $this.$backButton) ? 0 : 1);
},
psm_GuideMenu_turnPage = ($this, $forward) => {
    a: {
        if (!($forward && $this.$page1 == ($this.$pagesBox0.$pages0.data.length - 1 | 0))) {
            if ($forward)
                break a;
            if ($this.$page1)
                break a;
        }
        return;
    }
    $this.$page1 = $this.$page1 + (!$forward ? (-1) : 1) | 0;
    pss_Section_$callClinit();
    pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
};
function psm_SettingsMenu() {
    let a = this; psm_Menu.call(a);
    a.$soundBar = null;
    a.$musicBar = null;
    a.$fontBar = null;
    a.$backButton1 = null;
    a.$backgroundBox = null;
    a.$backgroundPosition = null;
    a.$soundPosition = null;
    a.$musicPosition = null;
    a.$fontPosition = null;
    a.$backPosition1 = null;
}
let psm_SettingsMenu__init_ = $this => {
    let $units;
    psm_Menu__init_($this);
    $this.$backgroundBox = psm_Menu$Box__init_(2000.0, 2000.0, 40.0, 20.0, 40.0, 20.0);
    $units = psm_Menu$BarBox$Units__init_($rt_wrapArray(jl_String, [$rt_s(643), $rt_s(644), $rt_s(645), $rt_s(646), $rt_s(647)]), 180.0, 165.0, 90.0, 15.0, 15.0);
    $this.$soundBar = psm_Menu$BarBox__init_($units, $rt_s(648), 1600.0, 200.0, (-300.0), 40.0, 20.0, 10.0, 20.0, 10.0);
    $this.$musicBar = psm_Menu$BarBox__init_($units, $rt_s(649), 1600.0, 200.0, (-300.0), 40.0, 20.0, 10.0, 20.0, 10.0);
    $this.$fontBar = psm_Menu$BarBox__init_(psm_Menu$BarBox$Units__init_($rt_wrapArray(jl_String, [$rt_s(650), $rt_s(651), $rt_s(652)]), 310.0, 280.0, 90.0, 15.0, 15.0), $rt_s(653), 1600.0, 200.0, (-300.0), 40.0, 20.0, 10.0, 20.0, 10.0);
    $this.$backButton1 = psm_Menu$TextButton__init_($rt_s(654), 1600.0, 200.0, 20.0, 10.0, 20.0, 10.0);
    $this.$backgroundPosition = cbgm_Vector2__init_(1200.0, (2400.0 - $this.$backgroundBox.$height2) / 2.0);
    $this.$soundPosition = cbgm_Vector2__init_(1400.0, 1700.0);
    $this.$musicPosition = cbgm_Vector2__init_(1400.0, 1300.0);
    $this.$fontPosition = cbgm_Vector2__init_(1400.0, 900.0);
    $this.$backPosition1 = cbgm_Vector2__init_(1400.0, 500.0);
    $this.$selectedBox = $this.$backButton1;
},
psm_SettingsMenu__init_0 = () => {
    let var_0 = new psm_SettingsMenu();
    psm_SettingsMenu__init_(var_0);
    return var_0;
},
psm_SettingsMenu_update = $this => {
    let var$1, var$2, var$3, var$4;
    a: {
        var$1 = $this.$soundBar;
        var$2 = $this;
        if (psm_Menu_isClicked(var$2, var$1, 1)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$soundBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustSound($this, 1);
            break a;
        }
        if (psm_Menu_isClicked(var$2, $this.$soundBar, 0)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$soundBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustSound($this, 0);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$soundBar) == 1) {
            psm_SettingsMenu_adjustSound($this, 1);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$soundBar) == (-1)) {
            psm_SettingsMenu_adjustSound($this, 0);
            break a;
        }
        if (psm_Menu_isClicked(var$2, $this.$musicBar, 1)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$musicBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustMusic($this, 1);
            break a;
        }
        if (psm_Menu_isClicked(var$2, $this.$musicBar, 0)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$musicBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustMusic($this, 0);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$musicBar) == 1) {
            psm_SettingsMenu_adjustMusic($this, 1);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$musicBar) == (-1)) {
            psm_SettingsMenu_adjustMusic($this, 0);
            break a;
        }
        if (psm_Menu_isClicked(var$2, $this.$fontBar, 1)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$fontBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustFont($this, 1);
            break a;
        }
        if (psm_Menu_isClicked(var$2, $this.$fontBar, 0)) {
            var$1 = $this.$selectedBox;
            var$2 = $this.$fontBar;
            if (var$1 !== var$2) {
                $this.$selectedBox = var$2;
                break a;
            }
            psm_SettingsMenu_adjustFont($this, 0);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$fontBar) == 1) {
            psm_SettingsMenu_adjustFont($this, 1);
            break a;
        }
        if (psm_Menu_isAxisPushed(var$2, $this.$fontBar) == (-1)) {
            psm_SettingsMenu_adjustFont($this, 0);
            break a;
        }
        var$1 = $this.$selectedBox;
        var$2 = $this.$soundBar;
        if (var$1 === var$2) {
            if (pss_Control_axisY != (-1))
                break a;
            $this.$selectedBox = $this.$musicBar;
            break a;
        }
        var$3 = $this.$musicBar;
        if (var$1 === var$3) {
            var$4 = pss_Control_axisY;
            if (var$4 == (-1)) {
                $this.$selectedBox = $this.$fontBar;
                break a;
            }
            if (var$4 != 1)
                break a;
            $this.$selectedBox = var$2;
            break a;
        }
        var$2 = $this.$fontBar;
        if (var$1 !== var$2) {
            if (var$1 !== $this.$backButton1)
                break a;
            if (pss_Control_axisY != 1)
                break a;
            $this.$selectedBox = var$2;
            break a;
        }
        var$4 = pss_Control_axisY;
        if (var$4 == (-1)) {
            $this.$selectedBox = $this.$backButton1;
            break a;
        }
        if (var$4 != 1)
            break a;
        $this.$selectedBox = var$3;
    }
},
psm_SettingsMenu_drawContent = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    psm_Menu$Box_draw($this.$backgroundBox, $this.$backgroundPosition);
    var$1 = $this.$soundBar;
    var$2 = $this.$soundPosition;
    pss_Section_$callClinit();
    var$3 = pss_Section_profile.$soundVolume;
    var$4 = $this;
    psm_Menu$BarBox_draw(var$1, var$2, var$3, !psm_Menu_isSelected(var$4, var$1) && !pss_Control_isPointed(pss_Section_control, $this.$soundBar.$polygon4) ? 0 : 1);
    var$5 = $this.$musicBar;
    psm_Menu$BarBox_draw(var$5, $this.$musicPosition, pss_Section_profile.$musicVolume, !psm_Menu_isSelected(var$4, var$5) && !pss_Control_isPointed(pss_Section_control, $this.$musicBar.$polygon4) ? 0 : 1);
    var$5 = $this.$fontBar;
    psm_Menu$BarBox_draw(var$5, $this.$fontPosition, pss_Section_profile.$textSize, !psm_Menu_isSelected(var$4, var$5) && !pss_Control_isPointed(pss_Section_control, $this.$fontBar.$polygon4) ? 0 : 1);
    var$5 = $this.$backButton1;
    psm_Menu$TextButton_draw(var$5, $this.$backPosition1, !psm_Menu_isSelected(var$4, var$5) && !pss_Control_isPointed(pss_Section_control, $this.$backButton1.$polygon4) ? 0 : 1);
},
psm_SettingsMenu_adjustSound = ($this, $forward) => {
    let var$2, var$3;
    a: {
        b: {
            if ($forward) {
                pss_Section_$callClinit();
                if (pss_Section_profile.$soundVolume == 4)
                    break b;
            }
            if ($forward)
                break a;
            pss_Section_$callClinit();
            if (pss_Section_profile.$soundVolume)
                break a;
        }
        return;
    }
    pss_Section_$callClinit();
    var$2 = pss_Section_audio;
    var$3 = pss_Section_profile;
    $forward = var$3.$soundVolume + (!$forward ? (-1) : 1) | 0;
    var$3.$soundVolume = $forward;
    pss_Audio_setVolumes(var$2, $forward * 0.25, var$3.$musicVolume * 0.25);
    pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
},
psm_SettingsMenu_adjustMusic = ($this, $forward) => {
    let var$2, var$3, var$4;
    a: {
        b: {
            if ($forward) {
                pss_Section_$callClinit();
                if (pss_Section_profile.$musicVolume == 4)
                    break b;
            }
            if ($forward)
                break a;
            pss_Section_$callClinit();
            if (pss_Section_profile.$musicVolume)
                break a;
        }
        return;
    }
    pss_Section_$callClinit();
    var$2 = pss_Section_audio;
    var$3 = pss_Section_profile;
    var$4 = var$3.$soundVolume * 0.25;
    $forward = var$3.$musicVolume + (!$forward ? (-1) : 1) | 0;
    var$3.$musicVolume = $forward;
    pss_Audio_setVolumes(var$2, var$4, $forward * 0.25);
},
psm_SettingsMenu_adjustFont = ($this, $forward) => {
    let var$2, var$3, var$4;
    a: {
        b: {
            if ($forward) {
                pss_Section_$callClinit();
                if (pss_Section_profile.$textSize == 2)
                    break b;
            }
            if ($forward)
                break a;
            pss_Section_$callClinit();
            if (pss_Section_profile.$textSize)
                break a;
        }
        return;
    }
    pss_Section_$callClinit();
    var$2 = pss_Section_textFonts;
    var$3 = pss_Section_profile;
    var$4 = var$3.$textSize;
    $forward = !$forward ? (-1) : 1;
    var$2 = var$2.data;
    $forward = var$4 + $forward | 0;
    var$3.$textSize = $forward;
    pss_Section_textFont = var$2[$forward];
    pss_Audio_playSound(pss_Section_audio, $rt_s(482), 1.0);
};
function cbgu_I18NBundle() {
    let a = this; jl_Object.call(a);
    a.$parent0 = null;
    a.$locale5 = null;
    a.$properties = null;
    a.$formatter = null;
}
let cbgu_I18NBundle_simpleFormatter = 0,
cbgu_I18NBundle_exceptionOnMissingKey = 0,
cbgu_I18NBundle__init_ = $this => {
    return;
},
cbgu_I18NBundle__init_0 = () => {
    let var_0 = new cbgu_I18NBundle();
    cbgu_I18NBundle__init_(var_0);
    return var_0;
},
cbgu_I18NBundle_createBundle = $baseFileHandle => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$2 = ju_Locale_getDefault();
    if ($baseFileHandle !== null && var$2 !== null) {
        var$3 = null;
        var$4 = var$2;
        a: {
            while (true) {
                var$5 = var$4.$languageCode;
                var$6 = var$4.$countryCode;
                var$7 = var$4.$variantCode;
                var$8 = ju_ArrayList__init_2(4);
                if (!jl_String_isEmpty(var$7))
                    ju_ArrayList_add(var$8, var$4);
                if (!jl_String_isEmpty(var$6)) {
                    var$7 = ju_AbstractCollection_isEmpty(var$8) ? var$4 : ju_Locale__init_(var$5, var$6);
                    ju_ArrayList_add(var$8, var$7);
                }
                if (!jl_String_isEmpty(var$5)) {
                    var$7 = ju_AbstractCollection_isEmpty(var$8) ? var$4 : ju_Locale__init_0(var$5, $rt_s(9), $rt_s(9));
                    ju_ArrayList_add(var$8, var$7);
                }
                var$7 = ju_Locale_ROOT;
                var$6 = var$8;
                ju_ArrayList_add(var$6, var$7);
                var$9 = cbgu_I18NBundle_loadBundleChain($baseFileHandle, $rt_s(655), var$8, 0, var$3);
                if (var$9 !== null) {
                    var$7 = var$9.$locale5;
                    if (!ju_Locale_equals(var$7, ju_Locale_ROOT))
                        break a;
                    if (ju_Locale_equals(var$7, var$2))
                        break a;
                    if (var$6.$size3 == 1 && ju_Locale_equals(var$7, ju_ArrayList_get(var$6, 0)))
                        break a;
                    if (var$3 === null)
                        var$3 = var$9;
                }
                var$7 = ju_Locale_getDefault();
                if (ju_Locale_equals(var$4, var$7))
                    var$7 = null;
                if (var$7 === null)
                    break;
                var$4 = var$7;
            }
        }
        if (var$9 !== null)
            var$3 = var$9;
        else if (var$3 === null) {
            var$10 = new ju_MissingResourceException;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append0(var$7, $rt_s(656));
            jl_AbstractStringBuilder_append0(var$7, $baseFileHandle.$file);
            jl_AbstractStringBuilder_append0(var$7, $rt_s(657));
            jl_AbstractStringBuilder_append(var$7, var$2);
            var$6 = jl_AbstractStringBuilder_toString(var$7);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(var$7, $baseFileHandle);
            jl_AbstractStringBuilder_append0(var$7, $rt_s(658));
            jl_AbstractStringBuilder_append(var$7, var$2);
            ju_MissingResourceException__init_(var$10, var$6, jl_AbstractStringBuilder_toString(var$7), $rt_s(9));
            $rt_throw(var$10);
        }
        return var$3;
    }
    $baseFileHandle = new jl_NullPointerException;
    jl_Throwable__init_($baseFileHandle);
    $rt_throw($baseFileHandle);
},
cbgu_I18NBundle_loadBundleChain = ($baseFileHandle, $encoding, $candidateLocales, $candidateIndex, $baseBundle) => {
    let $bundle, $targetLocale, $parent, var$9, $$je;
    $bundle = $candidateLocales;
    $targetLocale = ju_ArrayList_get($bundle, $candidateIndex);
    $parent = null;
    if ($candidateIndex != ($bundle.$size3 - 1 | 0))
        $parent = cbgu_I18NBundle_loadBundleChain($baseFileHandle, $encoding, $candidateLocales, $candidateIndex + 1 | 0, $baseBundle);
    else if ($baseBundle !== null) {
        ju_Locale_$callClinit();
        if (ju_Locale_equals($targetLocale, ju_Locale_ROOT))
            return $baseBundle;
    }
    $bundle = null;
    $candidateLocales = null;
    a: {
        try {
            try {
                var$9 = $candidateLocales;
                $baseBundle = $candidateLocales;
                $baseFileHandle = cbgu_I18NBundle_toFileHandle($baseFileHandle, $targetLocale);
                if (!cbgu_I18NBundle_checkFileExistence($baseFileHandle))
                    break a;
                var$9 = $candidateLocales;
                $baseBundle = $candidateLocales;
                $bundle = cbgu_I18NBundle__init_0();
                $candidateLocales = cgxgbt_TeaFileHandle_reader($baseFileHandle, $encoding);
                $baseBundle = $candidateLocales;
                var$9 = $candidateLocales;
                cbgu_I18NBundle_load($bundle, $candidateLocales);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $baseFileHandle = $$je;
                } else {
                    throw $$e;
                }
            }
            $baseBundle = var$9;
            $rt_throw(cbgu_GdxRuntimeException__init_4($baseFileHandle));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $baseFileHandle = $$je;

        }
        cbgu_StreamUtils_closeQuietly($baseBundle);
        $rt_throw($baseFileHandle);
    }
    cbgu_StreamUtils_closeQuietly($candidateLocales);
    if ($bundle !== null) {
        $bundle.$locale5 = $targetLocale;
        $baseFileHandle = new cbgu_TextFormatter;
        $candidateIndex = cbgu_I18NBundle_simpleFormatter ? 0 : 1;
        $baseFileHandle.$buffer0 = cbgu_StringBuilder__init_2();
        if ($candidateIndex) {
            $candidateLocales = new jt_MessageFormat;
            $candidateLocales.$locale = ju_Locale_getDefault();
            $candidateLocales.$locale = $targetLocale;
            jt_MessageFormat_applyPattern($candidateLocales, $rt_s(9));
            $baseFileHandle.$messageFormat = $candidateLocales;
        }
        $bundle.$formatter = $baseFileHandle;
    }
    if ($bundle === null)
        return $parent;
    $bundle.$parent0 = $parent;
    return $bundle;
},
cbgu_I18NBundle_checkFileExistence = $fh => {
    let $$je;
    a: {
        try {
            ji_ByteArrayInputStream_close(cgxgbt_TeaFileHandle_read($fh));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                break a;
            } else {
                throw $$e;
            }
        }
        return 1;
    }
    return 0;
},
cbgu_I18NBundle_load = ($this, $reader) => {
    let var$2;
    var$2 = cbgu_ObjectMap__init_();
    $this.$properties = var$2;
    cbgu_PropertiesUtils_load(var$2, $reader);
},
cbgu_I18NBundle_toFileHandle = ($baseFileHandle, $locale) => {
    let $sb, var$4, var$5, var$6, $language, $country, $variant;
    $sb = new cbgu_StringBuilder;
    var$4 = $baseFileHandle;
    $baseFileHandle = cgxgbt_TeaFileHandle_name(var$4);
    var$5 = $baseFileHandle.$nativeString.length;
    $sb.$length3 = var$5;
    var$6 = $rt_createCharArray(var$5 + 16 | 0);
    $sb.$chars = var$6;
    jl_String_getChars($baseFileHandle, 0, var$5, var$6, 0);
    ju_Locale_$callClinit();
    if (!ju_Locale_equals($locale, ju_Locale_ROOT)) {
        $language = $locale.$languageCode;
        $country = $locale.$countryCode;
        $variant = $locale.$variantCode;
        if (!(jl_String_isEmpty($language) && jl_String_isEmpty($country) && jl_String_isEmpty($variant))) {
            cbgu_StringBuilder_append0($sb, 95);
            if (!jl_String_isEmpty($variant)) {
                cbgu_StringBuilder_append00($sb, $language);
                cbgu_StringBuilder_append0($sb, 95);
                cbgu_StringBuilder_append00($sb, $country);
                cbgu_StringBuilder_append0($sb, 95);
                cbgu_StringBuilder_append00($sb, $variant);
            } else if (jl_String_isEmpty($country))
                cbgu_StringBuilder_append00($sb, $language);
            else {
                cbgu_StringBuilder_append00($sb, $language);
                cbgu_StringBuilder_append0($sb, 95);
                cbgu_StringBuilder_append00($sb, $country);
            }
        }
    }
    cbgu_StringBuilder_append00($sb, $rt_s(659));
    $baseFileHandle = cbgu_StringBuilder_toString($sb);
    $locale = cgxgbt_TeaFileHandle_parent(var$4);
    $baseFileHandle = cgxgbt_TeaFileHandle_fixSlashes($baseFileHandle);
    return cgxgbt_TeaFileHandle_child($locale, $baseFileHandle);
},
cbgu_I18NBundle_get = ($this, $key) => {
    let $result, var$3;
    $result = cbgu_ObjectMap_get($this.$properties, $key);
    if ($result === null) {
        var$3 = $this.$parent0;
        if (var$3 !== null)
            $result = cbgu_I18NBundle_get(var$3, $key);
        if ($result === null) {
            if (!cbgu_I18NBundle_exceptionOnMissingKey) {
                $result = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($result);
                jl_AbstractStringBuilder_append0($result, $rt_s(660));
                jl_AbstractStringBuilder_append0($result, $key);
                jl_AbstractStringBuilder_append0($result, $rt_s(660));
                return jl_AbstractStringBuilder_toString($result);
            }
            var$3 = new ju_MissingResourceException;
            $result = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($result);
            jl_AbstractStringBuilder_append0($result, $rt_s(661));
            jl_AbstractStringBuilder_append0($result, $key);
            ju_MissingResourceException__init_(var$3, jl_AbstractStringBuilder_toString($result), jl_Class_getName(jl_Object_getClass($this)), $key);
            $rt_throw(var$3);
        }
    }
    return $result;
},
cbgu_I18NBundle_format = ($this, $key, $args) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$3 = $this.$formatter;
    $key = cbgu_I18NBundle_get($this, $key);
    var$4 = var$3.$messageFormat;
    if (var$4 === null)
        $key = cbgu_TextFormatter_simpleFormat(var$3, $key, $args);
    else {
        cbgu_StringBuilder_setLength(var$3.$buffer0, 0);
        var$5 = 0;
        var$6 = $key.$nativeString.length;
        var$7 = 0;
        while (var$7 < var$6) {
            var$8 = jl_String_charAt($key, var$7);
            if (var$8 == 39) {
                var$5 = 1;
                cbgu_StringBuilder_append00(var$3.$buffer0, $rt_s(662));
            } else if (var$8 != 123)
                cbgu_StringBuilder_append0(var$3.$buffer0, var$8);
            else {
                var$8 = var$7 + 1 | 0;
                while (var$8 < var$6 && jl_String_charAt($key, var$8) == 123) {
                    var$8 = var$8 + 1 | 0;
                }
                var$9 = var$8 - var$7 | 0;
                var$7 = var$9 / 2 | 0;
                if (var$7 > 0) {
                    var$5 = 1;
                    cbgu_StringBuilder_append0(var$3.$buffer0, 39);
                    while (true) {
                        cbgu_StringBuilder_append0(var$3.$buffer0, 123);
                        var$7 = var$7 + (-1) | 0;
                        if (var$7 <= 0)
                            break;
                    }
                    cbgu_StringBuilder_append0(var$3.$buffer0, 39);
                }
                if (var$9 % 2 | 0)
                    cbgu_StringBuilder_append0(var$3.$buffer0, 123);
                var$7 = var$8 - 1 | 0;
            }
            var$7 = var$7 + 1 | 0;
        }
        if (var$5)
            $key = cbgu_StringBuilder_toString(var$3.$buffer0);
        jt_MessageFormat_applyPattern(var$4, $key);
        $key = jt_Format_format(var$3.$messageFormat, $args);
    }
    return $key;
},
cbgu_I18NBundle__clinit_ = () => {
    cbgu_I18NBundle_simpleFormatter = 0;
    cbgu_I18NBundle_exceptionOnMissingKey = 1;
};
function psm_Menu$Box() {
    let a = this; jl_Object.call(a);
    a.$polygon4 = null;
    a.$boxColors = null;
    a.$width1 = 0.0;
    a.$height2 = 0.0;
}
let psm_Menu$Box__init_0 = ($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW) => {
    let var$7, $coordinates;
    var$7 = $rt_createArray(cbgg_Color, 2);
    $coordinates = var$7.data;
    $coordinates[0] = cbgg_Color__init_((-2004318140));
    $coordinates[1] = cbgg_Color__init_((-120));
    $this.$boxColors = var$7;
    $this.$width1 = $width;
    $this.$height2 = $height;
    $coordinates = $rt_createFloatArray(16);
    var$7 = $coordinates.data;
    var$7[0] = $cornerSW;
    var$7[1] = 0.0;
    var$7[2] = 0.0;
    var$7[3] = $cornerSW;
    var$7[4] = 0.0;
    var$7[5] = $height - $cornerNW;
    var$7[6] = $cornerNW;
    var$7[7] = $height;
    var$7[8] = $width - $cornerNE;
    var$7[9] = $height;
    var$7[10] = $width;
    var$7[11] = $height - $cornerNE;
    var$7[12] = $width;
    var$7[13] = $cornerSE;
    var$7[14] = $width - $cornerSE;
    var$7[15] = 0.0;
    cbgm_GeometryUtils_ensureClockwise($coordinates);
    $this.$polygon4 = cbgm_Polygon__init_($coordinates);
},
psm_Menu$Box__init_ = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new psm_Menu$Box();
    psm_Menu$Box__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
},
psm_Menu$Box_draw = ($this, $position) => {
    cbgm_Polygon_resetTransformations($this.$polygon4);
    cbgm_Polygon_translate($this.$polygon4, $position.$x, $position.$y);
    pss_Section_setDrawerColor0($this.$boxColors.data[0]);
    psm_Menu_$callClinit();
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$polygon4);
    pss_Section_setDrawerColor0($this.$boxColors.data[1]);
    ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$polygon4);
};
function psm_Menu$CursorBox() {
    psm_Menu$Box.call(this);
    this.$cursorColors = null;
}
let psm_Menu$CursorBox__init_ = ($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW) => {
    let var$7, var$8;
    psm_Menu$Box__init_0($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW);
    var$7 = $rt_createArray(cbgg_Color, 2);
    var$8 = var$7.data;
    var$8[0] = cbgg_Color__init_((-2135700344));
    var$8[1] = cbgg_Color__init_((-857276442));
    $this.$cursorColors = var$7;
},
psm_Menu$CursorBox__init_0 = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new psm_Menu$CursorBox();
    psm_Menu$CursorBox__init_(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
},
psm_Menu$CursorBox_draw = ($this, $position, $active) => {
    cbgm_Polygon_resetTransformations($this.$polygon4);
    cbgm_Polygon_translate($this.$polygon4, $position.$x, $position.$y);
    if (!$active) {
        pss_Section_setDrawerColor0($this.$boxColors.data[0]);
        psm_Menu_$callClinit();
        ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$polygon4);
        pss_Section_setDrawerColor0($this.$boxColors.data[1]);
    } else {
        pss_Section_setDrawerColor0($this.$cursorColors.data[0]);
        psm_Menu_$callClinit();
        ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$polygon4);
        pss_Section_setDrawerColor0($this.$cursorColors.data[1]);
    }
    psm_Menu_$callClinit();
    pss_Section_$callClinit();
    ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$polygon4);
};
function psm_Menu$LabelButton() {
    let a = this; psm_Menu$CursorBox.call(a);
    a.$label = null;
    a.$labelColors = null;
}
let psm_Menu$LabelButton__init_0 = ($this, $label, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW) => {
    let var$8, var$9;
    psm_Menu$CursorBox__init_($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW);
    var$8 = $rt_createArray(cbgg_Color, 2);
    var$9 = var$8.data;
    var$9[0] = cbgg_Color__init_((-2135700250));
    var$9[1] = cbgg_Color__init_((-857276417));
    $this.$labelColors = var$8;
    $this.$label = $label;
},
psm_Menu$LabelButton__init_ = (var_0, var_1, var_2, var_3, var_4, var_5, var_6) => {
    let var_7 = new psm_Menu$LabelButton();
    psm_Menu$LabelButton__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
    return var_7;
},
psm_Menu$LabelButton_draw = ($this, $position, $active) => {
    let var$3, var$4, var$5;
    psm_Menu$CursorBox_draw($this, $position, $active);
    $position = $this.$polygon4;
    psm_Menu_$callClinit();
    pss_Section_$callClinit();
    cbgm_Polygon_getCentroid($position, pss_Section_centroid);
    var$3 = pss_Section_labelFont;
    var$4 = $this.$labelColors;
    $active = !$active ? 0 : 1;
    pss_Section_setFontColor(var$3, var$4.data[$active]);
    var$5 = pss_Section_labelFont;
    cbggg_BitmapFont_draw(var$5, pss_Section_batch, $this.$label, $this.$polygon4.$x6, pss_Section_centroid.$y + cbggg_BitmapFont_getCapHeight(var$5) / 2.0, $this.$width1, 1, 0);
},
ju_Queue = $rt_classWithoutFields(0),
ju_Deque = $rt_classWithoutFields(0);
function ju_ArrayDeque() {
    let a = this; ju_AbstractCollection.call(a);
    a.$version = 0;
    a.$array1 = null;
    a.$head = 0;
    a.$tail = 0;
}
let ju_ArrayDeque__init_ = $this => {
    ju_ArrayDeque__init_1($this, 8);
},
ju_ArrayDeque__init_2 = () => {
    let var_0 = new ju_ArrayDeque();
    ju_ArrayDeque__init_(var_0);
    return var_0;
},
ju_ArrayDeque__init_1 = ($this, $numElements) => {
    $this.$array1 = $rt_createArray(jl_Object, $numElements + 1 | 0);
},
ju_ArrayDeque__init_0 = var_0 => {
    let var_1 = new ju_ArrayDeque();
    ju_ArrayDeque__init_1(var_1, var_0);
    return var_1;
},
ju_ArrayDeque_pollFirst = $this => {
    let var$1, var$2, $result;
    var$1 = $this.$head;
    if (var$1 == $this.$tail)
        return null;
    var$2 = $this.$array1.data;
    $result = var$2[var$1];
    var$2[var$1] = null;
    $this.$head = ju_ArrayDeque_modInc(var$1, var$2.length);
    $this.$version = $this.$version + 1 | 0;
    return $result;
},
ju_ArrayDeque_size = $this => {
    let var$1, var$2;
    var$1 = $this.$tail;
    var$2 = $this.$head;
    return var$1 >= var$2 ? var$1 - var$2 | 0 : ($this.$array1.data.length - var$2 | 0) + var$1 | 0;
},
ju_ArrayDeque_removeAt = ($this, $index) => {
    let $i, $i_0, var$4;
    $i = $this.$head;
    $i_0 = $this.$tail;
    if ($i >= $i_0) {
        if ($index >= $i) {
            $i_0 = $index - 1 | 0;
            while ($i_0 >= $i) {
                var$4 = $this.$array1.data;
                var$4[$i_0 + 1 | 0] = var$4[$i_0];
                $i_0 = $i_0 + (-1) | 0;
            }
            var$4 = $this.$array1.data;
            var$4[$i] = null;
            $this.$head = ju_ArrayDeque_modInc($i, var$4.length);
            return 0;
        }
        $i = $index + 1 | 0;
        while ($i < $i_0) {
            var$4 = $this.$array1.data;
            var$4[$i - 1 | 0] = var$4[$i];
            $i = $i + 1 | 0;
        }
        $index = ju_ArrayDeque_modDec($i_0, $this.$array1.data.length);
        $this.$tail = $index;
        $this.$array1.data[$index] = null;
        return 1;
    }
    if (($i_0 - $index | 0) >= ($index - $i | 0)) {
        $i_0 = $index - 1 | 0;
        while ($i_0 >= $i) {
            var$4 = $this.$array1.data;
            var$4[$i_0 + 1 | 0] = var$4[$i_0];
            $i_0 = $i_0 + (-1) | 0;
        }
        var$4 = $this.$array1.data;
        $this.$head = $i + 1 | 0;
        var$4[$i] = null;
        return 0;
    }
    $i = $index + 1 | 0;
    while ($i < $i_0) {
        var$4 = $this.$array1.data;
        var$4[$i - 1 | 0] = var$4[$i];
        $i = $i + 1 | 0;
    }
    var$4 = $this.$array1.data;
    $index = $i_0 - 1 | 0;
    $this.$tail = $index;
    var$4[$index] = null;
    return 1;
},
ju_ArrayDeque_modInc = ($i, $mod) => {
    $i = $i + 1 | 0;
    if ($i == $mod)
        $i = 0;
    return $i;
},
ju_ArrayDeque_modDec = ($i, $mod) => {
    let var$3;
    var$3 = $i + (-1) | 0;
    if (var$3 == (-1))
        var$3 = $mod - 1 | 0;
    return var$3;
},
ju_ArrayDeque_iterator = $this => {
    let var$1;
    var$1 = new ju_ArrayDeque$1;
    var$1.$this$02 = $this;
    var$1.$refVersion = $this.$version;
    var$1.$index4 = $this.$head;
    var$1.$lastIndex = (-1);
    var$1.$left = ju_ArrayDeque_size($this);
    return var$1;
},
ju_ArrayDeque_ensureCapacity = ($this, $capacity) => {
    let $newArraySize, $newArray, $j, $i, var$6, var$7;
    $newArraySize = $this.$array1.data.length;
    if ($capacity < $newArraySize)
        return;
    $newArraySize = jl_Math_max($newArraySize * 2 | 0, (($capacity * 3 | 0) / 2 | 0) + 1 | 0);
    if ($newArraySize < 1)
        $newArraySize = 2147483647;
    $newArray = $rt_createArray(jl_Object, $newArraySize);
    $j = 0;
    $i = $this.$head;
    $newArraySize = $this.$tail;
    if ($i <= $newArraySize) {
        var$6 = $newArray.data;
        while ($i < $newArraySize) {
            $capacity = $j + 1 | 0;
            var$6[$j] = $this.$array1.data[$i];
            $i = $i + 1 | 0;
            $j = $capacity;
        }
    } else {
        var$6 = $newArray.data;
        while (true) {
            var$7 = $this.$array1.data;
            if ($i >= var$7.length)
                break;
            $capacity = $j + 1 | 0;
            var$6[$j] = var$7[$i];
            $i = $i + 1 | 0;
            $j = $capacity;
        }
        $i = 0;
        while ($i < $newArraySize) {
            $capacity = $j + 1 | 0;
            var$6[$j] = var$7[$i];
            $i = $i + 1 | 0;
            $j = $capacity;
        }
    }
    $this.$head = 0;
    $this.$tail = $j;
    $this.$array1 = $newArray;
};
function psl_ChimeraLogic() {
    let a = this; jl_Object.call(a);
    a.$speed = null;
    a.$axes = null;
    a.$position1 = null;
    a.$forceRadius = 0.0;
    a.$gravityRadius = 0.0;
    a.$rotation1 = 0.0;
    a.$lives = 0;
    a.$gravity = 0;
    a.$blink = 0;
}
let psl_ChimeraLogic_chimera = null,
psl_ChimeraLogic_update = ($this, $time, $axisX, $axisY) => {
    let var$4, var$5, var$6, var$7, var$8;
    var$4 = cbgm_Vector2_set($this.$axes, $axisX, $axisY);
    var$5 = var$4.$x;
    var$5 = var$5 * var$5;
    var$6 = var$4.$y;
    var$5 = jl_Math_sqrt(var$5 + var$6 * var$6);
    if (var$5 !== 0.0) {
        var$4.$x = var$4.$x / var$5;
        var$4.$y = var$4.$y / var$5;
    }
    var$4 = $this.$position1;
    var$5 = var$4.$x;
    var$7 = $this.$speed;
    var$6 = $time * var$7.$x;
    var$8 = $this.$axes;
    var$4.$x = var$5 + var$6 * var$8.$x;
    var$4.$y = var$4.$y + $time * var$7.$y * var$8.$y;
    $this.$rotation1 = $this.$rotation1 + $time * 10.0;
},
psl_ChimeraLogic_contains = ($this, $point, $forceField) => {
    return cbgm_Vector2_dst($this.$position1, $point) >= (!$forceField ? $this.$gravityRadius : $this.$forceRadius) ? 0 : 1;
},
psl_ChimeraLogic__init_ = $this => {
    $this.$speed = cbgm_Vector2__init_(240.0, 240.0);
    $this.$axes = new cbgm_Vector2;
    $this.$position1 = new cbgm_Vector2;
    $this.$gravity = 1;
},
psl_ChimeraLogic__init_0 = () => {
    let var_0 = new psl_ChimeraLogic();
    psl_ChimeraLogic__init_(var_0);
    return var_0;
};
function psm_Menu$IconButton() {
    let a = this; psm_Menu$CursorBox.call(a);
    a.$icon = null;
    a.$iconColors = null;
}
function ccvf_VfxFrameBufferRenderer() {
    let a = this; jl_Object.call(a);
    a.$mesh = null;
    a.$shader0 = null;
}
let ccvf_VfxFrameBufferRenderer__init_ = $this => {
    let var$1;
    $this.$mesh = ccvu_ViewportQuadMesh__init_0();
    var$1 = cbggg_ShaderProgram__init_($rt_s(663), $rt_s(664));
    $this.$shader0 = var$1;
    cbggg_ShaderProgram_bind(var$1);
    cbggg_ShaderProgram_setUniformi($this.$shader0, $rt_s(507), 0);
},
ccvf_VfxFrameBufferRenderer__init_0 = () => {
    let var_0 = new ccvf_VfxFrameBufferRenderer();
    ccvf_VfxFrameBufferRenderer__init_(var_0);
    return var_0;
};
function cbgm_Quaternion() {
    let a = this; jl_Object.call(a);
    a.$x9 = 0.0;
    a.$y9 = 0.0;
    a.$z0 = 0.0;
    a.$w = 0.0;
}
let cbgm_Quaternion_tmp1 = null,
cbgm_Quaternion_tmp2 = null,
cbgm_Quaternion__init_2 = ($this, $x, $y, $z, $w) => {
    cbgm_Quaternion_set($this, $x, $y, $z, $w);
},
cbgm_Quaternion__init_1 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgm_Quaternion();
    cbgm_Quaternion__init_2(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgm_Quaternion__init_0 = $this => {
    cbgm_Quaternion_set($this, 0.0, 0.0, 0.0, 1.0);
},
cbgm_Quaternion__init_ = () => {
    let var_0 = new cbgm_Quaternion();
    cbgm_Quaternion__init_0(var_0);
    return var_0;
},
cbgm_Quaternion_set = ($this, $x, $y, $z, $w) => {
    $this.$x9 = $x;
    $this.$y9 = $y;
    $this.$z0 = $z;
    $this.$w = $w;
    return $this;
},
cbgm_Quaternion__clinit_ = () => {
    cbgm_Quaternion_tmp1 = cbgm_Quaternion__init_1(0.0, 0.0, 0.0, 0.0);
    cbgm_Quaternion_tmp2 = cbgm_Quaternion__init_1(0.0, 0.0, 0.0, 0.0);
};
function cbgm_Vector3() {
    let a = this; jl_Object.call(a);
    a.$x0 = 0.0;
    a.$y0 = 0.0;
    a.$z = 0.0;
}
let cbgm_Vector3_X = null,
cbgm_Vector3_Y = null,
cbgm_Vector3_Z = null,
cbgm_Vector3_Zero = null,
cbgm_Vector3_tmpMat = null,
cbgm_Vector3_$callClinit = () => {
    cbgm_Vector3_$callClinit = $rt_eraseClinit(cbgm_Vector3);
    cbgm_Vector3__clinit_();
},
cbgm_Vector3__init_1 = $this => {
    cbgm_Vector3_$callClinit();
},
cbgm_Vector3__init_ = () => {
    let var_0 = new cbgm_Vector3();
    cbgm_Vector3__init_1(var_0);
    return var_0;
},
cbgm_Vector3__init_2 = ($this, $x, $y, $z) => {
    cbgm_Vector3_$callClinit();
    cbgm_Vector3_set($this, $x, $y, $z);
},
cbgm_Vector3__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbgm_Vector3();
    cbgm_Vector3__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgm_Vector3_set = ($this, $x, $y, $z) => {
    $this.$x0 = $x;
    $this.$y0 = $y;
    $this.$z = $z;
    return $this;
},
cbgm_Vector3_set0 = ($this, $vector) => {
    return cbgm_Vector3_set($this, $vector.$x0, $vector.$y0, $vector.$z);
},
cbgm_Vector3_nor = $this => {
    let var$1, $len2;
    var$1 = $this.$x0;
    var$1 = var$1 * var$1;
    $len2 = $this.$y0;
    var$1 = var$1 + $len2 * $len2;
    $len2 = $this.$z;
    $len2 = var$1 + $len2 * $len2;
    if ($len2 !== 0.0 && $len2 !== 1.0) {
        var$1 = 1.0 / jl_Math_sqrt($len2);
        return cbgm_Vector3_set($this, $this.$x0 * var$1, $this.$y0 * var$1, $this.$z * var$1);
    }
    return $this;
},
cbgm_Vector3_crs = ($this, $vector) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$2 = $this.$y0;
    var$3 = $vector.$z;
    var$4 = var$2 * var$3;
    var$5 = $this.$z;
    var$6 = $vector.$y0;
    var$4 = var$4 - var$5 * var$6;
    var$7 = $vector.$x0;
    var$5 = var$5 * var$7;
    var$8 = $this.$x0;
    return cbgm_Vector3_set($this, var$4, var$5 - var$8 * var$3, var$8 * var$6 - var$2 * var$7);
},
cbgm_Vector3__clinit_ = () => {
    cbgm_Vector3_X = cbgm_Vector3__init_0(1.0, 0.0, 0.0);
    cbgm_Vector3_Y = cbgm_Vector3__init_0(0.0, 1.0, 0.0);
    cbgm_Vector3_Z = cbgm_Vector3__init_0(0.0, 0.0, 1.0);
    cbgm_Vector3_Zero = cbgm_Vector3__init_0(0.0, 0.0, 0.0);
    cbgm_Vector3_tmpMat = cbgm_Matrix4__init_();
},
ccvu_PrioritizedArray$WrapperComparator = $rt_classWithoutFields(),
ccvu_PrioritizedArray$WrapperComparator__init_ = $this => {
    return;
},
ccvu_PrioritizedArray$WrapperComparator__init_0 = () => {
    let var_0 = new ccvu_PrioritizedArray$WrapperComparator();
    ccvu_PrioritizedArray$WrapperComparator__init_(var_0);
    return var_0;
},
ccvu_PrioritizedArray$WrapperComparator_compare = ($this, var$1, var$2) => {
    let var$3;
    var$1 = var$1;
    var$2 = var$2;
    var$3 = $rt_compare(var$1.$priority, var$2.$priority);
    return var$3 < 0 ? (-1) : var$3 ? 1 : 0;
};
function ccvu_ValueArrayMap() {
    let a = this; jl_Object.call(a);
    a.$map = null;
    a.$values6 = null;
    a.$tmpKeyArray = null;
}
let ccvu_ValueArrayMap__init_ = $this => {
    $this.$map = ju_HashMap__init_0(16);
    $this.$values6 = cbgu_Array__init_1(1, 16);
    $this.$tmpKeyArray = cbgu_Array__init_0(16);
},
ccvu_ValueArrayMap__init_0 = () => {
    let var_0 = new ccvu_ValueArrayMap();
    ccvu_ValueArrayMap__init_(var_0);
    return var_0;
};
function ccvf_VfxFrameBufferPool() {
    let a = this; jl_Object.call(a);
    a.$freePeak = 0;
    a.$managedBuffers = null;
    a.$freeBuffers = null;
    a.$width7 = 0;
    a.$height8 = 0;
    a.$pixelFormat0 = null;
    a.$textureWrapU = null;
    a.$textureWrapV = null;
    a.$textureFilterMin = null;
    a.$textureFilterMag = null;
    a.$disposed = 0;
}
let ccvf_VfxFrameBufferPool_TAG = null,
ccvf_VfxFrameBufferPool_$callClinit = () => {
    ccvf_VfxFrameBufferPool_$callClinit = $rt_eraseClinit(ccvf_VfxFrameBufferPool);
    ccvf_VfxFrameBufferPool__clinit_();
},
ccvf_VfxFrameBufferPool__init_0 = $this => {
    ccvf_VfxFrameBufferPool_$callClinit();
    ccvf_VfxFrameBufferPool__init_($this, cbgg_Pixmap$Format_RGBA8888, cgxgbt_TeaGraphics_getBackBufferWidth(cbg_Gdx_graphics), cgxgbt_TeaGraphics_getBackBufferHeight(cbg_Gdx_graphics), 16);
},
ccvf_VfxFrameBufferPool__init_2 = () => {
    let var_0 = new ccvf_VfxFrameBufferPool();
    ccvf_VfxFrameBufferPool__init_0(var_0);
    return var_0;
},
ccvf_VfxFrameBufferPool__init_ = ($this, $pixelFormat, $width, $height, $initialCapacity) => {
    let var$5;
    ccvf_VfxFrameBufferPool_$callClinit();
    var$5 = cbgg_Texture$TextureWrap_ClampToEdge;
    $this.$textureWrapU = var$5;
    $this.$textureWrapV = var$5;
    var$5 = cbgg_Texture$TextureFilter_Nearest;
    $this.$textureFilterMin = var$5;
    $this.$textureFilterMag = var$5;
    $this.$disposed = 0;
    $this.$width7 = $width;
    $this.$height8 = $height;
    $this.$pixelFormat0 = $pixelFormat;
    $this.$managedBuffers = cbgu_Array__init_1(0, $initialCapacity);
    $this.$freeBuffers = cbgu_Array__init_1(0, $initialCapacity);
},
ccvf_VfxFrameBufferPool__init_1 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new ccvf_VfxFrameBufferPool();
    ccvf_VfxFrameBufferPool__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
ccvf_VfxFrameBufferPool_obtain = $this => {
    let var$1, var$2;
    if ($this.$disposed) {
        var$1 = new jl_IllegalStateException;
        jl_Exception__init_(var$1, $rt_s(665));
        $rt_throw(var$1);
    }
    var$2 = $this.$freeBuffers;
    if (var$2.$size0)
        var$2 = cbgu_Array_pop(var$2);
    else {
        var$2 = ccvf_VfxFrameBuffer__init_($this.$pixelFormat0);
        ccvf_VfxFrameBuffer_initialize(var$2, $this.$width7, $this.$height8);
        cbgu_Array_add($this.$managedBuffers, var$2);
    }
    return var$2;
},
ccvf_VfxFrameBufferPool_free = ($this, $buffer) => {
    let var$2, var$3, var$4, var$5;
    if ($this.$disposed) {
        $buffer = new jl_IllegalStateException;
        jl_Exception__init_($buffer, $rt_s(665));
        $rt_throw($buffer);
    }
    if ($buffer === null) {
        $buffer = new jl_IllegalArgumentException;
        jl_Exception__init_($buffer, $rt_s(666));
        $rt_throw($buffer);
    }
    a: {
        var$2 = $buffer.$fbo;
        if ($buffer.$initialized) {
            var$3 = $this.$width7;
            var$2 = var$2;
            if (var$3 == cbggg_GLFrameBuffer_getWidth(var$2) && $this.$height8 == cbggg_GLFrameBuffer_getHeight(var$2) && $this.$pixelFormat0 === $buffer.$pixelFormat) {
                var$3 = 1;
                break a;
            }
        }
        var$3 = 0;
    }
    if (!var$3) {
        cbgu_Array_removeValue($this.$managedBuffers, $buffer, 1);
        ccvf_VfxFrameBuffer_dispose($buffer);
        return;
    }
    cbgu_Array_add($this.$freeBuffers, $buffer);
    $this.$freePeak = jl_Math_max($this.$freePeak, $this.$freeBuffers.$size0);
    cbgu_Array_clear($buffer.$renderers.$renderers0);
    $buffer = ccvf_VfxFrameBuffer_getTexture($buffer);
    var$2 = $this.$textureWrapU;
    var$4 = $this.$textureWrapV;
    var$5 = $buffer;
    cbgg_GLTexture_setWrap(var$5, var$2, var$4);
    cbgg_GLTexture_setFilter(var$5, $this.$textureFilterMin, $this.$textureFilterMag);
},
ccvf_VfxFrameBufferPool__clinit_ = () => {
    ccvf_VfxFrameBufferPool_TAG = jl_Class_getSimpleName($rt_cls(ccvf_VfxFrameBufferPool));
};
function jn_Buffer() {
    let a = this; jl_Object.call(a);
    a.$position0 = 0;
    a.$limit0 = 0;
    a.$mark = 0;
}
let jn_Buffer__init_ = $this => {
    $this.$mark = (-1);
},
jn_Buffer_position = ($this, $newPosition) => {
    let var$2, var$3, var$4;
    if ($newPosition >= 0 && $newPosition <= $this.$limit0) {
        $this.$position0 = $newPosition;
        if ($newPosition < $this.$mark)
            $this.$mark = 0;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(667));
    jl_AbstractStringBuilder_append1(var$4, $newPosition);
    jl_AbstractStringBuilder_append(var$4, $rt_s(668));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    jl_AbstractStringBuilder_append2(var$4, 93);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_Buffer_limit = ($this, $newLimit) => {
    let var$2;
    if ($newLimit >= 0 && $newLimit <= $this.$capacityImpl()) {
        if ($this.$mark > $newLimit)
            $this.$mark = (-1);
        $this.$limit0 = $newLimit;
        if ($this.$position0 > $newLimit)
            $this.$position0 = $newLimit;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jn_Buffer_clear = $this => {
    $this.$position0 = 0;
    $this.$limit0 = $this.$capacityImpl();
    $this.$mark = (-1);
    return $this;
},
jn_Buffer_flip = $this => {
    $this.$limit0 = $this.$position0;
    $this.$position0 = 0;
    $this.$mark = (-1);
    return $this;
},
jn_Buffer_remaining = $this => {
    return $this.$limit0 - $this.$position0 | 0;
},
jn_Buffer_hasRemaining = $this => {
    return $this.$position0 >= $this.$limit0 ? 0 : 1;
};
function jn_ByteBuffer() {
    jn_Buffer.call(this);
    this.$order0 = null;
}
let jn_ByteBuffer_allocateDirect = $capacity => {
    let $result, var$3;
    if ($capacity >= 0) {
        $result = jn_ByteBufferJsImpl__init_(null, 0, new Int8Array($capacity), 1, 0);
        $result.$limit0 = $capacity;
        return $result;
    }
    $result = new jl_IllegalArgumentException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(669));
    jl_AbstractStringBuilder_append1(var$3, $capacity);
    jl_Exception__init_($result, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw($result);
},
jn_ByteBuffer_allocate = $capacity => {
    let $array, $result, var$4;
    if ($capacity >= 0) {
        $array = $rt_createByteArray($capacity);
        $result = jn_ByteBufferJsImpl__init_($array, 0, $array.data, 0, 0);
        $result.$limit0 = $capacity;
        return $result;
    }
    $result = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(669));
    jl_AbstractStringBuilder_append1(var$4, $capacity);
    jl_Exception__init_($result, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw($result);
},
jn_ByteBuffer_wrap0 = ($array, $offset, $length) => {
    let $data, $result;
    ju_Objects_checkFromIndexSize($offset, $length, $array.data.length);
    $data = $array.data;
    $result = jn_ByteBufferJsImpl__init_($array, 0, $data, 0, 0);
    $result.$position0 = $offset;
    $result.$limit0 = $offset + $length | 0;
    return $result;
},
jn_ByteBuffer_wrap = $array => {
    return jn_ByteBuffer_wrap0($array, 0, $array.data.length);
},
jn_ByteBuffer_get = ($this, $dst, $offset, $length) => {
    let var$4, var$5, var$6;
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $dst.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$4 = new jn_BufferUnderflowException;
            jl_Throwable__init_(var$4);
            $rt_throw(var$4);
        }
        var$5 = $this.$position0;
        var$4 = $this;
        var$6 = new Int8Array(var$4.$data0.buffer, var$4.$data0.byteOffset + var$5 | 0, $length);
        $dst.data.set(var$6, $offset);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
},
jn_ByteBuffer_put = ($this, $src, $offset, $length) => {
    let var$4, var$5, var$6, var$7;
    if (!$length)
        return $this;
    var$4 = $this;
    if (var$4.$readOnly0) {
        var$5 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$5);
        $rt_throw(var$5);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$5 = new jn_BufferOverflowException;
            jl_Throwable__init_(var$5);
            $rt_throw(var$5);
        }
        var$6 = $this.$position0;
        var$7 = new Int8Array($src.data.buffer, $offset, $length);
        var$4.$data0.set(var$7, var$6);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$5 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jn_ByteBuffer_array = $this => {
    let var$1, var$2;
    var$1 = $this.$array4;
    if (var$1 !== null)
        return var$1;
    var$2 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jn_ByteBuffer_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    var$1 = $this.$position0;
    var$2 = $this.$limit0;
    var$3 = $this.$capacityImpl();
    var$4 = $this.$mark;
    if (var$4 < 0)
        var$5 = $rt_s(670);
    else {
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append(var$5, $rt_s(671));
        jl_AbstractStringBuilder_append1(var$5, var$4);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
    }
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, $rt_s(672));
    jl_AbstractStringBuilder_append1(var$6, var$1);
    jl_AbstractStringBuilder_append(var$6, $rt_s(673));
    jl_AbstractStringBuilder_append1(var$6, var$2);
    jl_AbstractStringBuilder_append(var$6, $rt_s(674));
    jl_AbstractStringBuilder_append1(var$6, var$3);
    jl_AbstractStringBuilder_append(var$6, $rt_s(675));
    jl_AbstractStringBuilder_append(var$6, var$5);
    jl_AbstractStringBuilder_append2(var$6, 93);
    return jl_AbstractStringBuilder_toString(var$6);
},
jn_ByteBuffer_hashCode = $this => {
    let $hashCode, $pos, var$3, $i;
    $hashCode = 0;
    $pos = $this.$position0;
    var$3 = $this;
    $i = $pos;
    while ($i < $this.$limit0) {
        $hashCode = (31 * $hashCode | 0) + jn_ByteBufferJsImpl_get(var$3, $pos) | 0;
        $i = $i + 1 | 0;
    }
    return $hashCode;
},
jn_ByteBuffer_equals = ($this, $obj) => {
    let $other, $sz, $a, $b, $i, var$7, var$8;
    if ($this === $obj)
        return 1;
    if (!($obj instanceof jn_ByteBuffer))
        return 0;
    $other = $obj;
    $sz = jn_Buffer_remaining($this);
    if ($sz != jn_Buffer_remaining($other))
        return 0;
    $a = $this.$position0;
    $b = $other.$position0;
    $i = 0;
    $other = $other;
    while ($i < $sz) {
        var$7 = $a + 1 | 0;
        $a = jn_ByteBufferJsImpl_get($this, $a);
        var$8 = $b + 1 | 0;
        if ($a != jn_ByteBufferJsImpl_get($other, $b))
            return 0;
        $i = $i + 1 | 0;
        $a = var$7;
        $b = var$8;
    }
    return 1;
},
jn_ByteBuffer_order = ($this, $bo) => {
    $this.$order0 = $bo;
    return $this;
},
jn_ByteBuffer_limit = ($this, var$1) => {
    jn_Buffer_limit($this, var$1);
    return $this;
},
jn_ByteBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
};
function jn_ByteOrder() {
    jl_Object.call(this);
    this.$name7 = null;
}
let jn_ByteOrder_BIG_ENDIAN = null,
jn_ByteOrder_LITTLE_ENDIAN = null,
jn_ByteOrder_nativeOrder0 = null,
jn_ByteOrder__init_0 = ($this, $name) => {
    $this.$name7 = $name;
},
jn_ByteOrder__init_ = var_0 => {
    let var_1 = new jn_ByteOrder();
    jn_ByteOrder__init_0(var_1, var_0);
    return var_1;
},
jn_ByteOrder_nativeOrder = () => {
    let $buffer;
    if (jn_ByteOrder_nativeOrder0 === null) {
        $buffer = new ArrayBuffer(2);
        (new Int16Array($buffer))[0] = 1;
        jn_ByteOrder_nativeOrder0 = (new Int8Array($buffer))[0] ? jn_ByteOrder_LITTLE_ENDIAN : jn_ByteOrder_BIG_ENDIAN;
    }
    return jn_ByteOrder_nativeOrder0;
},
jn_ByteOrder__clinit_ = () => {
    jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(676));
    jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(677));
},
cbgu_BufferUtils = $rt_classWithoutFields(),
cbgu_BufferUtils_unsafeBuffers = null,
cbgu_BufferUtils_allocatedUnsafe = 0,
cbgu_BufferUtils_$callClinit = () => {
    cbgu_BufferUtils_$callClinit = $rt_eraseClinit(cbgu_BufferUtils);
    cbgu_BufferUtils__clinit_();
},
cbgu_BufferUtils__init_ = $this => {
    cbgu_BufferUtils_$callClinit();
},
cbgu_BufferUtils__init_0 = () => {
    let var_0 = new cbgu_BufferUtils();
    cbgu_BufferUtils__init_(var_0);
    return var_0;
},
cbgu_BufferUtils_copy = ($src, $dst, $numFloats, $offset) => {
    let $floatBuffer, var$6;
    cbgu_BufferUtils_$callClinit();
    $floatBuffer = null;
    var$6 = $dst instanceof jn_ByteBuffer;
    if (var$6)
        $floatBuffer = jn_ByteBufferJsImpl_asFloatBuffer($dst);
    else if ($dst instanceof jn_FloatBuffer)
        $floatBuffer = $dst;
    if ($floatBuffer === null) {
        $floatBuffer = new cbgu_GdxRuntimeException;
        jl_Exception__init_($floatBuffer, $rt_s(678));
        $rt_throw($floatBuffer);
    }
    jn_Buffer_clear($floatBuffer);
    $dst.$position(0);
    jn_FloatBuffer_put($floatBuffer, $src, $offset, $numFloats);
    $dst.$position(0);
    if (!var$6)
        $dst.$limit($numFloats);
    else
        $dst.$limit($numFloats << 2);
},
cbgu_BufferUtils_newFloatBuffer = $numFloats => {
    let $buffer, var$3, var$4;
    cbgu_BufferUtils_$callClinit();
    if (cgxgbt_TeaTool_isProd) {
        $buffer = jn_ByteBuffer_allocateDirect($numFloats * 4 | 0);
        jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
        return jn_ByteBufferJsImpl_asFloatBuffer($buffer);
    }
    var$3 = $rt_createFloatArray($numFloats);
    var$4 = var$3.data.length;
    $buffer = jn_FloatBufferOverTypedArray__init_(0, var$4, 0, var$3.data, var$3);
    $buffer.$position0 = 0;
    $buffer.$limit0 = 0 + var$4 | 0;
    return $buffer;
},
cbgu_BufferUtils_newByteBuffer = $numBytes => {
    let $buffer;
    cbgu_BufferUtils_$callClinit();
    if (!cgxgbt_TeaTool_isProd)
        return jn_ByteBuffer_wrap($rt_createByteArray($numBytes));
    $buffer = jn_ByteBuffer_allocateDirect($numBytes);
    jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
    return $buffer;
},
cbgu_BufferUtils_newIntBuffer = $numInts => {
    let $buffer, var$3, var$4;
    cbgu_BufferUtils_$callClinit();
    if (cgxgbt_TeaTool_isProd) {
        $buffer = jn_ByteBuffer_allocateDirect($numInts * 4 | 0);
        jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
        return jn_ByteBufferJsImpl_asIntBuffer($buffer);
    }
    var$3 = $rt_createIntArray($numInts);
    var$4 = var$3.data.length;
    $buffer = jn_IntBufferOverTypedArray__init_(0, var$4, 0, var$3.data, var$3);
    $buffer.$position0 = 0;
    $buffer.$limit0 = 0 + var$4 | 0;
    return $buffer;
},
cbgu_BufferUtils_disposeUnsafeByteBuffer = $buffer => {
    let $size;
    cbgu_BufferUtils_$callClinit();
    $size = $buffer.$capacityImpl();
    if (cbgu_Array_removeValue(cbgu_BufferUtils_unsafeBuffers, $buffer, 1)) {
        cbgu_BufferUtils_allocatedUnsafe = cbgu_BufferUtils_allocatedUnsafe - $size | 0;
        return;
    }
    $buffer = new jl_IllegalArgumentException;
    jl_Exception__init_($buffer, $rt_s(679));
    $rt_throw($buffer);
},
cbgu_BufferUtils_newUnsafeByteBuffer = $numBytes => {
    let $buffer;
    cbgu_BufferUtils_$callClinit();
    $buffer = cbgu_BufferUtils_newByteBuffer($numBytes);
    jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
    cbgu_BufferUtils_allocatedUnsafe = cbgu_BufferUtils_allocatedUnsafe + $numBytes | 0;
    cbgu_Array_add(cbgu_BufferUtils_unsafeBuffers, $buffer);
    return $buffer;
},
cbgu_BufferUtils__clinit_ = () => {
    cbgu_BufferUtils_unsafeBuffers = cbgu_Array__init_();
    cbgu_BufferUtils_allocatedUnsafe = 0;
};
function ccvg_VfxGlViewport() {
    let a = this; jl_Object.call(a);
    a.$x7 = 0;
    a.$y7 = 0;
    a.$width9 = 0;
    a.$height7 = 0;
}
let ccvg_VfxGlViewport__init_ = $this => {
    return;
},
ccvg_VfxGlViewport__init_0 = () => {
    let var_0 = new ccvg_VfxGlViewport();
    ccvg_VfxGlViewport__init_(var_0);
    return var_0;
},
ccvg_VfxGlExtension = $rt_classWithoutFields(0),
ccvg_DefaultVfxGlExtension = $rt_classWithoutFields(),
ccvg_DefaultVfxGlExtension_tmpIntBuf = null,
ccvg_DefaultVfxGlExtension_$callClinit = () => {
    ccvg_DefaultVfxGlExtension_$callClinit = $rt_eraseClinit(ccvg_DefaultVfxGlExtension);
    ccvg_DefaultVfxGlExtension__clinit_();
},
ccvg_DefaultVfxGlExtension__init_ = $this => {
    ccvg_DefaultVfxGlExtension_$callClinit();
},
ccvg_DefaultVfxGlExtension__init_0 = () => {
    let var_0 = new ccvg_DefaultVfxGlExtension();
    ccvg_DefaultVfxGlExtension__init_(var_0);
    return var_0;
},
ccvg_DefaultVfxGlExtension__clinit_ = () => {
    ccvg_DefaultVfxGlExtension_tmpIntBuf = jn_ByteBufferJsImpl_asIntBuffer(jn_ByteBuffer_order(jn_ByteBuffer_allocateDirect(64), jn_ByteOrder_nativeOrder()));
},
cbgur_ClassReflection = $rt_classWithoutFields(),
cbgur_ClassReflection__init_ = $this => {
    return;
},
cbgur_ClassReflection__init_0 = () => {
    let var_0 = new cbgur_ClassReflection();
    cbgur_ClassReflection__init_(var_0);
    return var_0;
},
cbgur_ClassReflection_forName = $name => {
    let $e, var$3, $$je;
    a: {
        try {
            $e = jl_Class_forName($name);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_ClassNotFoundException) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $e;
    }
    var$3 = new cbgur_ReflectionException;
    jl_Throwable__init_0(var$3, $name, $e);
    $rt_throw(var$3);
},
cbgur_ClassReflection_newInstance = $c => {
    let $e, var$3, $$je;
    a: {
        try {
            $e = jl_Class_newInstance($c);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_InstantiationException) {
                $e = $$je;
                break a;
            } else if ($$je instanceof jl_IllegalAccessException) {
                $e = $$je;
                var$3 = new cbgur_ReflectionException;
                $c = jl_Class_getName($c);
                jl_Throwable__init_0(var$3, $c, $e);
                $rt_throw(var$3);
            } else {
                throw $$e;
            }
        }
        return $e;
    }
    var$3 = new cbgur_ReflectionException;
    $c = jl_Class_getName($c);
    jl_Throwable__init_0(var$3, $c, $e);
    $rt_throw(var$3);
},
cbgur_ReflectionException = $rt_classWithoutFields(jl_Exception),
cbgur_ReflectionException__init_ = $this => {
    jl_Throwable__init_($this);
},
cbgur_ReflectionException__init_0 = () => {
    let var_0 = new cbgur_ReflectionException();
    cbgur_ReflectionException__init_(var_0);
    return var_0;
};
function cbgu_ObjectIntMap() {
    let a = this; jl_Object.call(a);
    a.$size10 = 0;
    a.$keyTable3 = null;
    a.$valueTable1 = null;
    a.$loadFactor0 = 0.0;
    a.$threshold4 = 0;
    a.$shift3 = 0;
    a.$mask3 = 0;
}
let cbgu_ObjectIntMap__init_0 = $this => {
    let var$1, var$2;
    $this.$loadFactor0 = 0.800000011920929;
    var$1 = cbgu_ObjectSet_tableSize(51, 0.800000011920929);
    $this.$threshold4 = var$1 * 0.800000011920929 | 0;
    var$2 = var$1 - 1 | 0;
    $this.$mask3 = var$2;
    $this.$shift3 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$2));
    $this.$keyTable3 = $rt_createArray(jl_Object, var$1);
    $this.$valueTable1 = $rt_createIntArray(var$1);
},
cbgu_ObjectIntMap__init_ = () => {
    let var_0 = new cbgu_ObjectIntMap();
    cbgu_ObjectIntMap__init_0(var_0);
    return var_0;
},
cbgu_ObjectIntMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt(jl_String_hashCode($item)), Long_create(2135587861, 2654435769)), $this.$shift3));
},
cbgu_ObjectIntMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Exception__init_($other, $rt_s(32));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable3;
    $i = cbgu_ObjectIntMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return  -($i + 1 | 0) | 0;
        if (jl_String_equals($other, $key))
            break;
        $i = ($i + 1 | 0) & $this.$mask3;
    }
    return $i;
},
cbgu_ObjectIntMap_put = ($this, $key, $value) => {
    let $i, var$4, var$5, var$6, var$7, var$8, var$9;
    $i = cbgu_ObjectIntMap_locateKey($this, $key);
    if ($i >= 0) {
        $this.$valueTable1.data[$i] = $value;
        return;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable3.data;
    var$4[$i] = $key;
    $this.$valueTable1.data[$i] = $value;
    $value = $this.$size10 + 1 | 0;
    $this.$size10 = $value;
    if ($value >= $this.$threshold4)
        a: {
            $value = var$4.length;
            $i = $value << 1;
            $this.$threshold4 = $i * $this.$loadFactor0 | 0;
            var$5 = $i - 1 | 0;
            $this.$mask3 = var$5;
            $this.$shift3 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$5));
            var$4 = $this.$keyTable3;
            var$6 = $this.$valueTable1;
            $this.$keyTable3 = $rt_createArray(jl_Object, $i);
            $this.$valueTable1 = $rt_createIntArray($i);
            if ($this.$size10 > 0) {
                $i = 0;
                while (true) {
                    if ($i >= $value)
                        break a;
                    $key = var$4.data[$i];
                    if ($key !== null) {
                        var$5 = var$6.data[$i];
                        var$7 = $this.$keyTable3;
                        var$8 = cbgu_ObjectIntMap_place($this, $key);
                        while (true) {
                            var$9 = var$7.data;
                            if (var$9[var$8] === null)
                                break;
                            var$8 = (var$8 + 1 | 0) & $this.$mask3;
                        }
                        var$9[var$8] = $key;
                        $this.$valueTable1.data[var$8] = var$5;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
},
cbgu_ObjectIntMap_get = ($this, $key, $defaultValue) => {
    let $i;
    $i = cbgu_ObjectIntMap_locateKey($this, $key);
    if ($i >= 0)
        $defaultValue = $this.$valueTable1.data[$i];
    return $defaultValue;
};
function ccve_GaussianBlurEffect$Tap() {
    jl_Enum.call(this);
    this.$radius = 0;
}
let ccve_GaussianBlurEffect$Tap_Tap3x3 = null,
ccve_GaussianBlurEffect$Tap_Tap5x5 = null,
ccve_GaussianBlurEffect$Tap_$VALUES = null,
ccve_GaussianBlurEffect$Tap_values = () => {
    return ccve_GaussianBlurEffect$Tap_$VALUES.$clone0();
},
ccve_GaussianBlurEffect$Tap__init_0 = ($this, var$1, var$2, $radius) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$radius = $radius;
},
ccve_GaussianBlurEffect$Tap__init_ = (var_0, var_1, var_2) => {
    let var_3 = new ccve_GaussianBlurEffect$Tap();
    ccve_GaussianBlurEffect$Tap__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
ccve_GaussianBlurEffect$Tap__clinit_ = () => {
    let var$1, var$2, var$3;
    ccve_GaussianBlurEffect$Tap_Tap3x3 = ccve_GaussianBlurEffect$Tap__init_($rt_s(680), 0, 1);
    var$1 = ccve_GaussianBlurEffect$Tap__init_($rt_s(681), 1, 2);
    ccve_GaussianBlurEffect$Tap_Tap5x5 = var$1;
    var$2 = $rt_createArray(ccve_GaussianBlurEffect$Tap, 2);
    var$3 = var$2.data;
    var$3[0] = ccve_GaussianBlurEffect$Tap_Tap3x3;
    var$3[1] = var$1;
    ccve_GaussianBlurEffect$Tap_$VALUES = var$2;
},
ccvf_VfxFrameBuffer$Renderer = $rt_classWithoutFields(0);
function ccvf_VfxFrameBuffer$RendererManager() {
    jl_Object.call(this);
    this.$renderers0 = null;
}
let ccvf_VfxFrameBuffer$RendererManager__init_ = $this => {
    $this.$renderers0 = cbgu_Array__init_();
},
ccvf_VfxFrameBuffer$RendererManager__init_0 = () => {
    let var_0 = new ccvf_VfxFrameBuffer$RendererManager();
    ccvf_VfxFrameBuffer$RendererManager__init_(var_0);
    return var_0;
},
ccvf_VfxFrameBuffer$RendererManager_flush = $this => {
    let $i, var$2;
    $i = 0;
    while (true) {
        var$2 = $this.$renderers0;
        if ($i >= var$2.$size0)
            break;
        (cbgu_Array_get(var$2, $i)).$flush();
        $i = $i + 1 | 0;
    }
},
cbgg_Mesh$VertexDataType = $rt_classWithoutFields(jl_Enum),
cbgg_Mesh$VertexDataType_VertexArray = null,
cbgg_Mesh$VertexDataType_VertexBufferObject = null,
cbgg_Mesh$VertexDataType_VertexBufferObjectSubData = null,
cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO = null,
cbgg_Mesh$VertexDataType_$VALUES = null,
cbgg_Mesh$VertexDataType_values = () => {
    return cbgg_Mesh$VertexDataType_$VALUES.$clone0();
},
cbgg_Mesh$VertexDataType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(682), 0);
    cbgg_Mesh$VertexDataType_VertexArray = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(683), 1);
    cbgg_Mesh$VertexDataType_VertexBufferObject = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(684), 2);
    cbgg_Mesh$VertexDataType_VertexBufferObjectSubData = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(685), 3);
    cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO = var$1;
    var$2 = $rt_createArray(cbgg_Mesh$VertexDataType, 4);
    var$3 = var$2.data;
    var$3[0] = cbgg_Mesh$VertexDataType_VertexArray;
    var$3[1] = cbgg_Mesh$VertexDataType_VertexBufferObject;
    var$3[2] = cbgg_Mesh$VertexDataType_VertexBufferObjectSubData;
    var$3[3] = var$1;
    cbgg_Mesh$VertexDataType_$VALUES = var$2;
};
function cbgg_Mesh() {
    let a = this; jl_Object.call(a);
    a.$vertices = null;
    a.$indices = null;
    a.$autoBind = 0;
    a.$isVertexArray = 0;
    a.$instances = null;
    a.$isInstanced = 0;
    a.$tmpV = null;
}
let cbgg_Mesh_meshes = null,
cbgg_Mesh_$callClinit = () => {
    cbgg_Mesh_$callClinit = $rt_eraseClinit(cbgg_Mesh);
    cbgg_Mesh__clinit_();
},
cbgg_Mesh__init_ = ($this, $type, $isStatic, $maxVertices, $maxIndices, $attributes) => {
    let var$6, var$7, var$8;
    cbgg_Mesh_$callClinit();
    a: {
        b: {
            var$6 = cbgg_VertexAttributes__init_($attributes);
            $this.$autoBind = 1;
            $this.$isInstanced = 0;
            var$7 = new cbgm_Vector3;
            cbgm_Vector3_$callClinit();
            $this.$tmpV = var$7;
            cbgg_Mesh$1_$callClinit();
            switch (cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType.data[$type.$ordinal0]) {
                case 1:
                    break;
                case 2:
                    var$7 = new cbggg_VertexBufferObjectSubData;
                    var$7.$isDirty1 = 0;
                    var$7.$isBound1 = 0;
                    var$7.$isStatic1 = $isStatic;
                    var$7.$attributes = var$6;
                    $type = cbgu_BufferUtils_newByteBuffer($rt_imul(var$6.$vertexSize, $maxVertices));
                    var$7.$byteBuffer = $type;
                    var$7.$isDirect = 1;
                    var$7.$usage0 = !$isStatic ? 35048 : 35044;
                    var$7.$buffer2 = jn_ByteBufferJsImpl_asFloatBuffer($type);
                    var$8 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
                    cbg_Gdx_gl20.$glBindBuffer(34962, var$8);
                    cbg_Gdx_gl20.$glBufferData(34962, var$7.$byteBuffer.$capacityImpl(), null, var$7.$usage0);
                    cbg_Gdx_gl20.$glBindBuffer(34962, 0);
                    var$7.$bufferHandle1 = var$8;
                    jn_Buffer_flip(var$7.$buffer2);
                    jn_Buffer_flip(var$7.$byteBuffer);
                    $this.$vertices = var$7;
                    $this.$indices = cbggg_IndexBufferObjectSubData__init_($isStatic, $maxIndices);
                    $this.$isVertexArray = 0;
                    break a;
                case 3:
                    $this.$vertices = cbggg_VertexBufferObjectWithVAO__init_($isStatic, $maxVertices, var$6);
                    $this.$indices = cbggg_IndexBufferObjectSubData__init_($isStatic, $maxIndices);
                    $this.$isVertexArray = 0;
                    break a;
                case 4:
                    break b;
                default:
                    break b;
            }
            $this.$vertices = cbggg_VertexBufferObject__init_($isStatic, $maxVertices, var$6);
            $this.$indices = cbggg_IndexBufferObject__init_($isStatic, $maxIndices);
            $this.$isVertexArray = 0;
            break a;
        }
        $type = new cbggg_VertexArray;
        cbggg_VertexBufferObject__init_0($type, 0, $maxVertices, var$6);
        $this.$vertices = $type;
        $type = new cbggg_IndexArray;
        $type.$isDirty = 1;
        $type.$isBound = 0;
        $type.$isDirect0 = 1;
        cbgu_BufferUtils_$callClinit();
        if (cgxgbt_TeaTool_isProd) {
            var$6 = jn_ByteBuffer_allocateDirect($maxIndices * 2 | 0);
            jn_ByteBuffer_order(var$6, jn_ByteOrder_nativeOrder());
            var$6 = jn_ByteBufferJsImpl_asShortBuffer(var$6);
        } else {
            $attributes = $rt_createShortArray($maxIndices);
            $maxVertices = $attributes.data.length;
            var$6 = jn_ShortBufferOverTypedArray__init_(0, $maxVertices, 0, $attributes.data, $attributes);
            var$6.$position0 = 0;
            var$6.$limit0 = 0 + $maxVertices | 0;
        }
        $type.$buffer1 = var$6;
        jn_Buffer_flip(var$6);
        $type.$bufferHandle0 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
        $type.$usage = 35044;
        $this.$indices = $type;
        $this.$isVertexArray = 1;
    }
    cbgg_Mesh_addManagedMesh(cbg_Gdx_app, $this);
},
cbgg_Mesh__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new cbgg_Mesh();
    cbgg_Mesh__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
cbgg_Mesh_render = ($this, $shader, $primitiveType, $offset, $count) => {
    let var$5, var$6, var$7, var$8, var$9, var$10;
    var$5 = $this.$autoBind;
    if ($count) {
        if (var$5) {
            var$6 = null;
            var$7 = null;
            $this.$vertices.$bind1($shader, var$6);
            var$6 = $this.$instances;
            if (var$6 !== null && var$6.$getNumInstances() > 0)
                $this.$instances.$bind1($shader, var$7);
            if ($this.$indices.$getNumIndices() > 0)
                $this.$indices.$bind();
        }
        if ($this.$isVertexArray) {
            if ($this.$indices.$getNumIndices() <= 0)
                cbg_Gdx_gl20.$glDrawArrays($primitiveType, $offset, $count);
            else {
                var$6 = $this.$indices.$getBuffer(0);
                var$8 = var$6.$position0;
                var$9 = var$6;
                jn_Buffer_position(var$9, $offset);
                cbg_Gdx_gl20.$glDrawElements($primitiveType, $count, 5123, var$6);
                jn_Buffer_position(var$9, var$8);
            }
        } else {
            var$10 = 0;
            if ($this.$isInstanced)
                var$10 = $this.$instances.$getNumInstances();
            if ($this.$indices.$getNumIndices() <= 0) {
                if ($this.$isInstanced && var$10 > 0)
                    cbg_Gdx_gl30.$glDrawArraysInstanced($primitiveType, $offset, $count, var$10);
                else
                    cbg_Gdx_gl20.$glDrawArrays($primitiveType, $offset, $count);
            } else {
                if (($count + $offset | 0) > $this.$indices.$getNumMaxIndices()) {
                    $shader = new cbgu_GdxRuntimeException;
                    var$6 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$6);
                    jl_AbstractStringBuilder_append0(var$6, $rt_s(686));
                    jl_AbstractStringBuilder_append1(var$6, $count);
                    jl_AbstractStringBuilder_append0(var$6, $rt_s(687));
                    jl_AbstractStringBuilder_append1(var$6, $offset);
                    jl_AbstractStringBuilder_append0(var$6, $rt_s(688));
                    jl_AbstractStringBuilder_append1(var$6, $this.$indices.$getNumMaxIndices());
                    jl_AbstractStringBuilder_append0(var$6, $rt_s(26));
                    jl_Exception__init_($shader, jl_AbstractStringBuilder_toString(var$6));
                    $rt_throw($shader);
                }
                if ($this.$isInstanced && var$10 > 0)
                    cbg_Gdx_gl30.$glDrawElementsInstanced($primitiveType, $count, 5123, $offset * 2 | 0, var$10);
                else
                    cbg_Gdx_gl20.$glDrawElements0($primitiveType, $count, 5123, $offset * 2 | 0);
            }
        }
        if (var$5) {
            var$6 = null;
            var$7 = null;
            $this.$vertices.$unbind($shader, var$6);
            var$6 = $this.$instances;
            if (var$6 !== null && var$6.$getNumInstances() > 0)
                $this.$instances.$unbind($shader, var$7);
            if ($this.$indices.$getNumIndices() > 0)
                $this.$indices.$unbind0();
        }
    }
},
cbgg_Mesh_addManagedMesh = ($app, $mesh) => {
    let $managedResources;
    cbgg_Mesh_$callClinit();
    $managedResources = ju_HashMap_get(cbgg_Mesh_meshes, $app);
    if ($managedResources === null)
        $managedResources = cbgu_Array__init_();
    cbgu_Array_add($managedResources, $mesh);
    ju_HashMap_put(cbgg_Mesh_meshes, $app, $managedResources);
},
cbgg_Mesh__clinit_ = () => {
    cbgg_Mesh_meshes = ju_HashMap__init_();
};
function cbggg_SpriteBatch() {
    let a = this; jl_Object.call(a);
    a.$currentDataType = null;
    a.$mesh0 = null;
    a.$vertices3 = null;
    a.$idx0 = 0;
    a.$lastTexture0 = null;
    a.$invTexWidth0 = 0.0;
    a.$invTexHeight0 = 0.0;
    a.$drawing2 = 0;
    a.$transformMatrix0 = null;
    a.$projectionMatrix0 = null;
    a.$combinedMatrix0 = null;
    a.$blendingDisabled0 = 0;
    a.$blendSrcFunc0 = 0;
    a.$blendDstFunc0 = 0;
    a.$blendSrcFuncAlpha0 = 0;
    a.$blendDstFuncAlpha0 = 0;
    a.$shader1 = null;
    a.$customShader0 = null;
    a.$ownsShader = 0;
    a.$color10 = null;
    a.$colorPacked0 = 0.0;
    a.$renderCalls0 = 0;
    a.$totalRenderCalls0 = 0;
    a.$maxSpritesInBatch = 0;
}
let cbggg_SpriteBatch_defaultVertexDataType = null,
cbggg_SpriteBatch_overrideVertexType = null,
cbggg_SpriteBatch_$callClinit = () => {
    cbggg_SpriteBatch_$callClinit = $rt_eraseClinit(cbggg_SpriteBatch);
    cbggg_SpriteBatch__clinit_();
},
cbggg_SpriteBatch__init_0 = $this => {
    cbggg_SpriteBatch_$callClinit();
    cbggg_SpriteBatch__init_($this, 1000, null);
},
cbggg_SpriteBatch__init_2 = () => {
    let var_0 = new cbggg_SpriteBatch();
    cbggg_SpriteBatch__init_0(var_0);
    return var_0;
},
cbggg_SpriteBatch__init_ = ($this, $size, $defaultShader) => {
    let $vertexDataType, var$4, var$5, var$6, $indices, var$8, $j, $i;
    cbggg_SpriteBatch_$callClinit();
    $this.$idx0 = 0;
    $this.$lastTexture0 = null;
    $this.$invTexWidth0 = 0.0;
    $this.$invTexHeight0 = 0.0;
    $this.$drawing2 = 0;
    $this.$transformMatrix0 = cbgm_Matrix4__init_();
    $this.$projectionMatrix0 = cbgm_Matrix4__init_();
    $this.$combinedMatrix0 = cbgm_Matrix4__init_();
    $this.$blendingDisabled0 = 0;
    $this.$blendSrcFunc0 = 770;
    $this.$blendDstFunc0 = 771;
    $this.$blendSrcFuncAlpha0 = 770;
    $this.$blendDstFuncAlpha0 = 771;
    $this.$customShader0 = null;
    $this.$color10 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$colorPacked0 = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$renderCalls0 = 0;
    $this.$totalRenderCalls0 = 0;
    $this.$maxSpritesInBatch = 0;
    if ($size > 8191) {
        $defaultShader = new jl_IllegalArgumentException;
        $vertexDataType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($vertexDataType);
        jl_AbstractStringBuilder_append0($vertexDataType, $rt_s(689));
        jl_AbstractStringBuilder_append1($vertexDataType, $size);
        jl_Exception__init_($defaultShader, jl_AbstractStringBuilder_toString($vertexDataType));
        $rt_throw($defaultShader);
    }
    $vertexDataType = cbg_Gdx_gl30 === null ? cbggg_SpriteBatch_defaultVertexDataType : cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO;
    var$4 = cbggg_SpriteBatch_overrideVertexType;
    if (var$4 === null)
        var$4 = $vertexDataType;
    $this.$currentDataType = var$4;
    $vertexDataType = new cbgg_Mesh;
    var$5 = $size * 4 | 0;
    var$6 = $size * 6 | 0;
    $indices = $rt_createArray(cbgg_VertexAttribute, 3);
    var$8 = $indices.data;
    var$8[0] = cbgg_VertexAttribute__init_(1, 2, $rt_s(527));
    var$8[1] = cbgg_VertexAttribute__init_(4, 4, $rt_s(528));
    var$8[2] = cbgg_VertexAttribute__init_(16, 2, $rt_s(529));
    cbgg_Mesh__init_($vertexDataType, var$4, 0, var$5, var$6, $indices);
    $this.$mesh0 = $vertexDataType;
    cbgm_Matrix4_setToOrtho2D($this.$projectionMatrix0, 0.0, 0.0, cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics));
    $this.$vertices3 = $rt_createFloatArray($size * 20 | 0);
    $indices = $rt_createShortArray(var$6);
    var$8 = $indices.data;
    $j = 0;
    $i = 0;
    while ($i < var$6) {
        var$8[$i] = $j;
        var$8[$i + 1 | 0] = ($j + 1 | 0) << 16 >> 16;
        $size = $i + 2 | 0;
        var$5 = ($j + 2 | 0) << 16 >> 16;
        var$8[$size] = var$5;
        var$8[$i + 3 | 0] = var$5;
        var$8[$i + 4 | 0] = ($j + 3 | 0) << 16 >> 16;
        var$8[$i + 5 | 0] = $j;
        $i = $i + 6 | 0;
        $j = ($j + 4 | 0) << 16 >> 16;
    }
    $this.$mesh0.$indices.$setIndices($indices, 0, var$8.length);
    if ($defaultShader !== null)
        $this.$shader1 = $defaultShader;
    else {
        $this.$shader1 = cbggg_SpriteBatch_createDefaultShader();
        $this.$ownsShader = 1;
    }
    if (var$4 !== cbgg_Mesh$VertexDataType_VertexArray) {
        $this.$mesh0.$indices.$bind();
        $this.$mesh0.$indices.$unbind0();
    }
},
cbggg_SpriteBatch__init_1 = (var_0, var_1) => {
    let var_2 = new cbggg_SpriteBatch();
    cbggg_SpriteBatch__init_(var_2, var_0, var_1);
    return var_2;
},
cbggg_SpriteBatch_createDefaultShader = () => {
    let $shader, $vertexShader, $fragmentShader;
    cbggg_SpriteBatch_$callClinit();
    $shader = cbggg_ShaderProgram__init_($rt_s(690), $rt_s(691));
    if ($shader.$isCompiled)
        return $shader;
    $vertexShader = new jl_IllegalArgumentException;
    $fragmentShader = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($fragmentShader);
    jl_AbstractStringBuilder_append0($fragmentShader, $rt_s(692));
    jl_AbstractStringBuilder_append0($fragmentShader, cbggg_ShaderProgram_getLog($shader));
    jl_Exception__init_($vertexShader, jl_AbstractStringBuilder_toString($fragmentShader));
    $rt_throw($vertexShader);
},
cbggg_SpriteBatch__clinit_ = () => {
    cbggg_SpriteBatch_defaultVertexDataType = cbgg_Mesh$VertexDataType_VertexBufferObject;
    cbggg_SpriteBatch_overrideVertexType = null;
};
function cbggg_TextureAtlas$TextureAtlasData() {
    let a = this; jl_Object.call(a);
    a.$pages = null;
    a.$regions1 = null;
}
let cbggg_TextureAtlas$TextureAtlasData__init_ = $this => {
    $this.$pages = cbgu_Array__init_();
    $this.$regions1 = cbgu_Array__init_();
},
cbggg_TextureAtlas$TextureAtlasData__init_0 = () => {
    let var_0 = new cbggg_TextureAtlas$TextureAtlasData();
    cbggg_TextureAtlas$TextureAtlasData__init_(var_0);
    return var_0;
},
cbggg_TextureAtlas$TextureAtlasData_load = ($this, $packFile, $imagesDir, $flip) => {
    let $entry, $pageFields, $ex, $hasIndexes, var$8, $regionFields, $line, $reader, $page, $names, $values, var$15, var$16, $field, $region, $count, $entryValues, $i, $$je;
    $entry = $rt_createArray(jl_String, 5);
    $pageFields = cbgu_ObjectMap__init_2(15, 0.9900000095367432);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$1;
    $ex.$this$042 = $this;
    $ex.$val$entry1 = $entry;
    cbgu_ObjectMap_put($pageFields, $rt_s(693), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$2;
    $ex.$this$044 = $this;
    $ex.$val$entry10 = $entry;
    cbgu_ObjectMap_put($pageFields, $rt_s(694), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$3;
    $ex.$this$059 = $this;
    $ex.$val$entry2 = $entry;
    cbgu_ObjectMap_put($pageFields, $rt_s(695), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$4;
    $ex.$this$031 = $this;
    $ex.$val$entry4 = $entry;
    cbgu_ObjectMap_put($pageFields, $rt_s(696), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$5;
    $ex.$this$034 = $this;
    $ex.$val$entry9 = $entry;
    cbgu_ObjectMap_put($pageFields, $rt_s(697), $ex);
    $hasIndexes = $rt_createBooleanArray(1);
    var$8 = $hasIndexes.data;
    var$8[0] = 0;
    $regionFields = cbgu_ObjectMap__init_2(127, 0.9900000095367432);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$6;
    $ex.$this$063 = $this;
    $ex.$val$entry7 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(698), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$7;
    $ex.$this$029 = $this;
    $ex.$val$entry5 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(693), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$8;
    $ex.$this$021 = $this;
    $ex.$val$entry0 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(699), $ex);
    $line = new cbggg_TextureAtlas$TextureAtlasData$9;
    $line.$this$061 = $this;
    $line.$val$entry3 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(700), $line);
    $line = new cbggg_TextureAtlas$TextureAtlasData$10;
    $line.$this$056 = $this;
    $line.$val$entry6 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(701), $line);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$11;
    $ex.$this$051 = $this;
    $ex.$val$entry = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(702), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$12;
    $ex.$this$039 = $this;
    $ex.$val$entry11 = $entry;
    cbgu_ObjectMap_put($regionFields, $rt_s(703), $ex);
    $ex = new cbggg_TextureAtlas$TextureAtlasData$13;
    $ex.$this$043 = $this;
    $ex.$val$entry8 = $entry;
    $ex.$val$hasIndexes = $hasIndexes;
    cbgu_ObjectMap_put($regionFields, $rt_s(704), $ex);
    $line = $packFile;
    $reader = ji_BufferedReader__init_(ji_InputStreamReader__init_1(cgxgbt_TeaFileHandle_read($line)), 1024);
    $line = null;
    a: {
        b: {
            try {
                $ex = ji_BufferedReader_readLine($reader);
                $line = $ex;
                c: {
                    while (true) {
                        $line = $ex;
                        if ($ex === null)
                            break;
                        $line = $ex;
                        if (jl_String_length(jl_String_trim($ex)))
                            break c;
                        $line = $ex;
                        $ex = ji_BufferedReader_readLine($reader);
                        $line = $ex;
                    }
                }
                d: {
                    while (true) {
                        $line = $ex;
                        if ($ex === null)
                            break d;
                        $line = $ex;
                        if (!jl_String_length(jl_String_trim($ex))) {
                            $line = $ex;
                            break d;
                        }
                        $line = $ex;
                        if (!cbggg_TextureAtlas$TextureAtlasData_readEntry($entry, $ex))
                            break;
                        $line = $ex;
                        $ex = ji_BufferedReader_readLine($reader);
                        $line = $ex;
                    }
                    $line = $ex;
                }
                $line = $ex;
                $page = null;
                $names = null;
                $values = null;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $ex = $$je;
                    break b;
                } else{
                    $packFile = $$je;
                    break a;
                }
            }
            var$15 = $entry.data;
            var$16 = $imagesDir;
            while (true) {
                try {
                    $line = $ex;
                    if ($ex === null)
                        break;
                    $line = $ex;
                    if (!jl_String_length(jl_String_trim($ex))) {
                        $line = $ex;
                        $page = null;
                        $ex = ji_BufferedReader_readLine($reader);
                        $line = $ex;
                        continue;
                    }
                    $line = $ex;
                    if ($page === null) {
                        $line = $ex;
                        $page = cbggg_TextureAtlas$TextureAtlasData$Page__init_0();
                        $page.$name10 = $ex;
                        $page.$textureFile = cgxgbt_TeaFileHandle_child(var$16, $ex);
                        while (true) {
                            $line = $ex;
                            $ex = ji_BufferedReader_readLine($reader);
                            $line = $ex;
                            if (!cbggg_TextureAtlas$TextureAtlasData_readEntry($entry, $ex))
                                break;
                            $line = $ex;
                            $field = cbgu_ObjectMap_get($pageFields, var$15[0]);
                            if ($field !== null) {
                                $line = $ex;
                                $field.$parse($page);
                            }
                            $line = $ex;
                        }
                        $line = $ex;
                        $line = $ex;
                        cbgu_Array_add($this.$pages, $page);
                        continue;
                    }
                    $line = $ex;
                    $region = cbggg_TextureAtlas$TextureAtlasData$Region__init_0();
                    $region.$page2 = $page;
                    $region.$name3 = jl_String_trim($ex);
                    if ($flip) {
                        $line = $ex;
                        $region.$flip0 = 1;
                    }
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $ex = $$je;
                        break b;
                    } else{
                        $packFile = $$je;
                        break a;
                    }
                }
                while (true) {
                    try {
                        $line = $ex;
                        $ex = ji_BufferedReader_readLine($reader);
                        $line = $ex;
                        $count = cbggg_TextureAtlas$TextureAtlasData_readEntry($entry, $ex);
                        if (!$count)
                            break;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $ex = $$je;
                            break b;
                        } else{
                            $packFile = $$je;
                            break a;
                        }
                    }
                    e: {
                        try {
                            $line = $ex;
                            $field = cbgu_ObjectMap_get($regionFields, var$15[0]);
                            if ($field !== null) {
                                $line = $ex;
                                $field.$parse($region);
                                break e;
                            }
                            $line = $ex;
                            if ($names === null) {
                                $line = $ex;
                                $names = cbgu_Array__init_0(8);
                                $values = cbgu_Array__init_0(8);
                            }
                            $line = $ex;
                            cbgu_Array_add($names, var$15[0]);
                            $entryValues = $rt_createIntArray($count);
                            $i = 0;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $ex = $$je;
                                break b;
                            } else{
                                $packFile = $$je;
                                break a;
                            }
                        }
                        $hasIndexes = $entryValues.data;
                        while (true) {
                            try {
                                $line = $ex;
                                if ($i >= $count)
                                    break;
                                f: {
                                    try {
                                        $line = $ex;
                                        $hasIndexes[$i] = jl_Integer_parseInt(var$15[$i + 1 | 0]);
                                        $line = $ex;
                                        break f;
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_NumberFormatException) {
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                    $line = $ex;
                                }
                                $line = $ex;
                                $i = $i + 1 | 0;
                                continue;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Exception) {
                                    $ex = $$je;
                                    break b;
                                } else{
                                    $packFile = $$je;
                                    break a;
                                }
                            }
                        }
                        try {
                            $line = $ex;
                            cbgu_Array_add($values, $entryValues);
                            break e;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $ex = $$je;
                                break b;
                            } else{
                                $packFile = $$je;
                                break a;
                            }
                        }
                    }
                    try {
                        $line = $ex;
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $ex = $$je;
                            break b;
                        } else{
                            $packFile = $$je;
                            break a;
                        }
                    }
                }
                try {
                    $line = $ex;
                    $line = $ex;
                    if (!$region.$originalWidth) {
                        $line = $ex;
                        if (!$region.$originalHeight) {
                            $line = $ex;
                            $region.$originalWidth = $region.$width0;
                            $region.$originalHeight = $region.$height1;
                        }
                    }
                    $line = $ex;
                    if ($names !== null) {
                        $line = $ex;
                        if ($names.$size0 > 0) {
                            $line = $ex;
                            $imagesDir = cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0__init_0();
                            $line = $ex;
                            $region.$names = cbgu_Array_toArray($names, $imagesDir);
                            $imagesDir = cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1__init_0();
                            $line = $ex;
                            $region.$values8 = cbgu_Array_toArray($values, $imagesDir);
                            cbgu_Array_clear($names);
                            cbgu_Array_clear($values);
                        }
                    }
                    $line = $ex;
                    cbgu_Array_add($this.$regions1, $region);
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $ex = $$je;
                        break b;
                    } else{
                        $packFile = $$je;
                        break a;
                    }
                }
            }
            try {
                $line = $ex;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $ex = $$je;
                    break b;
                } else{
                    $packFile = $$je;
                    break a;
                }
            }
            cbgu_StreamUtils_closeQuietly($reader);
            if (var$8[0]) {
                $packFile = $this.$regions1;
                $imagesDir = new cbggg_TextureAtlas$TextureAtlasData$14;
                $imagesDir.$this$049 = $this;
                cbgu_Array_sort($packFile, $imagesDir);
            }
            return;
        }
        g: {
            try {
                $imagesDir = new cbgu_GdxRuntimeException;
                $packFile = jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(705)), $packFile);
                if ($line === null) {
                    $line = $rt_s(9);
                    break g;
                }
                $line = jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(706)), $line));
                break g;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                $packFile = $$je;
                break a;

            }
        }
        try {
            cbgu_GdxRuntimeException__init_1($imagesDir, jl_StringBuilder_toString(jl_StringBuilder_append0($packFile, $line)), $ex);
            $rt_throw($imagesDir);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $packFile = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly($reader);
    $rt_throw($packFile);
},
cbggg_TextureAtlas$TextureAtlasData_readEntry = ($entry, $line) => {
    let $colon, $i, $lastMatch, $comma;
    if ($line === null)
        return 0;
    $line = jl_String_trim($line);
    if (!$line.$nativeString.length)
        return 0;
    $colon = jl_String_indexOf0($line, 58);
    if ($colon == (-1))
        return 0;
    $entry = $entry.data;
    $entry[0] = jl_String_trim(jl_String_substring($line, 0, $colon));
    $i = 1;
    $lastMatch = $colon + 1 | 0;
    while (true) {
        $comma = jl_String_indexOf($line, 44, $lastMatch);
        if ($comma == (-1)) {
            $entry[$i] = jl_String_trim(jl_String_substring0($line, $lastMatch));
            return $i;
        }
        $entry[$i] = jl_String_trim(jl_String_substring($line, $lastMatch, $comma));
        $lastMatch = $comma + 1 | 0;
        if ($i == 4)
            break;
        $i = $i + 1 | 0;
    }
    return 4;
};
function cbggg_BitmapFont$Glyph() {
    let a = this; jl_Object.call(a);
    a.$id = 0;
    a.$srcX = 0;
    a.$srcY = 0;
    a.$width = 0;
    a.$height = 0;
    a.$u0 = 0.0;
    a.$v0 = 0.0;
    a.$u20 = 0.0;
    a.$v20 = 0.0;
    a.$xoffset = 0;
    a.$yoffset = 0;
    a.$xadvance = 0;
    a.$kerning = null;
    a.$fixedWidth = 0;
    a.$page = 0;
}
let cbggg_BitmapFont$Glyph__init_0 = $this => {
    $this.$page = 0;
},
cbggg_BitmapFont$Glyph__init_ = () => {
    let var_0 = new cbggg_BitmapFont$Glyph();
    cbggg_BitmapFont$Glyph__init_0(var_0);
    return var_0;
},
cbggg_BitmapFont$Glyph_setKerning = ($this, $ch, $value) => {
    let var$3, var$4, $page;
    if ($this.$kerning === null)
        $this.$kerning = $rt_createArray($rt_arraycls($rt_bytecls), 128);
    var$3 = $this.$kerning.data;
    var$4 = $ch >>> 9 | 0;
    $page = var$3[var$4];
    if ($page === null) {
        $page = $rt_createByteArray(512);
        var$3[var$4] = $page;
    }
    $page.data[$ch & 511] = $value << 24 >> 24;
},
cbggg_BitmapFont$Glyph_toString = $this => {
    return jl_Character_toString($this.$id & 65535);
};
function psm_Menu$PagesBox() {
    let a = this; psm_Menu$CursorBox.call(a);
    a.$line2 = null;
    a.$scroll = null;
    a.$counter = null;
    a.$pages0 = null;
    a.$textColors = null;
    a.$scrollColors = null;
    a.$counterColors = null;
    a.$textOffset = null;
    a.$scrollHeight = 0.0;
    a.$pageWidth = 0.0;
    a.$scrollWidth = 0.0;
}
let psm_Menu$PagesBox__init_0 = ($this, $pages, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW, $scrollHeight, $pageWidth, $textX, $textY) => {
    let var$12, $coordinates, var$14;
    var$12 = $pages.data;
    psm_Menu$CursorBox__init_($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW);
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$14 = $coordinates.data;
    var$14[0] = cbgg_Color__init_((-2135700250));
    var$14[1] = cbgg_Color__init_((-857276417));
    $this.$textColors = $coordinates;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$14 = $coordinates.data;
    var$14[0] = cbgg_Color__init_(1719703876);
    var$14[1] = cbgg_Color__init_((-2135700344));
    $this.$scrollColors = $coordinates;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$14 = $coordinates.data;
    var$14[0] = cbgg_Color__init_((-2135700250));
    var$14[1] = cbgg_Color__init_((-857276417));
    $this.$counterColors = $coordinates;
    $this.$pages0 = $pages;
    $this.$scrollHeight = $scrollHeight;
    $this.$pageWidth = $pageWidth;
    $this.$textOffset = cbgm_Vector2__init_($textX, $textY);
    $pageWidth = $width - $pageWidth;
    $this.$scrollWidth = $pageWidth / var$12.length;
    $coordinates = $rt_createFloatArray(12);
    $pages = $coordinates.data;
    $pages[0] = 0.0;
    $pages[1] = $scrollHeight;
    $pages[2] = 0.0;
    $pages[3] = $height - $cornerNW;
    $pages[4] = $cornerNW;
    $pages[5] = $height;
    $pages[6] = $width - $cornerNE;
    $pages[7] = $height;
    $pages[8] = $width;
    $pages[9] = $height - $cornerNE;
    $pages[10] = $width;
    $pages[11] = $scrollHeight;
    cbgm_GeometryUtils_ensureClockwise($coordinates);
    $this.$line2 = cbgm_Polygon__init_($coordinates);
    $pages = $rt_createFloatArray(10);
    $coordinates = $pages.data;
    $coordinates[0] = $pageWidth;
    $coordinates[1] = $scrollHeight;
    $coordinates[2] = $width;
    $coordinates[3] = $scrollHeight;
    $coordinates[4] = $width;
    $coordinates[5] = $cornerSE;
    $coordinates[6] = $width - $cornerSE;
    $coordinates[7] = 0.0;
    $coordinates[8] = $pageWidth;
    $coordinates[9] = 0.0;
    cbgm_GeometryUtils_ensureClockwise($pages);
    $this.$counter = cbgm_Polygon__init_($pages);
    $pages = $rt_createFloatArray(10);
    $coordinates = $pages.data;
    $coordinates[0] = 0.0;
    $coordinates[1] = $scrollHeight;
    $width = $this.$scrollWidth;
    $coordinates[2] = $width;
    $coordinates[3] = $scrollHeight;
    $coordinates[4] = $width;
    $coordinates[5] = 0.0;
    $coordinates[6] = $cornerSW;
    $coordinates[7] = 0.0;
    $coordinates[8] = 0.0;
    $coordinates[9] = $cornerSW;
    cbgm_GeometryUtils_ensureClockwise($pages);
    $this.$scroll = cbgm_Polygon__init_($pages);
},
psm_Menu$PagesBox__init_ = (var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10) => {
    let var_11 = new psm_Menu$PagesBox();
    psm_Menu$PagesBox__init_0(var_11, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10);
    return var_11;
},
psm_Menu$PagesBox_draw = ($this, $position, $page, $active) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    cbgm_Polygon_resetTransformations($this.$polygon4);
    cbgm_Polygon_translate($this.$polygon4, $position.$x, $position.$y);
    pss_Section_setDrawerColor0(!$active ? $this.$boxColors.data[0] : $this.$cursorColors.data[0]);
    psm_Menu_$callClinit();
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$polygon4);
    var$4 = pss_Section_textFont;
    var$5 = $this.$textColors;
    var$6 = !$active ? 0 : 1;
    pss_Section_setFontColor(var$4, var$5.data[var$6]);
    var$7 = pss_Section_textFont;
    var$4 = pss_Section_batch;
    var$8 = $this.$pages0.data[$page];
    var$9 = $position.$x;
    var$10 = $this.$textOffset;
    var$11 = var$10.$x;
    cbggg_BitmapFont_draw(var$7, var$4, var$8, var$9 + var$11, $position.$y + $this.$height2 - var$10.$y, $this.$width1 - var$11 * 2.0, 8, 1);
    cbgm_Polygon_resetTransformations($this.$scroll);
    cbgm_Polygon_translate($this.$scroll, $position.$x + $page * $this.$scrollWidth, $position.$y);
    var$5 = $this.$scrollColors;
    var$6 = !$active ? 0 : 1;
    pss_Section_setDrawerColor0(var$5.data[var$6]);
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$scroll);
    cbgm_Polygon_resetTransformations($this.$counter);
    cbgm_Polygon_translate($this.$counter, $position.$x, $position.$y);
    var$5 = $this.$scrollColors;
    var$6 = !$active ? 0 : 1;
    pss_Section_setDrawerColor0(var$5.data[var$6]);
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$counter);
    cbgm_Polygon_getCentroid($this.$counter, pss_Section_centroid);
    var$7 = pss_Section_textFont;
    var$5 = $this.$counterColors;
    var$6 = !$active ? 0 : 1;
    pss_Section_setFontColor(var$7, var$5.data[var$6]);
    var$7 = pss_Section_textFont;
    var$4 = pss_Section_batch;
    $page = $page + 1 | 0;
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_AbstractStringBuilder_append(var$8, $rt_s(707));
    jl_AbstractStringBuilder_append1(var$8, $page);
    var$10 = jl_AbstractStringBuilder_toString(var$8);
    var$8 = pss_Section_centroid;
    cbggg_BitmapFont_draw(var$7, var$4, var$10, var$8.$x - $this.$pageWidth / 2.0, var$8.$y + cbggg_BitmapFont_getCapHeight(pss_Section_textFont) / 2.0, $this.$pageWidth, 1, 0);
    cbgm_Polygon_resetTransformations($this.$line2);
    cbgm_Polygon_translate($this.$line2, $position.$x, $position.$y);
    pss_Section_setDrawerColor0(!$active ? $this.$boxColors.data[1] : $this.$cursorColors.data[1]);
    ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$line2);
    pss_Section_setDrawerColor0(!$active ? $this.$boxColors.data[1] : $this.$cursorColors.data[1]);
    ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$counter);
};
function psm_Menu$TextButton() {
    let a = this; psm_Menu$CursorBox.call(a);
    a.$text1 = null;
    a.$textColors0 = null;
}
let psm_Menu$TextButton__init_0 = ($this, $text, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW) => {
    let var$8, var$9;
    psm_Menu$CursorBox__init_($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW);
    var$8 = $rt_createArray(cbgg_Color, 2);
    var$9 = var$8.data;
    var$9[0] = cbgg_Color__init_((-2135700250));
    var$9[1] = cbgg_Color__init_((-857276417));
    $this.$textColors0 = var$8;
    $this.$text1 = $text;
},
psm_Menu$TextButton__init_ = (var_0, var_1, var_2, var_3, var_4, var_5, var_6) => {
    let var_7 = new psm_Menu$TextButton();
    psm_Menu$TextButton__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
    return var_7;
},
psm_Menu$TextButton_draw = ($this, $position, $active) => {
    let var$3, var$4, var$5;
    psm_Menu$CursorBox_draw($this, $position, $active);
    $position = $this.$polygon4;
    psm_Menu_$callClinit();
    pss_Section_$callClinit();
    cbgm_Polygon_getCentroid($position, pss_Section_centroid);
    var$3 = pss_Section_textFont;
    var$4 = $this.$textColors0;
    $active = !$active ? 0 : 1;
    pss_Section_setFontColor(var$3, var$4.data[$active]);
    var$5 = pss_Section_textFont;
    cbggg_BitmapFont_draw(var$5, pss_Section_batch, $this.$text1, $this.$polygon4.$x6, pss_Section_centroid.$y + cbggg_BitmapFont_getCapHeight(var$5) / 2.0, $this.$width1, 1, 1);
};
function psm_Menu$BarBox$Units() {
    let a = this; jl_Object.call(a);
    a.$border = null;
    a.$unit = null;
    a.$first2 = null;
    a.$labels = null;
    a.$borderColors = null;
    a.$unitColors = null;
    a.$selectedColors = null;
    a.$unselectedColors = null;
    a.$borderWidth = 0.0;
    a.$firstWidth = 0.0;
    a.$unitWidth = 0.0;
    a.$height11 = 0.0;
}
let psm_Menu$BarBox$Units__init_0 = ($this, $labels, $firstWidth, $unitWidth, $height, $borderWidth, $corner) => {
    let var$7, $coordinates, var$9, $width, var$11, var$12, var$13;
    var$7 = $labels.data;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$9 = $coordinates.data;
    var$9[0] = cbgg_Color__init_(1717986952);
    var$9[1] = cbgg_Color__init_((-2004318072));
    $this.$borderColors = $coordinates;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$9 = $coordinates.data;
    var$9[0] = cbgg_Color__init_(2004318088);
    var$9[1] = cbgg_Color__init_((-1431655800));
    $this.$unitColors = $coordinates;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$9 = $coordinates.data;
    var$9[0] = cbgg_Color__init_((-120));
    var$9[1] = cbgg_Color__init_((-1));
    $this.$selectedColors = $coordinates;
    $coordinates = $rt_createArray(cbgg_Color, 2);
    var$9 = $coordinates.data;
    var$9[0] = cbgg_Color__init_((-188));
    var$9[1] = cbgg_Color__init_((-120));
    $this.$unselectedColors = $coordinates;
    $this.$labels = $labels;
    $this.$firstWidth = $firstWidth;
    $this.$unitWidth = $unitWidth;
    $this.$height11 = $height;
    $this.$borderWidth = $borderWidth;
    $coordinates = $rt_createFloatArray(16);
    $labels = $coordinates.data;
    $labels[0] = $corner;
    $labels[1] = 0.0;
    $labels[2] = 0.0;
    $labels[3] = $corner;
    $labels[4] = 0.0;
    $width = $height - $corner;
    $labels[5] = $width;
    $labels[6] = $corner;
    $labels[7] = $height;
    var$11 = $firstWidth - $corner;
    $labels[8] = var$11;
    $labels[9] = $height;
    $labels[10] = $firstWidth;
    $labels[11] = $width;
    $labels[12] = $firstWidth;
    $labels[13] = $corner;
    $labels[14] = var$11;
    $labels[15] = 0.0;
    cbgm_GeometryUtils_ensureClockwise($coordinates);
    $this.$first2 = cbgm_Polygon__init_($coordinates);
    $labels = $rt_createFloatArray(16);
    $coordinates = $labels.data;
    var$12 =  -$corner;
    $coordinates[0] = var$12;
    $coordinates[1] = 0.0;
    $coordinates[2] = 0.0;
    $coordinates[3] = $corner;
    $coordinates[4] = 0.0;
    $coordinates[5] = $width;
    $coordinates[6] = var$12;
    $coordinates[7] = $height;
    var$11 = $unitWidth - $corner;
    $coordinates[8] = var$11;
    $coordinates[9] = $height;
    $coordinates[10] = $unitWidth;
    $coordinates[11] = $width;
    $coordinates[12] = $unitWidth;
    $coordinates[13] = $corner;
    $coordinates[14] = var$11;
    $coordinates[15] = 0.0;
    cbgm_GeometryUtils_ensureClockwise($labels);
    $this.$unit = cbgm_Polygon__init_($labels);
    var$13 = var$7.length;
    $width = $firstWidth + (var$13 - 1 | 0) * $unitWidth + (var$13 + 1 | 0) * $borderWidth;
    $firstWidth = $height + 2.0 * $borderWidth;
    $unitWidth = $borderWidth * 0.75;
    $labels = $rt_createFloatArray(16);
    $coordinates = $labels.data;
    $height = $corner + $unitWidth;
    $coordinates[0] = $height;
    $coordinates[1] = 0.0;
    $coordinates[2] = 0.0;
    $coordinates[3] = $height;
    $coordinates[4] = 0.0;
    $borderWidth = $firstWidth - $corner - $unitWidth;
    $coordinates[5] = $borderWidth;
    $coordinates[6] = $height;
    $coordinates[7] = $firstWidth;
    $unitWidth = $width - $corner - $unitWidth;
    $coordinates[8] = $unitWidth;
    $coordinates[9] = $firstWidth;
    $coordinates[10] = $width;
    $coordinates[11] = $borderWidth;
    $coordinates[12] = $width;
    $coordinates[13] = $height;
    $coordinates[14] = $unitWidth;
    $coordinates[15] = 0.0;
    cbgm_GeometryUtils_ensureClockwise($labels);
    $this.$border = cbgm_Polygon__init_($labels);
},
psm_Menu$BarBox$Units__init_ = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new psm_Menu$BarBox$Units();
    psm_Menu$BarBox$Units__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
},
psm_Menu$BarBox$Units_draw = ($this, $position, $value, $active) => {
    let var$4, var$5, var$6, var$7, $index, var$9, var$10, var$11, $index_0;
    cbgm_Polygon_resetTransformations($this.$border);
    var$4 = $this.$border;
    var$5 = $position.$x;
    var$6 = $this.$borderWidth;
    cbgm_Polygon_translate(var$4, var$5 - var$6, $position.$y - var$6);
    var$7 = $this.$borderColors;
    $index = !$active ? 0 : 1;
    pss_Section_setDrawerColor0(var$7.data[$index]);
    psm_Menu_$callClinit();
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$border);
    cbgm_Polygon_resetTransformations($this.$first2);
    cbgm_Polygon_translate($this.$first2, $position.$x, $position.$y);
    var$7 = $this.$unitColors;
    $index = !$active ? 0 : 1;
    pss_Section_setDrawerColor0(var$7.data[$index]);
    ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$first2);
    cbgm_Polygon_getCentroid($this.$first2, pss_Section_centroid);
    if ($value) {
        var$9 = pss_Section_textFont;
        var$7 = $this.$unselectedColors;
        $index = !$active ? 0 : 1;
        pss_Section_setFontColor(var$9, var$7.data[$index]);
    } else {
        var$7 = $this.$selectedColors;
        $index = !$active ? 0 : 1;
        pss_Section_setDrawerColor0(var$7.data[$index]);
        ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$first2);
        var$9 = pss_Section_textFont;
        var$7 = $this.$selectedColors;
        $index = !$active ? 0 : 1;
        pss_Section_setFontColor(var$9, var$7.data[$index]);
    }
    var$10 = pss_Section_textFont;
    cbggg_BitmapFont_draw(var$10, pss_Section_batch, $this.$labels.data[0], $this.$first2.$x6, pss_Section_centroid.$y + cbggg_BitmapFont_getCapHeight(var$10) / 2.0, $this.$firstWidth, 1, 0);
    $index = $this.$labels.data.length - 1 | 0;
    var$11 = $value - 1 | 0;
    while (true) {
        $index_0 = $index + (-1) | 0;
        if (!$index)
            break;
        cbgm_Polygon_resetTransformations($this.$unit);
        var$4 = $this.$unit;
        var$5 = $position.$x + $this.$firstWidth;
        var$6 = $this.$borderWidth;
        cbgm_Polygon_translate(var$4, var$5 + var$6 + $index_0 * ($this.$unitWidth + var$6), $position.$y);
        var$7 = $this.$unitColors;
        $value = !$active ? 0 : 1;
        pss_Section_setDrawerColor0(var$7.data[$value]);
        ses_ShapeDrawer_filledPolygon(pss_Section_drawer, $this.$unit);
        cbgm_Polygon_getCentroid($this.$unit, pss_Section_centroid);
        if ($index_0 != var$11) {
            var$9 = pss_Section_textFont;
            var$7 = $this.$unselectedColors;
            $value = !$active ? 0 : 1;
            pss_Section_setFontColor(var$9, var$7.data[$value]);
        } else {
            var$7 = $this.$selectedColors;
            $value = !$active ? 0 : 1;
            pss_Section_setDrawerColor0(var$7.data[$value]);
            ses_ShapeDrawer_polygon(pss_Section_drawer, $this.$unit);
            var$9 = pss_Section_textFont;
            var$7 = $this.$selectedColors;
            $value = !$active ? 0 : 1;
            pss_Section_setFontColor(var$9, var$7.data[$value]);
        }
        var$10 = pss_Section_textFont;
        cbggg_BitmapFont_draw(var$10, pss_Section_batch, $this.$labels.data[$index_0 + 1 | 0], $this.$unit.$x6, pss_Section_centroid.$y + cbggg_BitmapFont_getCapHeight(var$10) / 2.0, $this.$unitWidth, 1, 0);
        $index = $index_0;
    }
};
function psm_Menu$BarBox() {
    let a = this; psm_Menu$CursorBox.call(a);
    a.$units = null;
    a.$label0 = null;
    a.$unitsPosition = null;
    a.$labelColors0 = null;
    a.$offsetPosition = 0.0;
    a.$offset1 = 0.0;
}
let psm_Menu$BarBox__init_0 = ($this, $units, $label, $width, $height, $offsetPosition, $offset, $cornerNE, $cornerSE, $cornerSW, $cornerNW) => {
    let var$11, var$12;
    psm_Menu$CursorBox__init_($this, $width, $height, $cornerNE, $cornerSE, $cornerSW, $cornerNW);
    $this.$unitsPosition = new cbgm_Vector2;
    var$11 = $rt_createArray(cbgg_Color, 2);
    var$12 = var$11.data;
    var$12[0] = cbgg_Color__init_((-2135700250));
    var$12[1] = cbgg_Color__init_((-857276417));
    $this.$labelColors0 = var$11;
    $this.$units = $units;
    $this.$label0 = $label;
    $this.$offsetPosition = $offsetPosition;
    $this.$offset1 = $offset;
},
psm_Menu$BarBox__init_ = (var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) => {
    let var_10 = new psm_Menu$BarBox();
    psm_Menu$BarBox__init_0(var_10, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9);
    return var_10;
},
psm_Menu$BarBox_draw = ($this, $position, $value, $active) => {
    let var$4, var$5, var$6, var$7, var$8;
    psm_Menu$CursorBox_draw($this, $position, $active);
    $position = $this.$polygon4;
    psm_Menu_$callClinit();
    pss_Section_$callClinit();
    cbgm_Polygon_getCentroid($position, pss_Section_centroid);
    $position = pss_Section_textFont;
    var$4 = $this.$labelColors0;
    var$5 = !$active ? 0 : 1;
    pss_Section_setFontColor($position, var$4.data[var$5]);
    var$6 = pss_Section_textFont;
    var$7 = pss_Section_batch;
    var$8 = $this.$label0;
    $position = pss_Section_centroid;
    cbggg_BitmapFont_draw(var$6, var$7, var$8, $position.$x + $this.$offsetPosition - $this.$offset1, $position.$y + cbggg_BitmapFont_getCapHeight(var$6) / 2.0, 0.0, 16, 0);
    $position = $this.$units;
    var$7 = $this.$unitsPosition;
    var$6 = pss_Section_centroid;
    psm_Menu$BarBox$Units_draw($position, cbgm_Vector2_set(var$7, var$6.$x + $this.$offsetPosition + $this.$offset1, var$6.$y - $position.$height11 / 2.0), $value, $active);
};
function ju_Locale() {
    let a = this; jl_Object.call(a);
    a.$countryCode = null;
    a.$languageCode = null;
    a.$variantCode = null;
}
let ju_Locale_defaultLocale = null,
ju_Locale_CANADA = null,
ju_Locale_CANADA_FRENCH = null,
ju_Locale_CHINA = null,
ju_Locale_CHINESE = null,
ju_Locale_ENGLISH = null,
ju_Locale_FRANCE = null,
ju_Locale_FRENCH = null,
ju_Locale_GERMAN = null,
ju_Locale_GERMANY = null,
ju_Locale_ITALIAN = null,
ju_Locale_ITALY = null,
ju_Locale_JAPAN = null,
ju_Locale_JAPANESE = null,
ju_Locale_KOREA = null,
ju_Locale_KOREAN = null,
ju_Locale_PRC = null,
ju_Locale_SIMPLIFIED_CHINESE = null,
ju_Locale_TAIWAN = null,
ju_Locale_TRADITIONAL_CHINESE = null,
ju_Locale_UK = null,
ju_Locale_US = null,
ju_Locale_ROOT = null,
ju_Locale_$callClinit = () => {
    ju_Locale_$callClinit = $rt_eraseClinit(ju_Locale);
    ju_Locale__clinit_();
},
ju_Locale__init_2 = ($this, $language, $country) => {
    ju_Locale_$callClinit();
    ju_Locale__init_1($this, $language, $country, $rt_s(9));
},
ju_Locale__init_ = (var_0, var_1) => {
    let var_2 = new ju_Locale();
    ju_Locale__init_2(var_2, var_0, var_1);
    return var_2;
},
ju_Locale__init_1 = ($this, $language, $country, $variant) => {
    ju_Locale_$callClinit();
    if ($language !== null && $country !== null && $variant !== null) {
        if (jl_String_isEmpty($language) && jl_String_isEmpty($country)) {
            $this.$languageCode = $rt_s(9);
            $this.$countryCode = $rt_s(9);
            $this.$variantCode = $variant;
            return;
        }
        $this.$languageCode = $language;
        $this.$countryCode = $country;
        $this.$variantCode = $variant;
        return;
    }
    $language = new jl_NullPointerException;
    jl_Throwable__init_($language);
    $rt_throw($language);
},
ju_Locale__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ju_Locale();
    ju_Locale__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
ju_Locale_equals = ($this, $object) => {
    let $o;
    if ($object === $this)
        return 1;
    if (!($object instanceof ju_Locale))
        return 0;
    $o = $object;
    return jl_String_equals($this.$languageCode, $o.$languageCode) && jl_String_equals($this.$countryCode, $o.$countryCode) && jl_String_equals($this.$variantCode, $o.$variantCode) ? 1 : 0;
},
ju_Locale_getDefault = () => {
    ju_Locale_$callClinit();
    return ju_Locale_defaultLocale;
},
ju_Locale_hashCode = $this => {
    return (jl_String_hashCode($this.$countryCode) + jl_String_hashCode($this.$languageCode) | 0) + jl_String_hashCode($this.$variantCode) | 0;
},
ju_Locale_toString = $this => {
    let $result;
    $result = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($result);
    jl_AbstractStringBuilder_append0($result, $this.$languageCode);
    if (!jl_String_isEmpty($this.$countryCode)) {
        jl_AbstractStringBuilder_append2($result, 95);
        jl_AbstractStringBuilder_append0($result, $this.$countryCode);
    }
    if (!jl_String_isEmpty($this.$variantCode) && $result.$length1 > 0) {
        if (!jl_String_isEmpty($this.$countryCode))
            jl_AbstractStringBuilder_append2($result, 95);
        else
            jl_AbstractStringBuilder_append0($result, $rt_s(708));
        jl_AbstractStringBuilder_append0($result, $this.$variantCode);
    }
    return jl_AbstractStringBuilder_toString($result);
},
ju_Locale__clinit_ = () => {
    let $localeName, $countryIndex;
    ju_Locale_CANADA = ju_Locale__init_($rt_s(709), $rt_s(710));
    ju_Locale_CANADA_FRENCH = ju_Locale__init_($rt_s(711), $rt_s(710));
    ju_Locale_CHINA = ju_Locale__init_($rt_s(712), $rt_s(713));
    ju_Locale_CHINESE = ju_Locale__init_($rt_s(712), $rt_s(9));
    ju_Locale_ENGLISH = ju_Locale__init_($rt_s(709), $rt_s(9));
    ju_Locale_FRANCE = ju_Locale__init_($rt_s(711), $rt_s(714));
    ju_Locale_FRENCH = ju_Locale__init_($rt_s(711), $rt_s(9));
    ju_Locale_GERMAN = ju_Locale__init_($rt_s(715), $rt_s(9));
    ju_Locale_GERMANY = ju_Locale__init_($rt_s(715), $rt_s(716));
    ju_Locale_ITALIAN = ju_Locale__init_($rt_s(717), $rt_s(9));
    ju_Locale_ITALY = ju_Locale__init_($rt_s(717), $rt_s(718));
    ju_Locale_JAPAN = ju_Locale__init_($rt_s(719), $rt_s(720));
    ju_Locale_JAPANESE = ju_Locale__init_($rt_s(719), $rt_s(9));
    ju_Locale_KOREA = ju_Locale__init_($rt_s(721), $rt_s(722));
    ju_Locale_KOREAN = ju_Locale__init_($rt_s(721), $rt_s(9));
    ju_Locale_PRC = ju_Locale__init_($rt_s(712), $rt_s(713));
    ju_Locale_SIMPLIFIED_CHINESE = ju_Locale__init_($rt_s(712), $rt_s(713));
    ju_Locale_TAIWAN = ju_Locale__init_($rt_s(712), $rt_s(723));
    ju_Locale_TRADITIONAL_CHINESE = ju_Locale__init_($rt_s(712), $rt_s(723));
    ju_Locale_UK = ju_Locale__init_($rt_s(709), $rt_s(724));
    ju_Locale_US = ju_Locale__init_($rt_s(709), $rt_s(725));
    ju_Locale_ROOT = ju_Locale__init_($rt_s(9), $rt_s(9));
    if (otciu_CLDRHelper_$$metadata$$10 === null)
        otciu_CLDRHelper_$$metadata$$10 = otciu_CLDRHelper_getDefaultLocale$$create();
    $localeName = (otciu_CLDRHelper_$$metadata$$10.value !== null ? $rt_str(otciu_CLDRHelper_$$metadata$$10.value) : null);
    $countryIndex = jl_String_indexOf0($localeName, 95);
    ju_Locale_defaultLocale = ju_Locale__init_0(jl_String_substring($localeName, 0, $countryIndex), jl_String_substring0($localeName, $countryIndex + 1 | 0), $rt_s(9));
};
function cbgc_Controllers$1() {
    jl_Object.call(this);
    this.$val$app = null;
}
let cbgc_Controllers$1_resume = $this => {
    return;
},
cbgc_Controllers$1_pause = $this => {
    return;
},
cbgc_ControllerManager = $rt_classWithoutFields(0);
function cbgc_AbstractControllerManager() {
    jl_Object.call(this);
    this.$controllers0 = null;
}
let cbgc_ControllerManagerStub = $rt_classWithoutFields(cbgc_AbstractControllerManager),
cbgc_ControllerManagerStub__init_ = $this => {
    $this.$controllers0 = cbgu_Array__init_();
},
cbgc_ControllerManagerStub__init_0 = () => {
    let var_0 = new cbgc_ControllerManagerStub();
    cbgc_ControllerManagerStub__init_(var_0);
    return var_0;
};
function ccvu_ViewportQuadMesh() {
    jl_Object.call(this);
    this.$mesh1 = null;
}
let ccvu_ViewportQuadMesh_verts = null,
ccvu_ViewportQuadMesh__init_ = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $rt_wrapArray(cbgg_VertexAttribute, [cbgg_VertexAttribute__init_(1, 2, $rt_s(527)), cbgg_VertexAttribute__init_(16, 2, $rt_s(529))]);
    var$2 = new cbgg_Mesh;
    cbgg_Mesh_$callClinit();
    var$2.$autoBind = 1;
    var$2.$isInstanced = 0;
    var$2.$tmpV = cbgm_Vector3__init_();
    var$3 = cbgg_VertexAttributes__init_(var$1);
    var$2.$vertices = cbg_Gdx_gl30 === null ? cbggg_VertexBufferObject__init_(1, 4, var$3) : cbggg_VertexBufferObjectWithVAO__init_(1, 4, var$3);
    var$2.$indices = cbggg_IndexBufferObject__init_(1, 0);
    var$2.$isVertexArray = 0;
    cbgg_Mesh_addManagedMesh(cbg_Gdx_app, var$2);
    $this.$mesh1 = var$2;
    var$1 = ccvu_ViewportQuadMesh_verts;
    var$4 = var$1.data;
    var$2.$vertices.$setVertices(var$1, 0, var$4.length);
},
ccvu_ViewportQuadMesh__init_0 = () => {
    let var_0 = new ccvu_ViewportQuadMesh();
    ccvu_ViewportQuadMesh__init_(var_0);
    return var_0;
},
ccvu_ViewportQuadMesh_render = ($this, $program) => {
    cbgg_Mesh_render($this.$mesh1, $program, 6, 0, 4);
},
ccvu_ViewportQuadMesh__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createFloatArray(16);
    var$2 = var$1.data;
    ccvu_ViewportQuadMesh_verts = var$1;
    var$2[0] = (-1.0);
    var$2[1] = (-1.0);
    var$2[4] = 1.0;
    var$2[5] = (-1.0);
    var$2[8] = 1.0;
    var$2[9] = 1.0;
    var$2[12] = (-1.0);
    var$2[13] = 1.0;
    var$2[2] = 0.0;
    var$2[3] = 0.0;
    var$2[6] = 1.0;
    var$2[7] = 0.0;
    var$2[10] = 1.0;
    var$2[11] = 1.0;
    var$2[14] = 0.0;
    var$2[15] = 1.0;
},
jn_ArrayBufferViewProvider = $rt_classWithoutFields(0);
function jn_ByteBufferJsImpl() {
    let a = this; jn_ByteBuffer.call(a);
    a.$array4 = null;
    a.$arrayOffset = 0;
    a.$data0 = null;
    a.$direct = 0;
    a.$readOnly0 = 0;
}
let jn_ByteBufferJsImpl__init_0 = ($this, $array, $arrayOffset, $data, $direct, $readOnly) => {
    jn_Buffer__init_($this);
    $this.$order0 = jn_ByteOrder_BIG_ENDIAN;
    $this.$array4 = $array;
    $this.$arrayOffset = $arrayOffset;
    $this.$data0 = $data;
    $this.$direct = $direct;
    $this.$readOnly0 = $readOnly;
},
jn_ByteBufferJsImpl__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_ByteBufferJsImpl();
    jn_ByteBufferJsImpl__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_ByteBufferJsImpl_capacityImpl = $this => {
    return $this.$data0.length;
},
jn_ByteBufferJsImpl_get = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$data0[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jn_ByteBufferJsImpl_asShortBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 2 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Int16Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_ShortBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 2 | 0);
    var$3 = new jn_ShortBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_ShortBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly4 = var$4;
    var$3.$data8 = $slice;
    var$3.$littleEndian2 = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_asIntBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 4 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Int32Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_IntBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 4 | 0);
    var$3 = new jn_IntBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_IntBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly3 = var$4;
    var$3.$data7 = $slice;
    var$3.$littleEndian1 = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_asFloatBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 4 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Float32Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_FloatBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 4 | 0);
    var$3 = new jn_FloatBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_FloatBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly7 = var$4;
    var$3.$data4 = $slice;
    var$3.$littleEndian = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_getArrayBufferView = $this => {
    return $this.$data0;
},
cgxgbt_TeaTool = $rt_classWithoutFields(),
cgxgbt_TeaTool_isProd = 0,
cgxgbt_TeaTool__init_ = $this => {
    return;
},
cgxgbt_TeaTool__init_0 = () => {
    let var_0 = new cgxgbt_TeaTool();
    cgxgbt_TeaTool__init_(var_0);
    return var_0;
},
cgxgbt_TeaTool__clinit_ = () => {
    cgxgbt_TeaTool_isProd = 1;
},
jl_ReflectiveOperationException = $rt_classWithoutFields(jl_Exception),
jl_ReflectiveOperationException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ReflectiveOperationException__init_0 = () => {
    let var_0 = new jl_ReflectiveOperationException();
    jl_ReflectiveOperationException__init_(var_0);
    return var_0;
},
jl_ClassNotFoundException = $rt_classWithoutFields(jl_ReflectiveOperationException),
jl_ClassNotFoundException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ClassNotFoundException__init_0 = () => {
    let var_0 = new jl_ClassNotFoundException();
    jl_ClassNotFoundException__init_(var_0);
    return var_0;
},
jl_InstantiationException = $rt_classWithoutFields(jl_ReflectiveOperationException),
jl_InstantiationException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_InstantiationException__init_0 = () => {
    let var_0 = new jl_InstantiationException();
    jl_InstantiationException__init_(var_0);
    return var_0;
},
jl_IllegalAccessException = $rt_classWithoutFields(jl_ReflectiveOperationException),
jl_IllegalAccessException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_IllegalAccessException__init_0 = () => {
    let var_0 = new jl_IllegalAccessException();
    jl_IllegalAccessException__init_(var_0);
    return var_0;
},
jn_IntBuffer = $rt_classWithoutFields(jn_Buffer),
jn_IntBuffer_position0 = ($this, $newPosition) => {
    jn_Buffer_position($this, $newPosition);
    return $this;
},
jn_IntBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
},
jn_IntBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
},
jn_FloatBuffer = $rt_classWithoutFields(jn_Buffer),
jn_FloatBuffer_put = ($this, $src, $offset, $length) => {
    let var$4;
    if ($this.$readOnly()) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        $this.$putImpl($this.$position0, $src, $offset, $length);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
},
jn_FloatBuffer_limit0 = ($this, $newLimit) => {
    jn_Buffer_limit($this, $newLimit);
    return $this;
},
jn_FloatBuffer_position0 = ($this, $newPosition) => {
    jn_Buffer_position($this, $newPosition);
    return $this;
},
jn_FloatBuffer_flip = $this => {
    jn_Buffer_flip($this);
    return $this;
},
jn_FloatBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
},
jn_FloatBuffer_limit = ($this, var$1) => {
    jn_Buffer_limit($this, var$1);
    return $this;
},
jn_FloatBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
};
function cbgg_Camera() {
    let a = this; jl_Object.call(a);
    a.$position5 = null;
    a.$direction = null;
    a.$up = null;
    a.$projection = null;
    a.$view = null;
    a.$combined = null;
    a.$invProjectionView = null;
    a.$near = 0.0;
    a.$far = 0.0;
    a.$viewportWidth = 0.0;
    a.$viewportHeight = 0.0;
    a.$frustum = null;
    a.$tmpVec = null;
    a.$ray = null;
}
function cbgg_OrthographicCamera() {
    let a = this; cbgg_Camera.call(a);
    a.$zoom = 0.0;
    a.$tmp0 = null;
}
let cbgg_OrthographicCamera__init_ = $this => {
    let var$1, var$2, var$3;
    $this.$position5 = cbgm_Vector3__init_();
    $this.$direction = cbgm_Vector3__init_0(0.0, 0.0, (-1.0));
    $this.$up = cbgm_Vector3__init_0(0.0, 1.0, 0.0);
    $this.$projection = cbgm_Matrix4__init_();
    $this.$view = cbgm_Matrix4__init_();
    $this.$combined = cbgm_Matrix4__init_();
    $this.$invProjectionView = cbgm_Matrix4__init_();
    $this.$near = 1.0;
    $this.$far = 100.0;
    $this.$viewportWidth = 0.0;
    $this.$viewportHeight = 0.0;
    $this.$frustum = cbgm_Frustum__init_0();
    $this.$tmpVec = cbgm_Vector3__init_();
    var$1 = new cbgmc_Ray;
    var$2 = cbgm_Vector3__init_();
    var$3 = cbgm_Vector3__init_();
    cbgmc_Ray_$callClinit();
    var$1.$origin = cbgm_Vector3__init_();
    var$1.$direction0 = cbgm_Vector3__init_();
    cbgm_Vector3_set0(var$1.$origin, var$2);
    cbgm_Vector3_nor(cbgm_Vector3_set0(var$1.$direction0, var$3));
    $this.$ray = var$1;
    $this.$zoom = 1.0;
    $this.$tmp0 = cbgm_Vector3__init_();
    $this.$near = 0.0;
},
cbgg_OrthographicCamera__init_0 = () => {
    let var_0 = new cbgg_OrthographicCamera();
    cbgg_OrthographicCamera__init_(var_0);
    return var_0;
};
function cbgg_VertexAttributes() {
    let a = this; jl_Object.call(a);
    a.$attributes3 = null;
    a.$vertexSize = 0;
    a.$mask5 = Long_ZERO;
    a.$boneWeightUnits = 0;
    a.$textureCoordinates = 0;
}
let cbgg_VertexAttributes__init_0 = ($this, $attributes) => {
    let var$2, var$3, $list, var$5, $i, var$7;
    $attributes = $attributes.data;
    $this.$mask5 = Long_fromInt(-1);
    $this.$boneWeightUnits = (-1);
    $this.$textureCoordinates = (-1);
    var$2 = $attributes.length;
    if (!var$2) {
        var$3 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$3, $rt_s(726));
        $rt_throw(var$3);
    }
    $list = $rt_createArray(cbgg_VertexAttribute, var$2);
    var$5 = $list.data;
    $i = 0;
    while ($i < var$2) {
        var$5[$i] = $attributes[$i];
        $i = $i + 1 | 0;
    }
    $this.$attributes3 = $list;
    var$2 = 0;
    var$7 = 0;
    while (var$7 < var$5.length) {
        a: {
            b: {
                var$3 = var$5[var$7];
                var$3.$offset0 = var$2;
                switch (var$3.$type3) {
                    case 5120:
                    case 5121:
                        break;
                    case 5122:
                    case 5123:
                        $i = 2 * var$3.$numComponents | 0;
                        break a;
                    case 5124:
                    case 5125:
                    case 5127:
                    case 5128:
                    case 5129:
                    case 5130:
                    case 5131:
                        break b;
                    case 5126:
                    case 5132:
                        $i = 4 * var$3.$numComponents | 0;
                        break a;
                    default:
                        break b;
                }
                $i = var$3.$numComponents;
                break a;
            }
            $i = 0;
        }
        var$2 = var$2 + $i | 0;
        var$7 = var$7 + 1 | 0;
    }
    $this.$vertexSize = var$2;
},
cbgg_VertexAttributes__init_ = var_0 => {
    let var_1 = new cbgg_VertexAttributes();
    cbgg_VertexAttributes__init_0(var_1, var_0);
    return var_1;
},
cbgg_VertexAttributes_size = $this => {
    return $this.$attributes3.data.length;
},
cbgg_VertexAttributes_get = ($this, $index) => {
    return $this.$attributes3.data[$index];
},
cbgm_GeometryUtils = $rt_classWithoutFields(),
cbgm_GeometryUtils_tmp1 = null,
cbgm_GeometryUtils_tmp2 = null,
cbgm_GeometryUtils_tmp3 = null,
cbgm_GeometryUtils__init_ = $this => {
    return;
},
cbgm_GeometryUtils__init_0 = () => {
    let var_0 = new cbgm_GeometryUtils();
    cbgm_GeometryUtils__init_(var_0);
    return var_0;
},
cbgm_GeometryUtils_ensureClockwise = $polygon => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$2 = $polygon.data;
    var$3 = 0;
    var$4 = var$2.length;
    if (!cbgm_GeometryUtils_isClockwise($polygon, var$3, var$4)) {
        var$5 = (var$3 + var$4 | 0) - 2 | 0;
        var$6 = var$3 + (var$4 / 2 | 0) | 0;
        while (var$3 < var$6) {
            var$7 = var$5 - var$3 | 0;
            var$8 = var$2[var$3];
            var$9 = var$3 + 1 | 0;
            var$10 = var$2[var$9];
            var$2[var$3] = var$2[var$7];
            var$4 = var$7 + 1 | 0;
            var$2[var$9] = var$2[var$4];
            var$2[var$7] = var$8;
            var$2[var$4] = var$10;
            var$3 = var$3 + 2 | 0;
        }
    }
},
cbgm_GeometryUtils_isClockwise = ($polygon, $i, $count) => {
    let $area, $last, $x1, $y1, $x2, $y2;
    if ($count <= 2)
        return 0;
    $polygon = $polygon.data;
    $area = 0.0;
    $last = ($i + $count | 0) - 2 | 0;
    $x1 = $polygon[$last];
    $y1 = $polygon[$last + 1 | 0];
    while ($i <= $last) {
        $x2 = $polygon[$i];
        $y2 = $polygon[$i + 1 | 0];
        $area = $area + $x1 * $y2 - $x2 * $y1;
        $i = $i + 2 | 0;
        $x1 = $x2;
        $y1 = $y2;
    }
    return $area >= 0.0 ? 0 : 1;
},
cbgm_GeometryUtils__clinit_ = () => {
    cbgm_GeometryUtils_tmp1 = new cbgm_Vector2;
    cbgm_GeometryUtils_tmp2 = new cbgm_Vector2;
    cbgm_GeometryUtils_tmp3 = new cbgm_Vector2;
},
cbgg_Mesh$1 = $rt_classWithoutFields(),
cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType = null,
cbgg_Mesh$1_$callClinit = () => {
    cbgg_Mesh$1_$callClinit = $rt_eraseClinit(cbgg_Mesh$1);
    cbgg_Mesh$1__clinit_();
},
cbgg_Mesh$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cbgg_Mesh$VertexDataType_values()).data.length);
    var$2 = var$1.data;
    cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType = var$1;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObject.$ordinal0] = 1;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObjectSubData.$ordinal0] = 2;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO.$ordinal0] = 3;
    var$2[cbgg_Mesh$VertexDataType_VertexArray.$ordinal0] = 4;
},
cbggg_VertexData = $rt_classWithoutFields(0);
function cbggg_VertexBufferObject() {
    let a = this; jl_Object.call(a);
    a.$attributes0 = null;
    a.$byteBuffer3 = null;
    a.$buffer5 = null;
    a.$bufferHandle2 = 0;
    a.$isStatic = 0;
    a.$usage1 = 0;
    a.$isDirty3 = 0;
    a.$isBound0 = 0;
}
let cbggg_VertexBufferObject__init_0 = ($this, $isStatic, $numVertices, $attributes) => {
    $this.$isDirty3 = 0;
    $this.$isBound0 = 0;
    $this.$isStatic = $isStatic;
    $this.$attributes0 = $attributes;
    $attributes = cbgu_BufferUtils_newUnsafeByteBuffer($rt_imul($attributes.$vertexSize, $numVertices));
    $this.$byteBuffer3 = $attributes;
    $attributes = jn_ByteBufferJsImpl_asFloatBuffer($attributes);
    $this.$buffer5 = $attributes;
    jn_Buffer_flip($attributes);
    $this.$bufferHandle2 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage1 = !$isStatic ? 35048 : 35044;
},
cbggg_VertexBufferObject__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_VertexBufferObject();
    cbggg_VertexBufferObject__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_VertexBufferObject_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty3 = 1;
    cbgu_BufferUtils_copy($vertices, $this.$buffer5, $count, $offset);
    jn_Buffer_position($this.$buffer5, 0);
    jn_Buffer_limit($this.$buffer5, $count);
    if ($this.$isBound0) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer5;
        var$4.$glBufferData(34962, var$5.$limit0, var$5, $this.$usage1);
        $this.$isDirty3 = 0;
    }
},
cbggg_VertexBufferObject_bind = ($this, $shader, $locations) => {
    let $gl, $attribute, $numAttributes, $i, var$7, $location;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, $this.$bufferHandle2);
    if ($this.$isDirty3) {
        $attribute = $this.$buffer5;
        $gl.$glBufferData(34962, $attribute.$limit0, $attribute, $this.$usage1);
        $this.$isDirty3 = 0;
    }
    a: {
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes0);
        if ($locations !== null) {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                var$7 = $locations.data;
                $attribute = cbgg_VertexAttributes_get($this.$attributes0, $i);
                $location = var$7[$i];
                if ($location >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                    cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type3, $attribute.$normalized, $this.$attributes0.$vertexSize, $attribute.$offset0);
                }
                $i = $i + 1 | 0;
            }
        }
        $i = 0;
        while ($i < $numAttributes) {
            $attribute = cbgg_VertexAttributes_get($this.$attributes0, $i);
            $location = cbggg_ShaderProgram_getAttributeLocation($shader, $attribute.$alias);
            if ($location >= 0) {
                cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type3, $attribute.$normalized, $this.$attributes0.$vertexSize, $attribute.$offset0);
            }
            $i = $i + 1 | 0;
        }
    }
    $this.$isBound0 = 1;
},
cbggg_VertexBufferObject_unbind = ($this, $shader, $locations) => {
    let $gl, $numAttributes, $i, $location;
    a: {
        $gl = cbg_Gdx_gl20;
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes0);
        if ($locations === null) {
            $i = 0;
            while ($i < $numAttributes) {
                cbggg_ShaderProgram_disableVertexAttribute0($shader, (cbgg_VertexAttributes_get($this.$attributes0, $i)).$alias);
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                $location = $locations.data[$i];
                if ($location >= 0)
                    cbggg_ShaderProgram_disableVertexAttribute($shader, $location);
                $i = $i + 1 | 0;
            }
        }
    }
    $gl.$glBindBuffer(34962, 0);
    $this.$isBound0 = 0;
},
cbggg_VertexBufferObject_dispose = $this => {
    let $gl, var$2;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, 0);
    var$2 = $this.$bufferHandle2;
    cgxgbt_TeaGL20_glDeleteBuffer($gl, var$2);
    $this.$bufferHandle2 = 0;
    cbgu_BufferUtils_disposeUnsafeByteBuffer($this.$byteBuffer3);
},
cbggg_IndexData = $rt_classWithoutFields(0);
function cbggg_IndexBufferObject() {
    let a = this; jl_Object.call(a);
    a.$byteBuffer1 = null;
    a.$buffer1 = null;
    a.$bufferHandle0 = 0;
    a.$isDirect0 = 0;
    a.$isDirty = 0;
    a.$isBound = 0;
    a.$usage = 0;
}
let cbggg_IndexBufferObject__init_0 = ($this, $isStatic, $maxIndices) => {
    let var$3;
    $this.$isDirty = 1;
    $this.$isBound = 0;
    $this.$isDirect0 = 1;
    var$3 = cbgu_BufferUtils_newUnsafeByteBuffer($maxIndices * 2 | 0);
    $this.$byteBuffer1 = var$3;
    var$3 = jn_ByteBufferJsImpl_asShortBuffer(var$3);
    $this.$buffer1 = var$3;
    jn_Buffer_flip(var$3);
    $this.$bufferHandle0 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage = !$isStatic ? 35048 : 35044;
},
cbggg_IndexBufferObject__init_ = (var_0, var_1) => {
    let var_2 = new cbggg_IndexBufferObject();
    cbggg_IndexBufferObject__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_IndexBufferObject_getNumIndices = $this => {
    return $this.$buffer1.$limit0;
},
cbggg_IndexBufferObject_getNumMaxIndices = $this => {
    return $this.$buffer1.$capacityImpl();
},
cbggg_IndexBufferObject_setIndices = ($this, $indices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty = 1;
    jn_Buffer_clear($this.$buffer1);
    jn_ShortBuffer_put($this.$buffer1, $indices, $offset, $count);
    jn_Buffer_flip($this.$buffer1);
    if ($this.$isBound) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer1;
        var$4.$glBufferData(34963, var$5.$limit0, var$5, $this.$usage);
        $this.$isDirty = 0;
    }
},
cbggg_IndexBufferObject_getBuffer = ($this, $forWriting) => {
    $this.$isDirty = $this.$isDirty | $forWriting;
    return $this.$buffer1;
},
cbggg_IndexBufferObject_bind = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$bufferHandle0;
    if (!var$1) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$2, $rt_s(727));
        $rt_throw(var$2);
    }
    cbg_Gdx_gl20.$glBindBuffer(34963, var$1);
    if ($this.$isDirty) {
        var$2 = cbg_Gdx_gl20;
        var$3 = $this.$buffer1;
        var$2.$glBufferData(34963, var$3.$limit0, var$3, $this.$usage);
        $this.$isDirty = 0;
    }
    $this.$isBound = 1;
},
cbggg_IndexBufferObject_unbind = $this => {
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$isBound = 0;
},
cbggg_IndexBufferObject_dispose = $this => {
    let $gl, var$2;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34963, 0);
    var$2 = $this.$bufferHandle0;
    cgxgbt_TeaGL20_glDeleteBuffer($gl, var$2);
    $this.$bufferHandle0 = 0;
    cbgu_BufferUtils_disposeUnsafeByteBuffer($this.$byteBuffer1);
    $this.$byteBuffer1 = null;
    $this.$buffer1 = null;
};
function cbggg_VertexBufferObjectSubData() {
    let a = this; jl_Object.call(a);
    a.$attributes = null;
    a.$buffer2 = null;
    a.$byteBuffer = null;
    a.$bufferHandle1 = 0;
    a.$isDirect = 0;
    a.$isStatic1 = 0;
    a.$usage0 = 0;
    a.$isDirty1 = 0;
    a.$isBound1 = 0;
}
let cbggg_VertexBufferObjectSubData_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty1 = 1;
    if ($this.$isDirect) {
        cbgu_BufferUtils_copy($vertices, $this.$byteBuffer, $count, $offset);
        jn_Buffer_position($this.$buffer2, 0);
        jn_Buffer_limit($this.$buffer2, $count);
    } else {
        jn_Buffer_clear($this.$buffer2);
        jn_FloatBuffer_put($this.$buffer2, $vertices, $offset, $count);
        jn_Buffer_flip($this.$buffer2);
        jn_Buffer_position($this.$byteBuffer, 0);
        var$4 = $this.$byteBuffer;
        $offset = $this.$buffer2.$limit0 << 2;
        jn_Buffer_limit(var$4, $offset);
    }
    if ($this.$isBound1) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$byteBuffer;
        var$4.$glBufferSubData(34962, 0, var$5.$limit0, var$5);
        $this.$isDirty1 = 0;
    }
},
cbggg_VertexBufferObjectSubData_bind = ($this, $shader, $locations) => {
    let $gl, $attribute, $i, $numAttributes, var$7, $location;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, $this.$bufferHandle1);
    if ($this.$isDirty1) {
        $attribute = $this.$byteBuffer;
        $i = $this.$buffer2.$limit0 * 4 | 0;
        jn_Buffer_limit($attribute, $i);
        $attribute = $this.$byteBuffer;
        $gl.$glBufferData(34962, $attribute.$limit0, $attribute, $this.$usage0);
        $this.$isDirty1 = 0;
    }
    a: {
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes);
        if ($locations !== null) {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                var$7 = $locations.data;
                $attribute = cbgg_VertexAttributes_get($this.$attributes, $i);
                $location = var$7[$i];
                if ($location >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                    cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type3, $attribute.$normalized, $this.$attributes.$vertexSize, $attribute.$offset0);
                }
                $i = $i + 1 | 0;
            }
        }
        $i = 0;
        while ($i < $numAttributes) {
            $attribute = cbgg_VertexAttributes_get($this.$attributes, $i);
            $location = cbggg_ShaderProgram_getAttributeLocation($shader, $attribute.$alias);
            if ($location >= 0) {
                cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type3, $attribute.$normalized, $this.$attributes.$vertexSize, $attribute.$offset0);
            }
            $i = $i + 1 | 0;
        }
    }
    $this.$isBound1 = 1;
},
cbggg_VertexBufferObjectSubData_unbind = ($this, $shader, $locations) => {
    let $gl, $numAttributes, $i, $location;
    a: {
        $gl = cbg_Gdx_gl20;
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes);
        if ($locations === null) {
            $i = 0;
            while ($i < $numAttributes) {
                cbggg_ShaderProgram_disableVertexAttribute0($shader, (cbgg_VertexAttributes_get($this.$attributes, $i)).$alias);
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                $location = $locations.data[$i];
                if ($location >= 0)
                    cbggg_ShaderProgram_disableVertexAttribute($shader, $location);
                $i = $i + 1 | 0;
            }
        }
    }
    $gl.$glBindBuffer(34962, 0);
    $this.$isBound1 = 0;
},
cbggg_VertexBufferObjectSubData_dispose = $this => {
    let $gl, var$2;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, 0);
    var$2 = $this.$bufferHandle1;
    cgxgbt_TeaGL20_glDeleteBuffer($gl, var$2);
    $this.$bufferHandle1 = 0;
};
function cbggg_IndexBufferObjectSubData() {
    let a = this; jl_Object.call(a);
    a.$buffer3 = null;
    a.$byteBuffer0 = null;
    a.$bufferHandle3 = 0;
    a.$isDirect1 = 0;
    a.$isDirty0 = 0;
    a.$isBound2 = 0;
    a.$usage3 = 0;
}
let cbggg_IndexBufferObjectSubData__init_0 = ($this, $isStatic, $maxIndices) => {
    let var$3;
    $this.$isDirty0 = 1;
    $this.$isBound2 = 0;
    var$3 = cbgu_BufferUtils_newByteBuffer($maxIndices * 2 | 0);
    $this.$byteBuffer0 = var$3;
    $this.$isDirect1 = 1;
    $this.$usage3 = !$isStatic ? 35048 : 35044;
    var$3 = jn_ByteBufferJsImpl_asShortBuffer(var$3);
    $this.$buffer3 = var$3;
    jn_Buffer_flip(var$3);
    jn_Buffer_flip($this.$byteBuffer0);
    $maxIndices = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    cbg_Gdx_gl20.$glBindBuffer(34963, $maxIndices);
    cbg_Gdx_gl20.$glBufferData(34963, $this.$byteBuffer0.$capacityImpl(), null, $this.$usage3);
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$bufferHandle3 = $maxIndices;
},
cbggg_IndexBufferObjectSubData__init_ = (var_0, var_1) => {
    let var_2 = new cbggg_IndexBufferObjectSubData();
    cbggg_IndexBufferObjectSubData__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_IndexBufferObjectSubData_getNumIndices = $this => {
    return $this.$buffer3.$limit0;
},
cbggg_IndexBufferObjectSubData_getNumMaxIndices = $this => {
    return $this.$buffer3.$capacityImpl();
},
cbggg_IndexBufferObjectSubData_setIndices = ($this, $indices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty0 = 1;
    jn_Buffer_clear($this.$buffer3);
    jn_ShortBuffer_put($this.$buffer3, $indices, $offset, $count);
    jn_Buffer_flip($this.$buffer3);
    jn_Buffer_position($this.$byteBuffer0, 0);
    var$4 = $this.$byteBuffer0;
    $offset = $count << 1;
    jn_Buffer_limit(var$4, $offset);
    if ($this.$isBound2) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$byteBuffer0;
        var$4.$glBufferSubData(34963, 0, var$5.$limit0, var$5);
        $this.$isDirty0 = 0;
    }
},
cbggg_IndexBufferObjectSubData_getBuffer = ($this, $forWriting) => {
    $this.$isDirty0 = $this.$isDirty0 | $forWriting;
    return $this.$buffer3;
},
cbggg_IndexBufferObjectSubData_bind = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$bufferHandle3;
    if (!var$1) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$2, $rt_s(728));
        $rt_throw(var$2);
    }
    cbg_Gdx_gl20.$glBindBuffer(34963, var$1);
    if ($this.$isDirty0) {
        var$2 = $this.$byteBuffer0;
        var$3 = $this.$buffer3.$limit0 * 2 | 0;
        jn_Buffer_limit(var$2, var$3);
        var$2 = cbg_Gdx_gl20;
        var$4 = $this.$byteBuffer0;
        var$2.$glBufferSubData(34963, 0, var$4.$limit0, var$4);
        $this.$isDirty0 = 0;
    }
    $this.$isBound2 = 1;
},
cbggg_IndexBufferObjectSubData_unbind = $this => {
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$isBound2 = 0;
},
cbggg_IndexBufferObjectSubData_dispose = $this => {
    let $gl, var$2;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34963, 0);
    var$2 = $this.$bufferHandle3;
    cgxgbt_TeaGL20_glDeleteBuffer($gl, var$2);
    $this.$bufferHandle3 = 0;
};
function cbggg_VertexBufferObjectWithVAO() {
    let a = this; jl_Object.call(a);
    a.$attributes1 = null;
    a.$byteBuffer2 = null;
    a.$buffer4 = null;
    a.$bufferHandle = 0;
    a.$isStatic0 = 0;
    a.$usage2 = 0;
    a.$isDirty2 = 0;
    a.$isBound3 = 0;
    a.$vaoHandle = 0;
    a.$cachedLocations = null;
}
let cbggg_VertexBufferObjectWithVAO_tmpHandle = null,
cbggg_VertexBufferObjectWithVAO_$callClinit = () => {
    cbggg_VertexBufferObjectWithVAO_$callClinit = $rt_eraseClinit(cbggg_VertexBufferObjectWithVAO);
    cbggg_VertexBufferObjectWithVAO__clinit_();
},
cbggg_VertexBufferObjectWithVAO__init_0 = ($this, $isStatic, $numVertices, $attributes) => {
    cbggg_VertexBufferObjectWithVAO_$callClinit();
    $this.$isDirty2 = 0;
    $this.$isBound3 = 0;
    $this.$vaoHandle = (-1);
    $this.$cachedLocations = cbgu_IntArray__init_();
    $this.$isStatic0 = $isStatic;
    $this.$attributes1 = $attributes;
    $attributes = cbgu_BufferUtils_newUnsafeByteBuffer($rt_imul($attributes.$vertexSize, $numVertices));
    $this.$byteBuffer2 = $attributes;
    $attributes = jn_ByteBufferJsImpl_asFloatBuffer($attributes);
    $this.$buffer4 = $attributes;
    jn_Buffer_flip($attributes);
    $this.$bufferHandle = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage2 = !$isStatic ? 35048 : 35044;
    jn_Buffer_clear(cbggg_VertexBufferObjectWithVAO_tmpHandle);
    cbg_Gdx_gl30.$glGenVertexArrays(1, cbggg_VertexBufferObjectWithVAO_tmpHandle);
    $this.$vaoHandle = jn_IntBufferImpl_get0(cbggg_VertexBufferObjectWithVAO_tmpHandle);
},
cbggg_VertexBufferObjectWithVAO__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_VertexBufferObjectWithVAO();
    cbggg_VertexBufferObjectWithVAO__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_VertexBufferObjectWithVAO_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty2 = 1;
    cbgu_BufferUtils_copy($vertices, $this.$buffer4, $count, $offset);
    jn_Buffer_position($this.$buffer4, 0);
    jn_Buffer_limit($this.$buffer4, $count);
    if ($this.$isBound3) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer4;
        var$4.$glBufferData(34962, var$5.$limit0, var$5, $this.$usage2);
        $this.$isDirty2 = 0;
    }
},
cbggg_VertexBufferObjectWithVAO_bind = ($this, $shader, $locations) => {
    let $gl, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $gl = cbg_Gdx_gl30;
    $gl.$glBindVertexArray($this.$vaoHandle);
    var$4 = !$this.$cachedLocations.$size1 ? 0 : 1;
    a: {
        var$5 = cbgg_VertexAttributes_size($this.$attributes1);
        if (var$4) {
            if ($locations === null) {
                var$6 = 0;
                while (var$4 && var$6 < var$5) {
                    var$4 = cbggg_ShaderProgram_getAttributeLocation($shader, (cbgg_VertexAttributes_get($this.$attributes1, var$6)).$alias) != cbgu_IntArray_get($this.$cachedLocations, var$6) ? 0 : 1;
                    var$6 = var$6 + 1 | 0;
                }
            } else {
                var$7 = $locations.data;
                var$4 = var$7.length != $this.$cachedLocations.$size1 ? 0 : 1;
                var$6 = 0;
                while (var$4) {
                    if (var$6 >= var$5)
                        break a;
                    var$4 = var$7[var$6] != cbgu_IntArray_get($this.$cachedLocations, var$6) ? 0 : 1;
                    var$6 = var$6 + 1 | 0;
                }
            }
        }
    }
    b: {
        if (!var$4) {
            cbg_Gdx_gl.$glBindBuffer(34962, $this.$bufferHandle);
            if ($this.$cachedLocations.$size1) {
                var$6 = cbgg_VertexAttributes_size($this.$attributes1);
                var$8 = 0;
                while (var$8 < var$6) {
                    var$4 = cbgu_IntArray_get($this.$cachedLocations, var$8);
                    if (var$4 >= 0)
                        cbggg_ShaderProgram_disableVertexAttribute($shader, var$4);
                    var$8 = var$8 + 1 | 0;
                }
            }
            cbgu_IntArray_clear($this.$cachedLocations);
            var$9 = 0;
            while (true) {
                if (var$9 >= var$5)
                    break b;
                var$10 = cbgg_VertexAttributes_get($this.$attributes1, var$9);
                if ($locations !== null) {
                    var$7 = $locations.data;
                    cbgu_IntArray_add($this.$cachedLocations, var$7[var$9]);
                } else
                    cbgu_IntArray_add($this.$cachedLocations, cbggg_ShaderProgram_getAttributeLocation($shader, var$10.$alias));
                var$6 = cbgu_IntArray_get($this.$cachedLocations, var$9);
                if (var$6 >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, var$6);
                    cbggg_ShaderProgram_setVertexAttribute($shader, var$6, var$10.$numComponents, var$10.$type3, var$10.$normalized, $this.$attributes1.$vertexSize, var$10.$offset0);
                }
                var$9 = var$9 + 1 | 0;
            }
        }
    }
    if ($this.$isDirty2) {
        $gl.$glBindBuffer(34962, $this.$bufferHandle);
        $shader = $this.$buffer4;
        jn_Buffer_limit($shader, $shader.$limit0);
        $shader = $this.$buffer4;
        $gl.$glBufferData(34962, $shader.$limit0, $shader, $this.$usage2);
        $this.$isDirty2 = 0;
    }
    $this.$isBound3 = 1;
},
cbggg_VertexBufferObjectWithVAO_unbind = ($this, $shader, $locations) => {
    cbg_Gdx_gl30.$glBindVertexArray(0);
    $this.$isBound3 = 0;
},
cbggg_VertexBufferObjectWithVAO_dispose = $this => {
    let $gl, var$2;
    $gl = cbg_Gdx_gl30;
    $gl.$glBindBuffer(34962, 0);
    var$2 = $this.$bufferHandle;
    cgxgbt_TeaGL20_glDeleteBuffer($gl, var$2);
    $this.$bufferHandle = 0;
    if ($this.$vaoHandle != (-1)) {
        cbggg_VertexBufferObjectWithVAO_$callClinit();
        jn_Buffer_clear(cbggg_VertexBufferObjectWithVAO_tmpHandle);
        $gl = cbggg_VertexBufferObjectWithVAO_tmpHandle;
        var$2 = $this.$vaoHandle;
        jn_IntBufferImpl_put0($gl, var$2);
        jn_Buffer_flip(cbggg_VertexBufferObjectWithVAO_tmpHandle);
        cbg_Gdx_gl30.$glDeleteVertexArrays(1, cbggg_VertexBufferObjectWithVAO_tmpHandle);
        $this.$vaoHandle = (-1);
    }
    cbgu_BufferUtils_disposeUnsafeByteBuffer($this.$byteBuffer2);
},
cbggg_VertexBufferObjectWithVAO__clinit_ = () => {
    cbggg_VertexBufferObjectWithVAO_tmpHandle = cbgu_BufferUtils_newIntBuffer(1);
},
cbggg_VertexArray = $rt_classWithoutFields(cbggg_VertexBufferObject),
cbggg_IndexArray = $rt_classWithoutFields(cbggg_IndexBufferObject);
function cbgm_EarClippingTriangulator() {
    let a = this; jl_Object.call(a);
    a.$indicesArray = null;
    a.$indices0 = null;
    a.$vertices1 = null;
    a.$vertexCount0 = 0;
    a.$vertexTypes = null;
    a.$triangles1 = null;
}
let cbgm_EarClippingTriangulator__init_ = $this => {
    $this.$indicesArray = cbgu_ShortArray__init_0();
    $this.$vertexTypes = cbgu_IntArray__init_();
    $this.$triangles1 = cbgu_ShortArray__init_0();
},
cbgm_EarClippingTriangulator__init_0 = () => {
    let var_0 = new cbgm_EarClippingTriangulator();
    cbgm_EarClippingTriangulator__init_(var_0);
    return var_0;
},
cbgm_EarClippingTriangulator_classifyVertex = ($this, $index) => {
    let $indices, $previous, $current, $next;
    $indices = $this.$indices0.data;
    $previous = $indices[cbgm_EarClippingTriangulator_previousIndex($this, $index)] * 2 | 0;
    $current = $indices[$index] * 2 | 0;
    $next = $indices[cbgm_EarClippingTriangulator_nextIndex($this, $index)] * 2 | 0;
    $indices = $this.$vertices1.data;
    return cbgm_EarClippingTriangulator_computeSpannedAreaSign($indices[$previous], $indices[$previous + 1 | 0], $indices[$current], $indices[$current + 1 | 0], $indices[$next], $indices[$next + 1 | 0]);
},
cbgm_EarClippingTriangulator_previousIndex = ($this, $index) => {
    if (!$index)
        $index = $this.$vertexCount0;
    return $index - 1 | 0;
},
cbgm_EarClippingTriangulator_nextIndex = ($this, $index) => {
    return ($index + 1 | 0) % $this.$vertexCount0 | 0;
},
cbgm_EarClippingTriangulator_computeSpannedAreaSign = ($p1x, $p1y, $p2x, $p2y, $p3x, $p3y) => {
    return jl_Math_signum($p1x * ($p3y - $p2y) + $p2x * ($p1y - $p3y) + $p3x * ($p2y - $p1y)) | 0;
},
otciu_CLDRHelper = $rt_classWithoutFields(),
otciu_CLDRHelper_$$metadata$$0 = null,
otciu_CLDRHelper_$$metadata$$1 = null,
otciu_CLDRHelper_$$metadata$$2 = null,
otciu_CLDRHelper_$$metadata$$3 = null,
otciu_CLDRHelper_$$metadata$$4 = null,
otciu_CLDRHelper_$$metadata$$5 = null,
otciu_CLDRHelper_$$metadata$$6 = null,
otciu_CLDRHelper_$$metadata$$7 = null,
otciu_CLDRHelper_$$metadata$$10 = null,
otciu_CLDRHelper_$$metadata$$12 = null,
otciu_CLDRHelper_$$metadata$$13 = null,
otciu_CLDRHelper_$$metadata$$14 = null,
otciu_CLDRHelper_$$metadata$$15 = null,
otciu_CLDRHelper_$$metadata$$16 = null,
otciu_CLDRHelper_$$metadata$$17 = null,
otciu_CLDRHelper_$$metadata$$18 = null,
otciu_CLDRHelper_$$metadata$$19 = null,
otciu_CLDRHelper_$$metadata$$20 = null,
otciu_CLDRHelper_$$metadata$$21 = null,
otciu_CLDRHelper__init_ = $this => {
    return;
},
otciu_CLDRHelper__init_0 = () => {
    let var_0 = new otciu_CLDRHelper();
    otciu_CLDRHelper__init_(var_0);
    return var_0;
},
otciu_CLDRHelper_getCode = ($language, $country) => {
    let var$3;
    if (!jl_String_isEmpty($country)) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $language);
        jl_AbstractStringBuilder_append2(var$3, 45);
        jl_AbstractStringBuilder_append(var$3, $country);
        $language = jl_AbstractStringBuilder_toString(var$3);
    }
    return $language;
},
otciu_CLDRHelper_resolveCountry = ($subtags, $country) => {
    let $index;
    if (jl_String_isEmpty($country)) {
        if (otciu_CLDRHelper_$$metadata$$0 === null)
            otciu_CLDRHelper_$$metadata$$0 = otciu_CLDRHelper_getLikelySubtagsMap$$create();
        $country = otciu_CLDRHelper_$$metadata$$0;
        if ($country.hasOwnProperty($rt_ustr($subtags)))
            $subtags = ($country[$rt_ustr($subtags)].value !== null ? $rt_str($country[$rt_ustr($subtags)].value) : null);
        $index = jl_String_lastIndexOf($subtags, 95);
        $country = $index <= 0 ? $rt_s(9) : jl_String_substring0($subtags, $index + 1 | 0);
    }
    return $country;
},
otciu_CLDRHelper_resolveDateFormatSymbols = ($map, $language, $country) => {
    let $localeCode, $arrayRes, $result, var$7, $i, var$9;
    $localeCode = otciu_CLDRHelper_getCode($language, $country);
    $arrayRes = $map.hasOwnProperty($rt_ustr($localeCode)) ? $map[$rt_ustr($localeCode)] : $map.hasOwnProperty($rt_ustr($language)) ? $map[$rt_ustr($language)] : $map.root;
    $result = $rt_createArray(jl_String, $arrayRes.length);
    var$7 = $result.data;
    $i = 0;
    var$9 = var$7.length;
    while ($i < var$9) {
        var$7[$i] = ($arrayRes[$i].value !== null ? $rt_str($arrayRes[$i].value) : null);
        $i = $i + 1 | 0;
    }
    return $result;
},
otciu_CLDRHelper_getTimeZoneLocalizationMap = () => {
    if (otciu_CLDRHelper_$$metadata$$7 === null)
        otciu_CLDRHelper_$$metadata$$7 = otciu_CLDRHelper_getTimeZoneLocalizationMap$$create();
    return otciu_CLDRHelper_$$metadata$$7;
},
otciu_CLDRHelper_resolveDateFormats0 = ($language, $country) => {
    if (otciu_CLDRHelper_$$metadata$$14 === null)
        otciu_CLDRHelper_$$metadata$$14 = otciu_CLDRHelper_getDateFormatMap$$create();
    return otciu_CLDRHelper_resolveDateFormats(otciu_CLDRHelper_$$metadata$$14, $language, $country);
},
otciu_CLDRHelper_resolveNumberFormat = ($language, $country) => {
    if (otciu_CLDRHelper_$$metadata$$17 === null)
        otciu_CLDRHelper_$$metadata$$17 = otciu_CLDRHelper_getNumberFormatMap$$create();
    return otciu_CLDRHelper_resolveFormatSymbols(otciu_CLDRHelper_$$metadata$$17, $language, $country);
},
otciu_CLDRHelper_resolveDateFormats = ($map, $language, $country) => {
    let $localeCode;
    $localeCode = otciu_CLDRHelper_getCode($language, $country);
    return $map.hasOwnProperty($rt_ustr($localeCode)) ? $map[$rt_ustr($localeCode)] : $map.hasOwnProperty($rt_ustr($language)) ? $map[$rt_ustr($language)] : $map.root;
},
otciu_CLDRHelper_resolveFormatSymbols = ($map, $language, $country) => {
    let $localeCode;
    $localeCode = otciu_CLDRHelper_getCode($language, $country);
    return (($map.hasOwnProperty($rt_ustr($localeCode)) ? $map[$rt_ustr($localeCode)] : $map.hasOwnProperty($rt_ustr($language)) ? $map[$rt_ustr($language)] : $map.root).value !== null ? $rt_str(($map.hasOwnProperty($rt_ustr($localeCode)) ? $map[$rt_ustr($localeCode)] : $map.hasOwnProperty($rt_ustr($language)) ? $map[$rt_ustr($language)] : $map.root).value) : null);
},
otciu_CLDRHelper_getLikelySubtagsMap$$create = () => {
    return {"ksh": {"value" : "ksh-Latn-DE"}, "ksj": {"value" : "ksj-Latn-ZZ"}, "tdu": {"value" : "tdu-Latn-MY"}, "cch": {"value" : "cch-Latn-NG"}, "und-Khar": {"value" : "pra-Khar-PK"}, "gkn": {"value" : "gkn-Latn-ZZ"}, "ksr": {"value" : "ksr-Latn-ZZ"}, "und-Mani": {"value" : "xmn-Mani-CN"}, "gkp": {"value" : "gkp-Latn-ZZ"}, "xmf": {"value" : "xmf-Geor-GE"}, "ccp": {"value" : "ccp-Cakm-BD"}, "ted": {"value" : "ted-Latn-ZZ"}, "und-Mand": {"value" : "myz-Mand-IR"}, "ktb": {"value" : "ktb-Ethi-ZZ"}, "xmn": {"value"
    : "xmn-Mani-CN"}, "sd-Sind": {"value" : "sd-Sind-IN"}, "xmr": {"value" : "xmr-Merc-SD"}, "tem": {"value" : "tem-Latn-SL"}, "und-Mroo": {"value" : "mro-Mroo-BD"}, "teo": {"value" : "teo-Latn-UG"}, "tet": {"value" : "tet-Latn-TL"}, "ktm": {"value" : "ktm-Latn-ZZ"}, "glk": {"value" : "glk-Arab-IR"}, "kto": {"value" : "kto-Latn-ZZ"}, "ktr": {"value" : "ktr-Latn-MY"}, "und-Soyo": {"value" : "cmg-Soyo-MN"}, "xna": {"value" : "xna-Narb-SA"}, "tfi": {"value" : "tfi-Latn-ZZ"}, "kub": {"value" : "kub-Latn-ZZ"}, "kue":
    {"value" : "kue-Latn-ZZ"}, "kud": {"value" : "kud-Latn-ZZ"}, "xnr": {"value" : "xnr-Deva-IN"}, "ceb": {"value" : "ceb-Latn-PH"}, "kuj": {"value" : "kuj-Latn-ZZ"}, "kum": {"value" : "kum-Cyrl-RU"}, "kun": {"value" : "kun-Latn-ZZ"}, "gmm": {"value" : "gmm-Latn-ZZ"}, "kup": {"value" : "kup-Latn-ZZ"}, "kus": {"value" : "kus-Latn-ZZ"}, "gmv": {"value" : "gmv-Ethi-ZZ"}, "tgc": {"value" : "tgc-Latn-ZZ"}, "xog": {"value" : "xog-Latn-UG"}, "und-Arab-YT": {"value" : "swb-Arab-YT"}, "und-Latn-ET": {"value" : "en-Latn-ET"}
    , "xon": {"value" : "xon-Latn-ZZ"}, "ha-CM": {"value" : "ha-Arab-CM"}, "gnd": {"value" : "gnd-Latn-ZZ"}, "kvg": {"value" : "kvg-Latn-ZZ"}, "tgo": {"value" : "tgo-Latn-ZZ"}, "cfa": {"value" : "cfa-Latn-ZZ"}, "gng": {"value" : "gng-Latn-ZZ"}, "tgu": {"value" : "tgu-Latn-ZZ"}, "und-Latn-GE": {"value" : "ku-Latn-GE"}, "kvr": {"value" : "kvr-Latn-ID"}, "kvx": {"value" : "kvx-Arab-PK"}, "und-Gujr": {"value" : "gu-Gujr-IN"}, "thl": {"value" : "thl-Deva-NP"}, "xpr": {"value" : "xpr-Prti-IR"}, "thq": {"value" : "thq-Deva-NP"}
    , "god": {"value" : "god-Latn-ZZ"}, "gof": {"value" : "gof-Ethi-ZZ"}, "kwj": {"value" : "kwj-Latn-ZZ"}, "ky-Arab": {"value" : "ky-Arab-CN"}, "thr": {"value" : "thr-Deva-NP"}, "goi": {"value" : "goi-Latn-ZZ"}, "cgg": {"value" : "cgg-Latn-UG"}, "kwo": {"value" : "kwo-Latn-ZZ"}, "gom": {"value" : "gom-Deva-IN"}, "kwq": {"value" : "kwq-Latn-ZZ"}, "gon": {"value" : "gon-Telu-IN"}, "gos": {"value" : "gos-Latn-NL"}, "gor": {"value" : "gor-Latn-ID"}, "und-Latn-CY": {"value" : "tr-Latn-CY"}, "got": {"value" : "got-Goth-UA"}
    , "tif": {"value" : "tif-Latn-ZZ"}, "tig": {"value" : "tig-Ethi-ER"}, "kxa": {"value" : "kxa-Latn-ZZ"}, "kxc": {"value" : "kxc-Ethi-ZZ"}, "pag": {"value" : "pag-Latn-PH"}, "tik": {"value" : "tik-Latn-ZZ"}, "kxe": {"value" : "kxe-Latn-ZZ"}, "tim": {"value" : "tim-Latn-ZZ"}, "pal": {"value" : "pal-Phli-IR"}, "tio": {"value" : "tio-Latn-ZZ"}, "pam": {"value" : "pam-Latn-PH"}, "und-Marc": {"value" : "bo-Marc-CN"}, "pap": {"value" : "pap-Latn-AW"}, "und-Latn-CN": {"value" : "za-Latn-CN"}, "tiv": {"value" : "tiv-Latn-NG"}
    , "kxm": {"value" : "kxm-Thai-TH"}, "kxp": {"value" : "kxp-Arab-PK"}, "pau": {"value" : "pau-Latn-PW"}, "chk": {"value" : "chk-Latn-FM"}, "chm": {"value" : "chm-Cyrl-RU"}, "xrb": {"value" : "xrb-Latn-ZZ"}, "chp": {"value" : "chp-Latn-CA"}, "cho": {"value" : "cho-Latn-US"}, "kxw": {"value" : "kxw-Latn-ZZ"}, "und-Latn-DZ": {"value" : "fr-Latn-DZ"}, "chr": {"value" : "chr-Cher-US"}, "kxz": {"value" : "kxz-Latn-ZZ"}, "und-Batk": {"value" : "bbc-Batk-ID"}, "und-Bass": {"value" : "bsq-Bass-LR"}, "kye": {"value"
    : "kye-Latn-ZZ"}, "pbi": {"value" : "pbi-Latn-ZZ"}, "und-Deva-MU": {"value" : "bho-Deva-MU"}, "cic": {"value" : "cic-Latn-US"}, "und-Sgnw": {"value" : "ase-Sgnw-US"}, "xsa": {"value" : "xsa-Sarb-YE"}, "kyx": {"value" : "kyx-Latn-ZZ"}, "xsi": {"value" : "xsi-Latn-ZZ"}, "pcd": {"value" : "pcd-Latn-FR"}, "und-Latn-AM": {"value" : "ku-Latn-AM"}, "xsm": {"value" : "xsm-Latn-ZZ"}, "tkl": {"value" : "tkl-Latn-TK"}, "und-Thai-CN": {"value" : "lcp-Thai-CN"}, "grb": {"value" : "grb-Latn-ZZ"}, "xsr": {"value" : "xsr-Deva-NP"}
    , "und-Latn-AF": {"value" : "tk-Latn-AF"}, "grc": {"value" : "grc-Cprt-CY"}, "kzj": {"value" : "kzj-Latn-MY"}, "tkr": {"value" : "tkr-Latn-AZ"}, "cja": {"value" : "cja-Arab-KH"}, "pcm": {"value" : "pcm-Latn-NG"}, "tkt": {"value" : "tkt-Deva-NP"}, "und-Olck": {"value" : "sat-Olck-IN"}, "kzr": {"value" : "kzr-Latn-ZZ"}, "kzt": {"value" : "kzt-Latn-MY"}, "cjm": {"value" : "cjm-Cham-VN"}, "grt": {"value" : "grt-Beng-IN"}, "und-Arab-TJ": {"value" : "fa-Arab-TJ"}, "und-Arab-TG": {"value" : "apd-Arab-TG"}, "und-Arab-TH":
    {"value" : "mfa-Arab-TH"}, "und-Deva-PK": {"value" : "btv-Deva-PK"}, "grw": {"value" : "grw-Latn-ZZ"}, "cjv": {"value" : "cjv-Latn-ZZ"}, "pdc": {"value" : "pdc-Latn-US"}, "tlf": {"value" : "tlf-Latn-ZZ"}, "und-Arab-TR": {"value" : "az-Arab-TR"}, "ckb": {"value" : "ckb-Arab-IQ"}, "tly": {"value" : "tly-Latn-AZ"}, "pdt": {"value" : "pdt-Latn-CA"}, "tlx": {"value" : "tlx-Latn-ZZ"}, "ckl": {"value" : "ckl-Latn-ZZ"}, "cko": {"value" : "cko-Latn-ZZ"}, "gsw": {"value" : "gsw-Latn-CH"}, "ped": {"value" : "ped-Latn-ZZ"}
    , "tmh": {"value" : "tmh-Latn-NE"}, "cky": {"value" : "cky-Latn-ZZ"}, "kk-Arab": {"value" : "kk-Arab-CN"}, "und-Runr": {"value" : "non-Runr-SE"}, "cla": {"value" : "cla-Latn-ZZ"}, "peo": {"value" : "peo-Xpeo-IR"}, "tmy": {"value" : "tmy-Latn-ZZ"}, "pex": {"value" : "pex-Latn-ZZ"}, "ky-TR": {"value" : "ky-Latn-TR"}, "tnh": {"value" : "tnh-Latn-ZZ"}, "guc": {"value" : "guc-Latn-CO"}, "gub": {"value" : "gub-Latn-BR"}, "gud": {"value" : "gud-Latn-ZZ"}, "pfl": {"value" : "pfl-Latn-DE"}, "cme": {"value" : "cme-Latn-ZZ"}
    , "cmg": {"value" : "cmg-Soyo-MN"}, "gur": {"value" : "gur-Latn-GH"}, "xwe": {"value" : "xwe-Latn-ZZ"}, "guw": {"value" : "guw-Latn-ZZ"}, "tof": {"value" : "tof-Latn-ZZ"}, "gux": {"value" : "gux-Latn-ZZ"}, "guz": {"value" : "guz-Latn-KE"}, "tog": {"value" : "tog-Latn-MW"}, "gvf": {"value" : "gvf-Latn-ZZ"}, "toq": {"value" : "toq-Latn-ZZ"}, "gvr": {"value" : "gvr-Deva-NP"}, "und-Guru": {"value" : "pa-Guru-IN"}, "gvs": {"value" : "gvs-Latn-ZZ"}, "tpi": {"value" : "tpi-Latn-PG"}, "tpm": {"value" : "tpm-Latn-ZZ"}
    , "und-Tfng": {"value" : "zgh-Tfng-MA"}, "gwc": {"value" : "gwc-Arab-ZZ"}, "und-Arab-PK": {"value" : "ur-Arab-PK"}, "phl": {"value" : "phl-Arab-ZZ"}, "und-Aghb": {"value" : "lez-Aghb-RU"}, "phn": {"value" : "phn-Phnx-LB"}, "gwi": {"value" : "gwi-Latn-CA"}, "tpz": {"value" : "tpz-Latn-ZZ"}, "cop": {"value" : "cop-Copt-EG"}, "gwt": {"value" : "gwt-Arab-ZZ"}, "lab": {"value" : "lab-Lina-GR"}, "lad": {"value" : "lad-Hebr-IL"}, "lah": {"value" : "lah-Arab-PK"}, "pil": {"value" : "pil-Latn-ZZ"}, "lag": {"value"
    : "lag-Latn-TZ"}, "tqo": {"value" : "tqo-Latn-ZZ"}, "laj": {"value" : "laj-Latn-UG"}, "pip": {"value" : "pip-Latn-ZZ"}, "und-Khmr": {"value" : "km-Khmr-KH"}, "las": {"value" : "las-Latn-ZZ"}, "sd-Deva": {"value" : "sd-Deva-IN"}, "und-Khoj": {"value" : "sd-Khoj-IN"}, "cps": {"value" : "cps-Latn-PH"}, "kk-AF": {"value" : "kk-Arab-AF"}, "und-Arab-MU": {"value" : "ur-Arab-MU"}, "lbe": {"value" : "lbe-Cyrl-RU"}, "und-Arab-NG": {"value" : "ha-Arab-NG"}, "gyi": {"value" : "gyi-Latn-ZZ"}, "tru": {"value" : "tru-Latn-TR"}
    , "trw": {"value" : "trw-Arab-ZZ"}, "trv": {"value" : "trv-Latn-TW"}, "lbu": {"value" : "lbu-Latn-ZZ"}, "lbw": {"value" : "lbw-Latn-ID"}, "tsd": {"value" : "tsd-Grek-GR"}, "tsf": {"value" : "tsf-Deva-NP"}, "pka": {"value" : "pka-Brah-IN"}, "tsg": {"value" : "tsg-Latn-PH"}, "tsj": {"value" : "tsj-Tibt-BT"}, "und-Deva-FJ": {"value" : "hif-Deva-FJ"}, "pko": {"value" : "pko-Latn-KE"}, "lcm": {"value" : "lcm-Latn-ZZ"}, "crh": {"value" : "crh-Cyrl-UA"}, "lcp": {"value" : "lcp-Thai-CN"}, "tsw": {"value" : "tsw-Latn-ZZ"}
    , "crj": {"value" : "crj-Cans-CA"}, "crl": {"value" : "crl-Cans-CA"}, "und-Arab-MN": {"value" : "kk-Arab-MN"}, "crk": {"value" : "crk-Cans-CA"}, "crm": {"value" : "crm-Cans-CA"}, "und-Arab-MM": {"value" : "rhg-Arab-MM"}, "pla": {"value" : "pla-Latn-ZZ"}, "tte": {"value" : "tte-Latn-ZZ"}, "crs": {"value" : "crs-Latn-SC"}, "ttd": {"value" : "ttd-Latn-ZZ"}, "ldb": {"value" : "ldb-Latn-ZZ"}, "ttj": {"value" : "ttj-Latn-UG"}, "kk-CN": {"value" : "kk-Arab-CN"}, "und-Yiii": {"value" : "ii-Yiii-CN"}, "tts": {"value"
    : "tts-Thai-TH"}, "csb": {"value" : "csb-Latn-PL"}, "ttr": {"value" : "ttr-Latn-ZZ"}, "ttt": {"value" : "ttt-Latn-AZ"}, "csw": {"value" : "csw-Cans-CA"}, "tuh": {"value" : "tuh-Latn-ZZ"}, "led": {"value" : "led-Latn-ZZ"}, "tul": {"value" : "tul-Latn-ZZ"}, "lee": {"value" : "lee-Latn-ZZ"}, "tum": {"value" : "tum-Latn-MW"}, "und-Arab-KH": {"value" : "cja-Arab-KH"}, "tuq": {"value" : "tuq-Latn-ZZ"}, "ctd": {"value" : "ctd-Pauc-MM"}, "lem": {"value" : "lem-Latn-ZZ"}, "lep": {"value" : "lep-Lepc-IN"}, "pms":
    {"value" : "pms-Latn-IT"}, "leq": {"value" : "leq-Latn-ZZ"}, "und-Pauc": {"value" : "ctd-Pauc-MM"}, "und-Sogo": {"value" : "sog-Sogo-UZ"}, "leu": {"value" : "leu-Latn-ZZ"}, "lez": {"value" : "lez-Cyrl-RU"}, "tvd": {"value" : "tvd-Latn-ZZ"}, "mn-CN": {"value" : "mn-Mong-CN"}, "sr-TR": {"value" : "sr-Latn-TR"}, "png": {"value" : "png-Latn-ZZ"}, "tvl": {"value" : "tvl-Latn-TV"}, "und-Brah": {"value" : "pka-Brah-IN"}, "und-Brai": {"value" : "fr-Brai-FR"}, "pnn": {"value" : "pnn-Latn-ZZ"}, "tvu": {"value" : "tvu-Latn-ZZ"}
    , "pnt": {"value" : "pnt-Grek-GR"}, "uz-CN": {"value" : "uz-Cyrl-CN"}, "ha-SD": {"value" : "ha-Arab-SD"}, "twh": {"value" : "twh-Latn-ZZ"}, "und-Takr": {"value" : "doi-Takr-IN"}, "lgg": {"value" : "lgg-Latn-ZZ"}, "pon": {"value" : "pon-Latn-FM"}, "twq": {"value" : "twq-Latn-NE"}, "und-Arab-ID": {"value" : "ms-Arab-ID"}, "und-Arab-IN": {"value" : "ur-Arab-IN"}, "ppa": {"value" : "ppa-Deva-IN"}, "txg": {"value" : "txg-Tang-CN"}, "yam": {"value" : "yam-Latn-ZZ"}, "und-Talu": {"value" : "khb-Talu-CN"}, "yao":
    {"value" : "yao-Latn-MZ"}, "yap": {"value" : "yap-Latn-FM"}, "yas": {"value" : "yas-Latn-ZZ"}, "yat": {"value" : "yat-Latn-ZZ"}, "ppo": {"value" : "ppo-Latn-ZZ"}, "yav": {"value" : "yav-Latn-CM"}, "yay": {"value" : "yay-Latn-ZZ"}, "yaz": {"value" : "yaz-Latn-ZZ"}, "und-Tale": {"value" : "tdd-Tale-CN"}, "ybb": {"value" : "ybb-Latn-CM"}, "yba": {"value" : "yba-Latn-ZZ"}, "tya": {"value" : "tya-Latn-ZZ"}, "lia": {"value" : "lia-Latn-ZZ"}, "lid": {"value" : "lid-Latn-ZZ"}, "und-Latn-TW": {"value" : "trv-Latn-TW"}
    , "lif": {"value" : "lif-Deva-NP"}, "lih": {"value" : "lih-Latn-ZZ"}, "lig": {"value" : "lig-Latn-ZZ"}, "lij": {"value" : "lij-Latn-IT"}, "hag": {"value" : "hag-Latn-ZZ"}, "und-Latn-TN": {"value" : "fr-Latn-TN"}, "tyv": {"value" : "tyv-Cyrl-RU"}, "yby": {"value" : "yby-Latn-ZZ"}, "und-Arab-GB": {"value" : "ks-Arab-GB"}, "hak": {"value" : "hak-Hans-CN"}, "und-Taml": {"value" : "ta-Taml-IN"}, "ham": {"value" : "ham-Latn-ZZ"}, "lis": {"value" : "lis-Lisu-CN"}, "und-Latn-SY": {"value" : "fr-Latn-SY"}, "ky-Latn":
    {"value" : "ky-Latn-TR"}, "pra": {"value" : "pra-Khar-PK"}, "haw": {"value" : "haw-Latn-US"}, "haz": {"value" : "haz-Arab-AF"}, "ku-LB": {"value" : "ku-Arab-LB"}, "prd": {"value" : "prd-Arab-IR"}, "prg": {"value" : "prg-Latn-001"}, "tzm": {"value" : "tzm-Latn-MA"}, "hbb": {"value" : "hbb-Latn-ZZ"}, "und-Latn-UA": {"value" : "pl-Latn-UA"}, "ljp": {"value" : "ljp-Latn-ID"}, "und-Tang": {"value" : "txg-Tang-CN"}, "yue-Hans": {"value" : "yue-Hans-CN"}, "und-Latn-RU": {"value" : "krl-Latn-RU"}, "lki": {"value"
    : "lki-Arab-IR"}, "pss": {"value" : "pss-Latn-ZZ"}, "lkt": {"value" : "lkt-Latn-US"}, "sr-RO": {"value" : "sr-Latn-RO"}, "und-Arab-CN": {"value" : "ug-Arab-CN"}, "lle": {"value" : "lle-Latn-ZZ"}, "und-Cyrl": {"value" : "ru-Cyrl-RU"}, "uz-AF": {"value" : "uz-Arab-AF"}, "yer": {"value" : "yer-Latn-ZZ"}, "und-Beng": {"value" : "bn-Beng-BD"}, "ptp": {"value" : "ptp-Latn-ZZ"}, "lln": {"value" : "lln-Latn-ZZ"}, "sr-RU": {"value" : "sr-Latn-RU"}, "hdy": {"value" : "hdy-Ethi-ZZ"}, "unr-NP": {"value" : "unr-Deva-NP"}
    , "und-Mend": {"value" : "men-Mend-SL"}, "lmn": {"value" : "lmn-Telu-IN"}, "lmp": {"value" : "lmp-Latn-ZZ"}, "lmo": {"value" : "lmo-Latn-IT"}, "puu": {"value" : "puu-Latn-GA"}, "und-Arab-CC": {"value" : "ms-Arab-CC"}, "pal-Phlp": {"value" : "pal-Phlp-CN"}, "ygr": {"value" : "ygr-Latn-ZZ"}, "ygw": {"value" : "ygw-Latn-ZZ"}, "lns": {"value" : "lns-Latn-ZZ"}, "ky-CN": {"value" : "ky-Arab-CN"}, "lnu": {"value" : "lnu-Latn-ZZ"}, "pwa": {"value" : "pwa-Latn-ZZ"}, "und-Chrs": {"value" : "xco-Chrs-UZ"}, "und-Mahj":
    {"value" : "hi-Mahj-IN"}, "rif-NL": {"value" : "rif-Latn-NL"}, "loj": {"value" : "loj-Latn-ZZ"}, "lol": {"value" : "lol-Latn-CD"}, "lok": {"value" : "lok-Latn-ZZ"}, "lor": {"value" : "lor-Latn-ZZ"}, "und-Sora": {"value" : "srb-Sora-IN"}, "los": {"value" : "los-Latn-ZZ"}, "loz": {"value" : "loz-Latn-ZM"}, "und-202": {"value" : "en-Latn-NG"}, "und-Latn-MR": {"value" : "fr-Latn-MR"}, "ku-Yezi": {"value" : "ku-Yezi-GE"}, "hhy": {"value" : "hhy-Latn-ZZ"}, "hia": {"value" : "hia-Latn-ZZ"}, "hif": {"value" : "hif-Latn-FJ"}
    , "dad": {"value" : "dad-Latn-ZZ"}, "hih": {"value" : "hih-Latn-ZZ"}, "hig": {"value" : "hig-Latn-ZZ"}, "daf": {"value" : "daf-Latn-ZZ"}, "ubu": {"value" : "ubu-Latn-ZZ"}, "dah": {"value" : "dah-Latn-ZZ"}, "hil": {"value" : "hil-Latn-PH"}, "dag": {"value" : "dag-Latn-ZZ"}, "und-Mero": {"value" : "xmr-Mero-SD"}, "dak": {"value" : "dak-Latn-US"}, "und-Merc": {"value" : "xmr-Merc-SD"}, "dar": {"value" : "dar-Cyrl-RU"}, "dav": {"value" : "dav-Latn-KE"}, "lrc": {"value" : "lrc-Arab-IR"}, "yko": {"value" : "yko-Latn-ZZ"}
    , "und-Latn-MK": {"value" : "sq-Latn-MK"}, "und-Latn-MM": {"value" : "kac-Latn-MM"}, "dbd": {"value" : "dbd-Latn-ZZ"}, "und-Latn-MO": {"value" : "pt-Latn-MO"}, "und-Latn-MA": {"value" : "fr-Latn-MA"}, "und-Bali": {"value" : "ban-Bali-ID"}, "und-Tavt": {"value" : "blt-Tavt-VN"}, "dbq": {"value" : "dbq-Latn-ZZ"}, "yle": {"value" : "yle-Latn-ZZ"}, "ylg": {"value" : "ylg-Latn-ZZ"}, "und-Maka": {"value" : "mak-Maka-ID"}, "yll": {"value" : "yll-Latn-ZZ"}, "udm": {"value" : "udm-Cyrl-RU"}, "dcc": {"value" : "dcc-Arab-IN"}
    , "yml": {"value" : "yml-Latn-ZZ"}, "hla": {"value" : "hla-Latn-ZZ"}, "und-Latn-IR": {"value" : "tk-Latn-IR"}, "ltg": {"value" : "ltg-Latn-LV"}, "und-Latn-KM": {"value" : "fr-Latn-KM"}, "ddn": {"value" : "ddn-Latn-ZZ"}, "hlu": {"value" : "hlu-Hluw-TR"}, "lua": {"value" : "lua-Latn-CD"}, "und-Bamu": {"value" : "bax-Bamu-CM"}, "hmd": {"value" : "hmd-Plrd-CN"}, "ded": {"value" : "ded-Latn-ZZ"}, "luo": {"value" : "luo-Latn-KE"}, "und-142": {"value" : "zh-Hans-CN"}, "und-143": {"value" : "uz-Latn-UZ"}, "den":
    {"value" : "den-Latn-CA"}, "und-Gran": {"value" : "sa-Gran-IN"}, "hmt": {"value" : "hmt-Latn-ZZ"}, "uga": {"value" : "uga-Ugar-SY"}, "luz": {"value" : "luz-Arab-IR"}, "luy": {"value" : "luy-Latn-KE"}, "und-145": {"value" : "ar-Arab-SA"}, "und-Cakm": {"value" : "ccp-Cakm-BD"}, "und-Dupl": {"value" : "fr-Dupl-FR"}, "yon": {"value" : "yon-Latn-ZZ"}, "ug-MN": {"value" : "ug-Cyrl-MN"}, "hne": {"value" : "hne-Deva-IN"}, "hnd": {"value" : "hnd-Arab-PK"}, "hnj": {"value" : "hnj-Hmng-LA"}, "hno": {"value" : "hno-Arab-PK"}
    , "hnn": {"value" : "hnn-Latn-PH"}, "ug-KZ": {"value" : "ug-Cyrl-KZ"}, "und-154": {"value" : "en-Latn-GB"}, "und-155": {"value" : "de-Latn-DE"}, "und-150": {"value" : "ru-Cyrl-RU"}, "und-151": {"value" : "ru-Cyrl-RU"}, "und-Sylo": {"value" : "syl-Sylo-BD"}, "hoc": {"value" : "hoc-Deva-IN"}, "dga": {"value" : "dga-Latn-ZZ"}, "lwl": {"value" : "lwl-Thai-TH"}, "und-Ital": {"value" : "ett-Ital-IT"}, "hoj": {"value" : "hoj-Deva-IN"}, "dgh": {"value" : "dgh-Latn-ZZ"}, "dgi": {"value" : "dgi-Latn-ZZ"}, "dgl": {"value"
    : "dgl-Arab-ZZ"}, "hot": {"value" : "hot-Latn-ZZ"}, "dgr": {"value" : "dgr-Latn-CA"}, "dgz": {"value" : "dgz-Latn-ZZ"}, "yrb": {"value" : "yrb-Latn-ZZ"}, "yre": {"value" : "yre-Latn-ZZ"}, "und-Lyci": {"value" : "xlc-Lyci-TR"}, "und-Cans": {"value" : "cr-Cans-CA"}, "und-Hluw": {"value" : "hlu-Hluw-TR"}, "und-Nand": {"value" : "sa-Nand-IN"}, "yrl": {"value" : "yrl-Latn-BR"}, "dia": {"value" : "dia-Latn-ZZ"}, "und-Grek": {"value" : "el-Grek-GR"}, "und-Mong": {"value" : "mn-Mong-CN"}, "und-Lydi": {"value" :
    "xld-Lydi-TR"}, "yss": {"value" : "yss-Latn-ZZ"}, "und-Newa": {"value" : "new-Newa-NP"}, "lzh": {"value" : "lzh-Hans-CN"}, "dje": {"value" : "dje-Latn-NE"}, "lzz": {"value" : "lzz-Latn-TR"}, "uli": {"value" : "uli-Latn-FM"}, "hsb": {"value" : "hsb-Latn-DE"}, "und-Xsux": {"value" : "akk-Xsux-IQ"}, "hsn": {"value" : "hsn-Hans-CN"}, "und-Cari": {"value" : "xcr-Cari-TR"}, "und-Syrc": {"value" : "syr-Syrc-IQ"}, "yua": {"value" : "yua-Latn-MX"}, "yue": {"value" : "yue-Hant-HK"}, "umb": {"value" : "umb-Latn-AO"}
    , "yuj": {"value" : "yuj-Latn-ZZ"}, "yut": {"value" : "yut-Latn-ZZ"}, "yuw": {"value" : "yuw-Latn-ZZ"}, "und-Bopo": {"value" : "zh-Bopo-TW"}, "und-Yezi": {"value" : "ku-Yezi-GE"}, "und": {"value" : "en-Latn-US"}, "und-Egyp": {"value" : "egy-Egyp-EG"}, "und-Tglg": {"value" : "fil-Tglg-PH"}, "unr": {"value" : "unr-Beng-IN"}, "hui": {"value" : "hui-Latn-ZZ"}, "und-Elba": {"value" : "sq-Elba-AL"}, "unx": {"value" : "unx-Beng-IN"}, "und-Narb": {"value" : "xna-Narb-SA"}, "pa-PK": {"value" : "pa-Arab-PK"}, "und-Hebr-CA":
    {"value" : "yi-Hebr-CA"}, "uok": {"value" : "uok-Latn-ZZ"}, "und-Geor": {"value" : "ka-Geor-GE"}, "und-Shrd": {"value" : "sa-Shrd-IN"}, "dnj": {"value" : "dnj-Latn-CI"}, "und-Diak": {"value" : "dv-Diak-MV"}, "dob": {"value" : "dob-Latn-ZZ"}, "und-Mymr-TH": {"value" : "mnw-Mymr-TH"}, "doi": {"value" : "doi-Arab-IN"}, "dop": {"value" : "dop-Latn-ZZ"}, "und-Sund": {"value" : "su-Sund-ID"}, "dow": {"value" : "dow-Latn-ZZ"}, "sr-ME": {"value" : "sr-Latn-ME"}, "und-Hung": {"value" : "hu-Hung-HU"}, "mad": {"value"
    : "mad-Latn-ID"}, "mag": {"value" : "mag-Deva-IN"}, "maf": {"value" : "maf-Latn-CM"}, "mai": {"value" : "mai-Deva-IN"}, "mak": {"value" : "mak-Latn-ID"}, "man": {"value" : "man-Latn-GM"}, "mas": {"value" : "mas-Latn-KE"}, "maw": {"value" : "maw-Latn-ZZ"}, "maz": {"value" : "maz-Latn-MX"}, "uri": {"value" : "uri-Latn-ZZ"}, "mbh": {"value" : "mbh-Latn-ZZ"}, "urt": {"value" : "urt-Latn-ZZ"}, "mbo": {"value" : "mbo-Latn-ZZ"}, "urw": {"value" : "urw-Latn-ZZ"}, "mbq": {"value" : "mbq-Latn-ZZ"}, "mbu": {"value"
    : "mbu-Latn-ZZ"}, "und-Hebr-GB": {"value" : "yi-Hebr-GB"}, "usa": {"value" : "usa-Latn-ZZ"}, "mbw": {"value" : "mbw-Latn-ZZ"}, "mci": {"value" : "mci-Latn-ZZ"}, "dri": {"value" : "dri-Latn-ZZ"}, "mcq": {"value" : "mcq-Latn-ZZ"}, "drh": {"value" : "drh-Mong-CN"}, "mcp": {"value" : "mcp-Latn-ZZ"}, "mcr": {"value" : "mcr-Latn-ZZ"}, "mcu": {"value" : "mcu-Latn-ZZ"}, "drs": {"value" : "drs-Ethi-ZZ"}, "mda": {"value" : "mda-Latn-ZZ"}, "mdf": {"value" : "mdf-Cyrl-RU"}, "mde": {"value" : "mde-Arab-ZZ"}, "mdh": {"value"
    : "mdh-Latn-PH"}, "dsb": {"value" : "dsb-Latn-DE"}, "mdj": {"value" : "mdj-Latn-ZZ"}, "utr": {"value" : "utr-Latn-ZZ"}, "mdr": {"value" : "mdr-Latn-ID"}, "mdx": {"value" : "mdx-Ethi-ZZ"}, "mee": {"value" : "mee-Latn-ZZ"}, "med": {"value" : "med-Latn-ZZ"}, "mek": {"value" : "mek-Latn-ZZ"}, "men": {"value" : "men-Latn-SL"}, "az-RU": {"value" : "az-Cyrl-RU"}, "mis-Medf": {"value" : "mis-Medf-NG"}, "mer": {"value" : "mer-Latn-KE"}, "dtm": {"value" : "dtm-Latn-ML"}, "meu": {"value" : "meu-Latn-ZZ"}, "met": {"value"
    : "met-Latn-ZZ"}, "dtp": {"value" : "dtp-Latn-MY"}, "dts": {"value" : "dts-Latn-ZZ"}, "uvh": {"value" : "uvh-Latn-ZZ"}, "dty": {"value" : "dty-Deva-NP"}, "mfa": {"value" : "mfa-Arab-TH"}, "uvl": {"value" : "uvl-Latn-ZZ"}, "mfe": {"value" : "mfe-Latn-MU"}, "dua": {"value" : "dua-Latn-CM"}, "dud": {"value" : "dud-Latn-ZZ"}, "duc": {"value" : "duc-Latn-ZZ"}, "mfn": {"value" : "mfn-Latn-ZZ"}, "dug": {"value" : "dug-Latn-ZZ"}, "mfo": {"value" : "mfo-Latn-ZZ"}, "mfq": {"value" : "mfq-Latn-ZZ"}, "und-Phag": {"value"
    : "lzh-Phag-CN"}, "dva": {"value" : "dva-Latn-ZZ"}, "mgh": {"value" : "mgh-Latn-MZ"}, "mgl": {"value" : "mgl-Latn-ZZ"}, "mgo": {"value" : "mgo-Latn-CM"}, "mgp": {"value" : "mgp-Deva-NP"}, "mgy": {"value" : "mgy-Latn-TZ"}, "zag": {"value" : "zag-Latn-SD"}, "mhi": {"value" : "mhi-Latn-ZZ"}, "mhl": {"value" : "mhl-Latn-ZZ"}, "dww": {"value" : "dww-Latn-ZZ"}, "mif": {"value" : "mif-Latn-ZZ"}, "und-Mymr-IN": {"value" : "kht-Mymr-IN"}, "min": {"value" : "min-Latn-ID"}, "mis": {"value" : "mis-Hatr-IQ"}, "ian":
    {"value" : "ian-Latn-ZZ"}, "miw": {"value" : "miw-Latn-ZZ"}, "iar": {"value" : "iar-Latn-ZZ"}, "uz-Arab": {"value" : "uz-Arab-AF"}, "ibb": {"value" : "ibb-Latn-NG"}, "iba": {"value" : "iba-Latn-MY"}, "dyo": {"value" : "dyo-Latn-SN"}, "dyu": {"value" : "dyu-Latn-BF"}, "iby": {"value" : "iby-Latn-ZZ"}, "zdj": {"value" : "zdj-Arab-KM"}, "ica": {"value" : "ica-Latn-ZZ"}, "mki": {"value" : "mki-Arab-ZZ"}, "und-Wcho": {"value" : "nnp-Wcho-IN"}, "ich": {"value" : "ich-Latn-ZZ"}, "mkl": {"value" : "mkl-Latn-ZZ"}
    , "dzg": {"value" : "dzg-Latn-ZZ"}, "mkp": {"value" : "mkp-Latn-ZZ"}, "zea": {"value" : "zea-Latn-NL"}, "mkw": {"value" : "mkw-Latn-ZZ"}, "mle": {"value" : "mle-Latn-ZZ"}, "idd": {"value" : "idd-Latn-ZZ"}, "idi": {"value" : "idi-Latn-ZZ"}, "lif-Limb": {"value" : "lif-Limb-IN"}, "mlp": {"value" : "mlp-Latn-ZZ"}, "mls": {"value" : "mls-Latn-SD"}, "idu": {"value" : "idu-Latn-ZZ"}, "quc": {"value" : "quc-Latn-GT"}, "qug": {"value" : "qug-Latn-EC"}, "und-Jamo": {"value" : "ko-Jamo-KR"}, "mmo": {"value" : "mmo-Latn-ZZ"}
    , "mmu": {"value" : "mmu-Latn-ZZ"}, "mmx": {"value" : "mmx-Latn-ZZ"}, "zgh": {"value" : "zgh-Tfng-MA"}, "mna": {"value" : "mna-Latn-ZZ"}, "mnf": {"value" : "mnf-Latn-ZZ"}, "ife": {"value" : "ife-Latn-TG"}, "mni": {"value" : "mni-Beng-IN"}, "mnw": {"value" : "mnw-Mymr-MM"}, "moa": {"value" : "moa-Latn-ZZ"}, "moe": {"value" : "moe-Latn-CA"}, "igb": {"value" : "igb-Latn-ZZ"}, "ige": {"value" : "ige-Latn-ZZ"}, "moh": {"value" : "moh-Latn-CA"}, "und-Hebr-SE": {"value" : "yi-Hebr-SE"}, "zhx": {"value" : "zhx-Nshu-CN"}
    , "mos": {"value" : "mos-Latn-BF"}, "und-Shaw": {"value" : "en-Shaw-GB"}, "zia": {"value" : "zia-Latn-ZZ"}, "mox": {"value" : "mox-Latn-ZZ"}, "vag": {"value" : "vag-Latn-ZZ"}, "vai": {"value" : "vai-Vaii-LR"}, "van": {"value" : "van-Latn-ZZ"}, "mpp": {"value" : "mpp-Latn-ZZ"}, "mpt": {"value" : "mpt-Latn-ZZ"}, "mps": {"value" : "mps-Latn-ZZ"}, "mpx": {"value" : "mpx-Latn-ZZ"}, "und-Hebr-US": {"value" : "yi-Hebr-US"}, "hi-Latn": {"value" : "hi-Latn-IN"}, "mql": {"value" : "mql-Latn-ZZ"}, "und-Hebr-UA": {"value"
    : "yi-Hebr-UA"}, "mrd": {"value" : "mrd-Deva-NP"}, "zkt": {"value" : "zkt-Kits-CN"}, "mrj": {"value" : "mrj-Cyrl-RU"}, "ijj": {"value" : "ijj-Latn-ZZ"}, "mro": {"value" : "mro-Mroo-BD"}, "und-Modi": {"value" : "mr-Modi-IN"}, "ebu": {"value" : "ebu-Latn-KE"}, "zlm": {"value" : "zlm-Latn-TG"}, "arc-Palm": {"value" : "arc-Palm-SY"}, "ikk": {"value" : "ikk-Latn-ZZ"}, "ikt": {"value" : "ikt-Latn-CA"}, "ikw": {"value" : "ikw-Latn-ZZ"}, "vec": {"value" : "vec-Latn-IT"}, "ikx": {"value" : "ikx-Latn-ZZ"}, "zmi":
    {"value" : "zmi-Latn-MY"}, "mtc": {"value" : "mtc-Latn-ZZ"}, "mtf": {"value" : "mtf-Latn-ZZ"}, "vep": {"value" : "vep-Latn-RU"}, "zh-Bopo": {"value" : "zh-Bopo-TW"}, "mti": {"value" : "mti-Latn-ZZ"}, "und-Ethi": {"value" : "am-Ethi-ET"}, "mtr": {"value" : "mtr-Deva-IN"}, "und-Thai-LA": {"value" : "kdt-Thai-LA"}, "ilo": {"value" : "ilo-Latn-PH"}, "zne": {"value" : "zne-Latn-ZZ"}, "mua": {"value" : "mua-Latn-CM"}, "und-Thai-KH": {"value" : "kdt-Thai-KH"}, "imo": {"value" : "imo-Latn-ZZ"}, "mus": {"value" :
    "mus-Latn-US"}, "mur": {"value" : "mur-Latn-ZZ"}, "mva": {"value" : "mva-Latn-ZZ"}, "inh": {"value" : "inh-Cyrl-RU"}, "mvn": {"value" : "mvn-Latn-ZZ"}, "efi": {"value" : "efi-Latn-NG"}, "mvy": {"value" : "mvy-Arab-PK"}, "und-Java": {"value" : "jv-Java-ID"}, "mwk": {"value" : "mwk-Latn-ML"}, "mwr": {"value" : "mwr-Deva-IN"}, "und-021": {"value" : "en-Latn-US"}, "egl": {"value" : "egl-Latn-IT"}, "mww": {"value" : "mww-Hmnp-US"}, "mwv": {"value" : "mwv-Latn-ID"}, "iou": {"value" : "iou-Latn-ZZ"}, "und-029":
    {"value" : "es-Latn-CU"}, "vic": {"value" : "vic-Latn-SX"}, "egy": {"value" : "egy-Egyp-EG"}, "und-Ugar": {"value" : "uga-Ugar-SY"}, "mxc": {"value" : "mxc-Latn-ZW"}, "raj": {"value" : "raj-Deva-IN"}, "rai": {"value" : "rai-Latn-ZZ"}, "rao": {"value" : "rao-Latn-ZZ"}, "viv": {"value" : "viv-Latn-ZZ"}, "mxm": {"value" : "mxm-Latn-ZZ"}, "und-034": {"value" : "hi-Deva-IN"}, "und-030": {"value" : "zh-Hans-CN"}, "und-039": {"value" : "it-Latn-IT"}, "und-035": {"value" : "id-Latn-ID"}, "ug-Cyrl": {"value" : "ug-Cyrl-KZ"}
    , "myk": {"value" : "myk-Latn-ZZ"}, "mym": {"value" : "mym-Ethi-ZZ"}, "aai": {"value" : "aai-Latn-ZZ"}, "aak": {"value" : "aak-Latn-ZZ"}, "myw": {"value" : "myw-Latn-ZZ"}, "myv": {"value" : "myv-Cyrl-RU"}, "myx": {"value" : "myx-Latn-UG"}, "myz": {"value" : "myz-Mand-IR"}, "und-Sinh": {"value" : "si-Sinh-LK"}, "und-Sind": {"value" : "sd-Sind-IN"}, "aau": {"value" : "aau-Latn-ZZ"}, "rcf": {"value" : "rcf-Latn-RE"}, "und-Orkh": {"value" : "otk-Orkh-MN"}, "mzk": {"value" : "mzk-Latn-ZZ"}, "mzn": {"value" :
    "mzn-Arab-IR"}, "iri": {"value" : "iri-Latn-ZZ"}, "mzm": {"value" : "mzm-Latn-ZZ"}, "mzp": {"value" : "mzp-Latn-ZZ"}, "und-053": {"value" : "en-Latn-AU"}, "abi": {"value" : "abi-Latn-ZZ"}, "und-054": {"value" : "en-Latn-PG"}, "mzw": {"value" : "mzw-Latn-ZZ"}, "mzz": {"value" : "mzz-Latn-ZZ"}, "abr": {"value" : "abr-Latn-GH"}, "abq": {"value" : "abq-Cyrl-ZZ"}, "abt": {"value" : "abt-Latn-ZZ"}, "und-057": {"value" : "en-Latn-GU"}, "aby": {"value" : "aby-Latn-ZZ"}, "eka": {"value" : "eka-Latn-ZZ"}, "vls": {"value"
    : "vls-Latn-BE"}, "ace": {"value" : "ace-Latn-ID"}, "acd": {"value" : "acd-Latn-ZZ"}, "ach": {"value" : "ach-Latn-UG"}, "vmf": {"value" : "vmf-Latn-DE"}, "eky": {"value" : "eky-Kali-MM"}, "rej": {"value" : "rej-Latn-ID"}, "rel": {"value" : "rel-Latn-ZZ"}, "ada": {"value" : "ada-Latn-GH"}, "res": {"value" : "res-Latn-ZZ"}, "vmw": {"value" : "vmw-Latn-MZ"}, "ade": {"value" : "ade-Latn-ZZ"}, "adj": {"value" : "adj-Latn-ZZ"}, "und-Hira": {"value" : "ja-Hira-JP"}, "adp": {"value" : "adp-Tibt-BT"}, "adz": {"value"
    : "adz-Latn-ZZ"}, "ady": {"value" : "ady-Cyrl-RU"}, "ema": {"value" : "ema-Latn-ZZ"}, "und-Deva": {"value" : "hi-Deva-IN"}, "aeb": {"value" : "aeb-Arab-TN"}, "emi": {"value" : "emi-Latn-ZZ"}, "und-009": {"value" : "en-Latn-AU"}, "aey": {"value" : "aey-Latn-ZZ"}, "und-002": {"value" : "en-Latn-NG"}, "und-003": {"value" : "en-Latn-US"}, "und-005": {"value" : "pt-Latn-BR"}, "rgn": {"value" : "rgn-Latn-IT"}, "vot": {"value" : "vot-Latn-RU"}, "enn": {"value" : "enn-Latn-ZZ"}, "enq": {"value" : "enq-Latn-ZZ"}
    , "und-011": {"value" : "en-Latn-NG"}, "rhg": {"value" : "rhg-Arab-MM"}, "und-017": {"value" : "sw-Latn-CD"}, "und-018": {"value" : "en-Latn-ZA"}, "und-019": {"value" : "en-Latn-US"}, "und-013": {"value" : "es-Latn-MX"}, "und-014": {"value" : "sw-Latn-TZ"}, "und-015": {"value" : "ar-Arab-EG"}, "agc": {"value" : "agc-Latn-ZZ"}, "und-Zanb": {"value" : "cmg-Zanb-MN"}, "iwm": {"value" : "iwm-Latn-ZZ"}, "agd": {"value" : "agd-Latn-ZZ"}, "agg": {"value" : "agg-Latn-ZZ"}, "iws": {"value" : "iws-Latn-ZZ"}, "agm":
    {"value" : "agm-Latn-ZZ"}, "ago": {"value" : "ago-Latn-ZZ"}, "agq": {"value" : "agq-Latn-CM"}, "ria": {"value" : "ria-Latn-IN"}, "rif": {"value" : "rif-Tfng-MA"}, "nac": {"value" : "nac-Latn-ZZ"}, "naf": {"value" : "naf-Latn-ZZ"}, "nak": {"value" : "nak-Latn-ZZ"}, "nan": {"value" : "nan-Hans-CN"}, "aha": {"value" : "aha-Latn-ZZ"}, "nap": {"value" : "nap-Latn-IT"}, "naq": {"value" : "naq-Latn-NA"}, "zza": {"value" : "zza-Latn-TR"}, "nas": {"value" : "nas-Latn-ZZ"}, "ahl": {"value" : "ahl-Latn-ZZ"}, "en-Shaw":
    {"value" : "en-Shaw-GB"}, "und-Copt": {"value" : "cop-Copt-EG"}, "aho": {"value" : "aho-Ahom-IN"}, "vro": {"value" : "vro-Latn-EE"}, "rjs": {"value" : "rjs-Deva-NP"}, "nca": {"value" : "nca-Latn-ZZ"}, "ncf": {"value" : "ncf-Latn-ZZ"}, "nce": {"value" : "nce-Latn-ZZ"}, "nch": {"value" : "nch-Latn-MX"}, "izh": {"value" : "izh-Latn-RU"}, "izi": {"value" : "izi-Latn-ZZ"}, "rkt": {"value" : "rkt-Beng-BD"}, "nco": {"value" : "nco-Latn-ZZ"}, "eri": {"value" : "eri-Latn-ZZ"}, "ajg": {"value" : "ajg-Latn-ZZ"}, "ncu":
    {"value" : "ncu-Latn-ZZ"}, "ndc": {"value" : "ndc-Latn-MZ"}, "esg": {"value" : "esg-Gonm-IN"}, "nds": {"value" : "nds-Latn-DE"}, "akk": {"value" : "akk-Xsux-IQ"}, "esu": {"value" : "esu-Latn-US"}, "neb": {"value" : "neb-Latn-ZZ"}, "rmf": {"value" : "rmf-Latn-FI"}, "und-061": {"value" : "sm-Latn-WS"}, "und-Limb": {"value" : "lif-Limb-IN"}, "vun": {"value" : "vun-Latn-TZ"}, "ff-Adlm": {"value" : "ff-Adlm-GN"}, "vut": {"value" : "vut-Latn-ZZ"}, "rmo": {"value" : "rmo-Latn-CH"}, "ala": {"value" : "ala-Latn-ZZ"}
    , "rmt": {"value" : "rmt-Arab-IR"}, "rmu": {"value" : "rmu-Latn-SE"}, "ali": {"value" : "ali-Latn-ZZ"}, "nex": {"value" : "nex-Latn-ZZ"}, "new": {"value" : "new-Deva-NP"}, "aln": {"value" : "aln-Latn-XK"}, "etr": {"value" : "etr-Latn-ZZ"}, "und-Rohg": {"value" : "rhg-Rohg-MM"}, "ett": {"value" : "ett-Ital-IT"}, "rna": {"value" : "rna-Latn-ZZ"}, "etu": {"value" : "etu-Latn-ZZ"}, "alt": {"value" : "alt-Cyrl-RU"}, "etx": {"value" : "etx-Latn-ZZ"}, "rng": {"value" : "rng-Latn-MZ"}, "und-Linb": {"value" : "grc-Linb-GR"}
    , "und-Lina": {"value" : "lab-Lina-GR"}, "und-Jpan": {"value" : "ja-Jpan-JP"}, "man-GN": {"value" : "man-Nkoo-GN"}, "nfr": {"value" : "nfr-Latn-ZZ"}, "amm": {"value" : "amm-Latn-ZZ"}, "und-Arab": {"value" : "ar-Arab-EG"}, "amo": {"value" : "amo-Latn-NG"}, "amn": {"value" : "amn-Latn-ZZ"}, "rob": {"value" : "rob-Latn-ID"}, "amp": {"value" : "amp-Latn-ZZ"}, "ngb": {"value" : "ngb-Latn-ZZ"}, "rof": {"value" : "rof-Latn-TZ"}, "nga": {"value" : "nga-Latn-ZZ"}, "ngl": {"value" : "ngl-Latn-MZ"}, "roo": {"value"
    : "roo-Latn-ZZ"}, "anc": {"value" : "anc-Latn-ZZ"}, "ank": {"value" : "ank-Latn-ZZ"}, "ann": {"value" : "ann-Latn-ZZ"}, "und-Bhks": {"value" : "sa-Bhks-IN"}, "nhb": {"value" : "nhb-Latn-ZZ"}, "nhe": {"value" : "nhe-Latn-MX"}, "any": {"value" : "any-Latn-ZZ"}, "und-Orya": {"value" : "or-Orya-IN"}, "ewo": {"value" : "ewo-Latn-CM"}, "nhw": {"value" : "nhw-Latn-MX"}, "aoj": {"value" : "aoj-Latn-ZZ"}, "aom": {"value" : "aom-Latn-ZZ"}, "zh-Hanb": {"value" : "zh-Hanb-TW"}, "und-Kits": {"value" : "zkt-Kits-CN"}
    , "jab": {"value" : "jab-Latn-ZZ"}, "nif": {"value" : "nif-Latn-ZZ"}, "aoz": {"value" : "aoz-Latn-ID"}, "nij": {"value" : "nij-Latn-ID"}, "nii": {"value" : "nii-Latn-ZZ"}, "zh-PH": {"value" : "zh-Hant-PH"}, "nin": {"value" : "nin-Latn-ZZ"}, "zh-Hant": {"value" : "zh-Hant-TW"}, "zh-PF": {"value" : "zh-Hant-PF"}, "und-Ahom": {"value" : "aho-Ahom-IN"}, "apd": {"value" : "apd-Arab-TG"}, "apc": {"value" : "apc-Arab-ZZ"}, "ape": {"value" : "ape-Latn-ZZ"}, "jam": {"value" : "jam-Latn-JM"}, "zh-PA": {"value" : "zh-Hant-PA"}
    , "niu": {"value" : "niu-Latn-NU"}, "niz": {"value" : "niz-Latn-ZZ"}, "niy": {"value" : "niy-Latn-ZZ"}, "ext": {"value" : "ext-Latn-ES"}, "apr": {"value" : "apr-Latn-ZZ"}, "aps": {"value" : "aps-Latn-ZZ"}, "apz": {"value" : "apz-Latn-ZZ"}, "rro": {"value" : "rro-Latn-ZZ"}, "njo": {"value" : "njo-Latn-IN"}, "jbo": {"value" : "jbo-Latn-001"}, "jbu": {"value" : "jbu-Latn-ZZ"}, "zh-MO": {"value" : "zh-Hant-MO"}, "nkg": {"value" : "nkg-Latn-ZZ"}, "zh-MY": {"value" : "zh-Hant-MY"}, "arc": {"value" : "arc-Armi-IR"}
    , "nko": {"value" : "nko-Latn-ZZ"}, "arh": {"value" : "arh-Latn-ZZ"}, "pa-Arab": {"value" : "pa-Arab-PK"}, "und-Mtei": {"value" : "mni-Mtei-IN"}, "arn": {"value" : "arn-Latn-CL"}, "aro": {"value" : "aro-Latn-BO"}, "und-Cyrl-RO": {"value" : "bg-Cyrl-RO"}, "arq": {"value" : "arq-Arab-DZ"}, "ars": {"value" : "ars-Arab-SA"}, "arz": {"value" : "arz-Arab-EG"}, "ary": {"value" : "ary-Arab-MA"}, "rtm": {"value" : "rtm-Latn-FJ"}, "asa": {"value" : "asa-Latn-TZ"}, "und-Grek-TR": {"value" : "bgx-Grek-TR"}, "ase": {"value"
    : "ase-Sgnw-US"}, "asg": {"value" : "asg-Latn-ZZ"}, "aso": {"value" : "aso-Latn-ZZ"}, "ast": {"value" : "ast-Latn-ES"}, "rue": {"value" : "rue-Cyrl-UA"}, "rug": {"value" : "rug-Latn-SB"}, "nmg": {"value" : "nmg-Latn-CM"}, "ata": {"value" : "ata-Latn-ZZ"}, "jen": {"value" : "jen-Latn-ZZ"}, "atg": {"value" : "atg-Latn-ZZ"}, "atj": {"value" : "atj-Latn-CA"}, "nmz": {"value" : "nmz-Latn-ZZ"}, "unr-Deva": {"value" : "unr-Deva-NP"}, "nnf": {"value" : "nnf-Latn-ZZ"}, "nnh": {"value" : "nnh-Latn-CM"}, "nnk": {"value"
    : "nnk-Latn-ZZ"}, "nnm": {"value" : "nnm-Latn-ZZ"}, "nnp": {"value" : "nnp-Wcho-IN"}, "az-IR": {"value" : "az-Arab-IR"}, "und-Adlm": {"value" : "ff-Adlm-GN"}, "az-IQ": {"value" : "az-Arab-IQ"}, "und-Nbat": {"value" : "arc-Nbat-JO"}, "sd-Khoj": {"value" : "sd-Khoj-IN"}, "nod": {"value" : "nod-Lana-TH"}, "auy": {"value" : "auy-Latn-ZZ"}, "noe": {"value" : "noe-Deva-IN"}, "rwk": {"value" : "rwk-Latn-TZ"}, "und-Cyrl-MD": {"value" : "uk-Cyrl-MD"}, "rwo": {"value" : "rwo-Latn-ZZ"}, "non": {"value" : "non-Runr-SE"}
    , "nop": {"value" : "nop-Latn-ZZ"}, "jgk": {"value" : "jgk-Latn-ZZ"}, "jgo": {"value" : "jgo-Latn-CM"}, "und-Vaii": {"value" : "vai-Vaii-LR"}, "nou": {"value" : "nou-Latn-ZZ"}, "avl": {"value" : "avl-Arab-ZZ"}, "avn": {"value" : "avn-Latn-ZZ"}, "wae": {"value" : "wae-Latn-CH"}, "avt": {"value" : "avt-Latn-ZZ"}, "avu": {"value" : "avu-Latn-ZZ"}, "waj": {"value" : "waj-Latn-ZZ"}, "wal": {"value" : "wal-Ethi-ET"}, "wan": {"value" : "wan-Latn-ZZ"}, "zh-HK": {"value" : "zh-Hant-HK"}, "war": {"value" : "war-Latn-PH"}
    , "awa": {"value" : "awa-Deva-IN"}, "und-Plrd": {"value" : "hmd-Plrd-CN"}, "awb": {"value" : "awb-Latn-ZZ"}, "awo": {"value" : "awo-Latn-ZZ"}, "und-Knda": {"value" : "kn-Knda-IN"}, "zh-ID": {"value" : "zh-Hant-ID"}, "jib": {"value" : "jib-Latn-ZZ"}, "awx": {"value" : "awx-Latn-ZZ"}, "wbp": {"value" : "wbp-Latn-AU"}, "und-Sidd": {"value" : "sa-Sidd-IN"}, "fab": {"value" : "fab-Latn-ZZ"}, "wbr": {"value" : "wbr-Deva-IN"}, "faa": {"value" : "faa-Latn-ZZ"}, "wbq": {"value" : "wbq-Telu-IN"}, "und-Kali": {"value"
    : "eky-Kali-MM"}, "fag": {"value" : "fag-Latn-ZZ"}, "nqo": {"value" : "nqo-Nkoo-GN"}, "fai": {"value" : "fai-Latn-ZZ"}, "ryu": {"value" : "ryu-Kana-JP"}, "fan": {"value" : "fan-Latn-GQ"}, "wci": {"value" : "wci-Latn-ZZ"}, "nrb": {"value" : "nrb-Latn-ZZ"}, "und-Phlp": {"value" : "pal-Phlp-CN"}, "ayb": {"value" : "ayb-Latn-ZZ"}, "und-Phli": {"value" : "pal-Phli-IR"}, "cu-Glag": {"value" : "cu-Glag-BG"}, "und-Cyrl-XK": {"value" : "sr-Cyrl-XK"}, "az-Arab": {"value" : "az-Arab-IR"}, "ks-Deva": {"value" : "ks-Deva-IN"}
    , "und-Thai": {"value" : "th-Thai-TH"}, "nsk": {"value" : "nsk-Cans-CA"}, "nsn": {"value" : "nsn-Latn-ZZ"}, "nso": {"value" : "nso-Latn-ZA"}, "und-Thaa": {"value" : "dv-Thaa-MV"}, "und-Nshu": {"value" : "zhx-Nshu-CN"}, "nss": {"value" : "nss-Latn-ZZ"}, "zh-VN": {"value" : "zh-Hant-VN"}, "und-Hmnp": {"value" : "mww-Hmnp-US"}, "und-Kana": {"value" : "ja-Kana-JP"}, "und-Hmng": {"value" : "hnj-Hmng-LA"}, "wer": {"value" : "wer-Latn-ZZ"}, "zh-TW": {"value" : "zh-Hant-TW"}, "ntm": {"value" : "ntm-Latn-ZZ"}, "ntr":
    {"value" : "ntr-Latn-ZZ"}, "zh-US": {"value" : "zh-Hant-US"}, "und-Xpeo": {"value" : "peo-Xpeo-IR"}, "jmc": {"value" : "jmc-Latn-TZ"}, "nui": {"value" : "nui-Latn-ZZ"}, "jml": {"value" : "jml-Deva-NP"}, "nup": {"value" : "nup-Latn-ZZ"}, "und-Cyrl-SK": {"value" : "uk-Cyrl-SK"}, "nus": {"value" : "nus-Latn-SS"}, "nuv": {"value" : "nuv-Latn-ZZ"}, "nux": {"value" : "nux-Latn-ZZ"}, "zh-TH": {"value" : "zh-Hant-TH"}, "wgi": {"value" : "wgi-Latn-ZZ"}, "und-Phnx": {"value" : "phn-Phnx-LB"}, "und-Cyrl-TR": {"value"
    : "kbd-Cyrl-TR"}, "ffi": {"value" : "ffi-Latn-ZZ"}, "und-Elym": {"value" : "arc-Elym-IR"}, "ffm": {"value" : "ffm-Latn-ML"}, "und-Rjng": {"value" : "rej-Rjng-ID"}, "whg": {"value" : "whg-Latn-ZZ"}, "nwb": {"value" : "nwb-Latn-ZZ"}, "zh-SR": {"value" : "zh-Hant-SR"}, "wib": {"value" : "wib-Latn-ZZ"}, "und-Hebr": {"value" : "he-Hebr-IL"}, "saf": {"value" : "saf-Latn-GH"}, "sah": {"value" : "sah-Cyrl-RU"}, "saq": {"value" : "saq-Latn-KE"}, "wiu": {"value" : "wiu-Latn-ZZ"}, "sas": {"value" : "sas-Latn-ID"},
    "wiv": {"value" : "wiv-Latn-ZZ"}, "nxq": {"value" : "nxq-Latn-CN"}, "sat": {"value" : "sat-Olck-IN"}, "nxr": {"value" : "nxr-Latn-ZZ"}, "sav": {"value" : "sav-Latn-SN"}, "saz": {"value" : "saz-Saur-IN"}, "wja": {"value" : "wja-Latn-ZZ"}, "sba": {"value" : "sba-Latn-ZZ"}, "sbe": {"value" : "sbe-Latn-ZZ"}, "wji": {"value" : "wji-Latn-ZZ"}, "mn-Mong": {"value" : "mn-Mong-CN"}, "und-419": {"value" : "es-Latn-419"}, "fia": {"value" : "fia-Arab-SD"}, "sbp": {"value" : "sbp-Latn-TZ"}, "und-NO": {"value" : "nb-Latn-NO"}
    , "nyn": {"value" : "nyn-Latn-UG"}, "nym": {"value" : "nym-Latn-TZ"}, "und-NL": {"value" : "nl-Latn-NL"}, "und-NP": {"value" : "ne-Deva-NP"}, "fil": {"value" : "fil-Latn-PH"}, "bal": {"value" : "bal-Arab-PK"}, "ban": {"value" : "ban-Latn-ID"}, "bap": {"value" : "bap-Deva-NP"}, "fit": {"value" : "fit-Latn-SE"}, "bar": {"value" : "bar-Latn-AT"}, "bas": {"value" : "bas-Latn-CM"}, "bav": {"value" : "bav-Latn-ZZ"}, "bax": {"value" : "bax-Bamu-CM"}, "jra": {"value" : "jra-Latn-ZZ"}, "sck": {"value" : "sck-Deva-IN"}
    , "nzi": {"value" : "nzi-Latn-GH"}, "scl": {"value" : "scl-Arab-ZZ"}, "sco": {"value" : "sco-Latn-GB"}, "scn": {"value" : "scn-Latn-IT"}, "aa": {"value" : "aa-Latn-ET"}, "bba": {"value" : "bba-Latn-ZZ"}, "und-MN": {"value" : "mn-Cyrl-MN"}, "ab": {"value" : "ab-Cyrl-GE"}, "und-MM": {"value" : "my-Mymr-MM"}, "und-Osma": {"value" : "so-Osma-SO"}, "bbc": {"value" : "bbc-Latn-ID"}, "scs": {"value" : "scs-Latn-CA"}, "und-ML": {"value" : "bm-Latn-ML"}, "bbb": {"value" : "bbb-Latn-ZZ"}, "und-MK": {"value" : "mk-Cyrl-MK"}
    , "ae": {"value" : "ae-Avst-IR"}, "und-MR": {"value" : "ar-Arab-MR"}, "af": {"value" : "af-Latn-ZA"}, "bbd": {"value" : "bbd-Latn-ZZ"}, "und-MQ": {"value" : "fr-Latn-MQ"}, "und-Wara": {"value" : "hoc-Wara-IN"}, "und-MO": {"value" : "zh-Hant-MO"}, "und-MV": {"value" : "dv-Thaa-MV"}, "und-MU": {"value" : "mfe-Latn-MU"}, "ak": {"value" : "ak-Latn-GH"}, "und-MT": {"value" : "mt-Latn-MT"}, "bbj": {"value" : "bbj-Latn-CM"}, "am": {"value" : "am-Ethi-ET"}, "und-MZ": {"value" : "pt-Latn-MZ"}, "an": {"value" : "an-Latn-ES"}
    , "und-MY": {"value" : "ms-Latn-MY"}, "und-MX": {"value" : "es-Latn-MX"}, "ar": {"value" : "ar-Arab-EG"}, "bbp": {"value" : "bbp-Latn-ZZ"}, "as": {"value" : "as-Beng-IN"}, "bbr": {"value" : "bbr-Latn-ZZ"}, "sdc": {"value" : "sdc-Latn-IT"}, "und-NC": {"value" : "fr-Latn-NC"}, "av": {"value" : "av-Cyrl-RU"}, "sdh": {"value" : "sdh-Arab-IR"}, "und-NA": {"value" : "af-Latn-NA"}, "ay": {"value" : "ay-Latn-BO"}, "az": {"value" : "az-Latn-AZ"}, "und-NE": {"value" : "ha-Latn-NE"}, "und-NI": {"value" : "es-Latn-NI"}
    , "ba": {"value" : "ba-Cyrl-RU"}, "wls": {"value" : "wls-Latn-WF"}, "und-Kore": {"value" : "ko-Kore-KR"}, "und-LK": {"value" : "si-Sinh-LK"}, "be": {"value" : "be-Cyrl-BY"}, "bcf": {"value" : "bcf-Latn-ZZ"}, "bg": {"value" : "bg-Cyrl-BG"}, "bch": {"value" : "bch-Latn-ZZ"}, "bi": {"value" : "bi-Latn-VU"}, "und-LU": {"value" : "fr-Latn-LU"}, "bci": {"value" : "bci-Latn-CI"}, "und-LT": {"value" : "lt-Latn-LT"}, "und-LS": {"value" : "st-Latn-LS"}, "bm": {"value" : "bm-Latn-ML"}, "bcn": {"value" : "bcn-Latn-ZZ"}
    , "bn": {"value" : "bn-Beng-BD"}, "und-LY": {"value" : "ar-Arab-LY"}, "bcm": {"value" : "bcm-Latn-ZZ"}, "bo": {"value" : "bo-Tibt-CN"}, "bco": {"value" : "bco-Latn-ZZ"}, "und-LV": {"value" : "lv-Latn-LV"}, "br": {"value" : "br-Latn-FR"}, "bcq": {"value" : "bcq-Ethi-ZZ"}, "bs": {"value" : "bs-Latn-BA"}, "bcu": {"value" : "bcu-Latn-ZZ"}, "sef": {"value" : "sef-Latn-CI"}, "und-MA": {"value" : "ar-Arab-MA"}, "sei": {"value" : "sei-Latn-MX"}, "seh": {"value" : "seh-Latn-MZ"}, "und-MF": {"value" : "fr-Latn-MF"}
    , "wmo": {"value" : "wmo-Latn-ZZ"}, "und-ME": {"value" : "sr-Latn-ME"}, "und-MD": {"value" : "ro-Latn-MD"}, "und-MC": {"value" : "fr-Latn-MC"}, "ca": {"value" : "ca-Latn-ES"}, "und-MG": {"value" : "mg-Latn-MG"}, "ses": {"value" : "ses-Latn-ML"}, "ce": {"value" : "ce-Cyrl-RU"}, "und-Cyrl-BA": {"value" : "sr-Cyrl-BA"}, "bdd": {"value" : "bdd-Latn-ZZ"}, "und-KP": {"value" : "ko-Kore-KP"}, "ch": {"value" : "ch-Latn-GU"}, "und-KM": {"value" : "ar-Arab-KM"}, "und-KR": {"value" : "ko-Kore-KR"}, "co": {"value" :
    "co-Latn-FR"}, "flr": {"value" : "flr-Latn-ZZ"}, "und-KW": {"value" : "ar-Arab-KW"}, "wnc": {"value" : "wnc-Latn-ZZ"}, "und-Dogr": {"value" : "doi-Dogr-IN"}, "cr": {"value" : "cr-Cans-CA"}, "cs": {"value" : "cs-Latn-CZ"}, "cu": {"value" : "cu-Cyrl-RU"}, "und-KZ": {"value" : "ru-Cyrl-KZ"}, "cv": {"value" : "cv-Cyrl-RU"}, "wni": {"value" : "wni-Arab-KM"}, "und-LA": {"value" : "lo-Laoo-LA"}, "cy": {"value" : "cy-Latn-GB"}, "und-LB": {"value" : "ar-Arab-LB"}, "und-LI": {"value" : "de-Latn-LI"}, "da": {"value"
    : "da-Latn-DK"}, "und-Cyrl-AL": {"value" : "mk-Cyrl-AL"}, "wnu": {"value" : "wnu-Latn-ZZ"}, "de": {"value" : "de-Latn-DE"}, "bef": {"value" : "bef-Latn-ZZ"}, "beh": {"value" : "beh-Latn-ZZ"}, "und-JO": {"value" : "ar-Arab-JO"}, "bej": {"value" : "bej-Arab-SD"}, "fmp": {"value" : "fmp-Latn-ZZ"}, "jut": {"value" : "jut-Latn-DK"}, "bem": {"value" : "bem-Latn-ZM"}, "und-JP": {"value" : "ja-Jpan-JP"}, "wob": {"value" : "wob-Latn-ZZ"}, "sga": {"value" : "sga-Ogam-IE"}, "bet": {"value" : "bet-Latn-ZZ"}, "dv": {"value"
    : "dv-Thaa-MV"}, "bex": {"value" : "bex-Latn-ZZ"}, "bew": {"value" : "bew-Latn-ID"}, "bez": {"value" : "bez-Latn-TZ"}, "dz": {"value" : "dz-Tibt-BT"}, "ms-ID": {"value" : "ms-Latn-ID"}, "wos": {"value" : "wos-Latn-ZZ"}, "und-KH": {"value" : "km-Khmr-KH"}, "und-KG": {"value" : "ky-Cyrl-KG"}, "sgs": {"value" : "sgs-Latn-LT"}, "und-KE": {"value" : "sw-Latn-KE"}, "ee": {"value" : "ee-Latn-GH"}, "bfd": {"value" : "bfd-Latn-CM"}, "sgw": {"value" : "sgw-Ethi-ZZ"}, "und-IN": {"value" : "hi-Deva-IN"}, "und-IL": {"value"
    : "he-Hebr-IL"}, "el": {"value" : "el-Grek-GR"}, "sgz": {"value" : "sgz-Latn-ZZ"}, "und-IR": {"value" : "fa-Arab-IR"}, "en": {"value" : "en-Latn-US"}, "und-IQ": {"value" : "ar-Arab-IQ"}, "und-Perm": {"value" : "kv-Perm-RU"}, "eo": {"value" : "eo-Latn-001"}, "bfq": {"value" : "bfq-Taml-IN"}, "es": {"value" : "es-Latn-ES"}, "und-IT": {"value" : "it-Latn-IT"}, "et": {"value" : "et-Latn-EE"}, "und-IS": {"value" : "is-Latn-IS"}, "eu": {"value" : "eu-Latn-ES"}, "bft": {"value" : "bft-Arab-PK"}, "bfy": {"value"
    : "bfy-Deva-IN"}, "shi": {"value" : "shi-Tfng-MA"}, "shk": {"value" : "shk-Latn-ZZ"}, "shn": {"value" : "shn-Mymr-MM"}, "fod": {"value" : "fod-Latn-ZZ"}, "fa": {"value" : "fa-Arab-IR"}, "bgc": {"value" : "bgc-Deva-IN"}, "ff": {"value" : "ff-Latn-SN"}, "shu": {"value" : "shu-Arab-ZZ"}, "fi": {"value" : "fi-Latn-FI"}, "fj": {"value" : "fj-Latn-FJ"}, "fon": {"value" : "fon-Latn-BJ"}, "und-HM": {"value" : "und-Latn-HM"}, "und-HK": {"value" : "zh-Hant-HK"}, "bgn": {"value" : "bgn-Arab-PK"}, "for": {"value" :
    "for-Latn-ZZ"}, "fo": {"value" : "fo-Latn-FO"}, "und-HN": {"value" : "es-Latn-HN"}, "fr": {"value" : "fr-Latn-FR"}, "und-HU": {"value" : "hu-Latn-HU"}, "und-HT": {"value" : "ht-Latn-HT"}, "ku-Arab": {"value" : "ku-Arab-IQ"}, "sid": {"value" : "sid-Latn-ET"}, "und-HR": {"value" : "hr-Latn-HR"}, "sig": {"value" : "sig-Latn-ZZ"}, "bgx": {"value" : "bgx-Grek-TR"}, "fy": {"value" : "fy-Latn-NL"}, "sim": {"value" : "sim-Latn-ZZ"}, "sil": {"value" : "sil-Latn-ZZ"}, "fpe": {"value" : "fpe-Latn-ZZ"}, "ga": {"value"
    : "ga-Latn-IE"}, "bhb": {"value" : "bhb-Deva-IN"}, "gd": {"value" : "gd-Latn-GB"}, "und-ID": {"value" : "id-Latn-ID"}, "und-IC": {"value" : "es-Latn-IC"}, "bhg": {"value" : "bhg-Latn-ZZ"}, "und-GH": {"value" : "ak-Latn-GH"}, "bhi": {"value" : "bhi-Deva-IN"}, "und-GF": {"value" : "fr-Latn-GF"}, "und-GE": {"value" : "ka-Geor-GE"}, "und-GL": {"value" : "kl-Latn-GL"}, "gl": {"value" : "gl-Latn-ES"}, "bhl": {"value" : "bhl-Latn-ZZ"}, "gn": {"value" : "gn-Latn-PY"}, "bho": {"value" : "bho-Deva-IN"}, "und-GP":
    {"value" : "fr-Latn-GP"}, "und-GN": {"value" : "fr-Latn-GN"}, "und-GT": {"value" : "es-Latn-GT"}, "und-GS": {"value" : "und-Latn-GS"}, "gu": {"value" : "gu-Gujr-IN"}, "und-GR": {"value" : "el-Grek-GR"}, "gv": {"value" : "gv-Latn-IM"}, "und-GQ": {"value" : "es-Latn-GQ"}, "und-Palm": {"value" : "arc-Palm-SY"}, "und-GW": {"value" : "pt-Latn-GW"}, "bhy": {"value" : "bhy-Latn-ZZ"}, "ha": {"value" : "ha-Latn-NG"}, "wrs": {"value" : "wrs-Latn-ZZ"}, "bib": {"value" : "bib-Latn-ZZ"}, "sjr": {"value" : "sjr-Latn-ZZ"}
    , "he": {"value" : "he-Hebr-IL"}, "big": {"value" : "big-Latn-ZZ"}, "hi": {"value" : "hi-Deva-IN"}, "und-Cyrl-GE": {"value" : "ab-Cyrl-GE"}, "bik": {"value" : "bik-Latn-PH"}, "bin": {"value" : "bin-Latn-NG"}, "und-Cham": {"value" : "cjm-Cham-VN"}, "und-FI": {"value" : "fi-Latn-FI"}, "bim": {"value" : "bim-Latn-ZZ"}, "ho": {"value" : "ho-Latn-PG"}, "tg-PK": {"value" : "tg-Arab-PK"}, "und-FO": {"value" : "fo-Latn-FO"}, "bio": {"value" : "bio-Latn-ZZ"}, "fqs": {"value" : "fqs-Latn-ZZ"}, "hr": {"value" : "hr-Latn-HR"}
    , "skc": {"value" : "skc-Latn-ZZ"}, "wsg": {"value" : "wsg-Gong-IN"}, "biq": {"value" : "biq-Latn-ZZ"}, "ht": {"value" : "ht-Latn-HT"}, "hu": {"value" : "hu-Latn-HU"}, "und-FR": {"value" : "fr-Latn-FR"}, "wsk": {"value" : "wsk-Latn-ZZ"}, "hy": {"value" : "hy-Armn-AM"}, "hz": {"value" : "hz-Latn-NA"}, "frc": {"value" : "frc-Latn-US"}, "ia": {"value" : "ia-Latn-001"}, "sks": {"value" : "sks-Latn-ZZ"}, "id": {"value" : "id-Latn-ID"}, "skr": {"value" : "skr-Arab-PK"}, "ig": {"value" : "ig-Latn-NG"}, "und-GA":
    {"value" : "fr-Latn-GA"}, "bji": {"value" : "bji-Ethi-ZZ"}, "ii": {"value" : "ii-Yiii-CN"}, "bjh": {"value" : "bjh-Latn-ZZ"}, "und-EE": {"value" : "et-Latn-EE"}, "ik": {"value" : "ik-Latn-US"}, "bjj": {"value" : "bjj-Deva-IN"}, "und-EC": {"value" : "es-Latn-EC"}, "und-Cprt": {"value" : "grc-Cprt-CY"}, "frp": {"value" : "frp-Latn-FR"}, "in": {"value" : "in-Latn-ID"}, "bjo": {"value" : "bjo-Latn-ZZ"}, "frs": {"value" : "frs-Latn-DE"}, "io": {"value" : "io-Latn-001"}, "und-EH": {"value" : "ar-Arab-EH"}, "bjn":
    {"value" : "bjn-Latn-ID"}, "frr": {"value" : "frr-Latn-DE"}, "und-EG": {"value" : "ar-Arab-EG"}, "is": {"value" : "is-Latn-IS"}, "sld": {"value" : "sld-Latn-ZZ"}, "bjr": {"value" : "bjr-Latn-ZZ"}, "it": {"value" : "it-Latn-IT"}, "iu": {"value" : "iu-Cans-CA"}, "und-ER": {"value" : "ti-Ethi-ER"}, "bjt": {"value" : "bjt-Latn-SN"}, "iw": {"value" : "iw-Hebr-IL"}, "und-Tirh": {"value" : "mai-Tirh-IN"}, "sli": {"value" : "sli-Latn-PL"}, "und-EU": {"value" : "en-Latn-GB"}, "wtm": {"value" : "wtm-Deva-IN"}, "sll":
    {"value" : "sll-Latn-ZZ"}, "und-ET": {"value" : "am-Ethi-ET"}, "bjz": {"value" : "bjz-Latn-ZZ"}, "und-ES": {"value" : "es-Latn-ES"}, "und-EZ": {"value" : "de-Latn-EZ"}, "ja": {"value" : "ja-Jpan-JP"}, "zh-GF": {"value" : "zh-Hant-GF"}, "bkc": {"value" : "bkc-Latn-ZZ"}, "zh-GB": {"value" : "zh-Hant-GB"}, "und-Cyrl-GR": {"value" : "mk-Cyrl-GR"}, "ji": {"value" : "ji-Hebr-UA"}, "und-DE": {"value" : "de-Latn-DE"}, "sly": {"value" : "sly-Latn-ID"}, "bkm": {"value" : "bkm-Latn-CM"}, "sma": {"value" : "sma-Latn-SE"}
    , "bkq": {"value" : "bkq-Latn-ZZ"}, "und-DK": {"value" : "da-Latn-DK"}, "und-DJ": {"value" : "aa-Latn-DJ"}, "bkv": {"value" : "bkv-Latn-ZZ"}, "jv": {"value" : "jv-Latn-ID"}, "bku": {"value" : "bku-Latn-PH"}, "jw": {"value" : "jw-Latn-ID"}, "und-DO": {"value" : "es-Latn-DO"}, "smj": {"value" : "smj-Latn-SE"}, "smn": {"value" : "smn-Latn-FI"}, "ka": {"value" : "ka-Geor-GE"}, "smq": {"value" : "smq-Latn-ZZ"}, "wuu": {"value" : "wuu-Hans-CN"}, "smp": {"value" : "smp-Samr-IL"}, "sms": {"value" : "sms-Latn-FI"}
    , "wuv": {"value" : "wuv-Latn-ZZ"}, "und-DZ": {"value" : "ar-Arab-DZ"}, "kg": {"value" : "kg-Latn-CD"}, "und-EA": {"value" : "es-Latn-EA"}, "ki": {"value" : "ki-Latn-KE"}, "kj": {"value" : "kj-Latn-NA"}, "kk": {"value" : "kk-Cyrl-KZ"}, "man-Nkoo": {"value" : "man-Nkoo-GN"}, "und-CD": {"value" : "sw-Latn-CD"}, "kl": {"value" : "kl-Latn-GL"}, "und-Telu": {"value" : "te-Telu-IN"}, "km": {"value" : "km-Khmr-KH"}, "kn": {"value" : "kn-Knda-IN"}, "ko": {"value" : "ko-Kore-KR"}, "und-CH": {"value" : "de-Latn-CH"}
    , "und-CG": {"value" : "fr-Latn-CG"}, "und-CF": {"value" : "fr-Latn-CF"}, "kr": {"value" : "kr-Latn-ZZ"}, "ks": {"value" : "ks-Arab-IN"}, "und-CL": {"value" : "es-Latn-CL"}, "snc": {"value" : "snc-Latn-ZZ"}, "ku": {"value" : "ku-Latn-TR"}, "blt": {"value" : "blt-Tavt-VN"}, "kv": {"value" : "kv-Cyrl-RU"}, "und-CI": {"value" : "fr-Latn-CI"}, "kw": {"value" : "kw-Latn-GB"}, "und-CP": {"value" : "und-Latn-CP"}, "und-CO": {"value" : "es-Latn-CO"}, "ky": {"value" : "ky-Cyrl-KG"}, "und-CN": {"value" : "zh-Hans-CN"}
    , "und-CM": {"value" : "fr-Latn-CM"}, "snk": {"value" : "snk-Latn-ML"}, "fub": {"value" : "fub-Arab-CM"}, "und-CR": {"value" : "es-Latn-CR"}, "fud": {"value" : "fud-Latn-WF"}, "snp": {"value" : "snp-Latn-ZZ"}, "la": {"value" : "la-Latn-VA"}, "und-CW": {"value" : "pap-Latn-CW"}, "fuf": {"value" : "fuf-Latn-GN"}, "lb": {"value" : "lb-Latn-LU"}, "und-CV": {"value" : "pt-Latn-CV"}, "fue": {"value" : "fue-Latn-ZZ"}, "und-CU": {"value" : "es-Latn-CU"}, "fuh": {"value" : "fuh-Latn-ZZ"}, "und-CZ": {"value" : "cs-Latn-CZ"}
    , "lg": {"value" : "lg-Latn-UG"}, "und-CY": {"value" : "el-Grek-CY"}, "bmh": {"value" : "bmh-Latn-ZZ"}, "snx": {"value" : "snx-Latn-ZZ"}, "li": {"value" : "li-Latn-NL"}, "sny": {"value" : "sny-Latn-ZZ"}, "wwa": {"value" : "wwa-Latn-ZZ"}, "bmk": {"value" : "bmk-Latn-ZZ"}, "und-Cher": {"value" : "chr-Cher-US"}, "fur": {"value" : "fur-Latn-IT"}, "ln": {"value" : "ln-Latn-CD"}, "und-BA": {"value" : "bs-Latn-BA"}, "fuq": {"value" : "fuq-Latn-NE"}, "lo": {"value" : "lo-Laoo-LA"}, "und-BG": {"value" : "bg-Cyrl-BG"}
    , "und-BF": {"value" : "fr-Latn-BF"}, "fuv": {"value" : "fuv-Latn-NG"}, "und-BE": {"value" : "nl-Latn-BE"}, "bmq": {"value" : "bmq-Latn-ML"}, "und-BD": {"value" : "bn-Beng-BD"}, "lt": {"value" : "lt-Latn-LT"}, "lu": {"value" : "lu-Latn-CD"}, "und-BJ": {"value" : "fr-Latn-BJ"}, "lv": {"value" : "lv-Latn-LV"}, "ogc": {"value" : "ogc-Latn-ZZ"}, "sog": {"value" : "sog-Sogd-UZ"}, "und-BI": {"value" : "rn-Latn-BI"}, "bmu": {"value" : "bmu-Latn-ZZ"}, "fuy": {"value" : "fuy-Latn-ZZ"}, "und-BH": {"value" : "ar-Arab-BH"}
    , "und-BO": {"value" : "es-Latn-BO"}, "und-BN": {"value" : "ms-Latn-BN"}, "sok": {"value" : "sok-Latn-ZZ"}, "und-BL": {"value" : "fr-Latn-BL"}, "und-BR": {"value" : "pt-Latn-BR"}, "und-BQ": {"value" : "pap-Latn-BQ"}, "soq": {"value" : "soq-Latn-ZZ"}, "und-BV": {"value" : "und-Latn-BV"}, "und-BT": {"value" : "dz-Tibt-BT"}, "sou": {"value" : "sou-Thai-TH"}, "bng": {"value" : "bng-Latn-ZZ"}, "mg": {"value" : "mg-Latn-MG"}, "und-BY": {"value" : "be-Cyrl-BY"}, "und-Glag": {"value" : "cu-Glag-BG"}, "mh": {"value"
    : "mh-Latn-MH"}, "mi": {"value" : "mi-Latn-NZ"}, "soy": {"value" : "soy-Latn-ZZ"}, "mk": {"value" : "mk-Cyrl-MK"}, "ml": {"value" : "ml-Mlym-IN"}, "bnm": {"value" : "bnm-Latn-ZZ"}, "mn": {"value" : "mn-Cyrl-MN"}, "mo": {"value" : "mo-Latn-RO"}, "und-Prti": {"value" : "xpr-Prti-IR"}, "fvr": {"value" : "fvr-Latn-SD"}, "und-AF": {"value" : "fa-Arab-AF"}, "bnp": {"value" : "bnp-Latn-ZZ"}, "mr": {"value" : "mr-Deva-IN"}, "und-AE": {"value" : "ar-Arab-AE"}, "ms": {"value" : "ms-Latn-MY"}, "spd": {"value" : "spd-Latn-ZZ"}
    , "und-AD": {"value" : "ca-Latn-AD"}, "mt": {"value" : "mt-Latn-MT"}, "my": {"value" : "my-Mymr-MM"}, "zh-BN": {"value" : "zh-Hant-BN"}, "und-AM": {"value" : "hy-Armn-AM"}, "spl": {"value" : "spl-Latn-ZZ"}, "und-AL": {"value" : "sq-Latn-AL"}, "und-AR": {"value" : "es-Latn-AR"}, "und-AQ": {"value" : "und-Latn-AQ"}, "na": {"value" : "na-Latn-NR"}, "und-AO": {"value" : "pt-Latn-AO"}, "nb": {"value" : "nb-Latn-NO"}, "nd": {"value" : "nd-Latn-ZW"}, "und-AT": {"value" : "de-Latn-AT"}, "ne": {"value" : "ne-Deva-NP"}
    , "sps": {"value" : "sps-Latn-ZZ"}, "und-AS": {"value" : "sm-Latn-AS"}, "und-AZ": {"value" : "az-Latn-AZ"}, "ng": {"value" : "ng-Latn-NA"}, "und-AX": {"value" : "sv-Latn-AX"}, "und-AW": {"value" : "nl-Latn-AW"}, "boj": {"value" : "boj-Latn-ZZ"}, "nl": {"value" : "nl-Latn-NL"}, "bon": {"value" : "bon-Latn-ZZ"}, "nn": {"value" : "nn-Latn-NO"}, "bom": {"value" : "bom-Latn-ZZ"}, "no": {"value" : "no-Latn-NO"}, "nr": {"value" : "nr-Latn-ZA"}, "arc-Nbat": {"value" : "arc-Nbat-JO"}, "und-Medf": {"value" : "mis-Medf-NG"}
    , "nv": {"value" : "nv-Latn-US"}, "kaa": {"value" : "kaa-Cyrl-UZ"}, "ny": {"value" : "ny-Latn-MW"}, "kac": {"value" : "kac-Latn-MM"}, "kab": {"value" : "kab-Latn-DZ"}, "kad": {"value" : "kad-Latn-ZZ"}, "kai": {"value" : "kai-Latn-ZZ"}, "oc": {"value" : "oc-Latn-FR"}, "zh-AU": {"value" : "zh-Hant-AU"}, "kaj": {"value" : "kaj-Latn-NG"}, "kam": {"value" : "kam-Latn-KE"}, "und-Tagb": {"value" : "tbw-Tagb-PH"}, "kao": {"value" : "kao-Latn-ML"}, "und-Ogam": {"value" : "sga-Ogam-IE"}, "om": {"value" : "om-Latn-ET"}
    , "srb": {"value" : "srb-Sora-IN"}, "or": {"value" : "or-Orya-IN"}, "tg-Arab": {"value" : "tg-Arab-PK"}, "os": {"value" : "os-Cyrl-GE"}, "und-Sogd": {"value" : "sog-Sogd-UZ"}, "bpy": {"value" : "bpy-Beng-IN"}, "kbd": {"value" : "kbd-Cyrl-RU"}, "srn": {"value" : "srn-Latn-SR"}, "pa": {"value" : "pa-Guru-IN"}, "srr": {"value" : "srr-Latn-SN"}, "bqc": {"value" : "bqc-Latn-ZZ"}, "und-Kthi": {"value" : "bho-Kthi-IN"}, "kbm": {"value" : "kbm-Latn-ZZ"}, "kbp": {"value" : "kbp-Latn-ZZ"}, "srx": {"value" : "srx-Deva-IN"}
    , "bqi": {"value" : "bqi-Arab-IR"}, "kbq": {"value" : "kbq-Latn-ZZ"}, "pl": {"value" : "pl-Latn-PL"}, "bqp": {"value" : "bqp-Latn-ZZ"}, "kbx": {"value" : "kbx-Latn-ZZ"}, "kby": {"value" : "kby-Arab-NE"}, "ps": {"value" : "ps-Arab-AF"}, "pt": {"value" : "pt-Latn-BR"}, "ssd": {"value" : "ssd-Latn-ZZ"}, "und-Nkoo": {"value" : "man-Nkoo-GN"}, "bqv": {"value" : "bqv-Latn-CI"}, "ssg": {"value" : "ssg-Latn-ZZ"}, "und-Mymr": {"value" : "my-Mymr-MM"}, "kcg": {"value" : "kcg-Latn-NG"}, "bra": {"value" : "bra-Deva-IN"}
    , "kck": {"value" : "kck-Latn-ZW"}, "kcl": {"value" : "kcl-Latn-ZZ"}, "okr": {"value" : "okr-Latn-ZZ"}, "ssy": {"value" : "ssy-Latn-ER"}, "brh": {"value" : "brh-Arab-PK"}, "okv": {"value" : "okv-Latn-ZZ"}, "kct": {"value" : "kct-Latn-ZZ"}, "und-Hani": {"value" : "zh-Hani-CN"}, "und-Bugi": {"value" : "bug-Bugi-ID"}, "und-Hang": {"value" : "ko-Hang-KR"}, "qu": {"value" : "qu-Latn-PE"}, "brx": {"value" : "brx-Deva-IN"}, "und-Samr": {"value" : "smp-Samr-IL"}, "brz": {"value" : "brz-Latn-ZZ"}, "stk": {"value"
    : "stk-Latn-ZZ"}, "und-Hano": {"value" : "hnn-Hano-PH"}, "kde": {"value" : "kde-Latn-TZ"}, "kdh": {"value" : "kdh-Arab-TG"}, "stq": {"value" : "stq-Latn-DE"}, "kdl": {"value" : "kdl-Latn-ZZ"}, "bsj": {"value" : "bsj-Latn-ZZ"}, "und-Hanb": {"value" : "zh-Hanb-TW"}, "kdt": {"value" : "kdt-Thai-TH"}, "rm": {"value" : "rm-Latn-CH"}, "rn": {"value" : "rn-Latn-BI"}, "ro": {"value" : "ro-Latn-RO"}, "sua": {"value" : "sua-Latn-ZZ"}, "und-Deva-BT": {"value" : "ne-Deva-BT"}, "bsq": {"value" : "bsq-Bass-LR"}, "bst":
    {"value" : "bst-Ethi-ZZ"}, "sue": {"value" : "sue-Latn-ZZ"}, "bss": {"value" : "bss-Latn-CM"}, "ru": {"value" : "ru-Cyrl-RU"}, "und-Buhd": {"value" : "bku-Buhd-PH"}, "rw": {"value" : "rw-Latn-RW"}, "kea": {"value" : "kea-Latn-CV"}, "suk": {"value" : "suk-Latn-TZ"}, "grc-Linb": {"value" : "grc-Linb-GR"}, "sa": {"value" : "sa-Deva-IN"}, "sc": {"value" : "sc-Latn-IT"}, "sus": {"value" : "sus-Latn-GN"}, "sd": {"value" : "sd-Arab-PK"}, "sur": {"value" : "sur-Latn-ZZ"}, "se": {"value" : "se-Latn-NO"}, "sg": {"value"
    : "sg-Latn-CF"}, "ken": {"value" : "ken-Latn-CM"}, "si": {"value" : "si-Sinh-LK"}, "und-Hant": {"value" : "zh-Hant-TW"}, "und-Hans": {"value" : "zh-Hans-CN"}, "sk": {"value" : "sk-Latn-SK"}, "sl": {"value" : "sl-Latn-SI"}, "sm": {"value" : "sm-Latn-WS"}, "sn": {"value" : "sn-Latn-ZW"}, "bto": {"value" : "bto-Latn-PH"}, "so": {"value" : "so-Latn-SO"}, "sq": {"value" : "sq-Latn-AL"}, "sr": {"value" : "sr-Cyrl-RS"}, "ss": {"value" : "ss-Latn-ZA"}, "kez": {"value" : "kez-Latn-ZZ"}, "st": {"value" : "st-Latn-ZA"}
    , "su": {"value" : "su-Latn-ID"}, "btt": {"value" : "btt-Latn-ZZ"}, "sv": {"value" : "sv-Latn-SE"}, "sw": {"value" : "sw-Latn-TZ"}, "btv": {"value" : "btv-Deva-PK"}, "ong": {"value" : "ong-Latn-ZZ"}, "ta": {"value" : "ta-Taml-IN"}, "onn": {"value" : "onn-Latn-ZZ"}, "bua": {"value" : "bua-Cyrl-RU"}, "bud": {"value" : "bud-Latn-ZZ"}, "buc": {"value" : "buc-Latn-YT"}, "te": {"value" : "te-Telu-IN"}, "tg": {"value" : "tg-Cyrl-TJ"}, "th": {"value" : "th-Thai-TH"}, "und-Gong": {"value" : "wsg-Gong-IN"}, "bug":
    {"value" : "bug-Latn-ID"}, "kfo": {"value" : "kfo-Latn-CI"}, "ons": {"value" : "ons-Latn-ZZ"}, "ti": {"value" : "ti-Ethi-ET"}, "kfr": {"value" : "kfr-Deva-IN"}, "tk": {"value" : "tk-Latn-TM"}, "tl": {"value" : "tl-Latn-PH"}, "und-Lisu": {"value" : "lis-Lisu-CN"}, "buk": {"value" : "buk-Latn-ZZ"}, "tn": {"value" : "tn-Latn-ZA"}, "bum": {"value" : "bum-Latn-CM"}, "to": {"value" : "to-Latn-TO"}, "buo": {"value" : "buo-Latn-ZZ"}, "swc": {"value" : "swc-Latn-CD"}, "tr": {"value" : "tr-Latn-TR"}, "und-Gonm": {"value"
    : "esg-Gonm-IN"}, "kfy": {"value" : "kfy-Deva-IN"}, "swb": {"value" : "swb-Arab-YT"}, "ts": {"value" : "ts-Latn-ZA"}, "tt": {"value" : "tt-Cyrl-RU"}, "bus": {"value" : "bus-Latn-ZZ"}, "swg": {"value" : "swg-Latn-DE"}, "buu": {"value" : "buu-Latn-ZZ"}, "ty": {"value" : "ty-Latn-PF"}, "kge": {"value" : "kge-Latn-ID"}, "kgf": {"value" : "kgf-Latn-ZZ"}, "swp": {"value" : "swp-Latn-ZZ"}, "bvb": {"value" : "bvb-Latn-GQ"}, "ug": {"value" : "ug-Arab-CN"}, "swv": {"value" : "swv-Deva-IN"}, "kgp": {"value" : "kgp-Latn-BR"}
    , "uk": {"value" : "uk-Cyrl-UA"}, "ur": {"value" : "ur-Arab-PK"}, "kk-IR": {"value" : "kk-Arab-IR"}, "khb": {"value" : "khb-Talu-CN"}, "kha": {"value" : "kha-Latn-IN"}, "uz": {"value" : "uz-Latn-UZ"}, "sxn": {"value" : "sxn-Latn-ID"}, "xav": {"value" : "xav-Latn-BR"}, "opm": {"value" : "opm-Latn-ZZ"}, "bwd": {"value" : "bwd-Latn-ZZ"}, "und-Mlym": {"value" : "ml-Mlym-IN"}, "ve": {"value" : "ve-Latn-ZA"}, "khn": {"value" : "khn-Deva-IN"}, "sxw": {"value" : "sxw-Latn-ZZ"}, "vi": {"value" : "vi-Latn-VN"}, "khq":
    {"value" : "khq-Latn-ML"}, "kht": {"value" : "kht-Mymr-IN"}, "khs": {"value" : "khs-Latn-ZZ"}, "vo": {"value" : "vo-Latn-001"}, "khw": {"value" : "khw-Arab-PK"}, "bwr": {"value" : "bwr-Latn-ZZ"}, "khz": {"value" : "khz-Latn-ZZ"}, "und-ZW": {"value" : "sn-Latn-ZW"}, "xbi": {"value" : "xbi-Latn-ZZ"}, "gaa": {"value" : "gaa-Latn-GH"}, "syl": {"value" : "syl-Beng-BD"}, "wa": {"value" : "wa-Latn-BE"}, "gag": {"value" : "gag-Latn-MD"}, "gaf": {"value" : "gaf-Latn-ZZ"}, "kij": {"value" : "kij-Latn-ZZ"}, "syr":
    {"value" : "syr-Syrc-IQ"}, "und-YE": {"value" : "ar-Arab-YE"}, "gah": {"value" : "gah-Latn-ZZ"}, "gaj": {"value" : "gaj-Latn-ZZ"}, "gam": {"value" : "gam-Latn-ZZ"}, "bxh": {"value" : "bxh-Latn-ZZ"}, "gan": {"value" : "gan-Hans-CN"}, "kiu": {"value" : "kiu-Latn-TR"}, "kiw": {"value" : "kiw-Latn-ZZ"}, "wo": {"value" : "wo-Latn-SN"}, "gaw": {"value" : "gaw-Latn-ZZ"}, "und-Sarb": {"value" : "xsa-Sarb-YE"}, "gay": {"value" : "gay-Latn-ID"}, "und-YT": {"value" : "fr-Latn-YT"}, "kjd": {"value" : "kjd-Latn-ZZ"}
    , "szl": {"value" : "szl-Latn-PL"}, "xco": {"value" : "xco-Chrs-UZ"}, "xcr": {"value" : "xcr-Cari-TR"}, "gba": {"value" : "gba-Latn-ZZ"}, "und-Mult": {"value" : "skr-Mult-PK"}, "kjg": {"value" : "kjg-Laoo-LA"}, "gbf": {"value" : "gbf-Latn-ZZ"}, "oro": {"value" : "oro-Latn-ZZ"}, "und-Hatr": {"value" : "mis-Hatr-IQ"}, "bye": {"value" : "bye-Latn-ZZ"}, "xh": {"value" : "xh-Latn-ZA"}, "gbm": {"value" : "gbm-Deva-IN"}, "oru": {"value" : "oru-Arab-ZZ"}, "kjs": {"value" : "kjs-Latn-ZZ"}, "byn": {"value" : "byn-Ethi-ER"}
    , "und-XK": {"value" : "sq-Latn-XK"}, "yue-CN": {"value" : "yue-Hans-CN"}, "und-Lepc": {"value" : "lep-Lepc-IN"}, "byr": {"value" : "byr-Latn-ZZ"}, "kjy": {"value" : "kjy-Latn-ZZ"}, "osa": {"value" : "osa-Osge-US"}, "bys": {"value" : "bys-Latn-ZZ"}, "byv": {"value" : "byv-Latn-CM"}, "gbz": {"value" : "gbz-Arab-IR"}, "gby": {"value" : "gby-Latn-ZZ"}, "byx": {"value" : "byx-Latn-ZZ"}, "kkc": {"value" : "kkc-Latn-ZZ"}, "und-VU": {"value" : "bi-Latn-VU"}, "bza": {"value" : "bza-Latn-ZZ"}, "und-Goth": {"value"
    : "got-Goth-UA"}, "kkj": {"value" : "kkj-Latn-CM"}, "bze": {"value" : "bze-Latn-ML"}, "und-Avst": {"value" : "ae-Avst-IR"}, "bzf": {"value" : "bzf-Latn-ZZ"}, "yi": {"value" : "yi-Hebr-001"}, "bzh": {"value" : "bzh-Latn-ZZ"}, "und-WF": {"value" : "fr-Latn-WF"}, "yo": {"value" : "yo-Latn-NG"}, "gcr": {"value" : "gcr-Latn-GF"}, "ota": {"value" : "ota-Arab-ZZ"}, "und-WS": {"value" : "sm-Latn-WS"}, "bzw": {"value" : "bzw-Latn-ZZ"}, "und-UZ": {"value" : "uz-Latn-UZ"}, "und-UY": {"value" : "es-Latn-UY"}, "otk":
    {"value" : "otk-Orkh-MN"}, "xes": {"value" : "xes-Latn-ZZ"}, "za": {"value" : "za-Latn-CN"}, "gde": {"value" : "gde-Latn-ZZ"}, "kln": {"value" : "kln-Latn-KE"}, "und-VA": {"value" : "it-Latn-VA"}, "zh": {"value" : "zh-Hans-CN"}, "gdn": {"value" : "gdn-Latn-ZZ"}, "klq": {"value" : "klq-Latn-ZZ"}, "und-Saur": {"value" : "saz-Saur-IN"}, "klt": {"value" : "klt-Latn-ZZ"}, "und-VE": {"value" : "es-Latn-VE"}, "gdr": {"value" : "gdr-Latn-ZZ"}, "klx": {"value" : "klx-Latn-ZZ"}, "und-VN": {"value" : "vi-Latn-VN"}
    , "kk-MN": {"value" : "kk-Arab-MN"}, "zu": {"value" : "zu-Latn-ZA"}, "und-Armn": {"value" : "hy-Armn-AM"}, "kmb": {"value" : "kmb-Latn-AO"}, "und-TR": {"value" : "tr-Latn-TR"}, "geb": {"value" : "geb-Latn-ZZ"}, "und-TW": {"value" : "zh-Hant-TW"}, "kmh": {"value" : "kmh-Latn-ZZ"}, "und-TV": {"value" : "tvl-Latn-TV"}, "und-TZ": {"value" : "sw-Latn-TZ"}, "kmo": {"value" : "kmo-Latn-ZZ"}, "gej": {"value" : "gej-Latn-ZZ"}, "und-UA": {"value" : "uk-Cyrl-UA"}, "gel": {"value" : "gel-Latn-ZZ"}, "kms": {"value" :
    "kms-Latn-ZZ"}, "kmu": {"value" : "kmu-Latn-ZZ"}, "kmw": {"value" : "kmw-Latn-ZZ"}, "und-Tibt": {"value" : "bo-Tibt-CN"}, "und-UG": {"value" : "sw-Latn-UG"}, "und-Armi": {"value" : "arc-Armi-IR"}, "gez": {"value" : "gez-Ethi-ET"}, "und-ST": {"value" : "pt-Latn-ST"}, "knf": {"value" : "knf-Latn-GW"}, "und-SR": {"value" : "nl-Latn-SR"}, "und-SV": {"value" : "es-Latn-SV"}, "und-SY": {"value" : "ar-Arab-SY"}, "knp": {"value" : "knp-Latn-ZZ"}, "gfk": {"value" : "gfk-Latn-ZZ"}, "und-TD": {"value" : "fr-Latn-TD"}
    , "und-TH": {"value" : "th-Thai-TH"}, "und-TG": {"value" : "fr-Latn-TG"}, "und-TF": {"value" : "fr-Latn-TF"}, "und-TM": {"value" : "tk-Latn-TM"}, "und-TL": {"value" : "pt-Latn-TL"}, "und-TK": {"value" : "tkl-Latn-TK"}, "und-TJ": {"value" : "tg-Cyrl-TJ"}, "und-TO": {"value" : "to-Latn-TO"}, "und-TN": {"value" : "ar-Arab-TN"}, "und-RS": {"value" : "sr-Cyrl-RS"}, "koi": {"value" : "koi-Cyrl-RU"}, "und-RW": {"value" : "rw-Latn-RW"}, "kok": {"value" : "kok-Deva-IN"}, "und-RU": {"value" : "ru-Cyrl-RU"}, "kol":
    {"value" : "kol-Latn-ZZ"}, "kos": {"value" : "kos-Latn-FM"}, "ggn": {"value" : "ggn-Deva-NP"}, "und-SD": {"value" : "ar-Arab-SD"}, "und-SC": {"value" : "fr-Latn-SC"}, "und-SA": {"value" : "ar-Arab-SA"}, "koz": {"value" : "koz-Latn-ZZ"}, "und-SE": {"value" : "sv-Latn-SE"}, "und-SK": {"value" : "sk-Latn-SK"}, "und-SJ": {"value" : "nb-Latn-SJ"}, "und-SI": {"value" : "sl-Latn-SI"}, "taj": {"value" : "taj-Deva-NP"}, "und-SO": {"value" : "so-Latn-SO"}, "tal": {"value" : "tal-Latn-ZZ"}, "und-SN": {"value" : "fr-Latn-SN"}
    , "und-Osge": {"value" : "osa-Osge-US"}, "und-SM": {"value" : "it-Latn-SM"}, "kpf": {"value" : "kpf-Latn-ZZ"}, "tan": {"value" : "tan-Latn-ZZ"}, "kpe": {"value" : "kpe-Latn-LR"}, "und-QO": {"value" : "en-Latn-DG"}, "taq": {"value" : "taq-Latn-ZZ"}, "kpo": {"value" : "kpo-Latn-ZZ"}, "kpr": {"value" : "kpr-Latn-ZZ"}, "kpx": {"value" : "kpx-Latn-ZZ"}, "ghs": {"value" : "ghs-Latn-ZZ"}, "und-Lana": {"value" : "nod-Lana-TH"}, "tbc": {"value" : "tbc-Latn-ZZ"}, "und-RE": {"value" : "fr-Latn-RE"}, "tbd": {"value"
    : "tbd-Latn-ZZ"}, "tbg": {"value" : "tbg-Latn-ZZ"}, "tbf": {"value" : "tbf-Latn-ZZ"}, "und-RO": {"value" : "ro-Latn-RO"}, "kqb": {"value" : "kqb-Latn-ZZ"}, "tbo": {"value" : "tbo-Latn-ZZ"}, "kqf": {"value" : "kqf-Latn-ZZ"}, "und-PT": {"value" : "pt-Latn-PT"}, "und-PS": {"value" : "ar-Arab-PS"}, "cad": {"value" : "cad-Latn-US"}, "und-PR": {"value" : "es-Latn-PR"}, "tbw": {"value" : "tbw-Latn-PH"}, "und-PY": {"value" : "gn-Latn-PY"}, "gim": {"value" : "gim-Latn-ZZ"}, "und-PW": {"value" : "pau-Latn-PW"}, "gil":
    {"value" : "gil-Latn-KI"}, "kqs": {"value" : "kqs-Latn-ZZ"}, "tbz": {"value" : "tbz-Latn-ZZ"}, "und-Laoo": {"value" : "lo-Laoo-LA"}, "can": {"value" : "can-Latn-ZZ"}, "und-QA": {"value" : "ar-Arab-QA"}, "kqy": {"value" : "kqy-Ethi-ZZ"}, "ms-CC": {"value" : "ms-Arab-CC"}, "tci": {"value" : "tci-Latn-ZZ"}, "krc": {"value" : "krc-Cyrl-RU"}, "krj": {"value" : "krj-Latn-PH"}, "kri": {"value" : "kri-Latn-SL"}, "ozm": {"value" : "ozm-Latn-ZZ"}, "und-OM": {"value" : "ar-Arab-OM"}, "krl": {"value" : "krl-Latn-RU"}
    , "gjk": {"value" : "gjk-Arab-PK"}, "cbj": {"value" : "cbj-Latn-ZZ"}, "gjn": {"value" : "gjn-Latn-ZZ"}, "tcy": {"value" : "tcy-Knda-IN"}, "xla": {"value" : "xla-Latn-ZZ"}, "krs": {"value" : "krs-Latn-ZZ"}, "xlc": {"value" : "xlc-Lyci-TR"}, "kru": {"value" : "kru-Deva-IN"}, "und-PA": {"value" : "es-Latn-PA"}, "xld": {"value" : "xld-Lydi-TR"}, "gju": {"value" : "gju-Arab-PK"}, "und-PE": {"value" : "es-Latn-PE"}, "tdd": {"value" : "tdd-Tale-CN"}, "tdg": {"value" : "tdg-Deva-NP"}, "tdh": {"value" : "tdh-Deva-NP"}
    , "und-PH": {"value" : "fil-Latn-PH"}, "und-PG": {"value" : "tpi-Latn-PG"}, "ksb": {"value" : "ksb-Latn-TZ"}, "und-PF": {"value" : "fr-Latn-PF"}, "und-PM": {"value" : "fr-Latn-PM"}, "ksd": {"value" : "ksd-Latn-ZZ"}, "und-PL": {"value" : "pl-Latn-PL"}, "und-PK": {"value" : "ur-Arab-PK"}, "ksf": {"value" : "ksf-Latn-CM"}};
},
otciu_CLDRHelper_getErasMap$$create = () => {
    return {"root": [{"value" : "BCE"}, {"value" : "CE"}], "en": [{"value" : "BC"}, {"value" : "AD"}]};
},
otciu_CLDRHelper_getAmPmMap$$create = () => {
    return {"root": [{"value" : "AM"}, {"value" : "PM"}], "en": [{"value" : "AM"}, {"value" : "PM"}]};
},
otciu_CLDRHelper_getMonthMap$$create = () => {
    return {"root": [{"value" : "M01"}, {"value" : "M02"}, {"value" : "M03"}, {"value" : "M04"}, {"value" : "M05"}, {"value" : "M06"}, {"value" : "M07"}, {"value" : "M08"}, {"value" : "M09"}, {"value" : "M10"}, {"value" : "M11"}, {"value" : "M12"}], "en": [{"value" : "January"}, {"value" : "February"}, {"value" : "March"}, {"value" : "April"}, {"value" : "May"}, {"value" : "June"}, {"value" : "July"}, {"value" : "August"}, {"value" : "September"}, {"value" : "October"}, {"value" : "November"}, {"value" : "December"}
    ]};
},
otciu_CLDRHelper_getShortMonthMap$$create = () => {
    return {"root": [{"value" : "M01"}, {"value" : "M02"}, {"value" : "M03"}, {"value" : "M04"}, {"value" : "M05"}, {"value" : "M06"}, {"value" : "M07"}, {"value" : "M08"}, {"value" : "M09"}, {"value" : "M10"}, {"value" : "M11"}, {"value" : "M12"}], "en": [{"value" : "Jan"}, {"value" : "Feb"}, {"value" : "Mar"}, {"value" : "Apr"}, {"value" : "May"}, {"value" : "Jun"}, {"value" : "Jul"}, {"value" : "Aug"}, {"value" : "Sep"}, {"value" : "Oct"}, {"value" : "Nov"}, {"value" : "Dec"}]};
},
otciu_CLDRHelper_getWeekdayMap$$create = () => {
    return {"root": [{"value" : "Sun"}, {"value" : "Mon"}, {"value" : "Tue"}, {"value" : "Wed"}, {"value" : "Thu"}, {"value" : "Fri"}, {"value" : "Sat"}], "en": [{"value" : "Sunday"}, {"value" : "Monday"}, {"value" : "Tuesday"}, {"value" : "Wednesday"}, {"value" : "Thursday"}, {"value" : "Friday"}, {"value" : "Saturday"}]};
},
otciu_CLDRHelper_getShortWeekdayMap$$create = () => {
    return {"root": [{"value" : "Sun"}, {"value" : "Mon"}, {"value" : "Tue"}, {"value" : "Wed"}, {"value" : "Thu"}, {"value" : "Fri"}, {"value" : "Sat"}], "en": [{"value" : "Sun"}, {"value" : "Mon"}, {"value" : "Tue"}, {"value" : "Wed"}, {"value" : "Thu"}, {"value" : "Fri"}, {"value" : "Sat"}]};
},
otciu_CLDRHelper_getTimeZoneLocalizationMap$$create = () => {
    return {"root": {"timeZones" : {"Asia": {"Gaza": {"value" : "Gaza"}, "Makassar": {"value" : "Makassar"}, "Ulaanbaatar": {"value" : "Ulaanbaatar"}, "Vladivostok": {"value" : "Vladivostok"}, "Tashkent": {"value" : "Tashkent"}, "Beirut": {"value" : "Beirut"}, "Qyzylorda": {"value" : "Qyzylorda"}, "Hong_Kong": {"value" : "Hong Kong"}, "Phnom_Penh": {"value" : "Phnom Penh"}, "Kabul": {"value" : "Kabul"}, "Riyadh": {"value" : "Riyadh"}, "Ashgabat": {"value" : "Ashgabat"}, "Chita": {"value" : "Chita"}, "Aqtau":
    {"value" : "Aqtau"}, "Tokyo": {"value" : "Tokyo"}, "Baku": {"value" : "Baku"}, "Aqtobe": {"value" : "Aqtobe"}, "Novosibirsk": {"value" : "Novosibirsk"}, "Kamchatka": {"value" : "Kamchatka"}, "Nicosia": {"value" : "Nicosia"}, "Pontianak": {"value" : "Pontianak"}, "Qostanay": {"value" : "Qostanay"}, "Barnaul": {"value" : "Barnaul"}, "Jerusalem": {"value" : "Jerusalem"}, "Kuala_Lumpur": {"value" : "Kuala Lumpur"}, "Novokuznetsk": {"value" : "Novokuznetsk"}, "Bahrain": {"value" : "Bahrain"}, "Kuching": {"value"
    : "Kuching"}, "Bangkok": {"value" : "Bangkok"}, "Srednekolymsk": {"value" : "Srednekolymsk"}, "Karachi": {"value" : "Karachi"}, "Aden": {"value" : "Aden"}, "Irkutsk": {"value" : "Irkutsk"}, "Hovd": {"value" : "Hovd"}, "Katmandu": {"value" : "Kathmandu"}, "Baghdad": {"value" : "Baghdad"}, "Samarkand": {"value" : "Samarkand"}, "Thimphu": {"value" : "Thimphu"}, "Dhaka": {"value" : "Dhaka"}, "Yerevan": {"value" : "Yerevan"}, "Muscat": {"value" : "Muscat"}, "Saigon": {"value" : "Ho Chi Minh"}, "Dili": {"value"
    : "Dili"}, "Singapore": {"value" : "Singapore"}, "Rangoon": {"value" : "Yangon"}, "Damascus": {"value" : "Damascus"}, "Taipei": {"value" : "Taipei"}, "Amman": {"value" : "Amman"}, "Choibalsan": {"value" : "Choibalsan"}, "Macau": {"value" : "Macao"}, "Jayapura": {"value" : "Jayapura"}, "Manila": {"value" : "Manila"}, "Oral": {"value" : "Oral"}, "Dubai": {"value" : "Dubai"}, "Yakutsk": {"value" : "Yakutsk"}, "Seoul": {"value" : "Seoul"}, "Hebron": {"value" : "Hebron"}, "Qatar": {"value" : "Qatar"}, "Bishkek":
    {"value" : "Bishkek"}, "Tomsk": {"value" : "Tomsk"}, "Colombo": {"value" : "Colombo"}, "Khandyga": {"value" : "Khandyga"}, "Yekaterinburg": {"value" : "Yekaterinburg"}, "Dushanbe": {"value" : "Dushanbe"}, "Famagusta": {"value" : "Famagusta"}, "Kuwait": {"value" : "Kuwait"}, "Magadan": {"value" : "Magadan"}, "Pyongyang": {"value" : "Pyongyang"}, "Tehran": {"value" : "Tehran"}, "Sakhalin": {"value" : "Sakhalin"}, "Calcutta": {"value" : "Kolkata"}, "Urumqi": {"value" : "Urumqi"}, "Shanghai": {"value" : "Shanghai"}
    , "Atyrau": {"value" : "Atyrau"}, "Almaty": {"value" : "Almaty"}, "Tbilisi": {"value" : "Tbilisi"}, "Anadyr": {"value" : "Anadyr"}, "Brunei": {"value" : "Brunei"}, "Krasnoyarsk": {"value" : "Krasnoyarsk"}, "Vientiane": {"value" : "Vientiane"}, "Omsk": {"value" : "Omsk"}, "Jakarta": {"value" : "Jakarta"}, "Ust-Nera": {"value" : "Ust-Nera"}}, "Pacific": {"Easter": {"value" : "Easter"}, "Fiji": {"value" : "Fiji"}, "Port_Moresby": {"value" : "Port Moresby"}, "Kiritimati": {"value" : "Kiritimati"}, "Kosrae":
    {"value" : "Kosrae"}, "Kwajalein": {"value" : "Kwajalein"}, "Auckland": {"value" : "Auckland"}, "Efate": {"value" : "Efate"}, "Johnston": {"value" : "Johnston"}, "Niue": {"value" : "Niue"}, "Majuro": {"value" : "Majuro"}, "Truk": {"value" : "Chuuk"}, "Ponape": {"value" : "Pohnpei"}, "Guadalcanal": {"value" : "Guadalcanal"}, "Guam": {"value" : "Guam"}, "Chatham": {"value" : "Chatham"}, "Midway": {"value" : "Midway"}, "Tahiti": {"value" : "Tahiti"}, "Pago_Pago": {"value" : "Pago Pago"}, "Galapagos": {"value"
    : "Galapagos"}, "Funafuti": {"value" : "Funafuti"}, "Marquesas": {"value" : "Marquesas"}, "Rarotonga": {"value" : "Rarotonga"}, "Tarawa": {"value" : "Tarawa"}, "Saipan": {"value" : "Saipan"}, "Gambier": {"value" : "Gambier"}, "Tongatapu": {"value" : "Tongatapu"}, "Wallis": {"value" : "Wallis"}, "Fakaofo": {"value" : "Fakaofo"}, "Wake": {"value" : "Wake"}, "Enderbury": {"value" : "Enderbury"}, "Pitcairn": {"value" : "Pitcairn"}, "Apia": {"value" : "Apia"}, "Noumea": {"value" : "Noumea"}, "Palau": {"value"
    : "Palau"}, "Nauru": {"value" : "Nauru"}, "Bougainville": {"value" : "Bougainville"}, "Norfolk": {"value" : "Norfolk"}}, "Etc": {"Unknown": {"value" : "Unknown"}}, "Europe": {"Belgrade": {"value" : "Belgrade"}, "Saratov": {"value" : "Saratov"}, "Gibraltar": {"value" : "Gibraltar"}, "Bucharest": {"value" : "Bucharest"}, "Dublin": {"value" : "Dublin"}, "Zaporozhye": {"value" : "Zaporozhye"}, "Kiev": {"value" : "Kiev"}, "Zurich": {"value" : "Zurich"}, "Copenhagen": {"value" : "Copenhagen"}, "Rome": {"value"
    : "Rome"}, "Zagreb": {"value" : "Zagreb"}, "Monaco": {"value" : "Monaco"}, "Luxembourg": {"value" : "Luxembourg"}, "Jersey": {"value" : "Jersey"}, "Istanbul": {"value" : "Istanbul"}, "Ulyanovsk": {"value" : "Ulyanovsk"}, "Samara": {"value" : "Samara"}, "Sarajevo": {"value" : "Sarajevo"}, "Chisinau": {"value" : "Chisinau"}, "Vatican": {"value" : "Vatican"}, "Brussels": {"value" : "Brussels"}, "Oslo": {"value" : "Oslo"}, "Warsaw": {"value" : "Warsaw"}, "Berlin": {"value" : "Berlin"}, "Lisbon": {"value" : "Lisbon"}
    , "Athens": {"value" : "Athens"}, "Podgorica": {"value" : "Podgorica"}, "San_Marino": {"value" : "San Marino"}, "Simferopol": {"value" : "Simferopol"}, "Bratislava": {"value" : "Bratislava"}, "Stockholm": {"value" : "Stockholm"}, "Prague": {"value" : "Prague"}, "Uzhgorod": {"value" : "Uzhgorod"}, "Astrakhan": {"value" : "Astrakhan"}, "Budapest": {"value" : "Budapest"}, "Madrid": {"value" : "Madrid"}, "Vaduz": {"value" : "Vaduz"}, "London": {"value" : "London"}, "Vilnius": {"value" : "Vilnius"}, "Isle_of_Man":
    {"value" : "Isle of Man"}, "Sofia": {"value" : "Sofia"}, "Kirov": {"value" : "Kirov"}, "Tallinn": {"value" : "Tallinn"}, "Moscow": {"value" : "Moscow"}, "Malta": {"value" : "Malta"}, "Busingen": {"value" : "Busingen"}, "Amsterdam": {"value" : "Amsterdam"}, "Andorra": {"value" : "Andorra"}, "Riga": {"value" : "Riga"}, "Vienna": {"value" : "Vienna"}, "Helsinki": {"value" : "Helsinki"}, "Minsk": {"value" : "Minsk"}, "Kaliningrad": {"value" : "Kaliningrad"}, "Ljubljana": {"value" : "Ljubljana"}, "Mariehamn":
    {"value" : "Mariehamn"}, "Skopje": {"value" : "Skopje"}, "Tirane": {"value" : "Tirane"}, "Guernsey": {"value" : "Guernsey"}, "Volgograd": {"value" : "Volgograd"}, "Paris": {"value" : "Paris"}}, "America": {"Belem": {"value" : "Belem"}, "Guayaquil": {"value" : "Guayaquil"}, "Costa_Rica": {"value" : "Costa Rica"}, "Hermosillo": {"value" : "Hermosillo"}, "Punta_Arenas": {"value" : "Punta Arenas"}, "Iqaluit": {"value" : "Iqaluit"}, "Godthab": {"value" : "Nuuk"}, "Jujuy": {"value" : "Jujuy"}, "El_Salvador": {"value"
    : "El Salvador"}, "Monterrey": {"value" : "Monterrey"}, "Bahia": {"value" : "Bahia"}, "Sao_Paulo": {"value" : "Sao Paulo"}, "Grenada": {"value" : "Grenada"}, "Grand_Turk": {"value" : "Grand Turk"}, "Montserrat": {"value" : "Montserrat"}, "Guadeloupe": {"value" : "Guadeloupe"}, "Panama": {"value" : "Panama"}, "Guatemala": {"value" : "Guatemala"}, "Guyana": {"value" : "Guyana"}, "Swift_Current": {"value" : "Swift Current"}, "Puerto_Rico": {"value" : "Puerto Rico"}, "Moncton": {"value" : "Moncton"}, "Danmarkshavn":
    {"value" : "Danmarkshavn"}, "Nome": {"value" : "Nome"}, "Porto_Velho": {"value" : "Porto Velho"}, "Cuiaba": {"value" : "Cuiaba"}, "Pangnirtung": {"value" : "Pangnirtung"}, "Kralendijk": {"value" : "Kralendijk"}, "Belize": {"value" : "Belize"}, "Anguilla": {"value" : "Anguilla"}, "Santiago": {"value" : "Santiago"}, "Boise": {"value" : "Boise"}, "Creston": {"value" : "Creston"}, "Miquelon": {"value" : "Miquelon"}, "Jamaica": {"value" : "Jamaica"}, "Buenos_Aires": {"value" : "Buenos Aires"}, "Rankin_Inlet":
    {"value" : "Rankin Inlet"}, "Toronto": {"value" : "Toronto"}, "Eirunepe": {"value" : "Eirunepe"}, "Dawson": {"value" : "Dawson"}, "Nassau": {"value" : "Nassau"}, "Vancouver": {"value" : "Vancouver"}, "Noronha": {"value" : "Noronha"}, "Regina": {"value" : "Regina"}, "St_Vincent": {"value" : "St. Vincent"}, "Scoresbysund": {"value" : "Ittoqqortoormiit"}, "Louisville": {"value" : "Louisville"}, "Aruba": {"value" : "Aruba"}, "Thule": {"value" : "Thule"}, "Rio_Branco": {"value" : "Rio Branco"}, "Los_Angeles":
    {"value" : "Los Angeles"}, "St_Thomas": {"value" : "St. Thomas"}, "Cordoba": {"value" : "Cordoba"}, "Cancun": {"value" : "Cancun"}, "Coral_Harbour": {"value" : "Atikokan"}, "Maceio": {"value" : "Maceio"}, "Sitka": {"value" : "Sitka"}, "Denver": {"value" : "Denver"}, "Cayman": {"value" : "Cayman"}, "Nipigon": {"value" : "Nipigon"}, "Thunder_Bay": {"value" : "Thunder Bay"}, "Havana": {"value" : "Havana"}, "Campo_Grande": {"value" : "Campo Grande"}, "Cambridge_Bay": {"value" : "Cambridge Bay"}, "Fortaleza":
    {"value" : "Fortaleza"}, "Managua": {"value" : "Managua"}, "Menominee": {"value" : "Menominee"}, "Halifax": {"value" : "Halifax"}, "Ojinaga": {"value" : "Ojinaga"}, "Glace_Bay": {"value" : "Glace Bay"}, "Lower_Princes": {"value" : "Lower Prince’s Quarter"}, "Mendoza": {"value" : "Mendoza"}, "Yakutat": {"value" : "Yakutat"}, "Detroit": {"value" : "Detroit"}, "Merida": {"value" : "Merida"}, "Bahia_Banderas": {"value" : "Bahia Banderas"}, "Matamoros": {"value" : "Matamoros"}, "St_Barthelemy": {"value" : "St. Barthelemy"}
    , "Boa_Vista": {"value" : "Boa Vista"}, "Metlakatla": {"value" : "Metlakatla"}, "Tortola": {"value" : "Tortola"}, "Inuvik": {"value" : "Inuvik"}, "Port_of_Spain": {"value" : "Port of Spain"}, "New_York": {"value" : "New York"}, "Paramaribo": {"value" : "Paramaribo"}, "Manaus": {"value" : "Manaus"}, "Resolute": {"value" : "Resolute"}, "Curacao": {"value" : "Curacao"}, "Bogota": {"value" : "Bogota"}, "Adak": {"value" : "Adak"}, "Caracas": {"value" : "Caracas"}, "Mazatlan": {"value" : "Mazatlan"}, "St_Kitts":
    {"value" : "St. Kitts"}, "Mexico_City": {"value" : "Mexico City"}, "Edmonton": {"value" : "Edmonton"}, "Araguaina": {"value" : "Araguaina"}, "Santo_Domingo": {"value" : "Santo Domingo"}, "Indianapolis": {"value" : "Indianapolis"}, "Whitehorse": {"value" : "Whitehorse"}, "Yellowknife": {"value" : "Yellowknife"}, "Asuncion": {"value" : "Asuncion"}, "Santarem": {"value" : "Santarem"}, "Antigua": {"value" : "Antigua"}, "Winnipeg": {"value" : "Winnipeg"}, "Recife": {"value" : "Recife"}, "Lima": {"value" : "Lima"}
    , "Martinique": {"value" : "Martinique"}, "Phoenix": {"value" : "Phoenix"}, "Goose_Bay": {"value" : "Goose Bay"}, "St_Johns": {"value" : "St. John’s"}, "Montevideo": {"value" : "Montevideo"}, "St_Lucia": {"value" : "St. Lucia"}, "Chicago": {"value" : "Chicago"}, "Chihuahua": {"value" : "Chihuahua"}, "La_Paz": {"value" : "La Paz"}, "Blanc-Sablon": {"value" : "Blanc-Sablon"}, "Catamarca": {"value" : "Catamarca"}, "Tijuana": {"value" : "Tijuana"}, "Barbados": {"value" : "Barbados"}, "Anchorage": {"value" :
    "Anchorage"}, "Port-au-Prince": {"value" : "Port-au-Prince"}, "Rainy_River": {"value" : "Rainy River"}, "Cayenne": {"value" : "Cayenne"}, "Tegucigalpa": {"value" : "Tegucigalpa"}, "Juneau": {"value" : "Juneau"}, "Marigot": {"value" : "Marigot"}, "Dawson_Creek": {"value" : "Dawson Creek"}, "Dominica": {"value" : "Dominica"}, "Fort_Nelson": {"value" : "Fort Nelson"}}, "Africa": {"Tunis": {"value" : "Tunis"}, "Maputo": {"value" : "Maputo"}, "Casablanca": {"value" : "Casablanca"}, "Johannesburg": {"value" :
    "Johannesburg"}, "Addis_Ababa": {"value" : "Addis Ababa"}, "Lagos": {"value" : "Lagos"}, "Accra": {"value" : "Accra"}, "Nairobi": {"value" : "Nairobi"}, "Brazzaville": {"value" : "Brazzaville"}, "Lubumbashi": {"value" : "Lubumbashi"}, "Banjul": {"value" : "Banjul"}, "Porto-Novo": {"value" : "Porto-Novo"}, "Lusaka": {"value" : "Lusaka"}, "Kigali": {"value" : "Kigali"}, "Ouagadougou": {"value" : "Ouagadougou"}, "Freetown": {"value" : "Freetown"}, "Ndjamena": {"value" : "Ndjamena"}, "Conakry": {"value" : "Conakry"}
    , "Niamey": {"value" : "Niamey"}, "Maseru": {"value" : "Maseru"}, "El_Aaiun": {"value" : "El Aaiun"}, "Sao_Tome": {"value" : "Sao Tome"}, "Ceuta": {"value" : "Ceuta"}, "Khartoum": {"value" : "Khartoum"}, "Algiers": {"value" : "Algiers"}, "Bangui": {"value" : "Bangui"}, "Bujumbura": {"value" : "Bujumbura"}, "Gaborone": {"value" : "Gaborone"}, "Juba": {"value" : "Juba"}, "Dar_es_Salaam": {"value" : "Dar es Salaam"}, "Windhoek": {"value" : "Windhoek"}, "Harare": {"value" : "Harare"}, "Tripoli": {"value" : "Tripoli"}
    , "Libreville": {"value" : "Libreville"}, "Malabo": {"value" : "Malabo"}, "Abidjan": {"value" : "Abidjan"}, "Luanda": {"value" : "Luanda"}, "Lome": {"value" : "Lome"}, "Nouakchott": {"value" : "Nouakchott"}, "Bissau": {"value" : "Bissau"}, "Kinshasa": {"value" : "Kinshasa"}, "Asmera": {"value" : "Asmara"}, "Mogadishu": {"value" : "Mogadishu"}, "Djibouti": {"value" : "Djibouti"}, "Douala": {"value" : "Douala"}, "Kampala": {"value" : "Kampala"}, "Dakar": {"value" : "Dakar"}, "Cairo": {"value" : "Cairo"}, "Blantyre":
    {"value" : "Blantyre"}, "Monrovia": {"value" : "Monrovia"}, "Mbabane": {"value" : "Mbabane"}, "Bamako": {"value" : "Bamako"}}, "Indian": {"Reunion": {"value" : "Reunion"}, "Maldives": {"value" : "Maldives"}, "Christmas": {"value" : "Christmas"}, "Antananarivo": {"value" : "Antananarivo"}, "Chagos": {"value" : "Chagos"}, "Mahe": {"value" : "Mahe"}, "Mayotte": {"value" : "Mayotte"}, "Kerguelen": {"value" : "Kerguelen"}, "Mauritius": {"value" : "Mauritius"}, "Cocos": {"value" : "Cocos"}, "Comoro": {"value"
    : "Comoro"}}, "Antarctica": {"Macquarie": {"value" : "Macquarie"}, "Palmer": {"value" : "Palmer"}, "Casey": {"value" : "Casey"}, "Troll": {"value" : "Troll"}, "Vostok": {"value" : "Vostok"}, "DumontDUrville": {"value" : "Dumont d’Urville"}, "Syowa": {"value" : "Syowa"}, "Mawson": {"value" : "Mawson"}, "McMurdo": {"value" : "McMurdo"}, "Davis": {"value" : "Davis"}, "Rothera": {"value" : "Rothera"}}, "Australia": {"Broken_Hill": {"value" : "Broken Hill"}, "Darwin": {"value" : "Darwin"}, "Brisbane": {"value"
    : "Brisbane"}, "Currie": {"value" : "Currie"}, "Lord_Howe": {"value" : "Lord Howe"}, "Lindeman": {"value" : "Lindeman"}, "Adelaide": {"value" : "Adelaide"}, "Perth": {"value" : "Perth"}, "Eucla": {"value" : "Eucla"}, "Melbourne": {"value" : "Melbourne"}, "Sydney": {"value" : "Sydney"}, "Hobart": {"value" : "Hobart"}}, "Arctic": {"Longyearbyen": {"value" : "Longyearbyen"}}, "Atlantic": {"St_Helena": {"value" : "St. Helena"}, "Reykjavik": {"value" : "Reykjavik"}, "Stanley": {"value" : "Stanley"}, "Madeira":
    {"value" : "Madeira"}, "Canary": {"value" : "Canary"}, "Faeroe": {"value" : "Faroe"}, "Bermuda": {"value" : "Bermuda"}, "Azores": {"value" : "Azores"}, "South_Georgia": {"value" : "South Georgia"}, "Cape_Verde": {"value" : "Cape Verde"}}}}, "en": {"timeZones" : {"Asia": {"Gaza": {"value" : "Gaza"}, "Makassar": {"value" : "Makassar"}, "Ulaanbaatar": {"value" : "Ulaanbaatar"}, "Vladivostok": {"value" : "Vladivostok"}, "Tashkent": {"value" : "Tashkent"}, "Beirut": {"value" : "Beirut"}, "Qyzylorda": {"value"
    : "Qyzylorda"}, "Hong_Kong": {"value" : "Hong Kong"}, "Phnom_Penh": {"value" : "Phnom Penh"}, "Kabul": {"value" : "Kabul"}, "Riyadh": {"value" : "Riyadh"}, "Ashgabat": {"value" : "Ashgabat"}, "Chita": {"value" : "Chita"}, "Aqtau": {"value" : "Aqtau"}, "Tokyo": {"value" : "Tokyo"}, "Baku": {"value" : "Baku"}, "Aqtobe": {"value" : "Aqtobe"}, "Novosibirsk": {"value" : "Novosibirsk"}, "Kamchatka": {"value" : "Kamchatka"}, "Nicosia": {"value" : "Nicosia"}, "Pontianak": {"value" : "Pontianak"}, "Qostanay": {"value"
    : "Kostanay"}, "Barnaul": {"value" : "Barnaul"}, "Jerusalem": {"value" : "Jerusalem"}, "Kuala_Lumpur": {"value" : "Kuala Lumpur"}, "Novokuznetsk": {"value" : "Novokuznetsk"}, "Bahrain": {"value" : "Bahrain"}, "Kuching": {"value" : "Kuching"}, "Bangkok": {"value" : "Bangkok"}, "Srednekolymsk": {"value" : "Srednekolymsk"}, "Karachi": {"value" : "Karachi"}, "Aden": {"value" : "Aden"}, "Irkutsk": {"value" : "Irkutsk"}, "Hovd": {"value" : "Hovd"}, "Katmandu": {"value" : "Kathmandu"}, "Baghdad": {"value" : "Baghdad"}
    , "Samarkand": {"value" : "Samarkand"}, "Thimphu": {"value" : "Thimphu"}, "Dhaka": {"value" : "Dhaka"}, "Yerevan": {"value" : "Yerevan"}, "Muscat": {"value" : "Muscat"}, "Saigon": {"value" : "Ho Chi Minh City"}, "Dili": {"value" : "Dili"}, "Singapore": {"value" : "Singapore"}, "Rangoon": {"value" : "Yangon"}, "Damascus": {"value" : "Damascus"}, "Taipei": {"value" : "Taipei"}, "Amman": {"value" : "Amman"}, "Choibalsan": {"value" : "Choibalsan"}, "Macau": {"value" : "Macao"}, "Jayapura": {"value" : "Jayapura"}
    , "Manila": {"value" : "Manila"}, "Oral": {"value" : "Oral"}, "Dubai": {"value" : "Dubai"}, "Yakutsk": {"value" : "Yakutsk"}, "Seoul": {"value" : "Seoul"}, "Hebron": {"value" : "Hebron"}, "Qatar": {"value" : "Qatar"}, "Bishkek": {"value" : "Bishkek"}, "Tomsk": {"value" : "Tomsk"}, "Colombo": {"value" : "Colombo"}, "Khandyga": {"value" : "Khandyga"}, "Yekaterinburg": {"value" : "Yekaterinburg"}, "Dushanbe": {"value" : "Dushanbe"}, "Famagusta": {"value" : "Famagusta"}, "Kuwait": {"value" : "Kuwait"}, "Magadan":
    {"value" : "Magadan"}, "Pyongyang": {"value" : "Pyongyang"}, "Tehran": {"value" : "Tehran"}, "Sakhalin": {"value" : "Sakhalin"}, "Calcutta": {"value" : "Kolkata"}, "Urumqi": {"value" : "Urumqi"}, "Shanghai": {"value" : "Shanghai"}, "Atyrau": {"value" : "Atyrau"}, "Almaty": {"value" : "Almaty"}, "Tbilisi": {"value" : "Tbilisi"}, "Anadyr": {"value" : "Anadyr"}, "Brunei": {"value" : "Brunei"}, "Krasnoyarsk": {"value" : "Krasnoyarsk"}, "Vientiane": {"value" : "Vientiane"}, "Omsk": {"value" : "Omsk"}, "Jakarta":
    {"value" : "Jakarta"}, "Ust-Nera": {"value" : "Ust-Nera"}}, "Pacific": {"Easter": {"value" : "Easter"}, "Fiji": {"value" : "Fiji"}, "Port_Moresby": {"value" : "Port Moresby"}, "Kiritimati": {"value" : "Kiritimati"}, "Kosrae": {"value" : "Kosrae"}, "Kwajalein": {"value" : "Kwajalein"}, "Auckland": {"value" : "Auckland"}, "Efate": {"value" : "Efate"}, "Johnston": {"value" : "Johnston"}, "Niue": {"value" : "Niue"}, "Majuro": {"value" : "Majuro"}, "Truk": {"value" : "Chuuk"}, "Ponape": {"value" : "Pohnpei"}
    , "Guadalcanal": {"value" : "Guadalcanal"}, "Guam": {"value" : "Guam"}, "Chatham": {"value" : "Chatham"}, "Midway": {"value" : "Midway"}, "Tahiti": {"value" : "Tahiti"}, "Pago_Pago": {"value" : "Pago Pago"}, "Galapagos": {"value" : "Galapagos"}, "Funafuti": {"value" : "Funafuti"}, "Marquesas": {"value" : "Marquesas"}, "Rarotonga": {"value" : "Rarotonga"}, "Tarawa": {"value" : "Tarawa"}, "Saipan": {"value" : "Saipan"}, "Gambier": {"value" : "Gambier"}, "Tongatapu": {"value" : "Tongatapu"}, "Wallis": {"value"
    : "Wallis"}, "Fakaofo": {"value" : "Fakaofo"}, "Wake": {"value" : "Wake"}, "Enderbury": {"value" : "Enderbury"}, "Pitcairn": {"value" : "Pitcairn"}, "Apia": {"value" : "Apia"}, "Noumea": {"value" : "Noumea"}, "Palau": {"value" : "Palau"}, "Nauru": {"value" : "Nauru"}, "Bougainville": {"value" : "Bougainville"}, "Norfolk": {"value" : "Norfolk"}}, "Etc": {"Unknown": {"value" : "Unknown City"}}, "Europe": {"Belgrade": {"value" : "Belgrade"}, "Saratov": {"value" : "Saratov"}, "Gibraltar": {"value" : "Gibraltar"}
    , "Bucharest": {"value" : "Bucharest"}, "Dublin": {"value" : "Dublin"}, "Zaporozhye": {"value" : "Zaporozhye"}, "Kiev": {"value" : "Kiev"}, "Zurich": {"value" : "Zurich"}, "Copenhagen": {"value" : "Copenhagen"}, "Rome": {"value" : "Rome"}, "Zagreb": {"value" : "Zagreb"}, "Monaco": {"value" : "Monaco"}, "Luxembourg": {"value" : "Luxembourg"}, "Jersey": {"value" : "Jersey"}, "Istanbul": {"value" : "Istanbul"}, "Ulyanovsk": {"value" : "Ulyanovsk"}, "Samara": {"value" : "Samara"}, "Sarajevo": {"value" : "Sarajevo"}
    , "Chisinau": {"value" : "Chisinau"}, "Vatican": {"value" : "Vatican"}, "Brussels": {"value" : "Brussels"}, "Oslo": {"value" : "Oslo"}, "Warsaw": {"value" : "Warsaw"}, "Berlin": {"value" : "Berlin"}, "Lisbon": {"value" : "Lisbon"}, "Athens": {"value" : "Athens"}, "Podgorica": {"value" : "Podgorica"}, "San_Marino": {"value" : "San Marino"}, "Simferopol": {"value" : "Simferopol"}, "Bratislava": {"value" : "Bratislava"}, "Stockholm": {"value" : "Stockholm"}, "Prague": {"value" : "Prague"}, "Uzhgorod": {"value"
    : "Uzhhorod"}, "Astrakhan": {"value" : "Astrakhan"}, "Budapest": {"value" : "Budapest"}, "Madrid": {"value" : "Madrid"}, "Vaduz": {"value" : "Vaduz"}, "London": {"value" : "London"}, "Vilnius": {"value" : "Vilnius"}, "Isle_of_Man": {"value" : "Isle of Man"}, "Sofia": {"value" : "Sofia"}, "Kirov": {"value" : "Kirov"}, "Tallinn": {"value" : "Tallinn"}, "Moscow": {"value" : "Moscow"}, "Malta": {"value" : "Malta"}, "Busingen": {"value" : "Busingen"}, "Amsterdam": {"value" : "Amsterdam"}, "Andorra": {"value"
    : "Andorra"}, "Riga": {"value" : "Riga"}, "Vienna": {"value" : "Vienna"}, "Helsinki": {"value" : "Helsinki"}, "Minsk": {"value" : "Minsk"}, "Kaliningrad": {"value" : "Kaliningrad"}, "Ljubljana": {"value" : "Ljubljana"}, "Mariehamn": {"value" : "Mariehamn"}, "Skopje": {"value" : "Skopje"}, "Tirane": {"value" : "Tirane"}, "Guernsey": {"value" : "Guernsey"}, "Volgograd": {"value" : "Volgograd"}, "Paris": {"value" : "Paris"}}, "America": {"Belem": {"value" : "Belem"}, "Guayaquil": {"value" : "Guayaquil"}, "Costa_Rica":
    {"value" : "Costa Rica"}, "Hermosillo": {"value" : "Hermosillo"}, "Punta_Arenas": {"value" : "Punta Arenas"}, "Iqaluit": {"value" : "Iqaluit"}, "Godthab": {"value" : "Nuuk"}, "Jujuy": {"value" : "Jujuy"}, "El_Salvador": {"value" : "El Salvador"}, "Monterrey": {"value" : "Monterrey"}, "Bahia": {"value" : "Bahia"}, "Sao_Paulo": {"value" : "Sao Paulo"}, "Grenada": {"value" : "Grenada"}, "Grand_Turk": {"value" : "Grand Turk"}, "Montserrat": {"value" : "Montserrat"}, "Guadeloupe": {"value" : "Guadeloupe"}, "Panama":
    {"value" : "Panama"}, "Guatemala": {"value" : "Guatemala"}, "Guyana": {"value" : "Guyana"}, "Swift_Current": {"value" : "Swift Current"}, "Puerto_Rico": {"value" : "Puerto Rico"}, "Moncton": {"value" : "Moncton"}, "Danmarkshavn": {"value" : "Danmarkshavn"}, "Nome": {"value" : "Nome"}, "Porto_Velho": {"value" : "Porto Velho"}, "Cuiaba": {"value" : "Cuiaba"}, "Pangnirtung": {"value" : "Pangnirtung"}, "Kralendijk": {"value" : "Kralendijk"}, "Belize": {"value" : "Belize"}, "Anguilla": {"value" : "Anguilla"}
    , "Santiago": {"value" : "Santiago"}, "Boise": {"value" : "Boise"}, "Creston": {"value" : "Creston"}, "Miquelon": {"value" : "Miquelon"}, "Jamaica": {"value" : "Jamaica"}, "Buenos_Aires": {"value" : "Buenos Aires"}, "Rankin_Inlet": {"value" : "Rankin Inlet"}, "Toronto": {"value" : "Toronto"}, "Eirunepe": {"value" : "Eirunepe"}, "Dawson": {"value" : "Dawson"}, "Nassau": {"value" : "Nassau"}, "Vancouver": {"value" : "Vancouver"}, "Noronha": {"value" : "Noronha"}, "Regina": {"value" : "Regina"}, "St_Vincent":
    {"value" : "St. Vincent"}, "Scoresbysund": {"value" : "Ittoqqortoormiit"}, "Louisville": {"value" : "Louisville"}, "Aruba": {"value" : "Aruba"}, "Thule": {"value" : "Thule"}, "Rio_Branco": {"value" : "Rio Branco"}, "Los_Angeles": {"value" : "Los Angeles"}, "St_Thomas": {"value" : "St. Thomas"}, "Cordoba": {"value" : "Cordoba"}, "Cancun": {"value" : "Cancun"}, "Coral_Harbour": {"value" : "Atikokan"}, "Maceio": {"value" : "Maceio"}, "Sitka": {"value" : "Sitka"}, "Denver": {"value" : "Denver"}, "Cayman": {"value"
    : "Cayman"}, "Nipigon": {"value" : "Nipigon"}, "Thunder_Bay": {"value" : "Thunder Bay"}, "Havana": {"value" : "Havana"}, "Campo_Grande": {"value" : "Campo Grande"}, "Cambridge_Bay": {"value" : "Cambridge Bay"}, "Fortaleza": {"value" : "Fortaleza"}, "Managua": {"value" : "Managua"}, "Menominee": {"value" : "Menominee"}, "Halifax": {"value" : "Halifax"}, "Ojinaga": {"value" : "Ojinaga"}, "Glace_Bay": {"value" : "Glace Bay"}, "Lower_Princes": {"value" : "Lower Prince’s Quarter"}, "Mendoza": {"value" : "Mendoza"}
    , "Yakutat": {"value" : "Yakutat"}, "Detroit": {"value" : "Detroit"}, "Merida": {"value" : "Merida"}, "Bahia_Banderas": {"value" : "Bahia Banderas"}, "Matamoros": {"value" : "Matamoros"}, "St_Barthelemy": {"value" : "St. Barthélemy"}, "Boa_Vista": {"value" : "Boa Vista"}, "Metlakatla": {"value" : "Metlakatla"}, "Tortola": {"value" : "Tortola"}, "Inuvik": {"value" : "Inuvik"}, "Port_of_Spain": {"value" : "Port of Spain"}, "New_York": {"value" : "New York"}, "Paramaribo": {"value" : "Paramaribo"}, "Manaus":
    {"value" : "Manaus"}, "Resolute": {"value" : "Resolute"}, "Curacao": {"value" : "Curaçao"}, "Bogota": {"value" : "Bogota"}, "Adak": {"value" : "Adak"}, "Caracas": {"value" : "Caracas"}, "Mazatlan": {"value" : "Mazatlan"}, "St_Kitts": {"value" : "St. Kitts"}, "Mexico_City": {"value" : "Mexico City"}, "Edmonton": {"value" : "Edmonton"}, "Araguaina": {"value" : "Araguaina"}, "Santo_Domingo": {"value" : "Santo Domingo"}, "Indianapolis": {"value" : "Indianapolis"}, "Whitehorse": {"value" : "Whitehorse"}, "Yellowknife":
    {"value" : "Yellowknife"}, "Asuncion": {"value" : "Asunción"}, "Santarem": {"value" : "Santarem"}, "Antigua": {"value" : "Antigua"}, "Winnipeg": {"value" : "Winnipeg"}, "Recife": {"value" : "Recife"}, "Lima": {"value" : "Lima"}, "Martinique": {"value" : "Martinique"}, "Phoenix": {"value" : "Phoenix"}, "Goose_Bay": {"value" : "Goose Bay"}, "St_Johns": {"value" : "St. John’s"}, "Montevideo": {"value" : "Montevideo"}, "St_Lucia": {"value" : "St. Lucia"}, "Chicago": {"value" : "Chicago"}, "Chihuahua": {"value"
    : "Chihuahua"}, "La_Paz": {"value" : "La Paz"}, "Blanc-Sablon": {"value" : "Blanc-Sablon"}, "Catamarca": {"value" : "Catamarca"}, "Tijuana": {"value" : "Tijuana"}, "Barbados": {"value" : "Barbados"}, "Anchorage": {"value" : "Anchorage"}, "Port-au-Prince": {"value" : "Port-au-Prince"}, "Rainy_River": {"value" : "Rainy River"}, "Cayenne": {"value" : "Cayenne"}, "Tegucigalpa": {"value" : "Tegucigalpa"}, "Juneau": {"value" : "Juneau"}, "Marigot": {"value" : "Marigot"}, "Dawson_Creek": {"value" : "Dawson Creek"}
    , "Dominica": {"value" : "Dominica"}, "Fort_Nelson": {"value" : "Fort Nelson"}}, "Africa": {"Tunis": {"value" : "Tunis"}, "Maputo": {"value" : "Maputo"}, "Casablanca": {"value" : "Casablanca"}, "Johannesburg": {"value" : "Johannesburg"}, "Addis_Ababa": {"value" : "Addis Ababa"}, "Lagos": {"value" : "Lagos"}, "Accra": {"value" : "Accra"}, "Nairobi": {"value" : "Nairobi"}, "Brazzaville": {"value" : "Brazzaville"}, "Lubumbashi": {"value" : "Lubumbashi"}, "Banjul": {"value" : "Banjul"}, "Porto-Novo": {"value"
    : "Porto-Novo"}, "Lusaka": {"value" : "Lusaka"}, "Kigali": {"value" : "Kigali"}, "Ouagadougou": {"value" : "Ouagadougou"}, "Freetown": {"value" : "Freetown"}, "Ndjamena": {"value" : "Ndjamena"}, "Conakry": {"value" : "Conakry"}, "Niamey": {"value" : "Niamey"}, "Maseru": {"value" : "Maseru"}, "El_Aaiun": {"value" : "El Aaiun"}, "Sao_Tome": {"value" : "São Tomé"}, "Ceuta": {"value" : "Ceuta"}, "Khartoum": {"value" : "Khartoum"}, "Algiers": {"value" : "Algiers"}, "Bangui": {"value" : "Bangui"}, "Bujumbura":
    {"value" : "Bujumbura"}, "Gaborone": {"value" : "Gaborone"}, "Juba": {"value" : "Juba"}, "Dar_es_Salaam": {"value" : "Dar es Salaam"}, "Windhoek": {"value" : "Windhoek"}, "Harare": {"value" : "Harare"}, "Tripoli": {"value" : "Tripoli"}, "Libreville": {"value" : "Libreville"}, "Malabo": {"value" : "Malabo"}, "Abidjan": {"value" : "Abidjan"}, "Luanda": {"value" : "Luanda"}, "Lome": {"value" : "Lome"}, "Nouakchott": {"value" : "Nouakchott"}, "Bissau": {"value" : "Bissau"}, "Kinshasa": {"value" : "Kinshasa"}
    , "Asmera": {"value" : "Asmara"}, "Mogadishu": {"value" : "Mogadishu"}, "Djibouti": {"value" : "Djibouti"}, "Douala": {"value" : "Douala"}, "Kampala": {"value" : "Kampala"}, "Dakar": {"value" : "Dakar"}, "Cairo": {"value" : "Cairo"}, "Blantyre": {"value" : "Blantyre"}, "Monrovia": {"value" : "Monrovia"}, "Mbabane": {"value" : "Mbabane"}, "Bamako": {"value" : "Bamako"}}, "Indian": {"Reunion": {"value" : "Réunion"}, "Maldives": {"value" : "Maldives"}, "Christmas": {"value" : "Christmas"}, "Antananarivo": {"value"
    : "Antananarivo"}, "Chagos": {"value" : "Chagos"}, "Mahe": {"value" : "Mahe"}, "Mayotte": {"value" : "Mayotte"}, "Kerguelen": {"value" : "Kerguelen"}, "Mauritius": {"value" : "Mauritius"}, "Cocos": {"value" : "Cocos"}, "Comoro": {"value" : "Comoro"}}, "Antarctica": {"Macquarie": {"value" : "Macquarie"}, "Palmer": {"value" : "Palmer"}, "Casey": {"value" : "Casey"}, "Troll": {"value" : "Troll"}, "Vostok": {"value" : "Vostok"}, "DumontDUrville": {"value" : "Dumont d’Urville"}, "Syowa": {"value" : "Syowa"},
    "Mawson": {"value" : "Mawson"}, "McMurdo": {"value" : "McMurdo"}, "Davis": {"value" : "Davis"}, "Rothera": {"value" : "Rothera"}}, "Australia": {"Broken_Hill": {"value" : "Broken Hill"}, "Darwin": {"value" : "Darwin"}, "Brisbane": {"value" : "Brisbane"}, "Currie": {"value" : "Currie"}, "Lord_Howe": {"value" : "Lord Howe"}, "Lindeman": {"value" : "Lindeman"}, "Adelaide": {"value" : "Adelaide"}, "Perth": {"value" : "Perth"}, "Eucla": {"value" : "Eucla"}, "Melbourne": {"value" : "Melbourne"}, "Sydney": {"value"
    : "Sydney"}, "Hobart": {"value" : "Hobart"}}, "Arctic": {"Longyearbyen": {"value" : "Longyearbyen"}}, "Atlantic": {"St_Helena": {"value" : "St. Helena"}, "Reykjavik": {"value" : "Reykjavik"}, "Stanley": {"value" : "Stanley"}, "Madeira": {"value" : "Madeira"}, "Canary": {"value" : "Canary"}, "Faeroe": {"value" : "Faroe"}, "Bermuda": {"value" : "Bermuda"}, "Azores": {"value" : "Azores"}, "South_Georgia": {"value" : "South Georgia"}, "Cape_Verde": {"value" : "Cape Verde"}}}}};
},
otciu_CLDRHelper_getDefaultLocale$$create = () => {
    return {"value" : "en_GB"};
},
otciu_CLDRHelper_getMinimalDaysInFirstWeek$$create = () => {
    return {"DE": {"value" : 4}, "PT": {"value" : 4}, "DK": {"value" : 4}, "LT": {"value" : 4}, "LU": {"value" : 4}, "HU": {"value" : 4}, "MC": {"value" : 4}, "UM": {"value" : 1}, "IE": {"value" : 4}, "US": {"value" : 1}, "EE": {"value" : 4}, "AD": {"value" : 4}, "IM": {"value" : 4}, "MQ": {"value" : 4}, "IS": {"value" : 4}, "IT": {"value" : 4}, "VA": {"value" : 4}, "AN": {"value" : 4}, "ES": {"value" : 4}, "001": {"value" : 1}, "AT": {"value" : 4}, "RE": {"value" : 4}, "VI": {"value" : 1}, "AX": {"value" :
    4}, "JE": {"value" : 4}, "NL": {"value" : 4}, "NO": {"value" : 4}, "BE": {"value" : 4}, "FI": {"value" : 4}, "RU": {"value" : 4}, "FJ": {"value" : 4}, "BG": {"value" : 4}, "FO": {"value" : 4}, "FR": {"value" : 4}, "SE": {"value" : 4}, "SJ": {"value" : 4}, "SK": {"value" : 4}, "SM": {"value" : 4}, "GB": {"value" : 4}, "GF": {"value" : 4}, "GG": {"value" : 4}, "GI": {"value" : 4}, "CH": {"value" : 4}, "GP": {"value" : 4}, "GR": {"value" : 4}, "GU": {"value" : 1}, "CZ": {"value" : 4}, "PL": {"value" : 4}, "LI":
    {"value" : 4}};
},
otciu_CLDRHelper_getFirstDayOfWeek$$create = () => {
    return {"PR": {"value" : 1}, "HK": {"value" : 1}, "PT": {"value" : 1}, "HN": {"value" : 1}, "PY": {"value" : 1}, "HR": {"value" : 2}, "YE": {"value" : 1}, "HU": {"value" : 2}, "QA": {"value" : 7}, "ID": {"value" : 1}, "IE": {"value" : 2}, "AD": {"value" : 2}, "IL": {"value" : 1}, "AE": {"value" : 7}, "AF": {"value" : 7}, "IN": {"value" : 1}, "AG": {"value" : 1}, "ZA": {"value" : 1}, "AI": {"value" : 2}, "IQ": {"value" : 7}, "IR": {"value" : 7}, "IS": {"value" : 2}, "AL": {"value" : 2}, "IT": {"value" : 2}
    , "AM": {"value" : 2}, "AN": {"value" : 2}, "001": {"value" : 2}, "AR": {"value" : 2}, "AS": {"value" : 1}, "AT": {"value" : 2}, "RE": {"value" : 2}, "AU": {"value" : 1}, "AX": {"value" : 2}, "AZ": {"value" : 2}, "RO": {"value" : 2}, "ZW": {"value" : 1}, "BA": {"value" : 2}, "RS": {"value" : 2}, "BD": {"value" : 1}, "BE": {"value" : 2}, "JM": {"value" : 1}, "RU": {"value" : 2}, "BG": {"value" : 2}, "JO": {"value" : 7}, "BH": {"value" : 7}, "JP": {"value" : 1}, "BM": {"value" : 2}, "BN": {"value" : 2}, "SA":
    {"value" : 1}, "BR": {"value" : 1}, "BS": {"value" : 1}, "SD": {"value" : 7}, "BT": {"value" : 1}, "SE": {"value" : 2}, "SG": {"value" : 1}, "BW": {"value" : 1}, "SI": {"value" : 2}, "BY": {"value" : 2}, "BZ": {"value" : 1}, "SK": {"value" : 2}, "KE": {"value" : 1}, "SM": {"value" : 2}, "KG": {"value" : 2}, "KH": {"value" : 1}, "CA": {"value" : 1}, "SV": {"value" : 1}, "CH": {"value" : 2}, "SY": {"value" : 7}, "KR": {"value" : 1}, "CL": {"value" : 2}, "CM": {"value" : 2}, "CN": {"value" : 1}, "CO": {"value"
    : 1}, "KW": {"value" : 7}, "CR": {"value" : 2}, "KZ": {"value" : 2}, "TH": {"value" : 1}, "LA": {"value" : 1}, "CY": {"value" : 2}, "LB": {"value" : 2}, "TJ": {"value" : 2}, "CZ": {"value" : 2}, "TM": {"value" : 2}, "LI": {"value" : 2}, "TR": {"value" : 2}, "LK": {"value" : 2}, "TT": {"value" : 1}, "DE": {"value" : 2}, "TW": {"value" : 1}, "DJ": {"value" : 7}, "DK": {"value" : 2}, "LT": {"value" : 2}, "DM": {"value" : 1}, "LU": {"value" : 2}, "LV": {"value" : 2}, "DO": {"value" : 1}, "UA": {"value" : 2}
    , "LY": {"value" : 7}, "DZ": {"value" : 7}, "MC": {"value" : 2}, "MD": {"value" : 2}, "ME": {"value" : 2}, "UM": {"value" : 1}, "MH": {"value" : 1}, "EC": {"value" : 2}, "MK": {"value" : 2}, "US": {"value" : 1}, "EE": {"value" : 2}, "MM": {"value" : 1}, "MN": {"value" : 2}, "EG": {"value" : 7}, "MO": {"value" : 1}, "MQ": {"value" : 2}, "UY": {"value" : 2}, "UZ": {"value" : 2}, "MT": {"value" : 1}, "MV": {"value" : 6}, "MX": {"value" : 1}, "VA": {"value" : 2}, "MY": {"value" : 2}, "MZ": {"value" : 1}, "ES":
    {"value" : 2}, "ET": {"value" : 1}, "VE": {"value" : 1}, "GB-alt-variant": {"value" : 1}, "VI": {"value" : 1}, "VN": {"value" : 2}, "NI": {"value" : 1}, "NL": {"value" : 2}, "NO": {"value" : 2}, "NP": {"value" : 1}, "FI": {"value" : 2}, "FJ": {"value" : 2}, "FO": {"value" : 2}, "FR": {"value" : 2}, "NZ": {"value" : 2}, "GB": {"value" : 2}, "WS": {"value" : 1}, "GE": {"value" : 2}, "OM": {"value" : 7}, "GF": {"value" : 2}, "GP": {"value" : 2}, "GR": {"value" : 2}, "GT": {"value" : 1}, "GU": {"value" : 1}
    , "PA": {"value" : 1}, "XK": {"value" : 2}, "PE": {"value" : 1}, "PH": {"value" : 1}, "PK": {"value" : 1}, "PL": {"value" : 2}};
},
otciu_CLDRHelper_getDateFormatMap$$create = () => {
    return {"root": {"fullFormat" : "y MMMM d, EEEE", "mediumFormat" : "y MMM d", "longFormat" : "y MMMM d", "shortFormat" : "y-MM-dd"}, "en": {"fullFormat" : "EEEE, MMMM d, y", "mediumFormat" : "MMM d, y", "longFormat" : "MMMM d, y", "shortFormat" : "M/d/yy"}};
},
otciu_CLDRHelper_getTimeFormatMap$$create = () => {
    return {"root": {"fullFormat" : "HH:mm:ss zzzz", "mediumFormat" : "HH:mm:ss", "longFormat" : "HH:mm:ss z", "shortFormat" : "HH:mm"}, "en": {"fullFormat" : "h:mm:ss a zzzz", "mediumFormat" : "h:mm:ss a", "longFormat" : "h:mm:ss a z", "shortFormat" : "h:mm a"}};
},
otciu_CLDRHelper_getDateTimeFormatMap$$create = () => {
    return {"root": {"fullFormat" : "{1} {0}", "mediumFormat" : "{1} {0}", "longFormat" : "{1} {0}", "shortFormat" : "{1} {0}"}, "en": {"fullFormat" : "{1} \'at\' {0}", "mediumFormat" : "{1}, {0}", "longFormat" : "{1} \'at\' {0}", "shortFormat" : "{1}, {0}"}};
};
let otciu_CLDRHelper_getNumberFormatMap$$create = () => {
    return {"root": {"value" : "#,##0.###"}, "en": {"value" : "#,##0.###"}};
},
otciu_CLDRHelper_getPercentFormatMap$$create = () => {
    return {"root": {"value" : "#,##0%"}, "en": {"value" : "#,##0%"}};
},
otciu_CLDRHelper_getCurrencyFormatMap$$create = () => {
    return {"root": {"value" : "¤ #,##0.00"}, "en": {"value" : "¤#,##0.00"}};
},
otciu_CLDRHelper_getDecimalDataMap$$create = () => {
    return {"root": {"exponentSeparator" : "E", "minusSign" : 45, "perMille" : 8240, "decimalSeparator" : 46, "listSeparator" : 59, "naN" : "NaN", "infinity" : "∞", "groupingSeparator" : 44, "percent" : 37}, "en": {"exponentSeparator" : "E", "minusSign" : 45, "perMille" : 8240, "decimalSeparator" : 46, "listSeparator" : 59, "naN" : "NaN", "infinity" : "∞", "groupingSeparator" : 44, "percent" : 37}};
},
otciu_CLDRHelper_getCurrencyMap$$create = () => {
    return {"root": {"UGS": {"symbol" : "UGS", "name" : "UGS"}, "FJD": {"symbol" : "FJD", "name" : "FJD"}, "MXN": {"symbol" : "MX$", "name" : "MXN"}, "STD": {"symbol" : "STD", "name" : "STD"}, "BRR": {"symbol" : "BRR", "name" : "BRR"}, "LVL": {"symbol" : "LVL", "name" : "LVL"}, "SCR": {"symbol" : "SCR", "name" : "SCR"}, "CDF": {"symbol" : "CDF", "name" : "CDF"}, "MXP": {"symbol" : "MXP", "name" : "MXP"}, "ZAL": {"symbol" : "ZAL", "name" : "ZAL"}, "BBD": {"symbol" : "BBD", "name" : "BBD"}, "HNL": {"symbol" :
    "HNL", "name" : "HNL"}, "UGX": {"symbol" : "UGX", "name" : "UGX"}, "LVR": {"symbol" : "LVR", "name" : "LVR"}, "MXV": {"symbol" : "MXV", "name" : "MXV"}, "ZAR": {"symbol" : "ZAR", "name" : "ZAR"}, "BRZ": {"symbol" : "BRZ", "name" : "BRZ"}, "STN": {"symbol" : "STN", "name" : "STN"}, "CUC": {"symbol" : "CUC", "name" : "CUC"}, "BSD": {"symbol" : "BSD", "name" : "BSD"}, "SDD": {"symbol" : "SDD", "name" : "SDD"}, "SDG": {"symbol" : "SDG", "name" : "SDG"}, "ZRN": {"symbol" : "ZRN", "name" : "ZRN"}, "IQD": {"symbol"
    : "IQD", "name" : "IQD"}, "SDP": {"symbol" : "SDP", "name" : "SDP"}, "CUP": {"symbol" : "CUP", "name" : "CUP"}, "GMD": {"symbol" : "GMD", "name" : "GMD"}, "TWD": {"symbol" : "NT$", "name" : "TWD"}, "RSD": {"symbol" : "RSD", "name" : "RSD"}, "ZRZ": {"symbol" : "ZRZ", "name" : "ZRZ"}, "UYI": {"symbol" : "UYI", "name" : "UYI"}, "MYR": {"symbol" : "MYR", "name" : "MYR"}, "FKP": {"symbol" : "FKP", "name" : "FKP"}, "UYP": {"symbol" : "UYP", "name" : "UYP"}, "XOF": {"symbol" : "CFA", "name" : "XOF"}, "ARA": {"symbol"
    : "ARA", "name" : "ARA"}, "UYU": {"symbol" : "UYU", "name" : "UYU"}, "SUR": {"symbol" : "SUR", "name" : "SUR"}, "UYW": {"symbol" : "UYW", "name" : "UYW"}, "CVE": {"symbol" : "CVE", "name" : "CVE"}, "OMR": {"symbol" : "OMR", "name" : "OMR"}, "KES": {"symbol" : "KES", "name" : "KES"}, "SEK": {"symbol" : "SEK", "name" : "SEK"}, "MZE": {"symbol" : "MZE", "name" : "MZE"}, "ARL": {"symbol" : "ARL", "name" : "ARL"}, "ARM": {"symbol" : "ARM", "name" : "ARM"}, "BTN": {"symbol" : "BTN", "name" : "BTN"}, "GNF": {"symbol"
    : "GNF", "name" : "GNF"}, "ARP": {"symbol" : "ARP", "name" : "ARP"}, "MZN": {"symbol" : "MZN", "name" : "MZN"}, "MZM": {"symbol" : "MZM", "name" : "MZM"}, "SVC": {"symbol" : "SVC", "name" : "SVC"}, "ARS": {"symbol" : "ARS", "name" : "ARS"}, "QAR": {"symbol" : "QAR", "name" : "QAR"}, "IRR": {"symbol" : "IRR", "name" : "IRR"}, "NLG": {"symbol" : "NLG", "name" : "NLG"}, "GNS": {"symbol" : "GNS", "name" : "GNS"}, "XPD": {"symbol" : "XPD", "name" : "XPD"}, "THB": {"symbol" : "THB", "name" : "THB"}, "UZS": {"symbol"
    : "UZS", "name" : "UZS"}, "XPF": {"symbol" : "CFPF", "name" : "XPF"}, "BDT": {"symbol" : "BDT", "name" : "BDT"}, "LYD": {"symbol" : "LYD", "name" : "LYD"}, "BUK": {"symbol" : "BUK", "name" : "BUK"}, "KWD": {"symbol" : "KWD", "name" : "KWD"}, "XPT": {"symbol" : "XPT", "name" : "XPT"}, "RUB": {"symbol" : "RUB", "name" : "RUB"}, "ISK": {"symbol" : "ISK", "name" : "ISK"}, "BEC": {"symbol" : "BEC", "name" : "BEC"}, "ISJ": {"symbol" : "ISJ", "name" : "ISJ"}, "BEF": {"symbol" : "BEF", "name" : "BEF"}, "MKD": {"symbol"
    : "MKD", "name" : "MKD"}, "BEL": {"symbol" : "BEL", "name" : "BEL"}, "RUR": {"symbol" : "RUR", "name" : "RUR"}, "DZD": {"symbol" : "DZD", "name" : "DZD"}, "PAB": {"symbol" : "PAB", "name" : "PAB"}, "MKN": {"symbol" : "MKN", "name" : "MKN"}, "SGD": {"symbol" : "SGD", "name" : "SGD"}, "KGS": {"symbol" : "KGS", "name" : "KGS"}, "HRD": {"symbol" : "HRD", "name" : "HRD"}, "XAF": {"symbol" : "FCFA", "name" : "XAF"}, "XAG": {"symbol" : "XAG", "name" : "XAG"}, "ATS": {"symbol" : "ATS", "name" : "ATS"}, "CHF": {"symbol"
    : "CHF", "name" : "CHF"}, "HRK": {"symbol" : "HRK", "name" : "HRK"}, "ITL": {"symbol" : "ITL", "name" : "ITL"}, "CHE": {"symbol" : "CHE", "name" : "CHE"}, "DJF": {"symbol" : "DJF", "name" : "DJF"}, "MLF": {"symbol" : "MLF", "name" : "MLF"}, "XRE": {"symbol" : "XRE", "name" : "XRE"}, "TZS": {"symbol" : "TZS", "name" : "TZS"}, "ADP": {"symbol" : "ADP", "name" : "ADP"}, "VND": {"symbol" : "₫", "name" : "VND"}, "XAU": {"symbol" : "XAU", "name" : "XAU"}, "AUD": {"symbol" : "A$", "name" : "AUD"}, "CHW": {"symbol"
    : "CHW", "name" : "CHW"}, "KHR": {"symbol" : "KHR", "name" : "KHR"}, "IDR": {"symbol" : "IDR", "name" : "IDR"}, "XBA": {"symbol" : "XBA", "name" : "XBA"}, "KYD": {"symbol" : "KYD", "name" : "KYD"}, "VNN": {"symbol" : "VNN", "name" : "VNN"}, "XBC": {"symbol" : "XBC", "name" : "XBC"}, "YDD": {"symbol" : "YDD", "name" : "YDD"}, "XBB": {"symbol" : "XBB", "name" : "XBB"}, "BWP": {"symbol" : "BWP", "name" : "BWP"}, "GQE": {"symbol" : "GQE", "name" : "GQE"}, "SHP": {"symbol" : "SHP", "name" : "SHP"}, "CYP": {"symbol"
    : "CYP", "name" : "CYP"}, "XBD": {"symbol" : "XBD", "name" : "XBD"}, "TJS": {"symbol" : "TJS", "name" : "TJS"}, "TJR": {"symbol" : "TJR", "name" : "TJR"}, "AED": {"symbol" : "AED", "name" : "AED"}, "RWF": {"symbol" : "RWF", "name" : "RWF"}, "DKK": {"symbol" : "DKK", "name" : "DKK"}, "BGL": {"symbol" : "BGL", "name" : "BGL"}, "ZWD": {"symbol" : "ZWD", "name" : "ZWD"}, "BGN": {"symbol" : "BGN", "name" : "BGN"}, "BGM": {"symbol" : "BGM", "name" : "BGM"}, "YUD": {"symbol" : "YUD", "name" : "YUD"}, "MMK": {"symbol"
    : "MMK", "name" : "MMK"}, "BGO": {"symbol" : "BGO", "name" : "BGO"}, "NOK": {"symbol" : "NOK", "name" : "NOK"}, "SYP": {"symbol" : "SYP", "name" : "SYP"}, "ZWL": {"symbol" : "ZWL", "name" : "ZWL"}, "YUM": {"symbol" : "YUM", "name" : "YUM"}, "LKR": {"symbol" : "LKR", "name" : "LKR"}, "YUN": {"symbol" : "YUN", "name" : "YUN"}, "ZWR": {"symbol" : "ZWR", "name" : "ZWR"}, "CZK": {"symbol" : "CZK", "name" : "CZK"}, "IEP": {"symbol" : "IEP", "name" : "IEP"}, "YUR": {"symbol" : "YUR", "name" : "YUR"}, "GRD": {"symbol"
    : "GRD", "name" : "GRD"}, "XCD": {"symbol" : "EC$", "name" : "XCD"}, "HTG": {"symbol" : "HTG", "name" : "HTG"}, "XSU": {"symbol" : "XSU", "name" : "XSU"}, "AFA": {"symbol" : "AFA", "name" : "AFA"}, "BHD": {"symbol" : "BHD", "name" : "BHD"}, "SIT": {"symbol" : "SIT", "name" : "SIT"}, "PTE": {"symbol" : "PTE", "name" : "PTE"}, "KZT": {"symbol" : "KZT", "name" : "KZT"}, "SZL": {"symbol" : "SZL", "name" : "SZL"}, "YER": {"symbol" : "YER", "name" : "YER"}, "AFN": {"symbol" : "AFN", "name" : "AFN"}, "BYB": {"symbol"
    : "BYB", "name" : "BYB"}, "RHD": {"symbol" : "RHD", "name" : "RHD"}, "AWG": {"symbol" : "AWG", "name" : "AWG"}, "NPR": {"symbol" : "NPR", "name" : "NPR"}, "MNT": {"symbol" : "MNT", "name" : "MNT"}, "GBP": {"symbol" : "£", "name" : "GBP"}, "BYN": {"symbol" : "BYN", "name" : "BYN"}, "XTS": {"symbol" : "XTS", "name" : "XTS"}, "HUF": {"symbol" : "HUF", "name" : "HUF"}, "BYR": {"symbol" : "BYR", "name" : "BYR"}, "BIF": {"symbol" : "BIF", "name" : "BIF"}, "XUA": {"symbol" : "XUA", "name" : "XUA"}, "XDR": {"symbol"
    : "XDR", "name" : "XDR"}, "BZD": {"symbol" : "BZD", "name" : "BZD"}, "MOP": {"symbol" : "MOP", "name" : "MOP"}, "NAD": {"symbol" : "NAD", "name" : "NAD"}, "SKK": {"symbol" : "SKK", "name" : "SKK"}, "PEI": {"symbol" : "PEI", "name" : "PEI"}, "TMM": {"symbol" : "TMM", "name" : "TMM"}, "PEN": {"symbol" : "PEN", "name" : "PEN"}, "WST": {"symbol" : "WST", "name" : "WST"}, "TMT": {"symbol" : "TMT", "name" : "TMT"}, "FRF": {"symbol" : "FRF", "name" : "FRF"}, "CLF": {"symbol" : "CLF", "name" : "CLF"}, "CLE": {"symbol"
    : "CLE", "name" : "CLE"}, "PES": {"symbol" : "PES", "name" : "PES"}, "GTQ": {"symbol" : "GTQ", "name" : "GTQ"}, "CLP": {"symbol" : "CLP", "name" : "CLP"}, "XEU": {"symbol" : "XEU", "name" : "XEU"}, "TND": {"symbol" : "TND", "name" : "TND"}, "SLL": {"symbol" : "SLL", "name" : "SLL"}, "XFO": {"symbol" : "XFO", "name" : "XFO"}, "DOP": {"symbol" : "DOP", "name" : "DOP"}, "KMF": {"symbol" : "KMF", "name" : "KMF"}, "XFU": {"symbol" : "XFU", "name" : "XFU"}, "GEK": {"symbol" : "GEK", "name" : "GEK"}, "GEL": {"symbol"
    : "GEL", "name" : "GEL"}, "MAD": {"symbol" : "MAD", "name" : "MAD"}, "MAF": {"symbol" : "MAF", "name" : "MAF"}, "AZM": {"symbol" : "AZM", "name" : "AZM"}, "TOP": {"symbol" : "TOP", "name" : "TOP"}, "AZN": {"symbol" : "AZN", "name" : "AZN"}, "PGK": {"symbol" : "PGK", "name" : "PGK"}, "CNH": {"symbol" : "CNH", "name" : "CNH"}, "UAH": {"symbol" : "UAH", "name" : "UAH"}, "UAK": {"symbol" : "UAK", "name" : "UAK"}, "ERN": {"symbol" : "ERN", "name" : "ERN"}, "TPE": {"symbol" : "TPE", "name" : "TPE"}, "MRO": {"symbol"
    : "MRO", "name" : "MRO"}, "CNX": {"symbol" : "CNX", "name" : "CNX"}, "CNY": {"symbol" : "CN¥", "name" : "CNY"}, "MRU": {"symbol" : "MRU", "name" : "MRU"}, "ESA": {"symbol" : "ESA", "name" : "ESA"}, "GWE": {"symbol" : "GWE", "name" : "GWE"}, "ESB": {"symbol" : "ESB", "name" : "ESB"}, "BMD": {"symbol" : "BMD", "name" : "BMD"}, "PHP": {"symbol" : "PHP", "name" : "PHP"}, "XXX": {"symbol" : "¤", "name" : "XXX"}, "PYG": {"symbol" : "PYG", "name" : "PYG"}, "JMD": {"symbol" : "JMD", "name" : "JMD"}, "GWP": {"symbol"
    : "GWP", "name" : "GWP"}, "ESP": {"symbol" : "ESP", "name" : "ESP"}, "COP": {"symbol" : "COP", "name" : "COP"}, "USD": {"symbol" : "US$", "name" : "USD"}, "COU": {"symbol" : "COU", "name" : "COU"}, "MCF": {"symbol" : "MCF", "name" : "MCF"}, "USN": {"symbol" : "USN", "name" : "USN"}, "ETB": {"symbol" : "ETB", "name" : "ETB"}, "VEB": {"symbol" : "VEB", "name" : "VEB"}, "ECS": {"symbol" : "ECS", "name" : "ECS"}, "USS": {"symbol" : "USS", "name" : "USS"}, "SOS": {"symbol" : "SOS", "name" : "SOS"}, "VEF": {"symbol"
    : "VEF", "name" : "VEF"}, "VUV": {"symbol" : "VUV", "name" : "VUV"}, "LAK": {"symbol" : "LAK", "name" : "LAK"}, "BND": {"symbol" : "BND", "name" : "BND"}, "ECV": {"symbol" : "ECV", "name" : "ECV"}, "ZMK": {"symbol" : "ZMK", "name" : "ZMK"}, "LRD": {"symbol" : "LRD", "name" : "LRD"}, "ALK": {"symbol" : "ALK", "name" : "ALK"}, "ALL": {"symbol" : "ALL", "name" : "ALL"}, "GHC": {"symbol" : "GHC", "name" : "GHC"}, "MTL": {"symbol" : "MTL", "name" : "MTL"}, "VES": {"symbol" : "VES", "name" : "VES"}, "ZMW": {"symbol"
    : "ZMW", "name" : "ZMW"}, "MTP": {"symbol" : "MTP", "name" : "MTP"}, "ILP": {"symbol" : "ILP", "name" : "ILP"}, "MDC": {"symbol" : "MDC", "name" : "MDC"}, "ILR": {"symbol" : "ILR", "name" : "ILR"}, "TRL": {"symbol" : "TRL", "name" : "TRL"}, "ILS": {"symbol" : "₪", "name" : "ILS"}, "GHS": {"symbol" : "GHS", "name" : "GHS"}, "GYD": {"symbol" : "GYD", "name" : "GYD"}, "KPW": {"symbol" : "KPW", "name" : "KPW"}, "BOB": {"symbol" : "BOB", "name" : "BOB"}, "MDL": {"symbol" : "MDL", "name" : "MDL"}, "AMD": {"symbol"
    : "AMD", "name" : "AMD"}, "TRY": {"symbol" : "TRY", "name" : "TRY"}, "LBP": {"symbol" : "LBP", "name" : "LBP"}, "BOL": {"symbol" : "BOL", "name" : "BOL"}, "JOD": {"symbol" : "JOD", "name" : "JOD"}, "HKD": {"symbol" : "HK$", "name" : "HKD"}, "BOP": {"symbol" : "BOP", "name" : "BOP"}, "EUR": {"symbol" : "€", "name" : "EUR"}, "LSL": {"symbol" : "LSL", "name" : "LSL"}, "CAD": {"symbol" : "CA$", "name" : "CAD"}, "BOV": {"symbol" : "BOV", "name" : "BOV"}, "EEK": {"symbol" : "EEK", "name" : "EEK"}, "MUR": {"symbol"
    : "MUR", "name" : "MUR"}, "ROL": {"symbol" : "ROL", "name" : "ROL"}, "GIP": {"symbol" : "GIP", "name" : "GIP"}, "RON": {"symbol" : "RON", "name" : "RON"}, "NGN": {"symbol" : "NGN", "name" : "NGN"}, "CRC": {"symbol" : "CRC", "name" : "CRC"}, "PKR": {"symbol" : "PKR", "name" : "PKR"}, "ANG": {"symbol" : "ANG", "name" : "ANG"}, "KRH": {"symbol" : "KRH", "name" : "KRH"}, "SRD": {"symbol" : "SRD", "name" : "SRD"}, "LTL": {"symbol" : "LTL", "name" : "LTL"}, "SAR": {"symbol" : "SAR", "name" : "SAR"}, "TTD": {"symbol"
    : "TTD", "name" : "TTD"}, "MVP": {"symbol" : "MVP", "name" : "MVP"}, "MVR": {"symbol" : "MVR", "name" : "MVR"}, "KRO": {"symbol" : "KRO", "name" : "KRO"}, "SRG": {"symbol" : "SRG", "name" : "SRG"}, "DDM": {"symbol" : "DDM", "name" : "DDM"}, "INR": {"symbol" : "₹", "name" : "INR"}, "LTT": {"symbol" : "LTT", "name" : "LTT"}, "KRW": {"symbol" : "₩", "name" : "KRW"}, "JPY": {"symbol" : "JP¥", "name" : "JPY"}, "AOA": {"symbol" : "AOA", "name" : "AOA"}, "PLN": {"symbol" : "PLN", "name" : "PLN"}, "SBD": {"symbol"
    : "SBD", "name" : "SBD"}, "CSD": {"symbol" : "CSD", "name" : "CSD"}, "CSK": {"symbol" : "CSK", "name" : "CSK"}, "LUC": {"symbol" : "LUC", "name" : "LUC"}, "LUF": {"symbol" : "LUF", "name" : "LUF"}, "AOK": {"symbol" : "AOK", "name" : "AOK"}, "PLZ": {"symbol" : "PLZ", "name" : "PLZ"}, "AON": {"symbol" : "AON", "name" : "AON"}, "MWK": {"symbol" : "MWK", "name" : "MWK"}, "LUL": {"symbol" : "LUL", "name" : "LUL"}, "AOR": {"symbol" : "AOR", "name" : "AOR"}, "BAD": {"symbol" : "BAD", "name" : "BAD"}, "MGA": {"symbol"
    : "MGA", "name" : "MGA"}, "NIC": {"symbol" : "NIC", "name" : "NIC"}, "FIM": {"symbol" : "FIM", "name" : "FIM"}, "DEM": {"symbol" : "DEM", "name" : "DEM"}, "MGF": {"symbol" : "MGF", "name" : "MGF"}, "BAM": {"symbol" : "BAM", "name" : "BAM"}, "BAN": {"symbol" : "BAN", "name" : "BAN"}, "EGP": {"symbol" : "EGP", "name" : "EGP"}, "SSP": {"symbol" : "SSP", "name" : "SSP"}, "BRC": {"symbol" : "BRC", "name" : "BRC"}, "BRB": {"symbol" : "BRB", "name" : "BRB"}, "BRE": {"symbol" : "BRE", "name" : "BRE"}, "NIO": {"symbol"
    : "NIO", "name" : "NIO"}, "NZD": {"symbol" : "NZ$", "name" : "NZD"}, "BRL": {"symbol" : "R$", "name" : "BRL"}, "BRN": {"symbol" : "BRN", "name" : "BRN"}}, "en": {"UGS": {"symbol" : "UGS", "name" : "Ugandan Shilling (1966–1987)"}, "FJD": {"symbol" : "FJD", "name" : "Fijian Dollar"}, "MXN": {"symbol" : "MX$", "name" : "Mexican Peso"}, "STD": {"symbol" : "STD", "name" : "São Tomé & Príncipe Dobra (1977–2017)"}, "BRR": {"symbol" : "BRR", "name" : "Brazilian Cruzeiro (1993–1994)"}, "LVL": {"symbol" : "LVL", "name"
    : "Latvian Lats"}, "SCR": {"symbol" : "SCR", "name" : "Seychellois Rupee"}, "CDF": {"symbol" : "CDF", "name" : "Congolese Franc"}, "MXP": {"symbol" : "MXP", "name" : "Mexican Silver Peso (1861–1992)"}, "ZAL": {"symbol" : "ZAL", "name" : "South African Rand (financial)"}, "BBD": {"symbol" : "BBD", "name" : "Barbadian Dollar"}, "HNL": {"symbol" : "HNL", "name" : "Honduran Lempira"}, "UGX": {"symbol" : "UGX", "name" : "Ugandan Shilling"}, "LVR": {"symbol" : "LVR", "name" : "Latvian Ruble"}, "MXV": {"symbol"
    : "MXV", "name" : "Mexican Investment Unit"}, "ZAR": {"symbol" : "ZAR", "name" : "South African Rand"}, "BRZ": {"symbol" : "BRZ", "name" : "Brazilian Cruzeiro (1942–1967)"}, "STN": {"symbol" : "STN", "name" : "São Tomé & Príncipe Dobra"}, "CUC": {"symbol" : "CUC", "name" : "Cuban Convertible Peso"}, "BSD": {"symbol" : "BSD", "name" : "Bahamian Dollar"}, "SDD": {"symbol" : "SDD", "name" : "Sudanese Dinar (1992–2007)"}, "SDG": {"symbol" : "SDG", "name" : "Sudanese Pound"}, "ZRN": {"symbol" : "ZRN", "name"
    : "Zairean New Zaire (1993–1998)"}, "IQD": {"symbol" : "IQD", "name" : "Iraqi Dinar"}, "SDP": {"symbol" : "SDP", "name" : "Sudanese Pound (1957–1998)"}, "CUP": {"symbol" : "CUP", "name" : "Cuban Peso"}, "GMD": {"symbol" : "GMD", "name" : "Gambian Dalasi"}, "TWD": {"symbol" : "NT$", "name" : "New Taiwan Dollar"}, "RSD": {"symbol" : "RSD", "name" : "Serbian Dinar"}, "ZRZ": {"symbol" : "ZRZ", "name" : "Zairean Zaire (1971–1993)"}, "UYI": {"symbol" : "UYI", "name" : "Uruguayan Peso (Indexed Units)"}, "MYR":
    {"symbol" : "MYR", "name" : "Malaysian Ringgit"}, "FKP": {"symbol" : "FKP", "name" : "Falkland Islands Pound"}, "UYP": {"symbol" : "UYP", "name" : "Uruguayan Peso (1975–1993)"}, "XOF": {"symbol" : "CFA", "name" : "West African CFA Franc"}, "ARA": {"symbol" : "ARA", "name" : "Argentine Austral"}, "UYU": {"symbol" : "UYU", "name" : "Uruguayan Peso"}, "SUR": {"symbol" : "SUR", "name" : "Soviet Rouble"}, "UYW": {"symbol" : "UYW", "name" : "Uruguayan Nominal Wage Index Unit"}, "CVE": {"symbol" : "CVE", "name"
    : "Cape Verdean Escudo"}, "OMR": {"symbol" : "OMR", "name" : "Omani Rial"}, "KES": {"symbol" : "KES", "name" : "Kenyan Shilling"}, "SEK": {"symbol" : "SEK", "name" : "Swedish Krona"}, "MZE": {"symbol" : "MZE", "name" : "Mozambican Escudo"}, "ARL": {"symbol" : "ARL", "name" : "Argentine Peso Ley (1970–1983)"}, "ARM": {"symbol" : "ARM", "name" : "Argentine Peso (1881–1970)"}, "BTN": {"symbol" : "BTN", "name" : "Bhutanese Ngultrum"}, "GNF": {"symbol" : "GNF", "name" : "Guinean Franc"}, "ARP": {"symbol" : "ARP",
    "name" : "Argentine Peso (1983–1985)"}, "MZN": {"symbol" : "MZN", "name" : "Mozambican Metical"}, "MZM": {"symbol" : "MZM", "name" : "Mozambican Metical (1980–2006)"}, "SVC": {"symbol" : "SVC", "name" : "Salvadoran Colón"}, "ARS": {"symbol" : "ARS", "name" : "Argentine Peso"}, "QAR": {"symbol" : "QAR", "name" : "Qatari Rial"}, "IRR": {"symbol" : "IRR", "name" : "Iranian Rial"}, "NLG": {"symbol" : "NLG", "name" : "Dutch Guilder"}, "GNS": {"symbol" : "GNS", "name" : "Guinean Syli"}, "XPD": {"symbol" : "XPD",
    "name" : "Palladium"}, "THB": {"symbol" : "THB", "name" : "Thai Baht"}, "UZS": {"symbol" : "UZS", "name" : "Uzbekistani Som"}, "XPF": {"symbol" : "CFPF", "name" : "CFP Franc"}, "BDT": {"symbol" : "BDT", "name" : "Bangladeshi Taka"}, "LYD": {"symbol" : "LYD", "name" : "Libyan Dinar"}, "BUK": {"symbol" : "BUK", "name" : "Burmese Kyat"}, "KWD": {"symbol" : "KWD", "name" : "Kuwaiti Dinar"}, "XPT": {"symbol" : "XPT", "name" : "Platinum"}, "RUB": {"symbol" : "RUB", "name" : "Russian Ruble"}, "ISK": {"symbol" :
    "ISK", "name" : "Icelandic Króna"}, "BEC": {"symbol" : "BEC", "name" : "Belgian Franc (convertible)"}, "ISJ": {"symbol" : "ISJ", "name" : "Icelandic Króna (1918–1981)"}, "BEF": {"symbol" : "BEF", "name" : "Belgian Franc"}, "MKD": {"symbol" : "MKD", "name" : "Macedonian Denar"}, "BEL": {"symbol" : "BEL", "name" : "Belgian Franc (financial)"}, "RUR": {"symbol" : "RUR", "name" : "Russian Ruble (1991–1998)"}, "DZD": {"symbol" : "DZD", "name" : "Algerian Dinar"}, "PAB": {"symbol" : "PAB", "name" : "Panamanian Balboa"}
    , "MKN": {"symbol" : "MKN", "name" : "Macedonian Denar (1992–1993)"}, "SGD": {"symbol" : "SGD", "name" : "Singapore Dollar"}, "KGS": {"symbol" : "KGS", "name" : "Kyrgystani Som"}, "HRD": {"symbol" : "HRD", "name" : "Croatian Dinar"}, "XAF": {"symbol" : "FCFA", "name" : "Central African CFA Franc"}, "XAG": {"symbol" : "XAG", "name" : "Silver"}, "ATS": {"symbol" : "ATS", "name" : "Austrian Schilling"}, "CHF": {"symbol" : "CHF", "name" : "Swiss Franc"}, "HRK": {"symbol" : "HRK", "name" : "Croatian Kuna"}, "ITL":
    {"symbol" : "ITL", "name" : "Italian Lira"}, "CHE": {"symbol" : "CHE", "name" : "WIR Euro"}, "DJF": {"symbol" : "DJF", "name" : "Djiboutian Franc"}, "MLF": {"symbol" : "MLF", "name" : "Malian Franc"}, "XRE": {"symbol" : "XRE", "name" : "RINET Funds"}, "TZS": {"symbol" : "TZS", "name" : "Tanzanian Shilling"}, "ADP": {"symbol" : "ADP", "name" : "Andorran Peseta"}, "VND": {"symbol" : "₫", "name" : "Vietnamese Dong"}, "XAU": {"symbol" : "XAU", "name" : "Gold"}, "AUD": {"symbol" : "A$", "name" : "Australian Dollar"}
    , "CHW": {"symbol" : "CHW", "name" : "WIR Franc"}, "KHR": {"symbol" : "KHR", "name" : "Cambodian Riel"}, "IDR": {"symbol" : "IDR", "name" : "Indonesian Rupiah"}, "XBA": {"symbol" : "XBA", "name" : "European Composite Unit"}, "KYD": {"symbol" : "KYD", "name" : "Cayman Islands Dollar"}, "VNN": {"symbol" : "VNN", "name" : "Vietnamese Dong (1978–1985)"}, "XBC": {"symbol" : "XBC", "name" : "European Unit of Account (XBC)"}, "YDD": {"symbol" : "YDD", "name" : "Yemeni Dinar"}, "XBB": {"symbol" : "XBB", "name" :
    "European Monetary Unit"}, "BWP": {"symbol" : "BWP", "name" : "Botswanan Pula"}, "GQE": {"symbol" : "GQE", "name" : "Equatorial Guinean Ekwele"}, "SHP": {"symbol" : "SHP", "name" : "St. Helena Pound"}, "CYP": {"symbol" : "CYP", "name" : "Cypriot Pound"}, "XBD": {"symbol" : "XBD", "name" : "European Unit of Account (XBD)"}, "TJS": {"symbol" : "TJS", "name" : "Tajikistani Somoni"}, "TJR": {"symbol" : "TJR", "name" : "Tajikistani Ruble"}, "AED": {"symbol" : "AED", "name" : "United Arab Emirates Dirham"}, "RWF":
    {"symbol" : "RWF", "name" : "Rwandan Franc"}, "DKK": {"symbol" : "DKK", "name" : "Danish Krone"}, "BGL": {"symbol" : "BGL", "name" : "Bulgarian Hard Lev"}, "ZWD": {"symbol" : "ZWD", "name" : "Zimbabwean Dollar (1980–2008)"}, "BGN": {"symbol" : "BGN", "name" : "Bulgarian Lev"}, "BGM": {"symbol" : "BGM", "name" : "Bulgarian Socialist Lev"}, "YUD": {"symbol" : "YUD", "name" : "Yugoslavian Hard Dinar (1966–1990)"}, "MMK": {"symbol" : "MMK", "name" : "Myanmar Kyat"}, "BGO": {"symbol" : "BGO", "name" : "Bulgarian Lev (1879–1952)"}
    , "NOK": {"symbol" : "NOK", "name" : "Norwegian Krone"}, "SYP": {"symbol" : "SYP", "name" : "Syrian Pound"}, "ZWL": {"symbol" : "ZWL", "name" : "Zimbabwean Dollar (2009)"}, "YUM": {"symbol" : "YUM", "name" : "Yugoslavian New Dinar (1994–2002)"}, "LKR": {"symbol" : "LKR", "name" : "Sri Lankan Rupee"}, "YUN": {"symbol" : "YUN", "name" : "Yugoslavian Convertible Dinar (1990–1992)"}, "ZWR": {"symbol" : "ZWR", "name" : "Zimbabwean Dollar (2008)"}, "CZK": {"symbol" : "CZK", "name" : "Czech Koruna"}, "IEP": {"symbol"
    : "IEP", "name" : "Irish Pound"}, "YUR": {"symbol" : "YUR", "name" : "Yugoslavian Reformed Dinar (1992–1993)"}, "GRD": {"symbol" : "GRD", "name" : "Greek Drachma"}, "XCD": {"symbol" : "EC$", "name" : "East Caribbean Dollar"}, "HTG": {"symbol" : "HTG", "name" : "Haitian Gourde"}, "XSU": {"symbol" : "XSU", "name" : "Sucre"}, "AFA": {"symbol" : "AFA", "name" : "Afghan Afghani (1927–2002)"}, "BHD": {"symbol" : "BHD", "name" : "Bahraini Dinar"}, "SIT": {"symbol" : "SIT", "name" : "Slovenian Tolar"}, "PTE": {"symbol"
    : "PTE", "name" : "Portuguese Escudo"}, "KZT": {"symbol" : "KZT", "name" : "Kazakhstani Tenge"}, "SZL": {"symbol" : "SZL", "name" : "Swazi Lilangeni"}, "YER": {"symbol" : "YER", "name" : "Yemeni Rial"}, "AFN": {"symbol" : "AFN", "name" : "Afghan Afghani"}, "BYB": {"symbol" : "BYB", "name" : "Belarusian Ruble (1994–1999)"}, "RHD": {"symbol" : "RHD", "name" : "Rhodesian Dollar"}, "AWG": {"symbol" : "AWG", "name" : "Aruban Florin"}, "NPR": {"symbol" : "NPR", "name" : "Nepalese Rupee"}, "MNT": {"symbol" : "MNT",
    "name" : "Mongolian Tugrik"}, "GBP": {"symbol" : "£", "name" : "British Pound"}, "BYN": {"symbol" : "BYN", "name" : "Belarusian Ruble"}, "XTS": {"symbol" : "XTS", "name" : "Testing Currency Code"}, "HUF": {"symbol" : "HUF", "name" : "Hungarian Forint"}, "BYR": {"symbol" : "BYR", "name" : "Belarusian Ruble (2000–2016)"}, "BIF": {"symbol" : "BIF", "name" : "Burundian Franc"}, "XUA": {"symbol" : "XUA", "name" : "ADB Unit of Account"}, "XDR": {"symbol" : "XDR", "name" : "Special Drawing Rights"}, "BZD": {"symbol"
    : "BZD", "name" : "Belize Dollar"}, "MOP": {"symbol" : "MOP", "name" : "Macanese Pataca"}, "NAD": {"symbol" : "NAD", "name" : "Namibian Dollar"}, "SKK": {"symbol" : "SKK", "name" : "Slovak Koruna"}, "PEI": {"symbol" : "PEI", "name" : "Peruvian Inti"}, "TMM": {"symbol" : "TMM", "name" : "Turkmenistani Manat (1993–2009)"}, "PEN": {"symbol" : "PEN", "name" : "Peruvian Sol"}, "WST": {"symbol" : "WST", "name" : "Samoan Tala"}, "TMT": {"symbol" : "TMT", "name" : "Turkmenistani Manat"}, "FRF": {"symbol" : "FRF",
    "name" : "French Franc"}, "CLF": {"symbol" : "CLF", "name" : "Chilean Unit of Account (UF)"}, "CLE": {"symbol" : "CLE", "name" : "Chilean Escudo"}, "PES": {"symbol" : "PES", "name" : "Peruvian Sol (1863–1965)"}, "GTQ": {"symbol" : "GTQ", "name" : "Guatemalan Quetzal"}, "CLP": {"symbol" : "CLP", "name" : "Chilean Peso"}, "XEU": {"symbol" : "XEU", "name" : "European Currency Unit"}, "TND": {"symbol" : "TND", "name" : "Tunisian Dinar"}, "SLL": {"symbol" : "SLL", "name" : "Sierra Leonean Leone"}, "XFO": {"symbol"
    : "XFO", "name" : "French Gold Franc"}, "DOP": {"symbol" : "DOP", "name" : "Dominican Peso"}, "KMF": {"symbol" : "KMF", "name" : "Comorian Franc"}, "XFU": {"symbol" : "XFU", "name" : "French UIC-Franc"}, "GEK": {"symbol" : "GEK", "name" : "Georgian Kupon Larit"}, "GEL": {"symbol" : "GEL", "name" : "Georgian Lari"}, "MAD": {"symbol" : "MAD", "name" : "Moroccan Dirham"}, "MAF": {"symbol" : "MAF", "name" : "Moroccan Franc"}, "AZM": {"symbol" : "AZM", "name" : "Azerbaijani Manat (1993–2006)"}, "TOP": {"symbol"
    : "TOP", "name" : "Tongan Paʻanga"}, "AZN": {"symbol" : "AZN", "name" : "Azerbaijani Manat"}, "PGK": {"symbol" : "PGK", "name" : "Papua New Guinean Kina"}, "CNH": {"symbol" : "CNH", "name" : "Chinese Yuan (offshore)"}, "UAH": {"symbol" : "UAH", "name" : "Ukrainian Hryvnia"}, "UAK": {"symbol" : "UAK", "name" : "Ukrainian Karbovanets"}, "ERN": {"symbol" : "ERN", "name" : "Eritrean Nakfa"}, "TPE": {"symbol" : "TPE", "name" : "Timorese Escudo"}, "MRO": {"symbol" : "MRO", "name" : "Mauritanian Ouguiya (1973–2017)"}
    , "CNX": {"symbol" : "CNX", "name" : "Chinese People’s Bank Dollar"}, "CNY": {"symbol" : "CN¥", "name" : "Chinese Yuan"}, "MRU": {"symbol" : "MRU", "name" : "Mauritanian Ouguiya"}, "ESA": {"symbol" : "ESA", "name" : "Spanish Peseta (A account)"}, "GWE": {"symbol" : "GWE", "name" : "Portuguese Guinea Escudo"}, "ESB": {"symbol" : "ESB", "name" : "Spanish Peseta (convertible account)"}, "BMD": {"symbol" : "BMD", "name" : "Bermudan Dollar"}, "PHP": {"symbol" : "PHP", "name" : "Philippine Piso"}, "XXX": {"symbol"
    : "¤", "name" : "Unknown Currency"}, "PYG": {"symbol" : "PYG", "name" : "Paraguayan Guarani"}, "JMD": {"symbol" : "JMD", "name" : "Jamaican Dollar"}, "GWP": {"symbol" : "GWP", "name" : "Guinea-Bissau Peso"}, "ESP": {"symbol" : "ESP", "name" : "Spanish Peseta"}, "COP": {"symbol" : "COP", "name" : "Colombian Peso"}, "USD": {"symbol" : "$", "name" : "US Dollar"}, "COU": {"symbol" : "COU", "name" : "Colombian Real Value Unit"}, "MCF": {"symbol" : "MCF", "name" : "Monegasque Franc"}, "USN": {"symbol" : "USN",
    "name" : "US Dollar (Next day)"}, "ETB": {"symbol" : "ETB", "name" : "Ethiopian Birr"}, "VEB": {"symbol" : "VEB", "name" : "Venezuelan Bolívar (1871–2008)"}, "ECS": {"symbol" : "ECS", "name" : "Ecuadorian Sucre"}, "USS": {"symbol" : "USS", "name" : "US Dollar (Same day)"}, "SOS": {"symbol" : "SOS", "name" : "Somali Shilling"}, "VEF": {"symbol" : "VEF", "name" : "Venezuelan Bolívar (2008–2018)"}, "VUV": {"symbol" : "VUV", "name" : "Vanuatu Vatu"}, "LAK": {"symbol" : "LAK", "name" : "Laotian Kip"}, "BND":
    {"symbol" : "BND", "name" : "Brunei Dollar"}, "ECV": {"symbol" : "ECV", "name" : "Ecuadorian Unit of Constant Value"}, "ZMK": {"symbol" : "ZMK", "name" : "Zambian Kwacha (1968–2012)"}, "LRD": {"symbol" : "LRD", "name" : "Liberian Dollar"}, "ALK": {"symbol" : "ALK", "name" : "Albanian Lek (1946–1965)"}, "ALL": {"symbol" : "ALL", "name" : "Albanian Lek"}, "GHC": {"symbol" : "GHC", "name" : "Ghanaian Cedi (1979–2007)"}, "MTL": {"symbol" : "MTL", "name" : "Maltese Lira"}, "VES": {"symbol" : "VES", "name" : "Venezuelan Bolívar"}
    , "ZMW": {"symbol" : "ZMW", "name" : "Zambian Kwacha"}, "MTP": {"symbol" : "MTP", "name" : "Maltese Pound"}, "ILP": {"symbol" : "ILP", "name" : "Israeli Pound"}, "MDC": {"symbol" : "MDC", "name" : "Moldovan Cupon"}, "ILR": {"symbol" : "ILR", "name" : "Israeli Shekel (1980–1985)"}, "TRL": {"symbol" : "TRL", "name" : "Turkish Lira (1922–2005)"}, "ILS": {"symbol" : "₪", "name" : "Israeli New Shekel"}, "GHS": {"symbol" : "GHS", "name" : "Ghanaian Cedi"}, "GYD": {"symbol" : "GYD", "name" : "Guyanaese Dollar"}
    , "KPW": {"symbol" : "KPW", "name" : "North Korean Won"}, "BOB": {"symbol" : "BOB", "name" : "Bolivian Boliviano"}, "MDL": {"symbol" : "MDL", "name" : "Moldovan Leu"}, "AMD": {"symbol" : "AMD", "name" : "Armenian Dram"}, "TRY": {"symbol" : "TRY", "name" : "Turkish Lira"}, "LBP": {"symbol" : "LBP", "name" : "Lebanese Pound"}, "BOL": {"symbol" : "BOL", "name" : "Bolivian Boliviano (1863–1963)"}, "JOD": {"symbol" : "JOD", "name" : "Jordanian Dinar"}, "HKD": {"symbol" : "HK$", "name" : "Hong Kong Dollar"}, "BOP":
    {"symbol" : "BOP", "name" : "Bolivian Peso"}, "EUR": {"symbol" : "€", "name" : "Euro"}, "LSL": {"symbol" : "LSL", "name" : "Lesotho Loti"}, "CAD": {"symbol" : "CA$", "name" : "Canadian Dollar"}, "BOV": {"symbol" : "BOV", "name" : "Bolivian Mvdol"}, "EEK": {"symbol" : "EEK", "name" : "Estonian Kroon"}, "MUR": {"symbol" : "MUR", "name" : "Mauritian Rupee"}, "ROL": {"symbol" : "ROL", "name" : "Romanian Leu (1952–2006)"}, "GIP": {"symbol" : "GIP", "name" : "Gibraltar Pound"}, "RON": {"symbol" : "RON", "name"
    : "Romanian Leu"}, "NGN": {"symbol" : "NGN", "name" : "Nigerian Naira"}, "CRC": {"symbol" : "CRC", "name" : "Costa Rican Colón"}, "PKR": {"symbol" : "PKR", "name" : "Pakistani Rupee"}, "ANG": {"symbol" : "ANG", "name" : "Netherlands Antillean Guilder"}, "KRH": {"symbol" : "KRH", "name" : "South Korean Hwan (1953–1962)"}, "SRD": {"symbol" : "SRD", "name" : "Surinamese Dollar"}, "LTL": {"symbol" : "LTL", "name" : "Lithuanian Litas"}, "SAR": {"symbol" : "SAR", "name" : "Saudi Riyal"}, "TTD": {"symbol" : "TTD",
    "name" : "Trinidad & Tobago Dollar"}, "MVP": {"symbol" : "MVP", "name" : "Maldivian Rupee (1947–1981)"}, "MVR": {"symbol" : "MVR", "name" : "Maldivian Rufiyaa"}, "KRO": {"symbol" : "KRO", "name" : "South Korean Won (1945–1953)"}, "SRG": {"symbol" : "SRG", "name" : "Surinamese Guilder"}, "DDM": {"symbol" : "DDM", "name" : "East German Mark"}, "INR": {"symbol" : "₹", "name" : "Indian Rupee"}, "LTT": {"symbol" : "LTT", "name" : "Lithuanian Talonas"}, "KRW": {"symbol" : "₩", "name" : "South Korean Won"}, "JPY":
    {"symbol" : "¥", "name" : "Japanese Yen"}, "AOA": {"symbol" : "AOA", "name" : "Angolan Kwanza"}, "PLN": {"symbol" : "PLN", "name" : "Polish Zloty"}, "SBD": {"symbol" : "SBD", "name" : "Solomon Islands Dollar"}, "CSD": {"symbol" : "CSD", "name" : "Serbian Dinar (2002–2006)"}, "CSK": {"symbol" : "CSK", "name" : "Czechoslovak Hard Koruna"}, "LUC": {"symbol" : "LUC", "name" : "Luxembourgian Convertible Franc"}, "LUF": {"symbol" : "LUF", "name" : "Luxembourgian Franc"}, "AOK": {"symbol" : "AOK", "name" : "Angolan Kwanza (1977–1991)"}
    , "PLZ": {"symbol" : "PLZ", "name" : "Polish Zloty (1950–1995)"}, "AON": {"symbol" : "AON", "name" : "Angolan New Kwanza (1990–2000)"}, "MWK": {"symbol" : "MWK", "name" : "Malawian Kwacha"}, "LUL": {"symbol" : "LUL", "name" : "Luxembourg Financial Franc"}, "AOR": {"symbol" : "AOR", "name" : "Angolan Readjusted Kwanza (1995–1999)"}, "BAD": {"symbol" : "BAD", "name" : "Bosnia-Herzegovina Dinar (1992–1994)"}, "MGA": {"symbol" : "MGA", "name" : "Malagasy Ariary"}, "NIC": {"symbol" : "NIC", "name" : "Nicaraguan Córdoba (1988–1991)"}
    , "FIM": {"symbol" : "FIM", "name" : "Finnish Markka"}, "DEM": {"symbol" : "DEM", "name" : "German Mark"}, "MGF": {"symbol" : "MGF", "name" : "Malagasy Franc"}, "BAM": {"symbol" : "BAM", "name" : "Bosnia-Herzegovina Convertible Mark"}, "BAN": {"symbol" : "BAN", "name" : "Bosnia-Herzegovina New Dinar (1994–1997)"}, "EGP": {"symbol" : "EGP", "name" : "Egyptian Pound"}, "SSP": {"symbol" : "SSP", "name" : "South Sudanese Pound"}, "BRC": {"symbol" : "BRC", "name" : "Brazilian Cruzado (1986–1989)"}, "BRB": {"symbol"
    : "BRB", "name" : "Brazilian New Cruzeiro (1967–1986)"}, "BRE": {"symbol" : "BRE", "name" : "Brazilian Cruzeiro (1990–1993)"}, "NIO": {"symbol" : "NIO", "name" : "Nicaraguan Córdoba"}, "NZD": {"symbol" : "NZ$", "name" : "New Zealand Dollar"}, "BRL": {"symbol" : "R$", "name" : "Brazilian Real"}, "BRN": {"symbol" : "BRN", "name" : "Brazilian New Cruzado (1989–1990)"}}};
},
jn_IntBufferImpl = $rt_classWithoutFields(jn_IntBuffer),
jn_IntBufferImpl__init_ = ($this, $position, $limit) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
},
jn_IntBufferImpl_get0 = $this => {
    let var$1, var$2;
    var$1 = $this.$position0;
    if (var$1 < $this.$limit0) {
        $this.$position0 = var$1 + 1 | 0;
        return $this.$getElement(var$1);
    }
    var$2 = new jn_BufferUnderflowException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jn_IntBufferImpl_put0 = ($this, $b) => {
    let var$2, var$3;
    if ($this.$readOnly()) {
        var$2 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    var$3 = $this.$position0;
    if (var$3 < $this.$limit0) {
        $this.$position0 = var$3 + 1 | 0;
        $this.$putElement(var$3, $b);
        return $this;
    }
    var$2 = new jn_BufferOverflowException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jn_IntBufferImpl_get = ($this, $index) => {
    let var$2, var$3, var$4;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$getElement($index);
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(729));
    jl_AbstractStringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append(var$4, $rt_s(668));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    jl_AbstractStringBuilder_append2(var$4, 41);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_IntBufferImpl_put = ($this, $index, $b) => {
    let var$3, var$4;
    if ($this.$readOnly()) {
        var$3 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$3);
        $rt_throw(var$3);
    }
    if ($index >= 0 && $index < $this.$limit0) {
        $this.$putElement($index, $b);
        return $this;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    $b = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(729));
    jl_AbstractStringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append(var$4, $rt_s(668));
    jl_AbstractStringBuilder_append1(var$4, $b);
    jl_AbstractStringBuilder_append2(var$4, 41);
    jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
jn_IntBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_IntBufferOverTypedArray() {
    let a = this; jn_IntBufferImpl.call(a);
    a.$readOnly6 = 0;
    a.$data6 = null;
    a.$array7 = null;
}
let jn_IntBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_IntBufferImpl__init_($this, $position, $limit);
    $this.$readOnly6 = $readOnly;
    $this.$data6 = $data;
    $this.$array7 = $array;
},
jn_IntBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_IntBufferOverTypedArray();
    jn_IntBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_IntBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly6;
},
jn_IntBufferOverTypedArray_getElement = ($this, $index) => {
    return $this.$data6[$index];
},
jn_IntBufferOverTypedArray_putElement = ($this, $index, $value) => {
    $this.$data6[$index] = $value;
},
jn_IntBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data6.length;
},
jn_IntBufferOverTypedArray_getArrayBufferView = $this => {
    return $this.$data6;
},
otjt_Int32Array = $rt_classWithoutFields(otjt_TypedArray),
jn_FloatBufferImpl = $rt_classWithoutFields(jn_FloatBuffer),
jn_FloatBufferImpl__init_ = ($this, $position, $limit) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
},
jn_FloatBufferImpl_get = ($this, $index) => {
    let var$2, var$3, var$4;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$getElement0($index);
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(729));
    jl_AbstractStringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append(var$4, $rt_s(668));
    jl_AbstractStringBuilder_append1(var$4, var$3);
    jl_AbstractStringBuilder_append2(var$4, 41);
    jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_FloatBufferImpl_put = ($this, $index, $b) => {
    let var$3, var$4, var$5;
    if ($this.$readOnly()) {
        var$3 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$3);
        $rt_throw(var$3);
    }
    if ($index >= 0 && $index < $this.$limit0) {
        $this.$putElement0($index, $b);
        return $this;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    var$4 = $this.$limit0;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(729));
    jl_AbstractStringBuilder_append1(var$5, $index);
    jl_AbstractStringBuilder_append(var$5, $rt_s(668));
    jl_AbstractStringBuilder_append1(var$5, var$4);
    jl_AbstractStringBuilder_append2(var$5, 41);
    jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$5));
    $rt_throw(var$3);
},
jn_FloatBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_FloatBufferOverTypedArray() {
    let a = this; jn_FloatBufferImpl.call(a);
    a.$readOnly5 = 0;
    a.$data3 = null;
    a.$array8 = null;
}
let jn_FloatBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_FloatBufferImpl__init_($this, $position, $limit);
    $this.$readOnly5 = $readOnly;
    $this.$data3 = $data;
    $this.$array8 = $array;
},
jn_FloatBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_FloatBufferOverTypedArray();
    jn_FloatBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_FloatBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly5;
},
jn_FloatBufferOverTypedArray_getElement = ($this, $index) => {
    return $this.$data3[$index];
},
jn_FloatBufferOverTypedArray_putElement = ($this, $index, $value) => {
    $this.$data3[$index] = $value;
},
jn_FloatBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data3.length;
},
jn_FloatBufferOverTypedArray_putImpl = ($this, $index, $src, $offset, $length) => {
    let $slice;
    $slice = $src.data.buffer;
    $offset = $offset * 4 | 0;
    $slice = new Float32Array($slice, $offset, $length);
    $this.$data3.set($slice, $index);
},
jn_FloatBufferOverTypedArray_getArrayBufferView = $this => {
    return $this.$data3;
},
otjt_Float32Array = $rt_classWithoutFields(otjt_TypedArray);
function cbgm_Frustum() {
    let a = this; jl_Object.call(a);
    a.$planes = null;
    a.$planePoints = null;
    a.$planePointsArray = null;
}
let cbgm_Frustum_clipSpacePlanePoints = null,
cbgm_Frustum_clipSpacePlanePointsArray = null,
cbgm_Frustum_tmpV = null,
cbgm_Frustum_$callClinit = () => {
    cbgm_Frustum_$callClinit = $rt_eraseClinit(cbgm_Frustum);
    cbgm_Frustum__clinit_();
},
cbgm_Frustum__init_ = $this => {
    let var$1, var$2, $i, var$4, var$5, var$6;
    cbgm_Frustum_$callClinit();
    $this.$planes = $rt_createArray(cbgm_Plane, 6);
    var$1 = $rt_createArray(cbgm_Vector3, 8);
    var$2 = var$1.data;
    var$2[0] = cbgm_Vector3__init_();
    var$2[1] = cbgm_Vector3__init_();
    var$2[2] = cbgm_Vector3__init_();
    var$2[3] = cbgm_Vector3__init_();
    var$2[4] = cbgm_Vector3__init_();
    var$2[5] = cbgm_Vector3__init_();
    var$2[6] = cbgm_Vector3__init_();
    var$2[7] = cbgm_Vector3__init_();
    $this.$planePoints = var$1;
    $this.$planePointsArray = $rt_createFloatArray(24);
    $i = 0;
    while ($i < 6) {
        var$1 = $this.$planes.data;
        var$4 = new cbgm_Plane;
        var$5 = cbgm_Vector3__init_();
        var$6 = cbgm_Vector3__init_();
        var$4.$normal = var$6;
        var$4.$d = 0.0;
        cbgm_Vector3_nor(cbgm_Vector3_set0(var$6, var$5));
        var$4.$d = 0.0;
        var$1[$i] = var$4;
        $i = $i + 1 | 0;
    }
},
cbgm_Frustum__init_0 = () => {
    let var_0 = new cbgm_Frustum();
    cbgm_Frustum__init_(var_0);
    return var_0;
},
cbgm_Frustum_update = ($this, $inverseProjectionView) => {
    let var$2, var$3, var$4, $j, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, $i, $v, var$17, var$18;
    cbgm_Frustum_$callClinit();
    var$2 = cbgm_Frustum_clipSpacePlanePointsArray;
    var$3 = var$2.data;
    jl_System_fastArraycopy(var$2, 0, $this.$planePointsArray, 0, var$3.length);
    var$2 = $inverseProjectionView.$val;
    var$4 = $this.$planePointsArray;
    $j = 0;
    cbgm_Matrix4_$callClinit();
    var$6 = 0;
    while (var$6 < 8) {
        var$3 = var$4.data;
        var$7 = var$2.data;
        var$8 = $j + 0 | 0;
        var$9 = var$3[var$8] * var$7[3];
        var$10 = $j + 1 | 0;
        var$9 = var$9 + var$3[var$10] * var$7[7];
        var$11 = $j + 2 | 0;
        var$12 = 1.0 / (var$9 + var$3[var$11] * var$7[11] + var$7[15]);
        var$13 = (var$3[var$8] * var$7[0] + var$3[var$10] * var$7[4] + var$3[var$11] * var$7[8] + var$7[12]) * var$12;
        var$14 = (var$3[var$8] * var$7[1] + var$3[var$10] * var$7[5] + var$3[var$11] * var$7[9] + var$7[13]) * var$12;
        var$9 = (var$3[var$8] * var$7[2] + var$3[var$10] * var$7[6] + var$3[var$11] * var$7[10] + var$7[14]) * var$12;
        var$3[var$8] = var$13;
        var$3[var$10] = var$14;
        var$3[var$11] = var$9;
        $j = $j + 3 | 0;
        var$6 = var$6 + 1 | 0;
    }
    $i = 0;
    $j = 0;
    while ($i < 8) {
        var$3 = var$4.data;
        $v = $this.$planePoints.data[$i];
        var$17 = $j + 1 | 0;
        $v.$x0 = var$3[$j];
        var$18 = var$17 + 1 | 0;
        $v.$y0 = var$3[var$17];
        $j = var$18 + 1 | 0;
        $v.$z = var$3[var$18];
        $i = $i + 1 | 0;
    }
    $inverseProjectionView = $this.$planes.data[0];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[1], var$2[0], var$2[2]);
    $inverseProjectionView = $this.$planes.data[1];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[4], var$2[5], var$2[7]);
    $inverseProjectionView = $this.$planes.data[2];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[0], var$2[4], var$2[3]);
    $inverseProjectionView = $this.$planes.data[3];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[5], var$2[1], var$2[6]);
    $inverseProjectionView = $this.$planes.data[4];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[2], var$2[3], var$2[6]);
    $inverseProjectionView = $this.$planes.data[5];
    var$2 = $this.$planePoints.data;
    cbgm_Plane_set($inverseProjectionView, var$2[4], var$2[0], var$2[1]);
},
cbgm_Frustum__clinit_ = () => {
    let var$1, var$2, var$3, $j, var$5, var$6, $v, var$8, var$9;
    var$1 = $rt_createArray(cbgm_Vector3, 8);
    var$2 = var$1.data;
    var$2[0] = cbgm_Vector3__init_0((-1.0), (-1.0), (-1.0));
    var$2[1] = cbgm_Vector3__init_0(1.0, (-1.0), (-1.0));
    var$2[2] = cbgm_Vector3__init_0(1.0, 1.0, (-1.0));
    var$2[3] = cbgm_Vector3__init_0((-1.0), 1.0, (-1.0));
    var$2[4] = cbgm_Vector3__init_0((-1.0), (-1.0), 1.0);
    var$2[5] = cbgm_Vector3__init_0(1.0, (-1.0), 1.0);
    var$2[6] = cbgm_Vector3__init_0(1.0, 1.0, 1.0);
    var$2[7] = cbgm_Vector3__init_0((-1.0), 1.0, 1.0);
    cbgm_Frustum_clipSpacePlanePoints = var$1;
    var$1 = $rt_createFloatArray(24);
    var$3 = var$1.data;
    cbgm_Frustum_clipSpacePlanePointsArray = var$1;
    $j = 0;
    var$5 = var$2.length;
    var$6 = 0;
    while (var$6 < var$5) {
        $v = var$2[var$6];
        var$8 = $j + 1 | 0;
        var$3[$j] = $v.$x0;
        var$9 = var$8 + 1 | 0;
        var$3[var$8] = $v.$y0;
        $j = var$9 + 1 | 0;
        var$3[var$9] = $v.$z;
        var$6 = var$6 + 1 | 0;
    }
    cbgm_Frustum_tmpV = cbgm_Vector3__init_();
};
function cbgmc_Ray() {
    let a = this; jl_Object.call(a);
    a.$origin = null;
    a.$direction0 = null;
}
let cbgmc_Ray_tmp = null,
cbgmc_Ray_$callClinit = () => {
    cbgmc_Ray_$callClinit = $rt_eraseClinit(cbgmc_Ray);
    cbgmc_Ray__clinit_();
},
cbgmc_Ray__init_ = $this => {
    cbgmc_Ray_$callClinit();
    $this.$origin = cbgm_Vector3__init_();
    $this.$direction0 = cbgm_Vector3__init_();
},
cbgmc_Ray__init_0 = () => {
    let var_0 = new cbgmc_Ray();
    cbgmc_Ray__init_(var_0);
    return var_0;
},
cbgmc_Ray__clinit_ = () => {
    cbgmc_Ray_tmp = cbgm_Vector3__init_();
},
jn_ShortBuffer = $rt_classWithoutFields(jn_Buffer),
jn_ShortBuffer_put = ($this, $src, $offset, $length) => {
    let var$4;
    if ($this.$readOnly()) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        $this.$putImpl0($this.$position0, $src, $offset, $length);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
},
jn_ShortBuffer_position0 = ($this, $newPosition) => {
    jn_Buffer_position($this, $newPosition);
    return $this;
},
jn_ShortBuffer_flip = $this => {
    jn_Buffer_flip($this);
    return $this;
},
jn_ShortBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
},
jn_ShortBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
};
function cbgu_ShortArray() {
    let a = this; jl_Object.call(a);
    a.$items2 = null;
    a.$size4 = 0;
    a.$ordered1 = 0;
}
let cbgu_ShortArray__init_ = $this => {
    $this.$ordered1 = 1;
    $this.$items2 = $rt_createShortArray(16);
},
cbgu_ShortArray__init_0 = () => {
    let var_0 = new cbgu_ShortArray();
    cbgu_ShortArray__init_(var_0);
    return var_0;
},
cbgu_ShortArray_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items2;
    var$3 = $items.data;
    var$4 = $this.$size4;
    if (var$4 == var$3.length)
        $items = cbgu_ShortArray_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size4;
    $this.$size4 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_ShortArray_clear = $this => {
    $this.$size4 = 0;
},
cbgu_ShortArray_ensureCapacity = ($this, $additionalCapacity) => {
    let var$2, var$3, $sizeNeeded;
    if ($additionalCapacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(23));
        jl_AbstractStringBuilder_append1(var$3, $additionalCapacity);
        jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    $sizeNeeded = $this.$size4 + $additionalCapacity | 0;
    if ($sizeNeeded > $this.$items2.data.length)
        cbgu_ShortArray_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size4 * 1.75 | 0));
    return $this.$items2;
},
cbgu_ShortArray_resize = ($this, $newSize) => {
    let $newItems, var$3;
    $newItems = $rt_createShortArray($newSize);
    var$3 = $newItems.data;
    jl_System_fastArraycopy($this.$items2, 0, $newItems, 0, jl_Math_min($this.$size4, var$3.length));
    $this.$items2 = $newItems;
    return $newItems;
},
cbgg_TextureData$Factory = $rt_classWithoutFields(),
cbgg_TextureData$Factory__init_ = $this => {
    return;
},
cbgg_TextureData$Factory__init_0 = () => {
    let var_0 = new cbgg_TextureData$Factory();
    cbgg_TextureData$Factory__init_(var_0);
    return var_0;
},
cbgu_StreamUtils = $rt_classWithoutFields(),
cbgu_StreamUtils_EMPTY_BYTES = null,
cbgu_StreamUtils__init_ = $this => {
    return;
},
cbgu_StreamUtils__init_0 = () => {
    let var_0 = new cbgu_StreamUtils();
    cbgu_StreamUtils__init_(var_0);
    return var_0;
},
cbgu_StreamUtils_copyStreamToByteArray = ($input, $estimatedSize) => {
    let $baos, var$4, var$5, var$6;
    $baos = new cbgu_StreamUtils$OptimizedByteArrayOutputStream;
    ji_ByteArrayOutputStream__init_($baos, jl_Math_max(0, $estimatedSize));
    var$4 = $rt_createByteArray(4096);
    $estimatedSize = var$4.data.length;
    var$5 = $input;
    $input = $baos;
    while (true) {
        var$6 = ji_ByteArrayInputStream_read(var$5, var$4, 0, $estimatedSize);
        if (var$6 == (-1))
            break;
        ji_ByteArrayOutputStream_write($input, var$4, 0, var$6);
    }
    return cbgu_StreamUtils$OptimizedByteArrayOutputStream_toByteArray($baos);
},
cbgu_StreamUtils_closeQuietly = $c => {
    let $$je;
    a: {
        if ($c !== null)
            try {
                $c.$close();
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                } else {
                    throw $$e;
                }
            }
    }
},
cbgu_StreamUtils__clinit_ = () => {
    cbgu_StreamUtils_EMPTY_BYTES = $rt_createByteArray(0);
},
ji_IOException = $rt_classWithoutFields(jl_Exception),
ji_IOException__init_ = $this => {
    jl_Throwable__init_($this);
},
ji_IOException__init_0 = () => {
    let var_0 = new ji_IOException();
    ji_IOException__init_(var_0);
    return var_0;
};
function cbgm_Plane() {
    let a = this; jl_Object.call(a);
    a.$normal = null;
    a.$d = 0.0;
}
let cbgm_Plane__init_ = $this => {
    $this.$normal = cbgm_Vector3__init_();
    $this.$d = 0.0;
},
cbgm_Plane__init_0 = () => {
    let var_0 = new cbgm_Plane();
    cbgm_Plane__init_(var_0);
    return var_0;
},
cbgm_Plane_set = ($this, $point1, $point2, $point3) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    var$4 = cbgm_Vector3_set0($this.$normal, $point1);
    var$5 = $point2.$x0;
    var$6 = $point2.$y0;
    var$7 = $point2.$z;
    var$4 = cbgm_Vector3_set(var$4, var$4.$x0 - var$5, var$4.$y0 - var$6, var$4.$z - var$7);
    var$6 = $point2.$x0 - $point3.$x0;
    var$7 = $point2.$y0 - $point3.$y0;
    var$8 = $point2.$z - $point3.$z;
    var$5 = var$4.$y0;
    var$9 = var$5 * var$8;
    var$10 = var$4.$z;
    var$9 = var$9 - var$10 * var$7;
    var$10 = var$10 * var$6;
    var$11 = var$4.$x0;
    cbgm_Vector3_nor(cbgm_Vector3_set(var$4, var$9, var$10 - var$11 * var$8, var$11 * var$7 - var$5 * var$6));
    $point2 = $this.$normal;
    $this.$d =  -($point1.$x0 * $point2.$x0 + $point1.$y0 * $point2.$y0 + $point1.$z * $point2.$z);
},
cbgg_TextureData = $rt_classWithoutFields(0);
function cbggg_FileTextureData() {
    let a = this; jl_Object.call(a);
    a.$file0 = null;
    a.$width5 = 0;
    a.$height5 = 0;
    a.$format8 = null;
    a.$pixmap = null;
    a.$useMipMaps1 = 0;
    a.$isPrepared0 = 0;
}
let cbggg_FileTextureData_copyToPOT = 0,
cbggg_FileTextureData_isPrepared = $this => {
    return $this.$isPrepared0;
},
cbggg_FileTextureData_prepare = $this => {
    let var$1;
    if ($this.$isPrepared0) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$1, $rt_s(730));
        $rt_throw(var$1);
    }
    if ($this.$pixmap === null) {
        var$1 = cbggg_FileTextureData_ensurePot($this, cbgg_Pixmap__init_0($this.$file0));
        $this.$pixmap = var$1;
        $this.$width5 = cbgg_Pixmap_getWidth(var$1);
        $this.$height5 = cbgg_Pixmap_getHeight($this.$pixmap);
        if ($this.$format8 === null)
            $this.$format8 = cbgg_Pixmap_getFormat($this.$pixmap);
    }
    $this.$isPrepared0 = 1;
},
cbggg_FileTextureData_ensurePot = ($this, $pixmap) => {
    let $pixmapWidth, $pixmapHeight, $potWidth, $potHeight, $tmp_0;
    a: {
        if (cbg_Gdx_gl20 === null && cbggg_FileTextureData_copyToPOT) {
            $pixmapWidth = cbgg_Pixmap_getWidth($pixmap);
            $pixmapHeight = cbgg_Pixmap_getHeight($pixmap);
            $potWidth = cbgm_MathUtils_nextPowerOfTwo($pixmapWidth);
            $potHeight = cbgm_MathUtils_nextPowerOfTwo($pixmapHeight);
            if ($pixmapWidth != $potWidth)
                break a;
            if ($pixmapHeight != $potHeight)
                break a;
        }
        return $pixmap;
    }
    $tmp_0 = cbgg_Pixmap__init_($potWidth, $potHeight, cbgg_Pixmap_getFormat($pixmap));
    cbgg_Pixmap_drawPixmap($tmp_0, $pixmap, 0, 0, 0, 0, $pixmapWidth, $pixmapHeight);
    cbgg_Pixmap_dispose($pixmap);
    return $tmp_0;
},
cbggg_FileTextureData_consumePixmap = $this => {
    let var$1, $pixmap;
    if (!$this.$isPrepared0) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$1, $rt_s(731));
        $rt_throw(var$1);
    }
    $this.$isPrepared0 = 0;
    $pixmap = $this.$pixmap;
    $this.$pixmap = null;
    return $pixmap;
},
cbggg_FileTextureData_disposePixmap = $this => {
    return 1;
},
cbggg_FileTextureData_getWidth = $this => {
    return $this.$width5;
},
cbggg_FileTextureData_getHeight = $this => {
    return $this.$height5;
},
cbggg_FileTextureData_getFormat = $this => {
    return $this.$format8;
},
cbggg_FileTextureData_useMipMaps = $this => {
    return $this.$useMipMaps1;
},
cbggg_FileTextureData_isManaged = $this => {
    return 1;
},
cbggg_FileTextureData_getType = $this => {
    return cbgg_TextureData$TextureDataType_Pixmap;
},
cbggg_FileTextureData_consumeCustomData = ($this, $target) => {
    let var$2;
    var$2 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$2, $rt_s(732));
    $rt_throw(var$2);
},
cbggg_PixmapNativeInterface = $rt_classWithoutFields(0);
function cbgg_Pixmap() {
    let a = this; jl_Object.call(a);
    a.$blending0 = null;
    a.$filter = null;
    a.$color5 = 0;
    a.$nativePixmap = null;
    a.$disposed0 = 0;
}
let cbgg_Pixmap__init_1 = ($this, $file) => {
    let var$2, $path, $bytes, var$5, var$6;
    $this.$blending0 = cbgg_Pixmap$Blending_SourceOver;
    $this.$filter = cbgg_Pixmap$Filter_BiLinear;
    $this.$color5 = 0;
    var$2 = $file;
    $path = var$2.$file;
    if (!cgxgbt_TeaFileHandle_exists(var$2)) {
        $file = new cbgu_GdxRuntimeException;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $rt_s(733));
        jl_AbstractStringBuilder_append(var$2, $path);
        jl_Exception__init_($file, jl_AbstractStringBuilder_toString(var$2));
        $rt_throw($file);
    }
    $bytes = cbgf_FileHandle_readBytes($file);
    var$5 = $bytes.data;
    $file = new cbggg_Gdx2DPixmap;
    var$6 = var$5.length;
    var$2 = new cbggg_Gdx2DPixmapNative;
    var$2.$nativeData = cbggg_Gdx2DPixmapNative_loadNative$js_body$_26(otji_JS_wrap($bytes), 0, var$6);
    cbggg_Gdx2DPixmapNative_updateNativeData(var$2);
    $file.$nativePixmap0 = var$2;
    $this.$nativePixmap = $file;
},
cbgg_Pixmap__init_0 = var_0 => {
    let var_1 = new cbgg_Pixmap();
    cbgg_Pixmap__init_1(var_1, var_0);
    return var_1;
},
cbgg_Pixmap__init_2 = ($this, $width, $height, $format) => {
    let var$4, var$5;
    $this.$blending0 = cbgg_Pixmap$Blending_SourceOver;
    $this.$filter = cbgg_Pixmap$Filter_BiLinear;
    $this.$color5 = 0;
    var$4 = new cbggg_Gdx2DPixmap;
    var$5 = cbgg_Pixmap$Format_toGdx2DPixmapFormat($format);
    $format = cbggg_Gdx2DPixmapNative__init_0($width, $height, var$5);
    var$4.$nativePixmap0 = $format;
    $this.$nativePixmap = var$4;
    $this.$color5 = 0;
    Gdx.Gdx.prototype.g2d_clear($format.$basePtr, 0);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($format);
},
cbgg_Pixmap__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Pixmap();
    cbgg_Pixmap__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Pixmap_drawPixmap = ($this, $pixmap, $x, $y, $srcx, $srcy, $srcWidth, $srcHeight) => {
    let var$8;
    var$8 = $this.$nativePixmap;
    $pixmap = $pixmap.$nativePixmap;
    cbggg_Gdx2DPixmapNative_drawPixmap(var$8.$nativePixmap0, $pixmap.$nativePixmap0.$basePtr, $srcx, $srcy, $x, $y, $srcWidth, $srcHeight);
},
cbgg_Pixmap_getWidth = $this => {
    return $this.$nativePixmap.$nativePixmap0.$width10;
},
cbgg_Pixmap_getHeight = $this => {
    return $this.$nativePixmap.$nativePixmap0.$height10;
},
cbgg_Pixmap_dispose = $this => {
    let var$1;
    if ($this.$disposed0) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$1, $rt_s(734));
        $rt_throw(var$1);
    }
    cbggg_Gdx2DPixmapNative_dispose($this.$nativePixmap.$nativePixmap0);
    $this.$disposed0 = 1;
},
cbgg_Pixmap_getGLFormat = $this => {
    return cbggg_Gdx2DPixmap_getGLInternalFormat($this.$nativePixmap);
},
cbgg_Pixmap_getGLInternalFormat = $this => {
    return cbggg_Gdx2DPixmap_getGLInternalFormat($this.$nativePixmap);
},
cbgg_Pixmap_getGLType = $this => {
    return cbggg_Gdx2DPixmap_toGlType($this.$nativePixmap.$nativePixmap0.$format9);
},
cbgg_Pixmap_getPixels = $this => {
    return $this.$nativePixmap.$nativePixmap0.$buffer7;
},
cbgg_Pixmap_getFormat = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$nativePixmap.$nativePixmap0.$format9;
    if (var$1 == 1)
        var$2 = cbgg_Pixmap$Format_Alpha;
    else if (var$1 == 2)
        var$2 = cbgg_Pixmap$Format_LuminanceAlpha;
    else if (var$1 == 5)
        var$2 = cbgg_Pixmap$Format_RGB565;
    else if (var$1 == 6)
        var$2 = cbgg_Pixmap$Format_RGBA4444;
    else if (var$1 == 3)
        var$2 = cbgg_Pixmap$Format_RGB888;
    else {
        if (var$1 != 4) {
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(735));
            jl_AbstractStringBuilder_append1(var$3, var$1);
            jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
        }
        var$2 = cbgg_Pixmap$Format_RGBA8888;
    }
    return var$2;
},
cbgg_Pixmap_setBlending = ($this, $blending) => {
    let var$2, var$3;
    $this.$blending0 = $blending;
    var$2 = $this.$nativePixmap;
    var$3 = $blending !== cbgg_Pixmap$Blending_None ? 1 : 0;
    cbggg_Gdx2DPixmapNative_setBlend(var$2.$nativePixmap0, var$3);
};
function cbgu_TextFormatter() {
    let a = this; jl_Object.call(a);
    a.$messageFormat = null;
    a.$buffer0 = null;
}
let cbgu_TextFormatter_simpleFormat = ($this, $pattern, $args) => {
    let $changed, $placeholder, $patternLength, $i, var$7, $ch, var$9, var$10;
    cbgu_StringBuilder_setLength($this.$buffer0, 0);
    $changed = 0;
    $placeholder = (-1);
    $patternLength = $pattern.$nativeString.length;
    $i = 0;
    a: {
        while (true) {
            if ($i >= $patternLength) {
                if ($placeholder >= 0) {
                    var$7 = new jl_IllegalArgumentException;
                    jl_Exception__init_(var$7, $rt_s(736));
                    $rt_throw(var$7);
                }
                if ($changed)
                    $pattern = cbgu_StringBuilder_toString($this.$buffer0);
                return $pattern;
            }
            $ch = jl_String_charAt($pattern, $i);
            if ($placeholder < 0) {
                if ($ch != 123)
                    cbgu_StringBuilder_append0($this.$buffer0, $ch);
                else {
                    $changed = 1;
                    var$9 = $i + 1 | 0;
                    if (var$9 < $patternLength && jl_String_charAt($pattern, var$9) == 123) {
                        cbgu_StringBuilder_append0($this.$buffer0, $ch);
                        $i = var$9;
                    } else
                        $placeholder = 0;
                }
            } else if ($ch != 125) {
                if ($ch < 48)
                    break a;
                if ($ch > 57)
                    break a;
                $placeholder = ($placeholder * 10 | 0) + ($ch - 48 | 0) | 0;
            } else {
                var$10 = $args.data;
                if ($placeholder >= var$10.length) {
                    $pattern = new jl_IllegalArgumentException;
                    var$7 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$7);
                    jl_AbstractStringBuilder_append0(var$7, $rt_s(737));
                    jl_AbstractStringBuilder_append1(var$7, $placeholder);
                    jl_Exception__init_($pattern, jl_AbstractStringBuilder_toString(var$7));
                    $rt_throw($pattern);
                }
                if (jl_String_charAt($pattern, $i - 1 | 0) == 123)
                    break;
                if (var$10[$placeholder] === null)
                    cbgu_StringBuilder_append00($this.$buffer0, $rt_s(38));
                else
                    cbgu_StringBuilder_append00($this.$buffer0, var$10[$placeholder].$toString());
                $placeholder = (-1);
            }
            $i = $i + 1 | 0;
        }
        $pattern = new jl_IllegalArgumentException;
        jl_Exception__init_($pattern, $rt_s(738));
        $rt_throw($pattern);
    }
    $pattern = new jl_IllegalArgumentException;
    var$7 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$7);
    jl_AbstractStringBuilder_append0(var$7, $rt_s(739));
    jl_AbstractStringBuilder_append2(var$7, $ch);
    jl_AbstractStringBuilder_append0(var$7, $rt_s(740));
    jl_Exception__init_($pattern, jl_AbstractStringBuilder_toString(var$7));
    $rt_throw($pattern);
};
function cbgu_StringBuilder() {
    let a = this; jl_Object.call(a);
    a.$chars = null;
    a.$length3 = 0;
}
let cbgu_StringBuilder_digits = null,
cbgu_StringBuilder__init_ = $this => {
    $this.$chars = $rt_createCharArray(16);
},
cbgu_StringBuilder__init_2 = () => {
    let var_0 = new cbgu_StringBuilder();
    cbgu_StringBuilder__init_(var_0);
    return var_0;
},
cbgu_StringBuilder__init_1 = ($this, $capacity) => {
    let var$2;
    if ($capacity >= 0) {
        $this.$chars = $rt_createCharArray($capacity);
        return;
    }
    var$2 = new jl_NegativeArraySizeException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
cbgu_StringBuilder__init_0 = var_0 => {
    let var_1 = new cbgu_StringBuilder();
    cbgu_StringBuilder__init_1(var_1, var_0);
    return var_1;
},
cbgu_StringBuilder_enlargeBuffer = ($this, $min) => {
    let var$2, var$3, $newSize, $newData;
    var$2 = $this.$chars;
    var$3 = var$2.data.length;
    $newSize = ((var$3 >> 1) + var$3 | 0) + 2 | 0;
    if ($min > $newSize)
        $newSize = $min;
    $newData = $rt_createCharArray($newSize);
    jl_System_fastArraycopy(var$2, 0, $newData, 0, $this.$length3);
    $this.$chars = $newData;
},
cbgu_StringBuilder_appendNull = $this => {
    let $newSize, var$2, var$3;
    $newSize = $this.$length3 + 4 | 0;
    if ($newSize > $this.$chars.data.length)
        cbgu_StringBuilder_enlargeBuffer($this, $newSize);
    var$2 = $this.$chars.data;
    var$3 = $this.$length3;
    $newSize = var$3 + 1 | 0;
    $this.$length3 = $newSize;
    var$2[var$3] = 110;
    var$3 = $newSize + 1 | 0;
    $this.$length3 = var$3;
    var$2[$newSize] = 117;
    $newSize = var$3 + 1 | 0;
    $this.$length3 = $newSize;
    var$2[var$3] = 108;
    $this.$length3 = $newSize + 1 | 0;
    var$2[$newSize] = 108;
},
cbgu_StringBuilder_append0 = ($this, $ch) => {
    let var$2, var$3, var$4;
    var$2 = $this.$length3;
    if (var$2 == $this.$chars.data.length)
        cbgu_StringBuilder_enlargeBuffer($this, var$2 + 1 | 0);
    var$3 = $this.$chars.data;
    var$4 = $this.$length3;
    $this.$length3 = var$4 + 1 | 0;
    var$3[var$4] = $ch;
},
cbgu_StringBuilder_append00 = ($this, $string) => {
    let $adding, $newSize;
    if ($string === null) {
        cbgu_StringBuilder_appendNull($this);
        return;
    }
    $adding = $string.$nativeString.length;
    $newSize = $this.$length3 + $adding | 0;
    if ($newSize > $this.$chars.data.length)
        cbgu_StringBuilder_enlargeBuffer($this, $newSize);
    jl_String_getChars($string, 0, $adding, $this.$chars, $this.$length3);
    $this.$length3 = $newSize;
},
cbgu_StringBuilder_setLength = ($this, $newLength) => {
    let var$2, var$3, var$4, var$5;
    if ($newLength < 0) {
        var$2 = new jl_StringIndexOutOfBoundsException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(741));
        jl_AbstractStringBuilder_append1(var$3, $newLength);
        jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    var$4 = $this.$chars;
    if ($newLength > var$4.data.length)
        cbgu_StringBuilder_enlargeBuffer($this, $newLength);
    else {
        var$5 = $this.$length3;
        if (var$5 < $newLength)
            ju_Arrays_fill2(var$4, var$5, $newLength, 0);
    }
    $this.$length3 = $newLength;
},
cbgu_StringBuilder_toString = $this => {
    let var$1;
    var$1 = $this.$length3;
    if (!var$1)
        return $rt_s(9);
    return jl_String__init_($this.$chars, 0, var$1);
},
cbgu_StringBuilder_append = ($this, $value) => {
    return cbgu_StringBuilder_append2($this, $value, 0, 48);
},
cbgu_StringBuilder_append2 = ($this, $value, $minLength, $prefix) => {
    let var$4, var$5, $j;
    if ($value == (-2147483648)) {
        cbgu_StringBuilder_append00($this, $rt_s(742));
        return $this;
    }
    if ($value < 0) {
        cbgu_StringBuilder_append0($this, 45);
        $value =  -$value | 0;
    }
    a: {
        if ($minLength > 1) {
            var$4 = $value >= 0 ? 1 : 2;
            var$5 = $value;
            while (true) {
                var$5 = var$5 / 10 | 0;
                if (!var$5)
                    break;
                var$4 = var$4 + 1 | 0;
            }
            $j = $minLength - var$4 | 0;
            while (true) {
                if ($j <= 0)
                    break a;
                cbgu_StringBuilder_append0($this, $prefix);
                $j = $j + (-1) | 0;
            }
        }
    }
    if ($value >= 10000) {
        if ($value >= 1000000000)
            cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[Long_lo(Long_div(Long_rem(Long_fromInt($value), Long_create(1410065408, 2)), Long_fromInt(1000000000)))]);
        if ($value >= 100000000)
            cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 1000000000 | 0) / 100000000 | 0]);
        if ($value >= 10000000)
            cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 100000000 | 0) / 10000000 | 0]);
        if ($value >= 1000000)
            cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 10000000 | 0) / 1000000 | 0]);
        if ($value >= 100000)
            cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 1000000 | 0) / 100000 | 0]);
        cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 100000 | 0) / 10000 | 0]);
    }
    if ($value >= 1000)
        cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 10000 | 0) / 1000 | 0]);
    if ($value >= 100)
        cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 1000 | 0) / 100 | 0]);
    if ($value >= 10)
        cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[($value % 100 | 0) / 10 | 0]);
    cbgu_StringBuilder_append0($this, cbgu_StringBuilder_digits.data[$value % 10 | 0]);
    return $this;
},
cbgu_StringBuilder_append1 = ($this, $obj) => {
    if ($obj === null)
        cbgu_StringBuilder_appendNull($this);
    else
        cbgu_StringBuilder_append00($this, $obj.$toString());
    return $this;
},
cbgu_StringBuilder__clinit_ = () => {
    cbgu_StringBuilder_digits = $rt_createCharArrayFromData([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);
},
cbgg_Pixmap$Blending = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Blending_None = null,
cbgg_Pixmap$Blending_SourceOver = null,
cbgg_Pixmap$Blending_$VALUES = null,
cbgg_Pixmap$Blending_values = () => {
    return cbgg_Pixmap$Blending_$VALUES.$clone0();
},
cbgg_Pixmap$Blending__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Blending;
    jl_Enum__init_(var$1, $rt_s(495), 0);
    cbgg_Pixmap$Blending_None = var$1;
    var$1 = new cbgg_Pixmap$Blending;
    jl_Enum__init_(var$1, $rt_s(743), 1);
    cbgg_Pixmap$Blending_SourceOver = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Blending, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Blending_None;
    var$3[1] = var$1;
    cbgg_Pixmap$Blending_$VALUES = var$2;
},
cbgg_Pixmap$Filter = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Filter_NearestNeighbour = null,
cbgg_Pixmap$Filter_BiLinear = null,
cbgg_Pixmap$Filter_$VALUES = null,
cbgg_Pixmap$Filter_values = () => {
    return cbgg_Pixmap$Filter_$VALUES.$clone0();
},
cbgg_Pixmap$Filter__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Filter;
    jl_Enum__init_(var$1, $rt_s(744), 0);
    cbgg_Pixmap$Filter_NearestNeighbour = var$1;
    var$1 = new cbgg_Pixmap$Filter;
    jl_Enum__init_(var$1, $rt_s(745), 1);
    cbgg_Pixmap$Filter_BiLinear = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Filter, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Filter_NearestNeighbour;
    var$3[1] = var$1;
    cbgg_Pixmap$Filter_$VALUES = var$2;
};
function cbggg_Gdx2DPixmap() {
    jl_Object.call(this);
    this.$nativePixmap0 = null;
}
let cbggg_Gdx2DPixmap_toGlFormat = $format => {
    let var$2, var$3;
    switch ($format) {
        case 1:
            break;
        case 2:
            return 6410;
        case 3:
        case 5:
            return 6407;
        case 4:
        case 6:
            return 6408;
        default:
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(746));
            jl_AbstractStringBuilder_append1(var$3, $format);
            jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
    }
    return 6406;
},
cbggg_Gdx2DPixmap_toGlType = $format => {
    let var$2, var$3;
    switch ($format) {
        case 1:
        case 2:
        case 3:
        case 4:
            break;
        case 5:
            return 33635;
        case 6:
            return 32819;
        default:
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(746));
            jl_AbstractStringBuilder_append1(var$3, $format);
            jl_Exception__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
    }
    return 5121;
},
cbggg_Gdx2DPixmap_getGLInternalFormat = $this => {
    return cbggg_Gdx2DPixmap_toGlFormat($this.$nativePixmap0.$format9);
},
jt_Format = $rt_classWithoutFields(),
jt_Format_format = ($this, $object) => {
    let var$2;
    var$2 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString($this.$format1($object, var$2, jt_FieldPosition__init_(0)));
},
jt_Format_formatToCharacterIterator = ($this, $object) => {
    let var$2;
    var$2 = new jt_AttributedString;
    $object = jt_Format_format($this, $object);
    if ($object === null) {
        $object = new jl_NullPointerException;
        jl_Throwable__init_($object);
        $rt_throw($object);
    }
    var$2.$text0 = $object;
    var$2.$attributeMap = ju_HashMap__init_0(11);
    $object = new jt_AttributedString$AttributedIterator;
    $object.$attrString = var$2;
    $object.$begin0 = 0;
    $object.$end2 = var$2.$text0.$nativeString.length;
    $object.$offset = 0;
    return $object;
},
jt_Format_upTo = ($string, $position, $buffer, $stop) => {
    let $index, $length, $lastQuote, $quote, var$9, $ch;
    $index = $position.$currentPosition;
    $length = $string.$nativeString.length;
    $lastQuote = 0;
    $quote = 0;
    while ($index < $length) {
        var$9 = $index + 1 | 0;
        $ch = jl_String_charAt($string, $index);
        if ($ch != 39) {
            if ($ch == $stop && !$quote) {
                $position.$currentPosition = var$9;
                return 1;
            }
            $lastQuote = 0;
            jl_AbstractStringBuilder_append2($buffer, $ch);
        } else {
            if ($lastQuote)
                jl_AbstractStringBuilder_append2($buffer, 39);
            $quote = $quote ? 0 : 1;
            $lastQuote = 1;
        }
        $index = var$9;
    }
    $position.$currentPosition = $index;
    return 0;
},
jt_Format_upToWithQuotes = ($string, $position, $buffer, $stop, $start) => {
    let $index, $length, $count, $quote, var$10, $ch;
    $index = $position.$currentPosition;
    $length = $string.$nativeString.length;
    $count = 1;
    $quote = 0;
    while (true) {
        if ($index >= $length) {
            $position = new jl_IllegalArgumentException;
            jl_Exception__init_($position, $rt_s(747));
            $rt_throw($position);
        }
        var$10 = $index + 1 | 0;
        $ch = jl_String_charAt($string, $index);
        if ($ch == 39)
            $quote = $quote ? 0 : 1;
        if (!$quote) {
            if ($ch == $stop)
                $count = $count + (-1) | 0;
            if (!$count)
                break;
            if ($ch == $start)
                $count = $count + 1 | 0;
        }
        jl_AbstractStringBuilder_append2($buffer, $ch);
        $index = var$10;
    }
    $position.$currentPosition = var$10;
    return 1;
};
function jt_MessageFormat() {
    let a = this; jt_Format.call(a);
    a.$locale = null;
    a.$strings = null;
    a.$argumentNumbers = null;
    a.$formats = null;
    a.$maxOffset = 0;
    a.$maxArgumentIndex = 0;
}
let jt_MessageFormat_applyPattern = ($this, $template) => {
    let $length, $buffer, $position, $localStrings, $argCount, $args, $maxArg, $localFormats, $i, $arg, $offset, var$13, $ch, $newArgs, var$16;
    $length = $template.$nativeString.length;
    $buffer = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_($buffer);
    $position = jt_ParsePosition__init_(0);
    $localStrings = ju_ArrayList__init_();
    $argCount = 0;
    $args = $rt_createIntArray(10);
    $maxArg = (-1);
    $localFormats = ju_ArrayList__init_();
    $localStrings = $localStrings;
    a: {
        b: {
            while (true) {
                if ($position.$currentPosition >= $length) {
                    $this.$strings = $rt_createArray(jl_String, $localStrings.$size3);
                    $i = 0;
                    while ($i < $localStrings.$size3) {
                        $this.$strings.data[$i] = ju_ArrayList_get($localStrings, $i);
                        $i = $i + 1 | 0;
                    }
                    $this.$argumentNumbers = $args;
                    $this.$formats = $rt_createArray(jt_Format, $argCount);
                    $i = 0;
                    $buffer = $localFormats;
                    while ($i < $argCount) {
                        $this.$formats.data[$i] = ju_ArrayList_get($buffer, $i);
                        $i = $i + 1 | 0;
                    }
                    $this.$maxOffset = $argCount - 1 | 0;
                    $this.$maxArgumentIndex = $maxArg;
                    return;
                }
                if (jt_Format_upTo($template, $position, $buffer, 123)) {
                    $arg = 0;
                    $offset = $position.$currentPosition;
                    if ($offset >= $length)
                        break;
                    c: {
                        while (true) {
                            var$13 = $offset + 1 | 0;
                            $ch = jl_String_charAt($template, $offset);
                            if ($ch == 125)
                                break c;
                            if ($ch == 44)
                                break;
                            if ($ch < 48)
                                break a;
                            if ($ch > 57)
                                break a;
                            $arg = ($arg * 10 | 0) + ($ch - 48 | 0) | 0;
                            if ($arg < 0)
                                break b;
                            if (var$13 >= $length)
                                break b;
                            $offset = var$13;
                        }
                    }
                    $newArgs = $args.data;
                    $position.$currentPosition = var$13 + (-1) | 0;
                    var$16 = jt_MessageFormat_parseVariable($this, $template, $position);
                    ju_ArrayList_add($localFormats, var$16);
                    $i = $newArgs.length;
                    if ($argCount < $i)
                        $newArgs = $args;
                    else {
                        $newArgs = $rt_createIntArray($i * 2 | 0);
                        jl_System_fastArraycopy($args, 0, $newArgs, 0, $i);
                    }
                    $args = $newArgs.data;
                    $i = $argCount + 1 | 0;
                    $args[$argCount] = $arg;
                    if ($arg <= $maxArg) {
                        $args = $newArgs;
                        $argCount = $i;
                    } else {
                        $args = $newArgs;
                        $argCount = $i;
                        $maxArg = $arg;
                    }
                }
                ju_ArrayList_add($localStrings, jl_AbstractStringBuilder_toString($buffer));
                $buffer.$length1 = 0;
            }
            $template = new jl_IllegalArgumentException;
            jl_Exception__init_($template, $rt_s(748));
            $rt_throw($template);
        }
        $template = new jl_IllegalArgumentException;
        jl_Exception__init_($template, $rt_s(748));
        $rt_throw($template);
    }
    $template = new jl_IllegalArgumentException;
    jl_Exception__init_($template, $rt_s(748));
    $rt_throw($template);
},
jt_MessageFormat_format = ($this, $objects, $buffer, $field) => {
    return jt_MessageFormat_formatImpl($this, $objects, $buffer, $field, null);
},
jt_MessageFormat_formatImpl = ($this, $objects, $buffer, $position, $fields) => {
    let $passedField, $i, var$7, var$8, var$9, var$10, $arg, $format, var$13, var$14, $mf, var$16, $result, var$18, var$19;
    $passedField = jt_FieldPosition__init_(0);
    $i = 0;
    while (true) {
        var$7 = $this.$maxOffset;
        if ($i > var$7)
            break;
        a: {
            jl_AbstractStringBuilder_append0($buffer, $this.$strings.data[$i]);
            var$8 = $buffer.$length1;
            if ($objects !== null) {
                var$9 = $objects.data;
                var$10 = $this.$argumentNumbers.data;
                if (var$10[$i] < var$9.length) {
                    $arg = var$9[var$10[$i]];
                    $format = $this.$formats.data[$i];
                    if (!($format !== null && $arg !== null)) {
                        if ($arg instanceof jl_Number)
                            $format = jt_NumberFormat_getInstance();
                        else {
                            if (!($arg instanceof ju_Date)) {
                                jl_AbstractStringBuilder_append($buffer, $arg);
                                jt_MessageFormat_handleArgumentField($this, var$8, $buffer.$length1, $this.$argumentNumbers.data[$i], $position, $fields);
                                break a;
                            }
                            var$13 = ju_Locale_getDefault();
                            var$14 = jl_Math_max(3, 3);
                            $mf = var$13.$languageCode;
                            var$16 = var$13.$countryCode;
                            if (otciu_CLDRHelper_$$metadata$$16 === null)
                                otciu_CLDRHelper_$$metadata$$16 = otciu_CLDRHelper_getDateTimeFormatMap$$create();
                            b: {
                                $result = otciu_CLDRHelper_resolveDateFormats(otciu_CLDRHelper_$$metadata$$16, $mf, var$16);
                                switch (var$14) {
                                    case 0:
                                        break;
                                    case 1:
                                        $format = ($result.longFormat !== null ? $rt_str($result.longFormat) : null);
                                        break b;
                                    case 2:
                                        $format = ($result.mediumFormat !== null ? $rt_str($result.mediumFormat) : null);
                                        break b;
                                    case 3:
                                        $format = ($result.shortFormat !== null ? $rt_str($result.shortFormat) : null);
                                        break b;
                                    default:
                                        $buffer = new jl_IllegalArgumentException;
                                        $position = new jl_StringBuilder;
                                        jl_AbstractStringBuilder__init_($position);
                                        jl_AbstractStringBuilder_append($position, $rt_s(749));
                                        jl_AbstractStringBuilder_append1($position, var$14);
                                        jl_Exception__init_($buffer, jl_AbstractStringBuilder_toString($position));
                                        $rt_throw($buffer);
                                }
                                $format = ($result.fullFormat !== null ? $rt_str($result.fullFormat) : null);
                            }
                            $format = jt_SimpleDateFormat__init_(jl_String_replace(jl_String_replace($format, $rt_s(750), jt_DateFormat_getTimeFormatString(3, var$13)), $rt_s(751), jt_DateFormat_getDateFormatString(3, var$13)), var$13);
                        }
                    }
                    if (!($format instanceof jt_ChoiceFormat)) {
                        $format.$format1($arg, $buffer, $passedField);
                        jt_MessageFormat_handleArgumentField($this, var$8, $buffer.$length1, $this.$argumentNumbers.data[$i], $position, $fields);
                        jt_MessageFormat_handleformat($this, $format, $arg, var$8, $fields);
                        break a;
                    }
                    $result = jt_Format_format($format, $arg);
                    $mf = new jt_MessageFormat;
                    $mf.$locale = ju_Locale_getDefault();
                    jt_MessageFormat_applyPattern($mf, $result);
                    var$18 = $this.$locale;
                    $mf.$locale = var$18;
                    var$19 = 0;
                    while (var$19 <= $mf.$maxOffset) {
                        var$10 = $mf.$formats.data;
                        var$13 = var$10[var$19];
                        if (var$13 instanceof jt_DecimalFormat)
                            var$10[var$19] = jt_DecimalFormat__init_(var$13.$pattern4, jt_DecimalFormatSymbols__init_(var$18));
                        else if (var$13 instanceof jt_SimpleDateFormat)
                            var$10[var$19] = jt_SimpleDateFormat__init_(var$13.$pattern2, var$18);
                        var$19 = var$19 + 1 | 0;
                    }
                    jt_MessageFormat_format($mf, $objects, $buffer, $passedField);
                    jt_MessageFormat_handleArgumentField($this, var$8, $buffer.$length1, $this.$argumentNumbers.data[$i], $position, $fields);
                    jt_MessageFormat_handleformat($this, $format, $arg, var$8, $fields);
                    break a;
                }
            }
            jl_AbstractStringBuilder_append2($buffer, 123);
            jl_AbstractStringBuilder_append1($buffer, $this.$argumentNumbers.data[$i]);
            jl_AbstractStringBuilder_append2($buffer, 125);
            jt_MessageFormat_handleArgumentField($this, var$8, $buffer.$length1, $this.$argumentNumbers.data[$i], $position, $fields);
        }
        $i = $i + 1 | 0;
    }
    var$7 = var$7 + 1 | 0;
    $objects = $this.$strings.data;
    if (var$7 < $objects.length)
        jl_AbstractStringBuilder_append0($buffer, $objects[var$7]);
    return $buffer;
},
jt_MessageFormat_handleArgumentField = ($this, $begin, $end, $argnumber, $position, $fields) => {
    if ($fields !== null)
        $fields.$add2(jt_MessageFormat$FieldContainer__init_($begin, $end, jt_MessageFormat$Field_ARGUMENT, jl_Integer_valueOf($argnumber)));
    else if ($position !== null && $position.$myAttribute === jt_MessageFormat$Field_ARGUMENT && !$position.$endIndex) {
        $position.$beginIndex = $begin;
        $position.$endIndex = $end;
    }
},
jt_MessageFormat_handleformat = ($this, $format, $arg, $begin, $fields) => {
    let var$5, $iter, $iterator, $attribute, var$9, var$10, var$11, var$12, var$13, var$14, $value;
    a: {
        b: {
            if ($fields !== null) {
                $arg = jt_Format_formatToCharacterIterator($format, $arg);
                while (true) {
                    if ($arg.$offset == $arg.$end2)
                        break b;
                    $format = jt_AttributedString$AttributedIterator_getAllAttributeKeys($arg);
                    var$5 = $arg.$begin0;
                    $format = $format.$iterator0();
                    $iter = $format;
                    $iterator = $format;
                    while (ju_HashMap$AbstractMapIterator_hasNext($iter)) {
                        $format = ju_HashMap$KeyIterator_next($iterator);
                        $attribute = $arg.$attributesAllowed;
                        if ($attribute !== null && !$attribute.$contains2($format))
                            var$9 = $arg.$begin0;
                        else {
                            $format = ju_HashMap_get($arg.$attrString.$attributeMap, $format);
                            if ($format === null)
                                var$9 = $arg.$begin0;
                            else {
                                var$9 = $arg.$begin0;
                                $format = $format.$iterator0();
                                c: {
                                    d: {
                                        while (true) {
                                            if (!$format.$hasNext())
                                                break d;
                                            $attribute = $format.$next();
                                            var$10 = $attribute.$start1;
                                            if (var$10 >= $arg.$end2)
                                                break d;
                                            var$11 = $arg.$offset;
                                            var$10 = $rt_compare(var$11, var$10);
                                            if (var$10 >= 0 && var$11 < $attribute.$end3) {
                                                if (jt_AttributedString$AttributedIterator_inRange($arg, $attribute))
                                                    var$9 = $attribute.$start1;
                                                break c;
                                            }
                                            if (var$10 < 0)
                                                break;
                                            var$9 = $attribute.$end3;
                                        }
                                    }
                                }
                            }
                        }
                        if (var$9 > var$5)
                            var$5 = var$9;
                    }
                    $format = jt_AttributedString$AttributedIterator_getAllAttributeKeys($arg);
                    var$10 = $arg.$end2;
                    $format = $format.$iterator0();
                    $iter = $format;
                    $iterator = $format;
                    while (ju_HashMap$AbstractMapIterator_hasNext($iter)) {
                        $format = ju_HashMap$KeyIterator_next($iterator);
                        $attribute = $arg.$attributesAllowed;
                        if ($attribute !== null && !$attribute.$contains2($format))
                            var$9 = $arg.$end2;
                        else {
                            $format = ju_HashMap_get($arg.$attrString.$attributeMap, $format);
                            if ($format === null)
                                var$9 = $arg.$end2;
                            else {
                                var$9 = $arg.$end2;
                                $format = $format.$listIterator($format.$size());
                                e: {
                                    f: {
                                        while (true) {
                                            if (!$format.$hasPrevious())
                                                break f;
                                            $attribute = $format.$previous();
                                            var$11 = $attribute.$end3;
                                            if (var$11 <= $arg.$begin0)
                                                break f;
                                            var$12 = $arg.$offset;
                                            var$13 = $attribute.$start1;
                                            if (var$12 >= var$13 && var$12 < var$11) {
                                                if (jt_AttributedString$AttributedIterator_inRange($arg, $attribute))
                                                    var$9 = $attribute.$end3;
                                                break e;
                                            }
                                            if (var$12 >= var$11)
                                                break;
                                            var$9 = var$13;
                                        }
                                    }
                                }
                            }
                        }
                        if (var$9 < var$10)
                            var$10 = var$9;
                    }
                    $format = ju_HashMap__init_0((($arg.$attrString.$attributeMap.$elementCount * 4 | 0) / 3 | 0) + 1 | 0);
                    $iterator = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($arg.$attrString.$attributeMap));
                    $iter = $iterator;
                    $attribute = $iterator;
                    var$14 = $format;
                    while (ju_HashMap$AbstractMapIterator_hasNext($iter)) {
                        $format = ju_HashMap$EntryIterator_next($attribute);
                        $iterator = $arg.$attributesAllowed;
                        if (!($iterator !== null && !$iterator.$contains2($format.$key))) {
                            $iterator = $format;
                            $format = jt_AttributedString$AttributedIterator_currentValue($arg, $iterator.$value);
                            if ($format !== null)
                                ju_HashMap_put(var$14, $iterator.$key, $format);
                        }
                    }
                    $iter = ju_HashMap$1_iterator(ju_HashMap_keySet(var$14));
                    var$14 = $iter;
                    $iterator = $iter;
                    var$11 = $begin + var$5 | 0;
                    var$5 = $begin + var$10 | 0;
                    while (ju_HashMap$AbstractMapIterator_hasNext(var$14)) {
                        $attribute = ju_HashMap$KeyIterator_next($iterator);
                        $format = $arg.$attributesAllowed;
                        if ($format !== null && !$format.$contains2($attribute))
                            $value = null;
                        else {
                            $format = ju_HashMap_get($arg.$attrString.$attributeMap, $attribute);
                            $value = $format !== null ? jt_AttributedString$AttributedIterator_currentValue($arg, $format) : null;
                        }
                        $fields.$add2(jt_MessageFormat$FieldContainer__init_(var$11, var$5, $attribute, $value));
                    }
                    if (var$10 < $arg.$begin0)
                        break a;
                    var$9 = $rt_compare(var$10, $arg.$end2);
                    if (var$9 > 0)
                        break a;
                    $arg.$offset = var$10;
                    if (var$9)
                        jl_String_charAt($arg.$attrString.$text0, var$10);
                }
            }
        }
        return;
    }
    $format = new jl_IllegalArgumentException;
    jl_Throwable__init_($format);
    $rt_throw($format);
},
jt_MessageFormat_format0 = ($this, $object, $buffer, $field) => {
    return jt_MessageFormat_format($this, $object, $buffer, $field);
},
jt_MessageFormat_match = ($this, $string, $position, $last, $tokens) => {
    let $length, $offset, $i, var$8, $ch, var$10, var$11, var$12, var$13, var$14, $token;
    $length = $string.$nativeString.length;
    $offset = $position.$currentPosition;
    while ($offset < $length && jl_Character_isWhitespace(jl_String_charAt($string, $offset))) {
        $offset = $offset + 1 | 0;
    }
    $tokens = $tokens.data;
    $i = $tokens.length;
    a: {
        while (true) {
            $i = $i + (-1) | 0;
            if ($i < 0) {
                $i = (-1);
                break a;
            }
            b: {
                var$8 = $tokens[$i];
                $ch = 0;
                var$10 = $tokens[$i].$nativeString.length;
                if ($offset >= 0 && ($offset + var$10 | 0) <= $string.$nativeString.length && ($ch + var$10 | 0) <= var$8.$nativeString.length) {
                    var$11 = 0;
                    var$12 = $offset;
                    while (var$11 < var$10) {
                        var$13 = var$12 + 1 | 0;
                        var$12 = jl_String_charAt($string, var$12);
                        var$14 = $ch + 1 | 0;
                        $ch = jl_String_charAt(var$8, $ch);
                        if (jl_Character_toLowerCase(var$12) != jl_Character_toLowerCase($ch)) {
                            $ch = 0;
                            break b;
                        }
                        var$11 = var$11 + 1 | 0;
                        var$12 = var$13;
                        $ch = var$14;
                    }
                    $ch = 1;
                } else
                    $ch = 0;
            }
            if ($ch)
                break;
        }
    }
    if ($i == (-1))
        return (-1);
    var$13 = $offset + $tokens[$i].$nativeString.length | 0;
    while (true) {
        $token = $rt_compare(var$13, $length);
        if ($token >= 0)
            break;
        if (!jl_Character_isWhitespace(jl_String_charAt($string, var$13)))
            break;
        var$13 = var$13 + 1 | 0;
    }
    c: {
        if ($token < 0) {
            $ch = jl_String_charAt($string, var$13);
            if ($ch == 125)
                break c;
            if (!$last && $ch == 44)
                break c;
        }
        return (-1);
    }
    $position.$currentPosition = var$13 + 1 | 0;
    return $i;
},
jt_MessageFormat_parseVariable = ($this, $string, $position) => {
    let $length, $offset, $type, $ch, $dateStyle, $buffer, $numberStyle, var$10, var$11, $$je;
    $length = $string.$nativeString.length;
    $offset = $position.$currentPosition;
    if ($offset >= $length) {
        $string = new jl_IllegalArgumentException;
        jl_Exception__init_($string, $rt_s(752));
        $rt_throw($string);
    }
    $type = $offset + 1 | 0;
    $ch = jl_String_charAt($string, $offset);
    $dateStyle = $rt_compare($ch, 125);
    if ($dateStyle && $ch != 44) {
        $string = new jl_IllegalArgumentException;
        jl_Exception__init_($string, $rt_s(752));
        $rt_throw($string);
    }
    $position.$currentPosition = $type;
    if (!$dateStyle)
        return null;
    $type = jt_MessageFormat_match($this, $string, $position, 0, $rt_wrapArray(jl_String, [$rt_s(753), $rt_s(754), $rt_s(100), $rt_s(755)]));
    if ($type == (-1)) {
        $string = new jl_IllegalArgumentException;
        jl_Exception__init_($string, $rt_s(756));
        $rt_throw($string);
    }
    $buffer = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_($buffer);
    $ch = jl_String_charAt($string, $position.$currentPosition - 1 | 0);
    switch ($type) {
        case 0:
        case 1:
            if ($ch == 125)
                return $type != 1 ? jt_DateFormat_getTimeInstance(2, $this.$locale) : jt_DateFormat_getDateInstance(2, $this.$locale);
            $dateStyle = jt_MessageFormat_match($this, $string, $position, 1, $rt_wrapArray(jl_String, [$rt_s(757), $rt_s(758), $rt_s(759), $rt_s(760)]));
            if ($dateStyle == (-1)) {
                jt_Format_upToWithQuotes($string, $position, $buffer, 125, 123);
                return jt_SimpleDateFormat__init_(jl_AbstractStringBuilder_toString($buffer), $this.$locale);
            }
            a: {
                switch ($dateStyle) {
                    case 0:
                        $dateStyle = 0;
                        break a;
                    case 1:
                        $dateStyle = 1;
                        break a;
                    case 2:
                        $dateStyle = 2;
                        break a;
                    case 3:
                        $dateStyle = 3;
                        break a;
                    default:
                }
            }
            return $type != 1 ? jt_DateFormat_getTimeInstance($dateStyle, $this.$locale) : jt_DateFormat_getDateInstance($dateStyle, $this.$locale);
        case 2:
            if ($ch == 125)
                return jt_NumberFormat_getInstance();
            $numberStyle = jt_MessageFormat_match($this, $string, $position, 1, $rt_wrapArray(jl_String, [$rt_s(761), $rt_s(762), $rt_s(763)]));
            if ($numberStyle == (-1)) {
                jt_Format_upToWithQuotes($string, $position, $buffer, 125, 123);
                return jt_DecimalFormat__init_(jl_AbstractStringBuilder_toString($buffer), jt_DecimalFormatSymbols__init_($this.$locale));
            }
            switch ($numberStyle) {
                case 0:
                    $string = $this.$locale;
                    var$10 = $string.$languageCode;
                    var$11 = $string.$countryCode;
                    if (otciu_CLDRHelper_$$metadata$$19 === null)
                        otciu_CLDRHelper_$$metadata$$19 = otciu_CLDRHelper_getCurrencyFormatMap$$create();
                    return jt_DecimalFormat__init_(otciu_CLDRHelper_resolveFormatSymbols(otciu_CLDRHelper_$$metadata$$19, var$10, var$11), jt_DecimalFormatSymbols__init_($string));
                case 1:
                    $string = $this.$locale;
                    var$10 = $string.$languageCode;
                    var$11 = $string.$countryCode;
                    if (otciu_CLDRHelper_$$metadata$$18 === null)
                        otciu_CLDRHelper_$$metadata$$18 = otciu_CLDRHelper_getPercentFormatMap$$create();
                    return jt_DecimalFormat__init_(otciu_CLDRHelper_resolveFormatSymbols(otciu_CLDRHelper_$$metadata$$18, var$10, var$11), jt_DecimalFormatSymbols__init_($string));
                default:
            }
            $string = $this.$locale;
            var$11 = jt_DecimalFormat__init_(otciu_CLDRHelper_resolveNumberFormat($string.$languageCode, $string.$countryCode), jt_DecimalFormatSymbols__init_($string));
            $string = var$11;
            $string.$parseIntegerOnly = 1;
            jt_NumberFormat_setMinimumFractionDigits($string, 0);
            jt_NumberFormat_setMaximumFractionDigits($string, 0);
            var$11.$decimalSeparatorAlwaysShown = 0;
            return var$11;
        default:
    }
    b: {
        try {
            jt_Format_upToWithQuotes($string, $position, $buffer, 125, 123);
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_IllegalArgumentException) {
            } else {
                throw $$e;
            }
        }
    }
    $string = new jt_ChoiceFormat;
    $position = jl_AbstractStringBuilder_toString($buffer);
    jt_NumberFormat__init_($string);
    jt_ChoiceFormat_applyPattern($string, $position);
    return $string;
},
ji_InputStream = $rt_classWithoutFields();
function cbggg_Gdx2DPixmapNative() {
    let a = this; jl_Object.call(a);
    a.$basePtr = 0;
    a.$width10 = 0;
    a.$height10 = 0;
    a.$format9 = 0;
    a.$heapStartIndex = 0;
    a.$heapEndIndex = 0;
    a.$nativeData = null;
    a.$buffer7 = null;
}
let cbggg_Gdx2DPixmapNative__init_ = ($this, $width, $height, $format) => {
    $this.$nativeData = cbggg_Gdx2DPixmapNative_newPixmapNative$js_body$_27($width, $height, $format);
    cbggg_Gdx2DPixmapNative_updateNativeData($this);
},
cbggg_Gdx2DPixmapNative__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_Gdx2DPixmapNative();
    cbggg_Gdx2DPixmapNative__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_Gdx2DPixmapNative_updateNativeData = $this => {
    $this.$basePtr = $this.$nativeData[0];
    $this.$width10 = $this.$nativeData[1];
    $this.$height10 = $this.$nativeData[2];
    $this.$format9 = $this.$nativeData[3];
    $this.$heapStartIndex = $this.$nativeData[4];
    $this.$heapEndIndex = $this.$nativeData[5];
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_copyHeapToBuffer = $this => {
    let var$1, $heapData;
    var$1 = $this.$heapStartIndex;
    $heapData = !var$1 && !$this.$heapEndIndex ? null : cbggg_Gdx2DPixmapNative_getHeapDataNative$js_body$_25(!!0, var$1, $this.$heapEndIndex);
    if ($this.$buffer7 === null)
        $this.$buffer7 = jn_ByteBuffer_allocateDirect($heapData.length);
    (jn_JSBufferHelper_toInt8Array(jn_JSBufferHelper_getArrayBufferView($this.$buffer7))).set($heapData);
},
cbggg_Gdx2DPixmapNative_dispose = $this => {
    let var$1;
    Gdx.Gdx.prototype.g2d_free($this.$basePtr);
    var$1 = $this.$buffer7;
    if (var$1 !== null) {
        otcin_Buffers_free(var$1);
        $this.$buffer7 = null;
    }
    $this.$nativeData = null;
},
cbggg_Gdx2DPixmapNative_drawPixmap = ($this, $basePtr, $srcX, $srcY, $dstX, $dstY, $width, $height) => {
    let var$8;
    var$8 = $this.$basePtr;
    Gdx.Gdx.prototype.g2d_draw_pixmap($basePtr, var$8, $srcX, $srcY, $width, $height, $dstX, $dstY, $width, $height);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_setBlend = ($this, $blend) => {
    Gdx.Gdx.prototype.g2d_set_blend($this.$basePtr, $blend);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_getHeapDataNative$js_body$_25 = (var$1, var$2, var$3) => {
    var heapArray = Gdx.HEAP8.subarray(var$2, var$3);
    if (var$1) {
        var newArray = new Int8Array(heapArray);
        return newArray;
    }
    return heapArray;
},
cbggg_Gdx2DPixmapNative_loadNative$js_body$_26 = (var$1, var$2, var$3) => {
    var cBufferSize = var$1.length * Uint8Array.BYTES_PER_ELEMENT;
    var cBuffer = Gdx._malloc(cBufferSize);
    Gdx.writeArrayToMemory(var$1, cBuffer);
    var pixmap = Gdx.Gdx.prototype.g2d_load(cBuffer, var$2, var$3);
    Gdx._free(cBuffer);
    var pixels = Gdx.Gdx.prototype.g2d_get_pixels(pixmap);
    var pixmapAddr = Gdx.getPointer(pixmap);
    var format = pixmap.get_format();
    var width = pixmap.get_width();
    var height = pixmap.get_height();
    var bytesPerPixel = Gdx.Gdx.prototype.g2d_bytes_per_pixel(format);
    var bytesSize = width * height * bytesPerPixel;
    var startIndex = pixels;
    var endIndex = startIndex + bytesSize;
    var nativeData = new Int32Array(6);
    nativeData[0] = pixmapAddr;
    nativeData[1] = width;
    nativeData[2] = height;
    nativeData[3] = format;
    nativeData[4] = startIndex;
    nativeData[5] = endIndex;
    return nativeData;
},
cbggg_Gdx2DPixmapNative_newPixmapNative$js_body$_27 = (var$1, var$2, var$3) => {
    var pixmap = Gdx.Gdx.prototype.g2d_new(var$1, var$2, var$3);
    var pixels = Gdx.Gdx.prototype.g2d_get_pixels(pixmap);
    var pixmapAddr = Gdx.getPointer(pixmap);
    var var$3 = pixmap.get_format();
    var var$1 = pixmap.get_width();
    var var$2 = pixmap.get_height();
    var bytesPerPixel = Gdx.Gdx.prototype.g2d_bytes_per_pixel(var$3);
    var bytesSize = var$1 * var$2 * bytesPerPixel;
    var startIndex = pixels;
    var endIndex = startIndex + bytesSize;
    var nativeData = new Int32Array(6);
    nativeData[0] = pixmapAddr;
    nativeData[1] = var$1;
    nativeData[2] = var$2;
    nativeData[3] = var$3;
    nativeData[4] = startIndex;
    nativeData[5] = endIndex;
    return nativeData;
},
jn_ShortBufferImpl = $rt_classWithoutFields(jn_ShortBuffer),
jn_ShortBufferImpl__init_ = ($this, var$1, var$2) => {
    jn_Buffer__init_($this);
    $this.$position0 = var$1;
    $this.$limit0 = var$2;
},
jn_ShortBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_ShortBufferOverTypedArray() {
    let a = this; jn_ShortBufferImpl.call(a);
    a.$readOnly2 = 0;
    a.$data9 = null;
    a.$array9 = null;
}
let jn_ShortBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_ShortBufferImpl__init_($this, $position, $limit);
    $this.$readOnly2 = $readOnly;
    $this.$data9 = $data;
    $this.$array9 = $array;
},
jn_ShortBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_ShortBufferOverTypedArray();
    jn_ShortBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_ShortBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly2;
},
jn_ShortBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data9.length;
},
jn_ShortBufferOverTypedArray_putImpl = ($this, $index, $src, $offset, $length) => {
    let $slice;
    $slice = $src.data.buffer;
    $offset = $offset * 2 | 0;
    $slice = new Int16Array($slice, $offset, $length);
    $this.$data9.set($slice, $index);
},
jn_ShortBufferOverTypedArray_getArrayBufferView = $this => {
    return $this.$data9;
},
otjt_Int16Array = $rt_classWithoutFields(otjt_TypedArray),
jn_JSBufferHelper = $rt_classWithoutFields(),
jn_JSBufferHelper__init_ = $this => {
    return;
},
jn_JSBufferHelper__init_0 = () => {
    let var_0 = new jn_JSBufferHelper();
    jn_JSBufferHelper__init_(var_0);
    return var_0;
},
jn_JSBufferHelper_getArrayBufferView = $buffer => {
    let $provider;
    if ($rt_isInstance($buffer, jn_ArrayBufferViewProvider))
        return $buffer.$getArrayBufferView0();
    $provider = new jl_IllegalArgumentException;
    jl_Exception__init_($provider, $rt_s(764));
    $rt_throw($provider);
},
jn_JSBufferHelper_toInt8Array = $view => {
    return new Int8Array($view.buffer, $view.byteOffset, $view.byteLength);
};
function jn_IntBufferOverDataView() {
    let a = this; jn_IntBufferImpl.call(a);
    a.$readOnly3 = 0;
    a.$data7 = null;
    a.$littleEndian1 = 0;
}
let jn_IntBufferOverDataView_readOnly = $this => {
    return $this.$readOnly3;
},
jn_IntBufferOverDataView_getElement = ($this, $index) => {
    return $this.$data7.getInt32($index * 4 | 0, !!$this.$littleEndian1);
},
jn_IntBufferOverDataView_putElement = ($this, $index, $value) => {
    let var$3, var$4;
    var$3 = $this.$data7;
    $index = $index * 4 | 0;
    var$4 = $this.$littleEndian1;
    var$3.setInt32($index, $value, !!var$4);
},
jn_IntBufferOverDataView_capacityImpl = $this => {
    return $this.$data7.byteLength / 4 | 0;
},
jn_IntBufferOverDataView_getArrayBufferView = $this => {
    return $this.$data7;
},
jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException),
jl_UnsupportedOperationException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_UnsupportedOperationException__init_0 = () => {
    let var_0 = new jl_UnsupportedOperationException();
    jl_UnsupportedOperationException__init_(var_0);
    return var_0;
},
jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException),
jn_ReadOnlyBufferException__init_ = $this => {
    jl_Throwable__init_($this);
},
jn_ReadOnlyBufferException__init_0 = () => {
    let var_0 = new jn_ReadOnlyBufferException();
    jn_ReadOnlyBufferException__init_(var_0);
    return var_0;
},
jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException),
jn_BufferUnderflowException__init_ = $this => {
    jl_Throwable__init_($this);
},
jn_BufferUnderflowException__init_0 = () => {
    let var_0 = new jn_BufferUnderflowException();
    jn_BufferUnderflowException__init_(var_0);
    return var_0;
};
function jn_FloatBufferOverDataView() {
    let a = this; jn_FloatBufferImpl.call(a);
    a.$readOnly7 = 0;
    a.$data4 = null;
    a.$littleEndian = 0;
}
let jn_FloatBufferOverDataView_readOnly = $this => {
    return $this.$readOnly7;
},
jn_FloatBufferOverDataView_getElement = ($this, $index) => {
    return $this.$data4.getFloat32($index * 4 | 0, !!$this.$littleEndian);
},
jn_FloatBufferOverDataView_putElement = ($this, $index, $value) => {
    let var$3, var$4;
    var$3 = $this.$data4;
    $index = $index * 4 | 0;
    var$4 = $this.$littleEndian;
    var$3.setFloat32($index, $value, !!var$4);
},
jn_FloatBufferOverDataView_putImpl = ($this, $index, $src, $offset, $length) => {
    let var$5, var$6, var$7, var$8, var$9;
    $index = $index * 4 | 0;
    while (true) {
        var$5 = $length + (-1) | 0;
        if ($length <= 0)
            break;
        var$6 = $src.data;
        var$7 = $this.$data4;
        var$8 = $offset + 1 | 0;
        var$9 = var$6[$offset];
        $offset = $this.$littleEndian;
        var$7.setFloat32($index, var$9, !!$offset);
        $index = $index + 4 | 0;
        $length = var$5;
        $offset = var$8;
    }
},
jn_FloatBufferOverDataView_capacityImpl = $this => {
    return $this.$data4.byteLength / 4 | 0;
},
jn_FloatBufferOverDataView_getArrayBufferView = $this => {
    return $this.$data4;
};
function jn_ShortBufferOverDataView() {
    let a = this; jn_ShortBufferImpl.call(a);
    a.$readOnly4 = 0;
    a.$data8 = null;
    a.$littleEndian2 = 0;
}
let jn_ShortBufferOverDataView_readOnly = $this => {
    return $this.$readOnly4;
},
jn_ShortBufferOverDataView_putImpl = ($this, $index, $src, $offset, $length) => {
    let var$5, var$6, var$7, var$8;
    $index = $index * 2 | 0;
    while (true) {
        var$5 = $length + (-1) | 0;
        if ($length <= 0)
            break;
        var$6 = $src.data;
        var$7 = $this.$data8;
        var$8 = $offset + 1 | 0;
        $offset = var$6[$offset];
        $length = $this.$littleEndian2;
        var$7.setInt16($index, $offset, !!$length);
        $index = $index + 2 | 0;
        $length = var$5;
        $offset = var$8;
    }
},
jn_ShortBufferOverDataView_capacityImpl = $this => {
    return $this.$data8.byteLength / 2 | 0;
},
jn_ShortBufferOverDataView_getArrayBufferView = $this => {
    return $this.$data8;
};
function cgxgbta_AssetDownloadImpl$1() {
    let a = this; jl_Object.call(a);
    a.$val$listener = null;
    a.$this$07 = null;
}
let cgxgbta_AssetDownloadImpl$1_onFailure = ($this, $url) => {
    let var$2, var$3;
    if ($this.$this$07.$showLogs) {
        var$2 = jl_System_err();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(765));
        jl_AbstractStringBuilder_append(var$3, $url);
        $url = jl_AbstractStringBuilder_toString(var$3);
        otcic_JsConsolePrintStream_println(var$2, $url);
    }
},
cgxgbta_AssetDownloadImpl$1_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2;
    if ($this.$this$07.$showLogs) {
        var$3 = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(766));
        jl_AbstractStringBuilder_append(var$4, var$1);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, var$4);
    }
    $this.$val$listener.$onSuccess(var$1, var$2);
},
cgxgbta_AssetDownloadImpl$3 = $rt_classWithoutFields(),
cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType = null,
cgxgbta_AssetDownloadImpl$3_$callClinit = () => {
    cgxgbta_AssetDownloadImpl$3_$callClinit = $rt_eraseClinit(cgxgbta_AssetDownloadImpl$3);
    cgxgbta_AssetDownloadImpl$3__clinit_();
},
cgxgbta_AssetDownloadImpl$3__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgxgbta_AssetType_values()).data.length);
    var$2 = var$1.data;
    cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType = var$1;
    var$2[cgxgbta_AssetType_Binary.$ordinal0] = 1;
    var$2[cgxgbta_AssetType_Directory.$ordinal0] = 2;
},
cbgg_Cursor = $rt_classWithoutFields(0),
cgxgbt_TeaCursor = $rt_classWithoutFields();
function cgxgbt_TeaFileHandle() {
    let a = this; cbgf_FileHandle.call(a);
    a.$file = null;
    a.$type0 = null;
    a.$teaFiles = null;
}
let cgxgbt_TeaFileHandle__init_0 = ($this, $teaFiles, $fileName, $type) => {
    if ($type !== cbg_Files$FileType_Internal && $type !== cbg_Files$FileType_Classpath && $type !== cbg_Files$FileType_Local) {
        $teaFiles = new cbgu_GdxRuntimeException;
        $fileName = jl_String_valueOf($type);
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_AbstractStringBuilder_append($type, $rt_s(767));
        jl_AbstractStringBuilder_append($type, $fileName);
        jl_AbstractStringBuilder_append($type, $rt_s(768));
        jl_Exception__init_($teaFiles, jl_AbstractStringBuilder_toString($type));
        $rt_throw($teaFiles);
    }
    $this.$file = cgxgbt_TeaFileHandle_fixSlashes($fileName);
    $this.$type0 = $type;
    $this.$teaFiles = $teaFiles;
},
cgxgbt_TeaFileHandle__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbt_TeaFileHandle();
    cgxgbt_TeaFileHandle__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbt_TeaFileHandle_path = $this => {
    return $this.$file;
},
cgxgbt_TeaFileHandle_name = $this => {
    let $index;
    $index = jl_String_lastIndexOf($this.$file, 47);
    if ($index < 0)
        return $this.$file;
    return jl_String_substring0($this.$file, $index + 1 | 0);
},
cgxgbt_TeaFileHandle_nameWithoutExtension = $this => {
    let $name, $dotIndex;
    $name = cgxgbt_TeaFileHandle_name($this);
    $dotIndex = jl_String_lastIndexOf($name, 46);
    if ($dotIndex == (-1))
        return $name;
    return jl_String_substring($name, 0, $dotIndex);
},
cgxgbt_TeaFileHandle_type = $this => {
    return $this.$type0;
},
cgxgbt_TeaFileHandle_read = $this => {
    let $exists, $input, var$3, var$4, var$5;
    $exists = cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $this.$type0), $this);
    $input = $this.$type0;
    var$3 = cbg_Files$FileType_Classpath;
    if ($input !== var$3 && !($input === cbg_Files$FileType_Internal && !$exists) && !($input === cbg_Files$FileType_Local && !$exists))
        return cgxgbtf_MemoryFileStorage_read(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $input), $this);
    $input = cgxgbtf_MemoryFileStorage_read(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, var$3), $this);
    if ($input !== null)
        return $input;
    $input = new cbgu_GdxRuntimeException;
    var$3 = $this.$file;
    var$4 = jl_String_valueOf($this.$type0);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(769));
    jl_AbstractStringBuilder_append(var$5, var$3);
    jl_AbstractStringBuilder_append(var$5, $rt_s(770));
    jl_AbstractStringBuilder_append(var$5, var$4);
    jl_AbstractStringBuilder_append2(var$5, 41);
    jl_Exception__init_($input, jl_AbstractStringBuilder_toString(var$5));
    $rt_throw($input);
},
cgxgbt_TeaFileHandle_reader = ($this, $charset) => {
    let $e, var$3, var$4, $$je;
    a: {
        try {
            $e = ji_InputStreamReader__init_2(cgxgbt_TeaFileHandle_read($this), $charset);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_UnsupportedEncodingException) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $e;
    }
    var$3 = new cbgu_GdxRuntimeException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(771));
    jl_AbstractStringBuilder_append(var$4, $charset);
    jl_AbstractStringBuilder_append(var$4, $rt_s(772));
    jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$4), $e);
    $rt_throw(var$3);
},
cgxgbt_TeaFileHandle_readString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, $$je;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0(var$1, cbgf_FileHandle_estimateLength($this));
    var$2 = null;
    a: {
        b: {
            try {
                var$3 = var$2;
                var$4 = var$2;
                var$3 = var$2;
                var$4 = var$2;
                var$2 = new ji_InputStreamReader;
                var$4 = var$2;
                var$3 = var$2;
                ji_InputStreamReader__init_0(var$2, cgxgbt_TeaFileHandle_read($this));
                var$3 = var$2;
                var$4 = var$2;
                var$5 = $rt_createCharArray(256);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$1 = $$je;
                    break b;
                } else{
                    var$1 = $$je;
                    break a;
                }
            }
            var$6 = var$2;
            while (true) {
                try {
                    var$3 = var$2;
                    var$4 = var$2;
                    var$7 = ji_Reader_read(var$6, var$5);
                    if (var$7 == (-1))
                        break;
                    var$3 = var$2;
                    var$4 = var$2;
                    jl_StringBuilder_append5(var$1, var$5, 0, var$7);
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                        var$1 = $$je;
                        break b;
                    } else{
                        var$1 = $$je;
                        break a;
                    }
                }
            }
            try {
                var$3 = var$2;
                var$4 = var$2;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$1 = $$je;
                    break b;
                } else{
                    var$1 = $$je;
                    break a;
                }
            }
            cbgu_StreamUtils_closeQuietly(var$2);
            return jl_AbstractStringBuilder_toString(var$1);
        }
        try {
            var$4 = var$3;
            $rt_throw(cbgu_GdxRuntimeException__init_0(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(773)), $this)), var$1));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            var$1 = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly(var$4);
    $rt_throw(var$1);
},
cgxgbt_TeaFileHandle_child = ($this, $name) => {
    let var$2, var$3, var$4, var$5, var$6;
    var$2 = new cgxgbt_TeaFileHandle;
    var$3 = $this.$teaFiles;
    if (jl_String_isEmpty($this.$file))
        var$4 = $rt_s(9);
    else {
        var$4 = $this.$file;
        var$5 = !jl_String_endsWith(var$4, $rt_s(107)) ? $rt_s(107) : $rt_s(9);
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, var$4);
        jl_AbstractStringBuilder_append(var$6, var$5);
        var$4 = jl_AbstractStringBuilder_toString(var$6);
    }
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, var$4);
    jl_AbstractStringBuilder_append(var$6, $name);
    cgxgbt_TeaFileHandle__init_0(var$2, var$3, jl_AbstractStringBuilder_toString(var$6), $this.$type0);
    return var$2;
},
cgxgbt_TeaFileHandle_parent = $this => {
    let var$1, $index, $dir;
    var$1 = $this.$file;
    $index = jl_String_lastIndexOf1(var$1, $rt_s(107), var$1.$nativeString.length);
    $dir = $rt_s(9);
    if ($index > 0)
        $dir = jl_String_substring($this.$file, 0, $index);
    return cgxgbt_TeaFileHandle__init_($this.$teaFiles, $dir, $this.$type0);
},
cgxgbt_TeaFileHandle_exists = $this => {
    let $exists;
    a: {
        $exists = cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $this.$type0), $this);
        cgxgbt_TeaFileHandle$1_$callClinit();
        switch (cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType.data[$this.$type0.$ordinal0]) {
            case 1:
                if (!$exists)
                    break a;
                return 1;
            case 2:
                break a;
            default:
        }
        return $exists;
    }
    return cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, cbg_Files$FileType_Classpath), $this);
},
cgxgbt_TeaFileHandle_toString = $this => {
    return $this.$file;
},
cgxgbt_TeaFileHandle_fixSlashes = $path => {
    $path = jl_String_replace($path, $rt_s(467), $rt_s(107));
    if (jl_String_endsWith($path, $rt_s(107)))
        $path = jl_String_substring($path, 0, $path.$nativeString.length - 1 | 0);
    return $path;
},
cbg_Files$FileType = $rt_classWithoutFields(jl_Enum),
cbg_Files$FileType_Classpath = null,
cbg_Files$FileType_Internal = null,
cbg_Files$FileType_External = null,
cbg_Files$FileType_Absolute = null,
cbg_Files$FileType_Local = null,
cbg_Files$FileType_$VALUES = null,
cbg_Files$FileType_values = () => {
    return cbg_Files$FileType_$VALUES.$clone0();
},
cbg_Files$FileType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(774), 0);
    cbg_Files$FileType_Classpath = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(775), 1);
    cbg_Files$FileType_Internal = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(776), 2);
    cbg_Files$FileType_External = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(777), 3);
    cbg_Files$FileType_Absolute = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(778), 4);
    cbg_Files$FileType_Local = var$1;
    var$2 = $rt_createArray(cbg_Files$FileType, 5);
    var$3 = var$2.data;
    var$3[0] = cbg_Files$FileType_Classpath;
    var$3[1] = cbg_Files$FileType_Internal;
    var$3[2] = cbg_Files$FileType_External;
    var$3[3] = cbg_Files$FileType_Absolute;
    var$3[4] = var$1;
    cbg_Files$FileType_$VALUES = var$2;
};
function cbggg_TextureAtlas$AtlasRegion() {
    let a = this; cbggg_TextureRegion.call(a);
    a.$index10 = 0;
    a.$name2 = null;
    a.$offsetX0 = 0.0;
    a.$offsetY = 0.0;
    a.$packedWidth = 0;
    a.$packedHeight = 0;
    a.$originalWidth0 = 0;
    a.$originalHeight0 = 0;
    a.$rotate0 = 0;
    a.$degrees0 = 0;
    a.$names0 = null;
    a.$values9 = null;
}
let cbggg_TextureAtlas$AtlasRegion_toString = $this => {
    return $this.$name2;
},
ses_JoinType = $rt_classWithoutFields(jl_Enum),
ses_JoinType_NONE = null,
ses_JoinType_POINTY = null,
ses_JoinType_SMOOTH = null,
ses_JoinType_$VALUES = null,
ses_JoinType_values = () => {
    return ses_JoinType_$VALUES.$clone0();
},
ses_JoinType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new ses_JoinType;
    jl_Enum__init_(var$1, $rt_s(183), 0);
    ses_JoinType_NONE = var$1;
    var$1 = new ses_JoinType;
    jl_Enum__init_(var$1, $rt_s(779), 1);
    ses_JoinType_POINTY = var$1;
    var$1 = new ses_JoinType;
    jl_Enum__init_(var$1, $rt_s(780), 2);
    ses_JoinType_SMOOTH = var$1;
    var$2 = $rt_createArray(ses_JoinType, 3);
    var$3 = var$2.data;
    var$3[0] = ses_JoinType_NONE;
    var$3[1] = ses_JoinType_POINTY;
    var$3[2] = var$1;
    ses_JoinType_$VALUES = var$2;
},
cbg_Preferences = $rt_classWithoutFields(0),
otjb_Storage = $rt_classWithoutFields();
function cgxgbt_TeaPreferences() {
    let a = this; jl_Object.call(a);
    a.$prefix = null;
    a.$values5 = null;
    a.$storage = null;
    a.$shouldEncode = 0;
}
let cgxgbt_TeaPreferences_toObject = ($this, $key, $value) => {
    let var$3, var$4;
    if (jl_String_endsWith($key, $rt_s(469))) {
        a: {
            if ($value !== null) {
                $key = $value.$nativeString.toLowerCase();
                if ($key !== $value.$nativeString)
                    $value = jl_String__init_1($key);
                if (jl_String_equals($value, $rt_s(49))) {
                    var$3 = 1;
                    break a;
                }
            }
            var$3 = 0;
        }
        return jl_Boolean_valueOf(var$3);
    }
    if (jl_String_endsWith($key, $rt_s(781)))
        return jl_Integer_valueOf(jl_Integer_parseInt0($value, 10));
    if (!jl_String_endsWith($key, $rt_s(466))) {
        if (!jl_String_endsWith($key, $rt_s(782)))
            return $value;
        var$4 = jl_Float_parseFloat($value);
        $key = new jl_Float;
        $key.$value3 = var$4;
        return $key;
    }
    if ($value !== null)
        return jl_Long_valueOf(jl_Long_parseLongImpl($value, 0, $value.$nativeString.length, 10));
    $key = new jl_NumberFormatException;
    jl_Exception__init_($key, $rt_s(41));
    $rt_throw($key);
},
cgxgbt_TeaPreferences_toStorageKey = ($this, $key, $value) => {
    let var$3;
    if ($value instanceof jl_Boolean) {
        $value = $this.$prefix;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $value);
        jl_AbstractStringBuilder_append(var$3, $key);
        jl_AbstractStringBuilder_append2(var$3, 98);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    if ($value instanceof jl_Integer) {
        $value = $this.$prefix;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $value);
        jl_AbstractStringBuilder_append(var$3, $key);
        jl_AbstractStringBuilder_append2(var$3, 105);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    if ($value instanceof jl_Long) {
        $value = $this.$prefix;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $value);
        jl_AbstractStringBuilder_append(var$3, $key);
        jl_AbstractStringBuilder_append2(var$3, 108);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    if (!($value instanceof jl_Float)) {
        $value = $this.$prefix;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $value);
        jl_AbstractStringBuilder_append(var$3, $key);
        jl_AbstractStringBuilder_append2(var$3, 115);
        return jl_AbstractStringBuilder_toString(var$3);
    }
    $value = $this.$prefix;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $value);
    jl_AbstractStringBuilder_append(var$3, $key);
    jl_AbstractStringBuilder_append2(var$3, 102);
    return jl_AbstractStringBuilder_toString(var$3);
},
cgxgbt_TeaPreferences_flush = $this => {
    let $i, $keyEncoded, $key, var$4, $storageKey, $storageValue, $$je;
    a: {
        try {
            $i = 0;
            while ($i < $this.$storage.length) {
                $keyEncoded = $rt_str($this.$storage.key($i));
                if (jl_String_startsWith(!$this.$shouldEncode ? $keyEncoded : jl_String__init_2(cgxgbtf_HEXCoder_decode($keyEncoded)), $this.$prefix))
                    $this.$storage.removeItem($rt_ustr($keyEncoded));
                $i = $i + 1 | 0;
            }
            $key = cbgu_ObjectMap$Keys_iterator(cbgu_ObjectMap_keys($this.$values5));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                break a;
            } else {
                throw $$e;
            }
        }
        var$4 = $key;
        while (true) {
            try {
                if (!cbgu_ObjectMap$Keys_hasNext(var$4))
                    break;
                $key = cbgu_ObjectMap$Keys_next(var$4);
                $storageKey = cgxgbt_TeaPreferences_toStorageKey($this, $key, cbgu_ObjectMap_get($this.$values5, $key));
                $key = (cbgu_ObjectMap_get($this.$values5, $key)).$toString();
                $keyEncoded = jl_StringBuilder__init_();
                jl_StringBuilder_append($keyEncoded, $key);
                $storageValue = jl_StringBuilder_toString($keyEncoded);
                if (!$this.$shouldEncode)
                    $this.$storage.setItem($rt_ustr($storageKey), $rt_ustr($storageValue));
                else
                    $this.$storage.setItem($rt_ustr(cgxgbtf_HEXCoder_encode(jl_String_getBytes($storageKey))), $rt_ustr(cgxgbtf_HEXCoder_encode(jl_String_getBytes($storageValue))));
                continue;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    break a;
                } else {
                    throw $$e;
                }
            }
        }
        return;
    }
    $key = new cbgu_GdxRuntimeException;
    jl_Exception__init_($key, $rt_s(783));
    $rt_throw($key);
},
cgxgbt_TeaPreferences_putInteger = ($this, $key, $val) => {
    cbgu_ObjectMap_put($this.$values5, $key, jl_Integer_valueOf($val));
    return $this;
},
cgxgbt_TeaPreferences_getInteger = ($this, $key, $defValue) => {
    let $res;
    $res = cbgu_ObjectMap_get($this.$values5, $key);
    if ($res !== null)
        $defValue = $res.$value0;
    return $defValue;
},
cgxgbt_TeaPreferences_clear = $this => {
    cbgu_ObjectMap_clear($this.$values5);
};
function ju_HashMap$HashMapEntrySet() {
    ju_AbstractSet.call(this);
    this.$associatedMap0 = null;
}
let ju_HashMap$HashMapEntrySet_iterator = $this => {
    let var$1;
    var$1 = new ju_HashMap$EntryIterator;
    ju_HashMap$AbstractMapIterator__init_(var$1, $this.$associatedMap0);
    return var$1;
};
function ccvu_PrioritizedArray$Wrapper() {
    let a = this; jl_Object.call(a);
    a.$item = null;
    a.$priority = 0;
}
let ccvu_PrioritizedArray$Wrapper_pool = null,
ccvu_PrioritizedArray$Wrapper_$callClinit = () => {
    ccvu_PrioritizedArray$Wrapper_$callClinit = $rt_eraseClinit(ccvu_PrioritizedArray$Wrapper);
    ccvu_PrioritizedArray$Wrapper__clinit_();
},
ccvu_PrioritizedArray$Wrapper__init_ = $this => {
    ccvu_PrioritizedArray$Wrapper_$callClinit();
},
ccvu_PrioritizedArray$Wrapper__init_0 = () => {
    let var_0 = new ccvu_PrioritizedArray$Wrapper();
    ccvu_PrioritizedArray$Wrapper__init_(var_0);
    return var_0;
},
ccvu_PrioritizedArray$Wrapper_reset = $this => {
    $this.$item = null;
    $this.$priority = 0;
},
ccvu_PrioritizedArray$Wrapper_toString = $this => {
    let var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $this.$item);
    jl_AbstractStringBuilder_append0(var$1, $rt_s(784));
    jl_AbstractStringBuilder_append1(var$1, $this.$priority);
    jl_AbstractStringBuilder_append0(var$1, $rt_s(785));
    return jl_AbstractStringBuilder_toString(var$1);
},
ccvu_PrioritizedArray$Wrapper__clinit_ = () => {
    ccvu_PrioritizedArray$Wrapper_pool = ccvu_PrioritizedArray$Wrapper$1__init_0();
};
function ccve_GaussianBlurEffect$Convolve2DEffect() {
    let a = this; ccve_CompositeVfxEffect.call(a);
    a.$radius0 = 0;
    a.$length5 = 0;
    a.$weights0 = null;
    a.$offsetsHor = null;
    a.$offsetsVert = null;
    a.$hor = null;
    a.$vert = null;
}
let jl_Readable = $rt_classWithoutFields(0);
function ji_Reader() {
    jl_Object.call(this);
    this.$lock = null;
}
let ji_Reader__init_ = $this => {
    $this.$lock = new jl_Object;
},
ji_Reader_read = ($this, $cbuf) => {
    let var$2;
    var$2 = $cbuf.data.length;
    return ji_InputStreamReader_read($this, $cbuf, 0, var$2);
};
function ji_BufferedReader() {
    let a = this; ji_Reader.call(a);
    a.$innerReader = null;
    a.$buffer6 = null;
    a.$index2 = 0;
    a.$count0 = 0;
    a.$eof = 0;
    a.$mark0 = 0;
}
let ji_BufferedReader__init_0 = ($this, $innerReader, $size) => {
    ji_Reader__init_($this);
    $this.$mark0 = (-1);
    if ($size >= 0) {
        $this.$innerReader = $innerReader;
        $this.$buffer6 = $rt_createCharArray(jl_Math_max(64, $size));
        return;
    }
    $innerReader = new jl_IllegalArgumentException;
    jl_Throwable__init_($innerReader);
    $rt_throw($innerReader);
},
ji_BufferedReader__init_ = (var_0, var_1) => {
    let var_2 = new ji_BufferedReader();
    ji_BufferedReader__init_0(var_2, var_0, var_1);
    return var_2;
},
ji_BufferedReader_read = $this => {
    let var$1, var$2;
    ji_BufferedReader_requireOpened($this);
    if ($this.$index2 >= $this.$count0 && !ji_BufferedReader_fillBuffer($this, 0, 1))
        return (-1);
    var$1 = $this.$buffer6.data;
    var$2 = $this.$index2;
    $this.$index2 = var$2 + 1 | 0;
    return var$1[var$2];
},
ji_BufferedReader_close = $this => {
    ji_BufferedReader_requireOpened($this);
    $this.$innerReader = null;
},
ji_BufferedReader_readLine = $this => {
    let $line, var$2, $ch, var$4;
    ji_BufferedReader_requireOpened($this);
    if ($this.$eof && $this.$index2 >= $this.$count0)
        return null;
    $line = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($line);
    a: {
        b: {
            while (true) {
                var$2 = $this.$index2;
                $ch = $this.$count0;
                if (var$2 >= $ch && !ji_BufferedReader_fillBuffer($this, 0, $ch - var$2 | 0)) {
                    if (!($line.$length1 ? 0 : 1))
                        break a;
                    return null;
                }
                var$4 = $this.$buffer6.data;
                $ch = $this.$index2;
                var$2 = $ch + 1 | 0;
                $this.$index2 = var$2;
                $ch = var$4[$ch];
                if ($ch == 10)
                    break;
                if ($ch == 13)
                    break b;
                jl_AbstractStringBuilder_append2($line, $ch);
            }
            break a;
        }
        $ch = $this.$count0;
        if (!(var$2 >= $ch && !ji_BufferedReader_fillBuffer($this, 0, $ch - var$2 | 0))) {
            var$4 = $this.$buffer6.data;
            var$2 = $this.$index2;
            if (var$4[var$2] == 10)
                $this.$index2 = var$2 + 1 | 0;
        }
    }
    return jl_AbstractStringBuilder_toString($line);
},
ji_BufferedReader_fillBuffer = ($this, $offset, $readLimit) => {
    let $totalRead, var$4, var$5, $charsRead;
    if ($this.$eof)
        return 0;
    $readLimit = jl_Math_min($readLimit, $this.$buffer6.data.length - $this.$index2 | 0);
    $totalRead = 0;
    a: {
        b: while (true) {
            var$4 = $this.$innerReader;
            var$5 = $this.$buffer6;
            $charsRead = var$5.data.length - $offset | 0;
            $charsRead = ji_InputStreamReader_read(var$4, var$5, $offset, $charsRead);
            if ($charsRead == (-1)) {
                $this.$eof = 1;
                break a;
            }
            c: {
                $offset = $offset + $charsRead | 0;
                $totalRead = $totalRead + $charsRead | 0;
                if ($offset < $readLimit) {
                    var$4 = $this.$innerReader;
                    if (!jn_Buffer_hasRemaining(var$4.$outBuffer) && !jn_Buffer_hasRemaining(var$4.$inBuffer) && ji_ByteArrayInputStream_available(var$4.$stream) <= 0 ? 0 : 1)
                        break c;
                }
                if ($totalRead > 0)
                    break b;
            }
        }
    }
    $this.$count0 = $offset;
    $this.$index2 = 0;
    $this.$mark0 = (-1);
    return $totalRead <= 0 ? 0 : 1;
},
ji_BufferedReader_requireOpened = $this => {
    let var$1;
    if ($this.$innerReader !== null)
        return;
    var$1 = new ji_IOException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
};
function ji_InputStreamReader() {
    let a = this; ji_Reader.call(a);
    a.$stream = null;
    a.$decoder = null;
    a.$inData = null;
    a.$inBuffer = null;
    a.$outData = null;
    a.$outBuffer = null;
    a.$streamEof = 0;
    a.$eof0 = 0;
}
let ji_InputStreamReader__init_3 = ($this, $in, $charsetName) => {
    let var$3, $$je;
    a: {
        try {
            var$3 = jnc_Charset_forName(jl_String_toString($charsetName));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_UnsupportedCharsetException) {
                break a;
            } else {
                throw $$e;
            }
        }
        ji_InputStreamReader__init_($this, $in, var$3);
        return;
    }
    $in = new ji_UnsupportedEncodingException;
    jl_Exception__init_($in, $charsetName);
    $rt_throw($in);
},
ji_InputStreamReader__init_2 = (var_0, var_1) => {
    let var_2 = new ji_InputStreamReader();
    ji_InputStreamReader__init_3(var_2, var_0, var_1);
    return var_2;
},
ji_InputStreamReader__init_ = ($this, $in, $charset) => {
    let var$3, var$4;
    $charset = jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput($charset.$newDecoder(), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
    ji_Reader__init_($this);
    var$3 = $rt_createByteArray(8192);
    $this.$inData = var$3;
    $this.$inBuffer = jn_ByteBuffer_wrap(var$3);
    var$3 = $rt_createCharArray(1024);
    $this.$outData = var$3;
    var$4 = jn_CharBuffer_wrap(var$3);
    $this.$outBuffer = var$4;
    $this.$stream = $in;
    $this.$decoder = $charset;
    jn_Buffer_position(var$4, var$4.$limit0);
    $in = $this.$inBuffer;
    jn_Buffer_position($in, $in.$limit0);
},
ji_InputStreamReader__init_4 = (var_0, var_1) => {
    let var_2 = new ji_InputStreamReader();
    ji_InputStreamReader__init_(var_2, var_0, var_1);
    return var_2;
},
ji_InputStreamReader__init_0 = ($this, $in) => {
    jnci_UTF8Charset_$callClinit();
    ji_InputStreamReader__init_($this, $in, jnci_UTF8Charset_INSTANCE);
},
ji_InputStreamReader__init_1 = var_0 => {
    let var_1 = new ji_InputStreamReader();
    ji_InputStreamReader__init_0(var_1, var_0);
    return var_1;
},
ji_InputStreamReader_close = $this => {
    return;
},
ji_InputStreamReader_read = ($this, $cbuf, $off, $len) => {
    let $bytesRead, $sz;
    a: {
        if (jn_Buffer_hasRemaining($this.$outBuffer)) {
            if ($len)
                break a;
            return 0;
        }
        if ($this.$eof0)
            return (-1);
        if (!$len)
            return 0;
        ji_InputStreamReader_ensureBufferHasData($this, 1);
    }
    $bytesRead = 0;
    while (true) {
        $sz = jl_Math_min($len, jn_Buffer_remaining($this.$outBuffer));
        jn_CharBuffer_get($this.$outBuffer, $cbuf, $off + $bytesRead | 0, $sz);
        $len = $len - $sz | 0;
        $bytesRead = $bytesRead + $sz | 0;
        if ($len <= 0)
            break;
        if (!ji_InputStreamReader_ensureBufferHasData($this, 0))
            break;
    }
    return $bytesRead;
},
ji_InputStreamReader_ensureBufferHasData = ($this, $force) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    if (jn_Buffer_hasRemaining($this.$outBuffer))
        return 1;
    if ($this.$eof0)
        $force = 0;
    else {
        var$2 = $this.$outBuffer;
        if (jn_CharBufferImpl_isReadOnly(var$2)) {
            var$2 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_(var$2);
            $rt_throw(var$2);
        }
        a: {
            var$3 = jn_Buffer_remaining(var$2);
            var$4 = var$2.$position0;
            if (var$4 > 0) {
                var$5 = 0;
                var$6 = var$2;
                while (true) {
                    if (var$5 >= var$3)
                        break a;
                    var$7 = var$4 + 1 | 0;
                    var$4 = var$6.$data1[var$4] & 65535;
                    var$6.$data1[var$5] = var$4;
                    var$5 = var$5 + 1 | 0;
                    var$4 = var$7;
                }
            }
        }
        var$2.$position0 = var$3;
        var$2.$limit0 = var$2.$capacityImpl();
        var$2.$mark = (-1);
        var$7 = $force ? 0 : 1;
        $force = 1;
        var$8 = 0;
        b: {
            while (true) {
                if (jn_Buffer_hasRemaining($this.$inBuffer)) {
                    var$2 = $this.$outBuffer;
                    var$4 = var$2.$position0;
                    var$2 = jnc_CharsetDecoder_decode($this.$decoder, $this.$inBuffer, var$2, $this.$streamEof);
                    var$8 = 1;
                    var$7 = var$7 | ($this.$outBuffer.$position0 <= var$4 ? 0 : 1);
                    if (jnc_CoderResult_isOverflow(var$2))
                        break b;
                    if (!jnc_CoderResult_isUnderflow(var$2))
                        continue;
                }
                if (ji_ByteArrayInputStream_available($this.$stream) <= 0 && var$7) {
                    $force = 0;
                    break b;
                }
                if ($this.$streamEof)
                    var$3 = 0;
                else {
                    var$2 = $this.$inBuffer;
                    if (var$2.$readOnly0)
                        break;
                    var$3 = jn_Buffer_remaining(var$2);
                    if (var$2.$position0 > 0) {
                        var$6 = var$2.$data0;
                        var$6.set(new Int8Array(var$6.buffer, var$2.$data0.byteOffset + var$2.$position0 | 0, var$3), 0);
                    }
                    var$2.$position0 = var$3;
                    var$2.$limit0 = var$2.$capacityImpl();
                    var$2.$mark = (-1);
                    c: {
                        while (true) {
                            if (!jn_Buffer_hasRemaining($this.$inBuffer))
                                break c;
                            var$2 = $this.$stream;
                            var$9 = jn_ByteBuffer_array($this.$inBuffer);
                            var$6 = $this.$inBuffer;
                            var$4 = var$6.$position0;
                            var$3 = jn_Buffer_remaining(var$6);
                            var$3 = ji_ByteArrayInputStream_read(var$2, var$9, var$4, var$3);
                            if (var$3 == (-1))
                                break;
                            if (var$3 > 0) {
                                var$2 = $this.$inBuffer;
                                jn_Buffer_position(var$2, var$2.$position0 + var$3 | 0);
                                break c;
                            }
                        }
                        $this.$streamEof = 1;
                    }
                    jn_Buffer_flip($this.$inBuffer);
                    var$3 = 1;
                }
                if (!var$3)
                    break b;
            }
            var$2 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_(var$2);
            $rt_throw(var$2);
        }
        if (!jn_Buffer_hasRemaining($this.$inBuffer) && $this.$streamEof && !(var$8 && !jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush($this.$decoder, $this.$outBuffer))))
            $this.$eof0 = 1;
        jn_Buffer_flip($this.$outBuffer);
    }
    return $force;
};
function ju_StringTokenizer() {
    let a = this; jl_Object.call(a);
    a.$string1 = null;
    a.$delimiters = null;
    a.$returnDelimiters = 0;
    a.$position3 = 0;
}
let ju_StringTokenizer__init_0 = ($this, $string, $delimiters) => {
    if ($string === null) {
        $string = new jl_NullPointerException;
        jl_Throwable__init_($string);
        $rt_throw($string);
    }
    $this.$string1 = $string;
    $this.$delimiters = $delimiters;
    $this.$returnDelimiters = 0;
    $this.$position3 = 0;
},
ju_StringTokenizer__init_ = (var_0, var_1) => {
    let var_2 = new ju_StringTokenizer();
    ju_StringTokenizer__init_0(var_2, var_0, var_1);
    return var_2;
},
ju_StringTokenizer_hasMoreTokens = $this => {
    let var$1, $length, $i;
    if ($this.$delimiters === null) {
        var$1 = new jl_NullPointerException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    a: {
        $length = $this.$string1.$nativeString.length;
        $i = $this.$position3;
        if ($i < $length) {
            if ($this.$returnDelimiters)
                return 1;
            while (true) {
                if ($i >= $length)
                    break a;
                if (jl_String_indexOf($this.$delimiters, jl_String_charAt($this.$string1, $i), 0) == (-1))
                    return 1;
                $i = $i + 1 | 0;
            }
        }
    }
    return 0;
},
ju_StringTokenizer_nextToken = $this => {
    let var$1, $i, $length, var$4, var$5;
    if ($this.$delimiters === null) {
        var$1 = new jl_NullPointerException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    $i = $this.$position3;
    $length = $this.$string1.$nativeString.length;
    if ($i < $length) {
        if ($this.$returnDelimiters) {
            if (jl_String_indexOf($this.$delimiters, jl_String_charAt($this.$string1, $this.$position3), 0) >= 0) {
                var$1 = $this.$string1;
                $i = $this.$position3;
                $this.$position3 = $i + 1 | 0;
                var$4 = jl_String_charAt(var$1, $i);
                var$1 = new jl_String;
                var$5 = $rt_createCharArray(1);
                var$5.data[0] = var$4;
                jl_String__init_3(var$1, var$5);
                return var$1;
            }
            $this.$position3 = $this.$position3 + 1 | 0;
            while (true) {
                var$4 = $this.$position3;
                if (var$4 >= $length)
                    break;
                if (jl_String_indexOf($this.$delimiters, jl_String_charAt($this.$string1, var$4), 0) >= 0)
                    return jl_String_substring($this.$string1, $i, $this.$position3);
                $this.$position3 = $this.$position3 + 1 | 0;
            }
            return jl_String_substring0($this.$string1, $i);
        }
        while (true) {
            var$4 = $rt_compare($i, $length);
            if (var$4 >= 0)
                break;
            if (jl_String_indexOf($this.$delimiters, jl_String_charAt($this.$string1, $i), 0) < 0)
                break;
            $i = $i + 1 | 0;
        }
        $this.$position3 = $i;
        if (var$4 < 0) {
            $this.$position3 = $i + 1 | 0;
            while (true) {
                var$4 = $this.$position3;
                if (var$4 >= $length)
                    break;
                if (jl_String_indexOf($this.$delimiters, jl_String_charAt($this.$string1, var$4), 0) >= 0)
                    return jl_String_substring($this.$string1, $i, $this.$position3);
                $this.$position3 = $this.$position3 + 1 | 0;
            }
            return jl_String_substring0($this.$string1, $i);
        }
    }
    var$1 = new ju_NoSuchElementException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
cbggg_TextureAtlas$TextureAtlasData$Field = $rt_classWithoutFields(0);
function cbggg_TextureAtlas$TextureAtlasData$1() {
    let a = this; jl_Object.call(a);
    a.$val$entry1 = null;
    a.$this$042 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$1_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$width12 = jl_Integer_parseInt($this.$val$entry1.data[1]);
    var$1.$height12 = jl_Integer_parseInt($this.$val$entry1.data[2]);
};
function cbggg_TextureAtlas$TextureAtlasData$2() {
    let a = this; jl_Object.call(a);
    a.$val$entry10 = null;
    a.$this$044 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$2_parse = ($this, var$1) => {
    var$1.$format10 = jl_Enum_valueOf($rt_cls(cbgg_Pixmap$Format), $this.$val$entry10.data[1]);
};
function cbggg_TextureAtlas$TextureAtlasData$3() {
    let a = this; jl_Object.call(a);
    a.$val$entry2 = null;
    a.$this$059 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$3_parse = ($this, var$1) => {
    let var$2;
    var$1 = var$1;
    var$1.$minFilter = cbgg_Texture$TextureFilter_valueOf($this.$val$entry2.data[1]);
    var$1.$magFilter0 = cbgg_Texture$TextureFilter_valueOf($this.$val$entry2.data[2]);
    var$2 = var$1.$minFilter.$glEnum;
    var$1.$useMipMaps0 = var$2 != 9728 && var$2 != 9729 ? 1 : 0;
};
function cbggg_TextureAtlas$TextureAtlasData$4() {
    let a = this; jl_Object.call(a);
    a.$val$entry4 = null;
    a.$this$031 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$4_parse = ($this, var$1) => {
    var$1 = var$1;
    if (jl_String_indexOf0($this.$val$entry4.data[1], 120) != (-1))
        var$1.$uWrap0 = cbgg_Texture$TextureWrap_Repeat;
    if (jl_String_indexOf0($this.$val$entry4.data[1], 121) != (-1))
        var$1.$vWrap0 = cbgg_Texture$TextureWrap_Repeat;
};
function cbggg_TextureAtlas$TextureAtlasData$5() {
    let a = this; jl_Object.call(a);
    a.$val$entry9 = null;
    a.$this$034 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$5_parse = ($this, var$1) => {
    var$1.$pma = jl_String_equals($this.$val$entry9.data[1], $rt_s(49));
};
function cbggg_TextureAtlas$TextureAtlasData$6() {
    let a = this; jl_Object.call(a);
    a.$val$entry7 = null;
    a.$this$063 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$6_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$left0 = jl_Integer_parseInt($this.$val$entry7.data[1]);
    var$1.$top = jl_Integer_parseInt($this.$val$entry7.data[2]);
};
function cbggg_TextureAtlas$TextureAtlasData$7() {
    let a = this; jl_Object.call(a);
    a.$val$entry5 = null;
    a.$this$029 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$7_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$width0 = jl_Integer_parseInt($this.$val$entry5.data[1]);
    var$1.$height1 = jl_Integer_parseInt($this.$val$entry5.data[2]);
};
function cbggg_TextureAtlas$TextureAtlasData$8() {
    let a = this; jl_Object.call(a);
    a.$val$entry0 = null;
    a.$this$021 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$8_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$left0 = jl_Integer_parseInt($this.$val$entry0.data[1]);
    var$1.$top = jl_Integer_parseInt($this.$val$entry0.data[2]);
    var$1.$width0 = jl_Integer_parseInt($this.$val$entry0.data[3]);
    var$1.$height1 = jl_Integer_parseInt($this.$val$entry0.data[4]);
};
function cbggg_TextureAtlas$TextureAtlasData$9() {
    let a = this; jl_Object.call(a);
    a.$val$entry3 = null;
    a.$this$061 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$9_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$offsetX = jl_Integer_parseInt($this.$val$entry3.data[1]);
    var$1.$offsetY0 = jl_Integer_parseInt($this.$val$entry3.data[2]);
};
function cbggg_TextureAtlas$TextureAtlasData$10() {
    let a = this; jl_Object.call(a);
    a.$val$entry6 = null;
    a.$this$056 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$10_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$originalWidth = jl_Integer_parseInt($this.$val$entry6.data[1]);
    var$1.$originalHeight = jl_Integer_parseInt($this.$val$entry6.data[2]);
};
function cbggg_TextureAtlas$TextureAtlasData$11() {
    let a = this; jl_Object.call(a);
    a.$val$entry = null;
    a.$this$051 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$11_parse = ($this, var$1) => {
    var$1 = var$1;
    var$1.$offsetX = jl_Integer_parseInt($this.$val$entry.data[1]);
    var$1.$offsetY0 = jl_Integer_parseInt($this.$val$entry.data[2]);
    var$1.$originalWidth = jl_Integer_parseInt($this.$val$entry.data[3]);
    var$1.$originalHeight = jl_Integer_parseInt($this.$val$entry.data[4]);
};
function cbggg_TextureAtlas$TextureAtlasData$12() {
    let a = this; jl_Object.call(a);
    a.$val$entry11 = null;
    a.$this$039 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$12_parse = ($this, var$1) => {
    let var$2;
    var$1 = var$1;
    var$2 = $this.$val$entry11.data[1];
    if (jl_String_equals(var$2, $rt_s(49)))
        var$1.$degrees = 90;
    else if (!jl_String_equals(var$2, $rt_s(48)))
        var$1.$degrees = jl_Integer_parseInt(var$2);
    var$1.$rotate = var$1.$degrees != 90 ? 0 : 1;
};
function cbggg_TextureAtlas$TextureAtlasData$13() {
    let a = this; jl_Object.call(a);
    a.$val$entry8 = null;
    a.$val$hasIndexes = null;
    a.$this$043 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$13_parse = ($this, var$1) => {
    let var$2;
    var$1 = var$1;
    var$2 = jl_Integer_parseInt($this.$val$entry8.data[1]);
    var$1.$index5 = var$2;
    if (var$2 != (-1))
        $this.$val$hasIndexes.data[0] = 1;
};
function cbggg_TextureAtlas$TextureAtlasData$14() {
    jl_Object.call(this);
    this.$this$049 = null;
}
let cbggg_TextureAtlas$TextureAtlasData$14_compare = ($this, var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    var$2 = var$2;
    var$3 = var$1.$index5;
    if (var$3 == (-1))
        var$3 = 2147483647;
    var$4 = var$2.$index5;
    if (var$4 == (-1))
        var$4 = 2147483647;
    return var$3 - var$4 | 0;
};
function cbggg_TextureAtlas$TextureAtlasData$Region() {
    let a = this; jl_Object.call(a);
    a.$page2 = null;
    a.$name3 = null;
    a.$left0 = 0;
    a.$top = 0;
    a.$width0 = 0;
    a.$height1 = 0;
    a.$offsetX = 0.0;
    a.$offsetY0 = 0.0;
    a.$originalWidth = 0;
    a.$originalHeight = 0;
    a.$degrees = 0;
    a.$rotate = 0;
    a.$index5 = 0;
    a.$names = null;
    a.$values8 = null;
    a.$flip0 = 0;
}
let cbggg_TextureAtlas$TextureAtlasData$Region__init_ = $this => {
    $this.$index5 = (-1);
},
cbggg_TextureAtlas$TextureAtlasData$Region__init_0 = () => {
    let var_0 = new cbggg_TextureAtlas$TextureAtlasData$Region();
    cbggg_TextureAtlas$TextureAtlasData$Region__init_(var_0);
    return var_0;
};
function cbggg_TextureAtlas$TextureAtlasData$Page() {
    let a = this; jl_Object.call(a);
    a.$name10 = null;
    a.$textureFile = null;
    a.$texture0 = null;
    a.$width12 = 0.0;
    a.$height12 = 0.0;
    a.$useMipMaps0 = 0;
    a.$format10 = null;
    a.$minFilter = null;
    a.$magFilter0 = null;
    a.$uWrap0 = null;
    a.$vWrap0 = null;
    a.$pma = 0;
}
let cbggg_TextureAtlas$TextureAtlasData$Page__init_ = $this => {
    let var$1;
    $this.$format10 = cbgg_Pixmap$Format_RGBA8888;
    var$1 = cbgg_Texture$TextureFilter_Nearest;
    $this.$minFilter = var$1;
    $this.$magFilter0 = var$1;
    var$1 = cbgg_Texture$TextureWrap_ClampToEdge;
    $this.$uWrap0 = var$1;
    $this.$vWrap0 = var$1;
},
cbggg_TextureAtlas$TextureAtlasData$Page__init_0 = () => {
    let var_0 = new cbggg_TextureAtlas$TextureAtlasData$Page();
    cbggg_TextureAtlas$TextureAtlasData$Page__init_(var_0);
    return var_0;
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0 = $rt_classWithoutFields(),
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0__init_ = var$0 => {
    return;
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0__init_0 = () => {
    let var_0 = new cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0();
    cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0__init_(var_0);
    return var_0;
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0_get = (var$0, var$1) => {
    return $rt_createArray(jl_String, var$1);
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1 = $rt_classWithoutFields(),
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1__init_ = var$0 => {
    return;
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1__init_0 = () => {
    let var_0 = new cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1();
    cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1__init_(var_0);
    return var_0;
},
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1_get = (var$0, var$1) => {
    return $rt_createArray($rt_arraycls($rt_intcls), var$1);
};
function cbggg_BitmapFontCache() {
    let a = this; jl_Object.call(a);
    a.$font = null;
    a.$integer = 0;
    a.$layouts = null;
    a.$pooledLayouts = null;
    a.$glyphCount0 = 0;
    a.$x8 = 0.0;
    a.$y8 = 0.0;
    a.$color7 = null;
    a.$currentTint = 0.0;
    a.$pageVertices = null;
    a.$idx = null;
    a.$pageGlyphIndices = null;
    a.$tempGlyphCount = null;
}
let cbggg_BitmapFontCache_tempColor = null,
cbggg_BitmapFontCache_draw = ($this, $spriteBatch) => {
    let $regions, $j, $n, $vertices;
    $regions = $this.$font.$regions;
    $j = 0;
    $n = $this.$pageVertices.data.length;
    $spriteBatch = $spriteBatch;
    while ($j < $n) {
        if ($this.$idx.data[$j] > 0) {
            $vertices = $this.$pageVertices.data[$j];
            cbggg_PolygonSpriteBatch_draw($spriteBatch, (cbgu_Array_get($regions, $j)).$texture, $vertices, 0, $this.$idx.data[$j]);
        }
        $j = $j + 1 | 0;
    }
},
cbggg_BitmapFontCache_clear = $this => {
    let var$1, var$2, var$3, $i, var$5, $n, var$7;
    $this.$x8 = 0.0;
    $this.$y8 = 0.0;
    var$1 = $this.$pooledLayouts;
    cbgu_Pools_$callClinit();
    if (var$1 === null) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2, $rt_s(8));
        $rt_throw(var$2);
    }
    var$2 = null;
    var$3 = 0;
    $i = var$1.$size0;
    while (var$3 < $i) {
        a: {
            var$5 = cbgu_Array_get(var$1, var$3);
            if (var$5 !== null) {
                if (var$2 === null) {
                    var$2 = cbgu_ObjectMap_get(cbgu_Pools_typePools, jl_Object_getClass(var$5));
                    if (var$2 === null)
                        break a;
                }
                cbgu_Pool_free(var$2, var$5);
            }
        }
        var$3 = var$3 + 1 | 0;
    }
    cbgu_Array_clear($this.$pooledLayouts);
    cbgu_Array_clear($this.$layouts);
    $i = 0;
    $n = $this.$idx.data.length;
    while ($i < $n) {
        var$7 = $this.$pageGlyphIndices;
        if (var$7 !== null)
            cbgu_IntArray_clear(var$7.data[$i]);
        $this.$idx.data[$i] = 0;
        $i = $i + 1 | 0;
    }
},
cbggg_BitmapFontCache_requirePageGlyphs = ($this, $page, $glyphCount) => {
    let var$3, $newVertices, $vertexCount, $vertices;
    var$3 = $this.$pageGlyphIndices;
    if (var$3 !== null) {
        $newVertices = var$3.data;
        if ($glyphCount > $newVertices[$page].$items1.data.length)
            cbgu_IntArray_ensureCapacity($newVertices[$page], $glyphCount - $newVertices[$page].$size1 | 0);
    }
    var$3 = $this.$idx.data;
    $vertexCount = var$3[$page] + ($glyphCount * 20 | 0) | 0;
    $newVertices = $this.$pageVertices.data;
    $vertices = $newVertices[$page];
    if ($vertices === null)
        $newVertices[$page] = $rt_createFloatArray($vertexCount);
    else if ($vertices.data.length < $vertexCount) {
        $newVertices = $rt_createFloatArray($vertexCount);
        jl_System_fastArraycopy($vertices, 0, $newVertices, 0, var$3[$page]);
        $this.$pageVertices.data[$page] = $newVertices;
    }
},
cbggg_BitmapFontCache_addGlyph = ($this, $glyph, $x, $y, $color) => {
    let var$5, $scaleX, $scaleY, $width, $height, $u, $u2, $v, $v2, $x2, $y2, $page, $vertices, $idx, var$19, var$20;
    var$5 = $this.$font.$data5;
    $scaleX = var$5.$scaleX;
    $scaleY = var$5.$scaleY0;
    $x = $x + $glyph.$xoffset * $scaleX;
    $y = $y + $glyph.$yoffset * $scaleY;
    $width = $glyph.$width * $scaleX;
    $height = $glyph.$height * $scaleY;
    $u = $glyph.$u0;
    $u2 = $glyph.$u20;
    $v = $glyph.$v0;
    $v2 = $glyph.$v20;
    if ($this.$integer) {
        $x = jl_Math_round($x);
        $y = jl_Math_round($y);
        $width = jl_Math_round($width);
        $height = jl_Math_round($height);
    }
    $x2 = $x + $width;
    $y2 = $y + $height;
    $page = $glyph.$page;
    $vertices = $this.$idx.data;
    $idx = $vertices[$page];
    $vertices[$page] = $vertices[$page] + 20 | 0;
    $vertices = $this.$pageGlyphIndices;
    if ($vertices !== null) {
        $glyph = $vertices.data[$page];
        var$19 = $this.$glyphCount0;
        $this.$glyphCount0 = var$19 + 1 | 0;
        cbgu_IntArray_add($glyph, var$19);
    }
    $vertices = $this.$pageVertices.data[$page].data;
    var$20 = $idx + 1 | 0;
    $vertices[$idx] = $x;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $y;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $color;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $u;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $v;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $x;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $y2;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $color;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $u;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $v2;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $x2;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $y2;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $color;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $u2;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $v2;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $x2;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $y;
    var$19 = var$20 + 1 | 0;
    $vertices[var$20] = $color;
    var$20 = var$19 + 1 | 0;
    $vertices[var$19] = $u2;
    $vertices[var$20] = $v;
},
cbggg_BitmapFontCache_addText = ($this, $str, $x, $y, $start, $end, $targetWidth, $halign, $wrap, $truncate) => {
    let $layout, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, var$21;
    $layout = new cbggg_BitmapFontCache$addText$lambda$_31_0;
    cbgu_Pools_$callClinit();
    $layout = cbgu_Pool_obtain(cbgu_Pools_get($layout));
    cbgu_Array_add($this.$pooledLayouts, $layout);
    cbggg_GlyphLayout_setText($layout, $this.$font, $str, $start, $end, $this.$color7, $targetWidth, $halign, $wrap, $truncate);
    $str = $this.$font;
    $y = $y + $str.$data5.$ascent;
    var$11 = $layout.$runs.$size0;
    if (var$11) {
        var$12 = $this.$pageVertices;
        $start = var$12.data.length;
        $end = $str.$regions.$size0;
        if ($start < $end) {
            var$13 = $rt_createArray($rt_arraycls($rt_floatcls), $end);
            jl_System_fastArraycopy(var$12, 0, var$13, 0, $start);
            $this.$pageVertices = var$13;
            var$12 = $rt_createIntArray($end);
            var$13 = $this.$idx;
            jl_System_fastArraycopy(var$13, 0, var$12, 0, var$13.data.length);
            $this.$idx = var$12;
            var$12 = $rt_createArray(cbgu_IntArray, $end);
            $start = 0;
            var$13 = $this.$pageGlyphIndices;
            if (var$13 !== null) {
                $start = var$13.data.length;
                jl_System_fastArraycopy(var$13, 0, var$12, 0, $start);
            }
            var$13 = var$12.data;
            while ($start < $end) {
                var$13[$start] = cbgu_IntArray__init_();
                $start = $start + 1 | 0;
            }
            $this.$pageGlyphIndices = var$12;
            $this.$tempGlyphCount = $rt_createIntArray($end);
        }
        a: {
            cbgu_Array_add($this.$layouts, $layout);
            if ($this.$pageVertices.data.length == 1)
                cbggg_BitmapFontCache_requirePageGlyphs($this, 0, $layout.$glyphCount);
            else {
                var$14 = $this.$tempGlyphCount;
                ju_Arrays_fill(var$14, 0);
                var$15 = 0;
                $halign = $layout.$runs.$size0;
                while (var$15 < $halign) {
                    $str = (cbgu_Array_get($layout.$runs, var$15)).$glyphs;
                    var$12 = $str.$items;
                    $wrap = 0;
                    var$16 = $str.$size0;
                    while ($wrap < var$16) {
                        var$13 = var$12.data;
                        var$17 = var$14.data;
                        var$18 = var$13[$wrap].$page;
                        var$17[var$18] = var$17[var$18] + 1 | 0;
                        $wrap = $wrap + 1 | 0;
                    }
                    var$15 = var$15 + 1 | 0;
                }
                var$12 = var$14.data;
                $start = 0;
                $end = var$12.length;
                while (true) {
                    if ($start >= $end)
                        break a;
                    cbggg_BitmapFontCache_requirePageGlyphs($this, $start, var$12[$start]);
                    $start = $start + 1 | 0;
                }
            }
        }
        $str = $layout.$colors;
        $start = 0;
        $end = 0;
        $halign = 0;
        $targetWidth = 0.0;
        $wrap = 0;
        while ($wrap < var$11) {
            $truncate = cbgu_Array_get($layout.$runs, $wrap);
            var$19 = $truncate.$glyphs;
            var$12 = var$19.$items;
            var$13 = $truncate.$xAdvances.$items0;
            var$20 = $x + $truncate.$x5;
            var$21 = $y + $truncate.$y6;
            var$16 = 0;
            var$18 = var$19.$size0;
            while (var$16 < var$18) {
                var$15 = $halign + 1 | 0;
                if ($halign == $end) {
                    $start = $start + 1 | 0;
                    $targetWidth = cbgu_NumberUtils_intToFloatColor(cbgu_IntArray_get($str, $start));
                    $start = $start + 1 | 0;
                    $end = $start >= $str.$size1 ? (-1) : cbgu_IntArray_get($str, $start);
                }
                var$17 = var$13.data;
                var$14 = var$12.data;
                var$20 = var$20 + var$17[var$16];
                cbggg_BitmapFontCache_addGlyph($this, var$14[var$16], var$20, var$21, $targetWidth);
                var$16 = var$16 + 1 | 0;
                $halign = var$15;
            }
            $wrap = $wrap + 1 | 0;
        }
        $this.$currentTint = cbgg_Color_WHITE_FLOAT_BITS;
    }
    return $layout;
},
cbggg_BitmapFontCache__clinit_ = () => {
    cbggg_BitmapFontCache_tempColor = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
},
cbgu_BaseJsonReader = $rt_classWithoutFields(0);
function cbgu_JsonReader() {
    let a = this; jl_Object.call(a);
    a.$elements1 = null;
    a.$lastChild = null;
}
let cbgu_JsonReader__json_actions = null,
cbgu_JsonReader__json_key_offsets = null,
cbgu_JsonReader__json_trans_keys = null,
cbgu_JsonReader__json_single_lengths = null,
cbgu_JsonReader__json_range_lengths = null,
cbgu_JsonReader__json_index_offsets = null,
cbgu_JsonReader__json_indicies = null,
cbgu_JsonReader__json_trans_targs = null,
cbgu_JsonReader__json_trans_actions = null,
cbgu_JsonReader__json_eof_actions = null,
cbgu_JsonReader__init_ = $this => {
    $this.$elements1 = cbgu_Array__init_0(8);
    $this.$lastChild = cbgu_Array__init_0(8);
},
cbgu_JsonReader__init_0 = () => {
    let var_0 = new cbgu_JsonReader();
    cbgu_JsonReader__init_(var_0);
    return var_0;
},
cbgu_JsonReader_init__json_key_offsets_0 = () => {
    return $rt_createShortArrayFromData([0, 0, 11, 13, 14, 16, 25, 31, 37, 39, 50, 57, 64, 73, 74, 83, 85, 87, 96, 98, 100, 101, 103, 105, 116, 123, 130, 141, 142, 153, 155, 157, 168, 170, 172, 174, 179, 184, 184]);
},
cbgu_JsonReader_init__json_trans_keys_0 = () => {
    return $rt_createCharArrayFromData([13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 42, 47, 34, 42, 47, 13, 32, 34, 44, 47, 58, 125, 9, 10, 13, 32, 47, 58, 9, 10, 13, 32, 47, 58, 9, 10, 42, 47, 13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 9, 10, 13, 32, 44, 47, 125, 9, 10, 13, 32, 44, 47, 125, 13, 32, 34, 44, 47, 58, 125, 9, 10, 34, 13, 32, 34, 44, 47, 58, 125, 9, 10, 42, 47, 42, 47, 13, 32, 34, 44, 47, 58, 125, 9, 10, 42, 47, 42, 47, 34, 42, 47, 42, 47, 13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 9, 10, 13,
    32, 44, 47, 93, 9, 10, 13, 32, 44, 47, 93, 13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 34, 13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 42, 47, 42, 47, 13, 32, 34, 44, 47, 58, 91, 93, 123, 9, 10, 42, 47, 42, 47, 42, 47, 13, 32, 47, 9, 10, 13, 32, 47, 9, 10, 0]);
},
cbgu_JsonReader_init__json_single_lengths_0 = () => {
    return $rt_createByteArrayFromData([0, 9, 2, 1, 2, 7, 4, 4, 2, 9, 7, 7, 7, 1, 7, 2, 2, 7, 2, 2, 1, 2, 2, 9, 7, 7, 9, 1, 9, 2, 2, 9, 2, 2, 2, 3, 3, 0, 0]);
},
cbgu_JsonReader_init__json_range_lengths_0 = () => {
    return $rt_createByteArrayFromData([0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0]);
},
cbgu_JsonReader_init__json_index_offsets_0 = () => {
    return $rt_createShortArrayFromData([0, 0, 11, 14, 16, 19, 28, 34, 40, 43, 54, 62, 70, 79, 81, 90, 93, 96, 105, 108, 111, 113, 116, 119, 130, 138, 146, 157, 159, 170, 173, 176, 187, 190, 193, 196, 201, 206, 207]);
},
cbgu_JsonReader_init__json_indicies_0 = () => {
    return $rt_createByteArrayFromData([1, 1, 2, 3, 4, 3, 5, 3, 6, 1, 0, 7, 7, 3, 8, 3, 9, 9, 3, 11, 11, 12, 13, 14, 3, 15, 11, 10, 16, 16, 17, 18, 16, 3, 19, 19, 20, 21, 19, 3, 22, 22, 3, 21, 21, 24, 3, 25, 3, 26, 3, 27, 21, 23, 28, 29, 29, 28, 30, 31, 32, 3, 33, 34, 34, 33, 13, 35, 15, 3, 34, 34, 12, 36, 37, 3, 15, 34, 10, 16, 3, 36, 36, 12, 3, 38, 3, 3, 36, 10, 39, 39, 3, 40, 40, 3, 13, 13, 12, 3, 41, 3, 15, 13, 10, 42, 42, 3, 43, 43, 3, 28, 3, 44, 44, 3, 45, 45, 3, 47, 47, 48, 49, 50, 3, 51, 52, 53, 47,
    46, 54, 55, 55, 54, 56, 57, 58, 3, 59, 60, 60, 59, 49, 61, 52, 3, 60, 60, 48, 62, 63, 3, 51, 52, 53, 60, 46, 54, 3, 62, 62, 48, 3, 64, 3, 51, 3, 53, 62, 46, 65, 65, 3, 66, 66, 3, 49, 49, 48, 3, 67, 3, 51, 52, 53, 49, 46, 68, 68, 3, 69, 69, 3, 70, 70, 3, 8, 8, 71, 8, 3, 72, 72, 73, 72, 3, 3, 3, 0]);
},
cbgu_JsonReader_init__json_trans_targs_0 = () => {
    return $rt_createByteArrayFromData([35, 1, 3, 0, 4, 36, 36, 36, 36, 1, 6, 5, 13, 17, 22, 37, 7, 8, 9, 7, 8, 9, 7, 10, 20, 21, 11, 11, 11, 12, 17, 19, 37, 11, 12, 19, 14, 16, 15, 14, 12, 18, 17, 11, 9, 5, 24, 23, 27, 31, 34, 25, 38, 25, 25, 26, 31, 33, 38, 25, 26, 33, 28, 30, 29, 28, 26, 32, 31, 25, 23, 2, 36, 2]);
},
cbgu_JsonReader_init__json_trans_actions_0 = () => {
    return $rt_createByteArrayFromData([13, 0, 15, 0, 0, 7, 3, 11, 1, 11, 17, 0, 20, 0, 0, 5, 1, 1, 1, 0, 0, 0, 11, 13, 15, 0, 7, 3, 1, 1, 1, 1, 23, 0, 0, 0, 0, 0, 0, 11, 11, 0, 11, 11, 11, 11, 13, 0, 15, 0, 0, 7, 9, 3, 1, 1, 1, 1, 26, 0, 0, 0, 0, 0, 0, 11, 11, 0, 11, 11, 11, 1, 0, 0]);
},
cbgu_JsonReader_init__json_eof_actions_0 = () => {
    return $rt_createByteArrayFromData([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]);
},
cbgu_JsonReader__clinit_ = () => {
    cbgu_JsonReader__json_actions = $rt_createByteArrayFromData([0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 7, 2, 0, 8, 2, 1, 3, 2, 1, 5]);
    cbgu_JsonReader__json_key_offsets = cbgu_JsonReader_init__json_key_offsets_0();
    cbgu_JsonReader__json_trans_keys = cbgu_JsonReader_init__json_trans_keys_0();
    cbgu_JsonReader__json_single_lengths = cbgu_JsonReader_init__json_single_lengths_0();
    cbgu_JsonReader__json_range_lengths = cbgu_JsonReader_init__json_range_lengths_0();
    cbgu_JsonReader__json_index_offsets = cbgu_JsonReader_init__json_index_offsets_0();
    cbgu_JsonReader__json_indicies = cbgu_JsonReader_init__json_indicies_0();
    cbgu_JsonReader__json_trans_targs = cbgu_JsonReader_init__json_trans_targs_0();
    cbgu_JsonReader__json_trans_actions = cbgu_JsonReader_init__json_trans_actions_0();
    cbgu_JsonReader__json_eof_actions = cbgu_JsonReader_init__json_eof_actions_0();
},
cbgu_JsonWriter$OutputType = $rt_classWithoutFields(jl_Enum),
cbgu_JsonWriter$OutputType_json = null,
cbgu_JsonWriter$OutputType_javascript = null,
cbgu_JsonWriter$OutputType_minimal = null,
cbgu_JsonWriter$OutputType_javascriptPattern = null,
cbgu_JsonWriter$OutputType_minimalNamePattern = null,
cbgu_JsonWriter$OutputType_minimalValuePattern = null,
cbgu_JsonWriter$OutputType_$VALUES = null,
cbgu_JsonWriter$OutputType_$callClinit = () => {
    cbgu_JsonWriter$OutputType_$callClinit = $rt_eraseClinit(cbgu_JsonWriter$OutputType);
    cbgu_JsonWriter$OutputType__clinit_();
},
cbgu_JsonWriter$OutputType_values = () => {
    cbgu_JsonWriter$OutputType_$callClinit();
    return cbgu_JsonWriter$OutputType_$VALUES.$clone0();
},
cbgu_JsonWriter$OutputType__init_0 = ($this, var$1, var$2) => {
    cbgu_JsonWriter$OutputType_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
cbgu_JsonWriter$OutputType__init_ = (var_0, var_1) => {
    let var_2 = new cbgu_JsonWriter$OutputType();
    cbgu_JsonWriter$OutputType__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_JsonWriter$OutputType__clinit_ = () => {
    let var$1, var$2, var$3;
    cbgu_JsonWriter$OutputType_json = cbgu_JsonWriter$OutputType__init_($rt_s(786), 0);
    cbgu_JsonWriter$OutputType_javascript = cbgu_JsonWriter$OutputType__init_($rt_s(787), 1);
    var$1 = cbgu_JsonWriter$OutputType__init_($rt_s(788), 2);
    cbgu_JsonWriter$OutputType_minimal = var$1;
    var$2 = $rt_createArray(cbgu_JsonWriter$OutputType, 3);
    var$3 = var$2.data;
    var$3[0] = cbgu_JsonWriter$OutputType_json;
    var$3[1] = cbgu_JsonWriter$OutputType_javascript;
    var$3[2] = var$1;
    cbgu_JsonWriter$OutputType_$VALUES = var$2;
    cbgu_JsonWriter$OutputType_javascriptPattern = jur_Pattern_compile($rt_s(789));
    cbgu_JsonWriter$OutputType_minimalNamePattern = jur_Pattern_compile($rt_s(790));
    cbgu_JsonWriter$OutputType_minimalValuePattern = jur_Pattern_compile($rt_s(791));
};
function cbgm_MapProperties() {
    jl_Object.call(this);
    this.$properties1 = null;
}
let cbgm_MapProperties__init_ = $this => {
    $this.$properties1 = cbgu_ObjectMap__init_();
},
cbgm_MapProperties__init_0 = () => {
    let var_0 = new cbgm_MapProperties();
    cbgm_MapProperties__init_(var_0);
    return var_0;
},
cbgggp_ParticleEffect$_init_$lambda$_0_0 = $rt_classWithoutFields(),
cbgggp_ParticleEffect$_init_$lambda$_0_0__init_ = var$0 => {
    return;
},
cbgggp_ParticleEffect$_init_$lambda$_0_0__init_0 = () => {
    let var_0 = new cbgggp_ParticleEffect$_init_$lambda$_0_0();
    cbgggp_ParticleEffect$_init_$lambda$_0_0__init_(var_0);
    return var_0;
},
cbgggp_ParticleEffect$_init_$lambda$_0_0_get = (var$0, var$1) => {
    return $rt_createArray(cbgggp_ParticleController, var$1);
},
cbgggp_ParticleController$_init_$lambda$_0_0 = $rt_classWithoutFields(),
cbgggp_ParticleController$_init_$lambda$_0_0__init_ = var$0 => {
    return;
},
cbgggp_ParticleController$_init_$lambda$_0_0__init_0 = () => {
    let var_0 = new cbgggp_ParticleController$_init_$lambda$_0_0();
    cbgggp_ParticleController$_init_$lambda$_0_0__init_(var_0);
    return var_0;
},
cbgggp_ParticleController$_init_$lambda$_0_0_get = (var$0, var$1) => {
    return $rt_createArray(cbgggpi_Influencer, var$1);
},
cbgggp_ResourceData$_init_$lambda$_0_0 = $rt_classWithoutFields(),
cbgggp_ResourceData$_init_$lambda$_0_0__init_ = var$0 => {
    return;
},
cbgggp_ResourceData$_init_$lambda$_0_0__init_0 = () => {
    let var_0 = new cbgggp_ResourceData$_init_$lambda$_0_0();
    cbgggp_ResourceData$_init_$lambda$_0_0__init_(var_0);
    return var_0;
},
cbgggp_ResourceData$_init_$lambda$_0_0_get = (var$0, var$1) => {
    return $rt_createArray(cbgggp_ResourceData$SaveData, var$1);
},
cbgu_PropertiesUtils = $rt_classWithoutFields(),
cbgu_PropertiesUtils__init_ = $this => {
    return;
},
cbgu_PropertiesUtils__init_0 = () => {
    let var_0 = new cbgu_PropertiesUtils();
    cbgu_PropertiesUtils__init_(var_0);
    return var_0;
},
cbgu_PropertiesUtils_load = ($properties, $reader) => {
    let $mode, $unicode, $count, $buf, $offset, $keyLength, $firstChar, $br, $intVal, $temp, $key, $value, $newBuf, $nextChar, $digit;
    if ($properties === null) {
        $properties = new jl_NullPointerException;
        jl_Exception__init_($properties, $rt_s(792));
        $rt_throw($properties);
    }
    if ($reader === null) {
        $properties = new jl_NullPointerException;
        jl_Exception__init_($properties, $rt_s(793));
        $rt_throw($properties);
    }
    $mode = 0;
    $unicode = 0;
    $count = 0;
    $buf = $rt_createCharArray(40);
    $offset = 0;
    $keyLength = (-1);
    $firstChar = 1;
    $br = ji_BufferedReader__init_($reader, 1024);
    a: while (true) {
        $intVal = ji_BufferedReader_read($br);
        if ($intVal == (-1)) {
            if ($mode == 2 && $count <= 4) {
                $properties = new jl_IllegalArgumentException;
                jl_Exception__init_($properties, $rt_s(794));
                $rt_throw($properties);
            }
            if ($keyLength == (-1) && $offset > 0)
                $keyLength = $offset;
            if ($keyLength >= 0) {
                $temp = jl_String__init_($buf, 0, $offset);
                $key = jl_String_substring($temp, 0, $keyLength);
                $value = jl_String_substring0($temp, $keyLength);
                if ($mode == 1) {
                    $reader = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($reader);
                    jl_AbstractStringBuilder_append0($reader, $value);
                    jl_AbstractStringBuilder_append0($reader, $rt_s(795));
                    $value = jl_AbstractStringBuilder_toString($reader);
                }
                cbgu_ObjectMap_put($properties, $key, $value);
            }
            return;
        }
        $newBuf = $buf.data;
        $nextChar = $intVal & 65535;
        $intVal = $newBuf.length;
        if ($offset != $intVal)
            $newBuf = $buf;
        else {
            $newBuf = $rt_createCharArray($intVal * 2 | 0);
            jl_System_fastArraycopy($buf, 0, $newBuf, 0, $offset);
        }
        if ($mode == 2) {
            $digit = jl_Character_digit($nextChar, 16);
            if ($digit >= 0) {
                $unicode = ($unicode << 4) + $digit | 0;
                $count = $count + 1 | 0;
                if ($count < 4) {
                    $buf = $newBuf;
                    continue;
                }
            } else if ($count <= 4)
                break;
            $buf = $newBuf.data;
            $mode = 0;
            $intVal = $offset + 1 | 0;
            $buf[$offset] = $unicode & 65535;
            if ($nextChar != 10) {
                $buf = $newBuf;
                $offset = $intVal;
                continue;
            }
            $offset = $intVal;
        }
        if ($mode == 1)
            b: {
                $mode = 0;
                switch ($nextChar) {
                    case 10:
                        break;
                    case 13:
                        $mode = 3;
                        $buf = $newBuf;
                        continue a;
                    case 98:
                        $nextChar = 8;
                        break b;
                    case 102:
                        $nextChar = 12;
                        break b;
                    case 110:
                        $nextChar = 10;
                        break b;
                    case 114:
                        $nextChar = 13;
                        break b;
                    case 116:
                        $nextChar = 9;
                        break b;
                    case 117:
                        $mode = 2;
                        $count = 0;
                        $unicode = $count;
                        $buf = $newBuf;
                        continue a;
                    default:
                        break b;
                }
                $mode = 5;
                $buf = $newBuf;
                continue a;
            }
        else {
            c: {
                d: {
                    e: {
                        switch ($nextChar) {
                            case 10:
                                if ($mode != 3)
                                    break e;
                                $mode = 5;
                                $buf = $newBuf;
                                continue a;
                            case 13:
                                break e;
                            case 33:
                            case 35:
                                break d;
                            case 58:
                            case 61:
                                if ($keyLength != (-1))
                                    break c;
                                $mode = 0;
                                $intVal = $offset;
                                $keyLength = $offset;
                                $buf = $newBuf;
                                $offset = $intVal;
                                continue a;
                            case 92:
                                break;
                            default:
                                break c;
                        }
                        if ($mode == 4)
                            $keyLength = $offset;
                        $mode = 1;
                        $buf = $newBuf;
                        continue a;
                    }
                    f: {
                        $mode = 0;
                        $firstChar = 1;
                        if ($offset <= 0) {
                            if ($offset)
                                break f;
                            if ($keyLength)
                                break f;
                        }
                        if ($keyLength == (-1))
                            $keyLength = $offset;
                        $temp = jl_String__init_($newBuf, 0, $offset);
                        cbgu_ObjectMap_put($properties, jl_String_substring($temp, 0, $keyLength), jl_String_substring0($temp, $keyLength));
                    }
                    $keyLength = (-1);
                    $offset = 0;
                    $buf = $newBuf;
                    continue a;
                }
                if ($firstChar) {
                    while (true) {
                        $intVal = ji_BufferedReader_read($br);
                        if ($intVal == (-1))
                            break;
                        $intVal = $intVal & 65535;
                        if ($intVal == 13) {
                            $buf = $newBuf;
                            continue a;
                        }
                        if ($intVal != 10)
                            continue;
                        else {
                            $buf = $newBuf;
                            continue a;
                        }
                    }
                    $buf = $newBuf;
                    continue a;
                }
            }
            g: {
                switch ($nextChar) {
                    case 9:
                    case 10:
                    case 12:
                    case 13:
                    case 32:
                        break;
                    default:
                        $intVal = 0;
                        break g;
                }
                $intVal = 1;
            }
            if ($intVal) {
                if ($mode == 3)
                    $mode = 5;
                if (!$offset) {
                    $buf = $newBuf;
                    continue;
                }
                if ($offset == $keyLength) {
                    $buf = $newBuf;
                    continue;
                }
                if ($mode == 5) {
                    $buf = $newBuf;
                    continue;
                }
                if ($keyLength == (-1)) {
                    $mode = 4;
                    $buf = $newBuf;
                    continue;
                }
            }
            if (!($mode != 5 && $mode != 3))
                $mode = 0;
        }
        $firstChar = 0;
        if ($mode == 4) {
            $mode = 0;
            $keyLength = $offset;
        }
        $buf = $newBuf.data;
        $intVal = $offset + 1 | 0;
        $buf[$offset] = $nextChar;
        $buf = $newBuf;
        $offset = $intVal;
    }
    $properties = new jl_IllegalArgumentException;
    jl_Exception__init_($properties, $rt_s(796));
    $rt_throw($properties);
};
function jt_ParsePosition() {
    let a = this; jl_Object.call(a);
    a.$currentPosition = 0;
    a.$errorIndex = 0;
}
let jt_ParsePosition__init_0 = ($this, $index) => {
    $this.$errorIndex = (-1);
    $this.$currentPosition = $index;
},
jt_ParsePosition__init_ = var_0 => {
    let var_1 = new jt_ParsePosition();
    jt_ParsePosition__init_0(var_1, var_0);
    return var_1;
},
jt_ParsePosition_getIndex = $this => {
    return $this.$currentPosition;
},
jt_ParsePosition_setErrorIndex = ($this, $index) => {
    $this.$errorIndex = $index;
},
jt_ParsePosition_setIndex = ($this, $index) => {
    $this.$currentPosition = $index;
},
otcin_Buffers = $rt_classWithoutFields(),
otcin_Buffers__init_ = $this => {
    return;
},
otcin_Buffers__init_0 = () => {
    let var_0 = new otcin_Buffers();
    otcin_Buffers__init_(var_0);
    return var_0;
},
otcin_Buffers_free = $buffer => {
    let var$2;
    if (!$buffer.$direct) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2, $rt_s(797));
        $rt_throw(var$2);
    }
    if ($rt_isInstance($buffer, jn_NativeBuffer))
        $buffer.$release();
},
otjb_TimerHandler = $rt_classWithoutFields(0);
function cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0() {
    let a = this; jl_Object.call(a);
    a.$_00 = null;
    a.$_10 = null;
    a.$_20 = null;
    a.$_30 = 0;
}
let cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0_onTimer$exported$0 = var$1 => {
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_loadBinaryInternally(var$1.$_00, 1, var$1.$_10, var$1.$_20, var$1.$_30);
},
jl_AbstractStringBuilder$Constants = $rt_classWithoutFields(),
jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null,
jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null,
jl_AbstractStringBuilder$Constants_floatAnalysisResult = null,
jl_AbstractStringBuilder$Constants__init_ = $this => {
    return;
},
jl_AbstractStringBuilder$Constants__init_0 = () => {
    let var_0 = new jl_AbstractStringBuilder$Constants();
    jl_AbstractStringBuilder$Constants__init_(var_0);
    return var_0;
},
jl_AbstractStringBuilder$Constants__clinit_ = () => {
    jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
    jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
    jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
},
otcit_FloatAnalyzer = $rt_classWithoutFields(),
otcit_FloatAnalyzer_MAX_MANTISSA = 0,
otcit_FloatAnalyzer_mantissa10Table = null,
otcit_FloatAnalyzer_exp10Table = null,
otcit_FloatAnalyzer__init_ = $this => {
    return;
},
otcit_FloatAnalyzer__init_0 = () => {
    let var_0 = new otcit_FloatAnalyzer();
    otcit_FloatAnalyzer__init_(var_0);
    return var_0;
},
otcit_FloatAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $decExponent, $posCmp, $upperPos, $mantissaShift, $decMantissa, $decMantissaHi, $decMantissaLow, $lowerPos, $lowerPos_0, $upperPos_0;
    $bits = jl_Float_floatToIntBits($d);
    $result.$sign2 = !($bits & (-2147483648)) ? 0 : 1;
    $mantissa = $bits & 8388607;
    $exponent = $bits >> 23 & 255;
    if (!$mantissa && !$exponent) {
        $result.$mantissa0 = 0;
        $result.$exponent0 = 0;
        return;
    }
    if ($exponent)
        $bits = $mantissa | 8388608;
    else {
        $bits = $mantissa << 1;
        while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
            $bits = $bits << 1;
            $exponent = $exponent + (-1) | 0;
        }
    }
    var$6 = otcit_FloatAnalyzer_exp10Table.data;
    $mantissa = 0;
    $decExponent = var$6.length;
    if ($mantissa > $decExponent) {
        $result = new jl_IllegalArgumentException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $posCmp = $decExponent - 1 | 0;
    a: {
        while (true) {
            if ($mantissa > $posCmp) {
                $decExponent = ( -$mantissa | 0) - 1 | 0;
                break a;
            }
            $decExponent = ($mantissa + $posCmp | 0) / 2 | 0;
            $upperPos = var$6[$decExponent];
            if ($upperPos == $exponent)
                break;
            if ($exponent >= $upperPos)
                $mantissa = $decExponent + 1 | 0;
            else
                $posCmp = $decExponent - 1 | 0;
        }
    }
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    $mantissa = $decExponent + 1 | 0;
    $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
    $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
        while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    }
    $mantissa = $bits << 1;
    $bits = $mantissa + 1 | 0;
    var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
    $exponent = $decExponent + 1 | 0;
    $posCmp = var$6[$exponent];
    $upperPos = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($bits, $posCmp, $upperPos);
    $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($mantissa - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$exponent], $upperPos);
    $lowerPos = 1;
    while (true) {
        $lowerPos_0 = $lowerPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
            break;
        $lowerPos = $lowerPos_0;
    }
    $upperPos = 1;
    while (true) {
        $upperPos_0 = $upperPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
            break;
        $upperPos = $upperPos_0;
    }
    $posCmp = $rt_ucmp($lowerPos, $upperPos);
    $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            $mantissa = $rt_udiv($mantissa, 10);
            if ($rt_ucmp($mantissa, 1000000000) < 0)
                break;
        }
    else if ($rt_ucmp($mantissa, 100000000) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = $mantissa * 10 | 0;
    }
    $result.$mantissa0 = $mantissa;
    $result.$exponent0 = $decExponent - 50 | 0;
},
otcit_FloatAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
},
otcit_FloatAnalyzer__clinit_ = () => {
    otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
    otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
    (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
    (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
    otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
    268, 271, 275, 278, 281, 285, 288, 291]);
};
function otcit_FloatAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa0 = 0;
    a.$exponent0 = 0;
    a.$sign2 = 0;
}
let otcit_FloatAnalyzer$Result__init_ = $this => {
    return;
},
otcit_FloatAnalyzer$Result__init_0 = () => {
    let var_0 = new otcit_FloatAnalyzer$Result();
    otcit_FloatAnalyzer$Result__init_(var_0);
    return var_0;
},
cgxgbtf_HEXCoder = $rt_classWithoutFields(),
cgxgbtf_HEXCoder_HEX_CHARS = null,
cgxgbtf_HEXCoder_HEX_BYTES = null,
cgxgbtf_HEXCoder__init_ = $this => {
    return;
},
cgxgbtf_HEXCoder__init_0 = () => {
    let var_0 = new cgxgbtf_HEXCoder();
    cgxgbtf_HEXCoder__init_(var_0);
    return var_0;
},
cgxgbtf_HEXCoder_decode = $string => {
    let $bytes, var$3, $i, var$5, var$6, $c0, $c1, var$9;
    $bytes = $rt_createByteArray($string.$nativeString.length / 2 | 0);
    var$3 = $bytes.data;
    $i = 0;
    var$5 = var$3.length;
    while ($i < var$5) {
        var$6 = $i * 2 | 0;
        $c0 = jl_String_charAt($string, var$6);
        $c1 = jl_String_charAt($string, var$6 + 1 | 0);
        var$9 = cgxgbtf_HEXCoder_HEX_BYTES.data;
        var$3[$i] = ((var$9[$c0] << 4) + var$9[$c1] | 0) << 24 >> 24;
        $i = $i + 1 | 0;
    }
    return $bytes;
},
cgxgbtf_HEXCoder_encode = $bytes => {
    let var$2, $chars, var$4, $i, $b, var$7, var$8;
    $bytes = $bytes.data;
    var$2 = $bytes.length;
    $chars = $rt_createCharArray(var$2 * 2 | 0);
    var$4 = $chars.data;
    $i = 0;
    while ($i < var$2) {
        $b = $bytes[$i];
        var$7 = $i * 2 | 0;
        var$8 = cgxgbtf_HEXCoder_HEX_CHARS.data;
        var$4[var$7] = var$8[($b & 255) >>> 4 | 0];
        var$4[var$7 + 1 | 0] = var$8[$b & 15];
        $i = $i + 1 | 0;
    }
    return jl_String__init_0($chars);
},
cgxgbtf_HEXCoder__clinit_ = () => {
    let var$1, var$2, var$3, $i;
    var$1 = $rt_createCharArray(16);
    var$2 = var$1.data;
    var$2[0] = 48;
    var$2[1] = 49;
    var$2[2] = 50;
    var$2[3] = 51;
    var$2[4] = 52;
    var$2[5] = 53;
    var$2[6] = 54;
    var$2[7] = 55;
    var$2[8] = 56;
    var$2[9] = 57;
    var$2[10] = 65;
    var$2[11] = 66;
    var$2[12] = 67;
    var$2[13] = 68;
    var$2[14] = 69;
    var$2[15] = 70;
    cgxgbtf_HEXCoder_HEX_CHARS = var$1;
    var$1 = $rt_createIntArray(128);
    var$3 = var$1.data;
    cgxgbtf_HEXCoder_HEX_BYTES = var$1;
    $i = 0;
    while ($i < var$2.length) {
        var$3[var$2[$i]] = $i;
        if (var$2[$i] >= 65)
            var$3[(var$2[$i] - 65 | 0) + 97 | 0] = $i;
        $i = $i + 1 | 0;
    }
};
function ccve_GaussianBlurEffect$Convolve1DEffect() {
    let a = this; ccve_ShaderVfxEffect.call(a);
    a.$length7 = 0;
    a.$weights = null;
    a.$offsets = null;
}
let ccve_GaussianBlurEffect$Convolve1DEffect__init_ = ($this, $length, $weightsData, $offsets) => {
    let var$4, var$5, var$6;
    var$4 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(503));
    var$5 = cgxgbt_TeaFiles_classpath(cbg_Gdx_files, $rt_s(798));
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append0(var$6, $rt_s(799));
    jl_AbstractStringBuilder_append1(var$6, $length);
    ccve_ShaderVfxEffect__init_($this, ccvg_VfxGLUtils_compileShader(var$4, var$5, jl_AbstractStringBuilder_toString(var$6)));
    $this.$weights = $weightsData;
    $this.$length7 = $length;
    $this.$offsets = $offsets;
    ccve_GaussianBlurEffect$Convolve1DEffect_rebind($this);
},
ccve_GaussianBlurEffect$Convolve1DEffect__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ccve_GaussianBlurEffect$Convolve1DEffect();
    ccve_GaussianBlurEffect$Convolve1DEffect__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
ccve_GaussianBlurEffect$Convolve1DEffect_rebind = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    cbggg_ShaderProgram_bind($this.$program);
    cbggg_ShaderProgram_setUniformi($this.$program, $rt_s(507), 0);
    var$1 = $this.$program;
    var$2 = $this.$offsets;
    var$3 = $this.$length7 * 2 | 0;
    var$4 = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged(var$1);
    var$5 = cbggg_ShaderProgram_fetchUniformLocation(var$1, $rt_s(800));
    var$3 = var$3 / 2 | 0;
    cgxgbt_TeaGL20_glUniform2fv(var$4, var$5, var$3, var$2, 0);
    var$1 = $this.$program;
    var$2 = $this.$weights;
    var$3 = $this.$length7;
    var$4 = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged(var$1);
    var$6 = cbggg_ShaderProgram_fetchUniformLocation(var$1, $rt_s(801));
    cgxgbt_TeaGL20_glUniform1fv(var$4, var$6, var$3, var$2, 0);
},
ccve_GaussianBlurEffect$Convolve1DEffect_render = ($this, $context, $buffers) => {
    let var$3, var$4;
    var$3 = $buffers.$bufSrc;
    var$4 = $buffers.$bufDst;
    cbgg_GLTexture_bind(ccvf_VfxFrameBuffer_getTexture(var$3), 0);
    ccve_ShaderVfxEffect_renderShader($this, $context, var$4);
},
ccve_GaussianBlurEffect$1 = $rt_classWithoutFields(),
ccve_GaussianBlurEffect$1_$SwitchMap$com$crashinvaders$vfx$effects$GaussianBlurEffect$BlurType = null,
ccve_GaussianBlurEffect$1_$callClinit = () => {
    ccve_GaussianBlurEffect$1_$callClinit = $rt_eraseClinit(ccve_GaussianBlurEffect$1);
    ccve_GaussianBlurEffect$1__clinit_();
},
ccve_GaussianBlurEffect$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((ccve_GaussianBlurEffect$BlurType_values()).data.length);
    var$2 = var$1.data;
    ccve_GaussianBlurEffect$1_$SwitchMap$com$crashinvaders$vfx$effects$GaussianBlurEffect$BlurType = var$1;
    var$2[ccve_GaussianBlurEffect$BlurType_Gaussian3x3.$ordinal0] = 1;
    var$2[ccve_GaussianBlurEffect$BlurType_Gaussian5x5.$ordinal0] = 2;
    var$2[ccve_GaussianBlurEffect$BlurType_Gaussian3x3b.$ordinal0] = 3;
    var$2[ccve_GaussianBlurEffect$BlurType_Gaussian5x5b.$ordinal0] = 4;
},
jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset),
jnci_UTF8Charset_INSTANCE = null,
jnci_UTF8Charset_$callClinit = () => {
    jnci_UTF8Charset_$callClinit = $rt_eraseClinit(jnci_UTF8Charset);
    jnci_UTF8Charset__clinit_();
},
jnci_UTF8Charset__init_ = $this => {
    jnci_UTF8Charset_$callClinit();
    jnc_Charset__init_($this, $rt_s(655), $rt_createArray(jl_String, 0));
},
jnci_UTF8Charset__init_0 = () => {
    let var_0 = new jnci_UTF8Charset();
    jnci_UTF8Charset__init_(var_0);
    return var_0;
},
jnci_UTF8Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_UTF8Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 0.3333333432674408, 0.5);
    return var$1;
},
jnci_UTF8Charset_newEncoder = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = new jnci_UTF8Encoder;
    var$2 = $rt_createByteArray(1);
    var$3 = var$2.data;
    var$3[0] = 63;
    var$4 = jnc_CodingErrorAction_REPORT;
    var$1.$malformedAction0 = var$4;
    var$1.$unmappableAction = var$4;
    var$5 = var$3.length;
    if (var$5 && var$5 >= var$1.$maxBytesPerChar) {
        var$1.$charset0 = $this;
        var$1.$replacement1 = var$2.$clone0();
        var$1.$averageBytesPerChar = 2.0;
        var$1.$maxBytesPerChar = 4.0;
        var$1.$inArray0 = $rt_createCharArray(512);
        var$1.$outArray = $rt_createByteArray(512);
        return var$1;
    }
    var$4 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$4, $rt_s(802));
    $rt_throw(var$4);
},
jnci_UTF8Charset__clinit_ = () => {
    jnci_UTF8Charset_INSTANCE = jnci_UTF8Charset__init_0();
},
otcit_FloatSynthesizer = $rt_classWithoutFields(),
otcit_FloatSynthesizer_mantissa10Table = null,
otcit_FloatSynthesizer_exp10Table = null,
otcit_FloatSynthesizer__init_ = $this => {
    return;
},
otcit_FloatSynthesizer__init_0 = () => {
    let var_0 = new otcit_FloatSynthesizer();
    otcit_FloatSynthesizer__init_(var_0);
    return var_0;
},
otcit_FloatSynthesizer_synthesizeFloat = ($mantissa, $exp, $negative) => {
    let $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $iee754;
    $indexInTable = 50 + $exp | 0;
    if ($mantissa && $indexInTable >= 0) {
        var$5 = otcit_FloatSynthesizer_mantissa10Table.data;
        if ($indexInTable >= var$5.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_FloatAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
        $binExp = otcit_FloatSynthesizer_exp10Table.data[$indexInTable] - 1 | 0;
        $binMantissaShift = (32 - jl_Integer_numberOfLeadingZeros($binMantissa) | 0) - 30 | 0;
        $mantissa = $binMantissaShift >= 0 ? $binMantissa >>> $binMantissaShift | 0 : $binMantissa << ( -$binMantissaShift | 0);
        $exp = $binExp + $binMantissaShift | 0;
        if ($exp >= 255)
            return !$negative ? Infinity : (-Infinity);
        $mantissa = $mantissa + 32 | 0;
        if ($mantissa & (-1073741824)) {
            $mantissa = $mantissa >>> 1 | 0;
            $exp = $exp + 1 | 0;
        }
        if ($exp <= 0) {
            $mantissa = $mantissa >> jl_Math_min(( -$exp | 0) + 1 | 0, 32);
            $exp = 0;
        }
        $iee754 = ($mantissa >>> 6 | 0) & 8388607 | $exp << 23;
        if ($negative)
            $iee754 = $iee754 ^ (-2147483648);
        return $rt_intBitsToFloat($iee754);
    }
    return $rt_intBitsToFloat(!$negative ? 0 : (-2147483648));
},
otcit_FloatSynthesizer__clinit_ = () => {
    otcit_FloatSynthesizer_mantissa10Table = $rt_createIntArrayFromData([(-1598972629), (-924973963), (-82475629), (-1662160004), (-1003958181), (-181205903), (-1723866425), (-1081091207), (-277622185), (-1784126602), (-1156416428), (-371778711), (-1842974431), (-1229976214), (-463728444), (-1900443013), (-1301811943), (-553523104), (-1956564676), (-1371964021), (-641213203), (-2011370988), (-1440471911), (-726848064), (-2064892776), (-1507374146), (-810475859), (-2117160148), (-1572708361), (-892143627), (-41437709),
    (-1636511304), (-971897307), (-141129809), (-1698818867), (-1049781759), (-238485375), (-1759666096), (-1125840795), (-333559170), (-1819087217), (-1200117198), (-426404673), (-1877115657), (-1272652747), (-517074110), (-1933784055), (-1343488244), (-605618481), (-1989124287), (-1412663534), (-692087594), (-2043167482), (-1480217529), (-776530087), (-2095944040), (-1546188227), (-858993459), (-2147483648), (-1610612736), (-939524096), (-100663296), (-1673527296), (-1018167296), (-198967296), (-1734967296),
    (-1094967296), (-294967296), (-1794967296), (-1169967296), (-388717296), (-1853561046), (-1243209483), (-480270030), (-1910781505), (-1314735057), (-569676998), (-1966660859), (-1384584250), (-656988489), (-2021230542), (-1452796353), (-742253617), (-2074521247), (-1519409734), (-825520344), (-2126562951), (-1584461865), (-906835507), (-59802560), (-1647989336), (-986244846), (-159064233), (-1710027882), (-1063793028), (-255999461), (-1770612399), (-1139523675), (-350662770), (-1829776967)]);
    otcit_FloatSynthesizer_exp10Table = $rt_createIntArrayFromData([(-35), (-32), (-29), (-25), (-22), (-19), (-15), (-12), (-9), (-5), (-2), 1, 5, 8, 11, 15, 18, 21, 25, 28, 31, 35, 38, 41, 45, 48, 51, 55, 58, 61, 64, 68, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 167, 171, 174, 177, 181, 184, 187, 191, 194, 197, 201, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 241, 244, 247, 251, 254, 257, 260, 264, 267,
    270, 274, 277, 280, 284, 287, 290, 294]);
};
function jt_NumberFormat() {
    let a = this; jt_Format.call(a);
    a.$groupingUsed = 0;
    a.$parseIntegerOnly = 0;
    a.$maximumIntegerDigits = 0;
    a.$minimumIntegerDigits = 0;
    a.$maximumFractionDigits = 0;
    a.$minimumFractionDigits = 0;
    a.$roundingMode = null;
    a.$currency = null;
}
let jt_NumberFormat__init_ = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7;
    $this.$groupingUsed = 1;
    $this.$maximumIntegerDigits = 40;
    $this.$minimumIntegerDigits = 1;
    $this.$maximumFractionDigits = 3;
    $this.$roundingMode = jm_RoundingMode_HALF_EVEN;
    var$1 = ju_Locale_getDefault();
    if (var$1 === null) {
        var$1 = new jl_NullPointerException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    var$1 = otciu_CLDRHelper_resolveCountry(var$1.$languageCode, var$1.$countryCode);
    if (otcic_CurrencyHelper_$$metadata$$1 === null)
        otcic_CurrencyHelper_$$metadata$$1 = otcic_CurrencyHelper_getCountryToCurrencyMap$$create();
    var$2 = otcic_CurrencyHelper_$$metadata$$1;
    if (!var$2.hasOwnProperty($rt_ustr(var$1)))
        var$1 = null;
    else {
        var$2 = (var$2[$rt_ustr(var$1)].value !== null ? $rt_str(var$2[$rt_ustr(var$1)].value) : null);
        if (var$2 === null) {
            var$1 = new jl_NullPointerException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        }
        if (ju_Currency_currencies === null) {
            ju_Currency_currencies = ju_HashMap__init_();
            if (otcic_CurrencyHelper_$$metadata$$0 === null)
                otcic_CurrencyHelper_$$metadata$$0 = otcic_CurrencyHelper_getCurrencies$$create();
            var$3 = otcic_CurrencyHelper_$$metadata$$0;
            var$4 = 0;
            while (var$4 < var$3.length) {
                var$5 = var$3[var$4];
                var$6 = ju_Currency_currencies;
                var$7 = (var$5.code !== null ? $rt_str(var$5.code) : null);
                var$1 = new ju_Currency;
                var$1.$resource = var$5;
                ju_HashMap_put(var$6, var$7, var$1);
                var$4 = var$4 + 1 | 0;
            }
        }
        var$1 = ju_HashMap_get(ju_Currency_currencies, var$2);
        if (var$1 === null) {
            var$1 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(803));
            jl_AbstractStringBuilder_append(var$5, var$2);
            jl_Exception__init_(var$1, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$1);
        }
    }
    $this.$currency = var$1;
},
jt_NumberFormat_format = ($this, $object, $buffer, $field) => {
    let $dv, $lv;
    if (!($object instanceof jl_Number)) {
        $object = new jl_IllegalArgumentException;
        jl_Throwable__init_($object);
        $rt_throw($object);
    }
    $object = $object;
    $dv = $object.$doubleValue();
    $lv = $object.$longValue();
    if ($dv !== Long_toNumber($lv))
        return $this.$format3($dv, $buffer, $field);
    return $this.$format4($lv, $buffer, $field);
},
jt_NumberFormat_getInstance = () => {
    return jt_NumberFormat_getNumberInstance(ju_Locale_getDefault());
},
jt_NumberFormat_getNumberInstance = $locale => {
    return jt_DecimalFormat__init_(otciu_CLDRHelper_resolveNumberFormat($locale.$languageCode, $locale.$countryCode), jt_DecimalFormatSymbols__init_($locale));
},
jt_NumberFormat_isGroupingUsed = $this => {
    return $this.$groupingUsed;
},
jt_NumberFormat_setMaximumFractionDigits = ($this, $value) => {
    if ($value < 0)
        $value = 0;
    $this.$maximumFractionDigits = $value;
    if ($value < $this.$minimumFractionDigits)
        $this.$minimumFractionDigits = $value;
},
jt_NumberFormat_setMinimumFractionDigits = ($this, $value) => {
    if ($value < 0)
        $value = 0;
    $this.$minimumFractionDigits = $value;
    if ($this.$maximumFractionDigits < $value)
        $this.$maximumFractionDigits = $value;
};
function jt_ChoiceFormat() {
    let a = this; jt_NumberFormat.call(a);
    a.$choiceLimits = null;
    a.$choiceFormats = null;
}
let jt_ChoiceFormat_applyPattern = ($this, $template) => {
    let $limits, $formats, $length, $limitCount, $index, $buffer, $format, $position, $ch, $newLimits, $i, $value, $next, var$15;
    $limits = $rt_createDoubleArray(5);
    $formats = ju_ArrayList__init_();
    $length = $template.$nativeString.length;
    $limitCount = 0;
    $index = 0;
    $buffer = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_($buffer);
    ju_Locale_$callClinit();
    $format = jt_NumberFormat_getNumberInstance(ju_Locale_US);
    $position = jt_ParsePosition__init_(0);
    $format = $format;
    $formats = $formats;
    a: {
        while (true) {
            $ch = jt_ChoiceFormat_skipWhitespace($this, $template, $index);
            if ($ch >= $length) {
                if ($limitCount == $limits.data.length)
                    $this.$choiceLimits = $limits;
                else {
                    $newLimits = $rt_createDoubleArray($limitCount);
                    $this.$choiceLimits = $newLimits;
                    jl_System_fastArraycopy($limits, 0, $newLimits, 0, $limitCount);
                }
                $this.$choiceFormats = $rt_createArray(jl_String, $formats.$size3);
                $i = 0;
                while ($i < $formats.$size3) {
                    $this.$choiceFormats.data[$i] = ju_ArrayList_get($formats, $i);
                    $i = $i + 1 | 0;
                }
                return;
            }
            $position.$currentPosition = $ch;
            $value = !$format.$parseBigDecimal0 ? jt_DecimalFormat_parseNumber($format, $template, $position) : jt_DecimalFormat_parseBigDecimal($format, $template, $position);
            $ch = jt_ChoiceFormat_skipWhitespace($this, $template, $position.$currentPosition);
            if ($position.$errorIndex != (-1))
                break a;
            if ($ch >= $length)
                break a;
            $newLimits = $limits.data;
            $index = $ch + 1 | 0;
            $ch = jl_String_charAt($template, $ch);
            if ($limitCount != $newLimits.length)
                $newLimits = $limits;
            else {
                $newLimits = $rt_createDoubleArray($limitCount * 2 | 0);
                jl_System_fastArraycopy($limits, 0, $newLimits, 0, $limitCount);
            }
            b: {
                switch ($ch) {
                    case 35:
                    case 8804:
                        break;
                    case 60:
                        $next = $value.$doubleValue();
                        if ($next !== Infinity) {
                            $ch = $rt_compare($next, 0.0);
                            var$15 = $ch ? jl_Double_doubleToLongBits($next) : Long_ZERO;
                            $next = $rt_longBitsToDouble(($ch >= 0 ? Long_add(var$15, Long_fromInt(1)) : Long_sub(var$15, Long_fromInt(1))));
                        }
                        break b;
                    default:
                        $template = new jl_IllegalArgumentException;
                        jl_Throwable__init_($template);
                        $rt_throw($template);
                }
                $next = $value.$doubleValue();
            }
            if ($limitCount > 0 && $next <= $newLimits.data[$limitCount - 1 | 0])
                break;
            $limits = $newLimits.data;
            $buffer.$length1 = 0;
            $position.$currentPosition = $index;
            jt_Format_upTo($template, $position, $buffer, 124);
            $index = $position.$currentPosition;
            $ch = $limitCount + 1 | 0;
            $limits[$limitCount] = $next;
            ju_ArrayList_add($formats, jl_AbstractStringBuilder_toString($buffer));
            $limits = $newLimits;
            $limitCount = $ch;
        }
        $template = new jl_IllegalArgumentException;
        jl_Throwable__init_($template);
        $rt_throw($template);
    }
    $this.$choiceLimits = $rt_createDoubleArray(0);
    $this.$choiceFormats = $rt_createArray(jl_String, 0);
},
jt_ChoiceFormat_equals = ($this, $object) => {
    let $choice, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    if ($this === $object)
        return 1;
    if (!($object instanceof jt_ChoiceFormat))
        return 0;
    a: {
        $choice = $object;
        var$3 = $this.$choiceLimits;
        var$4 = $choice.$choiceLimits;
        if (var$3 === var$4)
            var$5 = 1;
        else {
            if (var$3 !== null && var$4 !== null) {
                var$3 = var$3.data;
                var$4 = var$4.data;
                var$6 = var$3.length;
                if (var$6 == var$4.length) {
                    var$7 = 0;
                    b: {
                        while (true) {
                            if (var$7 >= var$6) {
                                var$7 = (-1);
                                break b;
                            }
                            var$5 = var$7 + 0 | 0;
                            var$8 = var$3[var$5];
                            var$9 = var$4[var$5];
                            var$5 = (var$8 <= var$9 ? 0 : 1) - (var$9 <= var$8 ? 0 : 1) | 0;
                            if (!var$5) {
                                var$10 = 1.0 / var$8;
                                var$11 = 1.0 / var$9;
                                var$5 = (((var$10 <= var$11 ? 0 : 1) - (var$11 <= var$10 ? 0 : 1) | 0) + (var$9 !== var$9 ? 0 : 1) | 0) - (var$8 !== var$8 ? 0 : 1) | 0;
                            }
                            if (var$5)
                                break;
                            var$7 = var$7 + 1 | 0;
                        }
                    }
                    var$5 = var$7 >= 0 ? 0 : 1;
                    break a;
                }
            }
            var$5 = 0;
        }
    }
    return var$5 && ju_Arrays_equals($this.$choiceFormats, $choice.$choiceFormats) ? 1 : 0;
},
jt_ChoiceFormat_format = ($this, $value, $buffer, $field) => {
    let var$4, $i;
    var$4 = $this.$choiceLimits.data;
    $i = var$4.length - 1 | 0;
    while (true) {
        if ($i < 0) {
            var$4 = $this.$choiceFormats.data;
            if (var$4.length)
                jl_AbstractStringBuilder_append0($buffer, var$4[0]);
            return $buffer;
        }
        if (var$4[$i] <= $value)
            break;
        $i = $i + (-1) | 0;
    }
    jl_AbstractStringBuilder_append0($buffer, $this.$choiceFormats.data[$i]);
    return $buffer;
},
jt_ChoiceFormat_format0 = ($this, $value, $buffer, $field) => {
    return jt_ChoiceFormat_format($this, Long_toNumber($value), $buffer, $field);
},
jt_ChoiceFormat_hashCode = $this => {
    let $hashCode, $i, var$3, $v;
    $hashCode = 0;
    $i = 0;
    while (true) {
        var$3 = $this.$choiceLimits.data;
        if ($i >= var$3.length)
            break;
        $v = jl_Double_doubleToLongBits(var$3[$i]);
        $hashCode = $hashCode + (Long_lo(Long_xor($v, Long_shru($v, 32))) + jl_String_hashCode($this.$choiceFormats.data[$i]) | 0) | 0;
        $i = $i + 1 | 0;
    }
    return $hashCode;
},
jt_ChoiceFormat_skipWhitespace = ($this, $string, $index) => {
    let $length;
    $length = $string.$nativeString.length;
    while ($index < $length && jl_Character_isWhitespace(jl_String_charAt($string, $index))) {
        $index = $index + 1 | 0;
    }
    return $index;
};
function jt_DecimalFormat() {
    let a = this; jt_NumberFormat.call(a);
    a.$symbols = null;
    a.$positivePrefix = null;
    a.$negativePrefix = null;
    a.$positiveSuffix = null;
    a.$negativeSuffix = null;
    a.$multiplier = 0;
    a.$groupingSize = 0;
    a.$decimalSeparatorAlwaysShown = 0;
    a.$parseBigDecimal0 = 0;
    a.$exponentDigits = 0;
    a.$pattern4 = null;
}
let jt_DecimalFormat_POW10_ARRAY = null,
jt_DecimalFormat_POW10_INT_ARRAY = null,
jt_DecimalFormat__init_0 = $this => {
    jt_DecimalFormat__init_1($this, otciu_CLDRHelper_resolveNumberFormat((ju_Locale_getDefault()).$languageCode, (ju_Locale_getDefault()).$countryCode), jt_DecimalFormatSymbols__init_2());
},
jt_DecimalFormat__init_2 = () => {
    let var_0 = new jt_DecimalFormat();
    jt_DecimalFormat__init_0(var_0);
    return var_0;
},
jt_DecimalFormat__init_1 = ($this, $pattern, $value) => {
    let var$3, var$4, var$5, var$6, var$7, $$je;
    jt_NumberFormat__init_($this);
    $this.$positivePrefix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
    var$3 = $rt_createArray(jt_DecimalFormat$FormatField, 1);
    var$3.data[0] = jt_DecimalFormat$TextField__init_($rt_s(804));
    $this.$negativePrefix = var$3;
    $this.$positiveSuffix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
    $this.$negativeSuffix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
    $this.$multiplier = 1;
    a: {
        try {
            $value = jl_Object_clone($value);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_CloneNotSupportedException) {
                $value = $$je;
            } else {
                throw $$e;
            }
        }
        var$4 = new jl_AssertionError;
        jl_Throwable__init_0(var$4, $rt_s(805), $value);
        $rt_throw(var$4);
    }
    $this.$symbols = $value;
    $value = new jt_DecimalFormatParser;
    $value.$groupSize = 0;
    $value.$minimumFracLength = 0;
    $value.$fracLength = 0;
    $value.$exponentLength = 0;
    $value.$decimalSeparatorRequired = 0;
    $value.$multiplier0 = 1;
    $value.$string = $pattern;
    $value.$index = 0;
    $value.$positivePrefix0 = jt_DecimalFormatParser_parseText($value, 0, 0);
    if ($value.$index == $pattern.$nativeString.length) {
        $value = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(806));
        jl_AbstractStringBuilder_append(var$4, $pattern);
        jl_Exception__init_($value, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($value);
    }
    jt_DecimalFormatParser_parseNumber($value, 1);
    $value.$negativePrefix0 = null;
    $value.$negativeSuffix0 = null;
    if ($value.$index < $pattern.$nativeString.length && jl_String_charAt($pattern, $value.$index) != 59)
        $value.$positiveSuffix0 = jt_DecimalFormatParser_parseText($value, 1, 0);
    if ($value.$index < $pattern.$nativeString.length) {
        var$5 = $value.$index;
        $value.$index = var$5 + 1 | 0;
        if (jl_String_charAt($pattern, var$5) != 59) {
            var$4 = new jl_IllegalArgumentException;
            var$6 = $value.$index;
            $value = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($value);
            jl_AbstractStringBuilder_append($value, $rt_s(807));
            jl_AbstractStringBuilder_append1($value, var$6);
            jl_AbstractStringBuilder_append($value, $rt_s(808));
            jl_AbstractStringBuilder_append($value, $pattern);
            jl_Exception__init_(var$4, jl_AbstractStringBuilder_toString($value));
            $rt_throw(var$4);
        }
        $value.$negativePrefix0 = jt_DecimalFormatParser_parseText($value, 0, 1);
        jt_DecimalFormatParser_parseNumber($value, 0);
        $value.$negativeSuffix0 = jt_DecimalFormatParser_parseText($value, 1, 1);
    }
    var$3 = $value.$positivePrefix0;
    $this.$positivePrefix = var$3;
    $this.$positiveSuffix = $value.$positiveSuffix0;
    var$7 = $value.$negativePrefix0;
    if (var$7 !== null)
        $this.$negativePrefix = var$7;
    else {
        var$5 = var$3.data.length;
        var$7 = $rt_createArray(jt_DecimalFormat$FormatField, var$5 + 1 | 0);
        $this.$negativePrefix = var$7;
        jl_System_fastArraycopy(var$3, 0, var$7, 1, var$5);
        $this.$negativePrefix.data[0] = new jt_DecimalFormat$MinusField;
    }
    var$3 = $value.$negativeSuffix0;
    if (var$3 === null)
        var$3 = $value.$positiveSuffix0;
    $this.$negativeSuffix = var$3;
    var$6 = $value.$groupSize;
    $this.$groupingSize = var$6;
    var$6 = var$6 <= 0 ? 0 : 1;
    var$4 = $this;
    var$4.$groupingUsed = var$6;
    var$6 = !$value.$decimalSeparatorRequired ? $value.$minimumIntLength : jl_Math_max(1, $value.$minimumIntLength);
    if (var$6 < 0)
        var$6 = 0;
    var$4.$minimumIntegerDigits = var$6;
    if (var$4.$maximumIntegerDigits < var$6)
        var$4.$maximumIntegerDigits = var$6;
    var$5 = $value.$intLength;
    if (var$5 < 0)
        var$5 = 0;
    var$4.$maximumIntegerDigits = var$5;
    if (var$5 < var$6)
        var$4.$minimumIntegerDigits = var$5;
    jt_NumberFormat_setMinimumFractionDigits(var$4, $value.$minimumFracLength);
    jt_NumberFormat_setMaximumFractionDigits(var$4, $value.$fracLength);
    $this.$decimalSeparatorAlwaysShown = $value.$decimalSeparatorRequired;
    $this.$exponentDigits = $value.$exponentLength;
    $this.$multiplier = $value.$multiplier0;
    $this.$pattern4 = $pattern;
},
jt_DecimalFormat__init_ = (var_0, var_1) => {
    let var_2 = new jt_DecimalFormat();
    jt_DecimalFormat__init_1(var_2, var_0, var_1);
    return var_2;
},
jt_DecimalFormat_fieldsToText = ($this, $fields, $buffer) => {
    let var$3, var$4;
    $fields = $fields.data;
    var$3 = $fields.length;
    var$4 = 0;
    while (var$4 < var$3) {
        $fields[var$4].$render4($this, $buffer);
        var$4 = var$4 + 1 | 0;
    }
    return $buffer;
},
jt_DecimalFormat_fieldsToText0 = ($this, $fields) => {
    let var$2;
    if ($fields === null)
        return null;
    var$2 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jt_DecimalFormat_fieldsToText($this, $fields, var$2));
},
jt_DecimalFormat_getPositivePrefix = $this => {
    return jt_DecimalFormat_fieldsToText0($this, $this.$positivePrefix);
},
jt_DecimalFormat_getNegativePrefix = $this => {
    return jt_DecimalFormat_fieldsToText0($this, $this.$negativePrefix);
},
jt_DecimalFormat_getPositiveSuffix = $this => {
    return jt_DecimalFormat_fieldsToText0($this, $this.$positiveSuffix);
},
jt_DecimalFormat_getNegativeSuffix = $this => {
    return jt_DecimalFormat_fieldsToText0($this, $this.$negativeSuffix);
},
jt_DecimalFormat_isDecimalSeparatorAlwaysShown = $this => {
    return $this.$decimalSeparatorAlwaysShown;
},
jt_DecimalFormat_equals = ($this, $obj) => {
    let $other, var$3;
    if ($obj === $this)
        return 1;
    if (!($obj instanceof jt_DecimalFormat))
        return 0;
    $other = $obj;
    if ($obj === $this)
        var$3 = 1;
    else if (!($obj instanceof jt_NumberFormat))
        var$3 = 0;
    else {
        $obj = $obj;
        var$3 = $this.$groupingUsed == $obj.$groupingUsed && $this.$parseIntegerOnly == $obj.$parseIntegerOnly && $this.$maximumFractionDigits == $obj.$maximumFractionDigits && $this.$maximumIntegerDigits == $obj.$maximumIntegerDigits && $this.$minimumFractionDigits == $obj.$minimumFractionDigits && $this.$minimumIntegerDigits == $obj.$minimumIntegerDigits && $this.$roundingMode === $obj.$roundingMode && $this.$currency === $obj.$currency ? 1 : 0;
    }
    if (!var$3)
        return 0;
    a: {
        b: {
            if (!ju_Arrays_equals($this.$positivePrefix, $other.$positivePrefix))
                break b;
            if (!ju_Arrays_equals($this.$positiveSuffix, $other.$positiveSuffix))
                break b;
            if (!ju_Arrays_equals($this.$negativePrefix, $other.$negativePrefix))
                break b;
            if (!ju_Arrays_equals($this.$negativeSuffix, $other.$negativeSuffix))
                break b;
            if ($this.$multiplier != $other.$multiplier)
                break b;
            if ($this.$groupingSize != $other.$groupingSize)
                break b;
            if ($this.$decimalSeparatorAlwaysShown != $other.$decimalSeparatorAlwaysShown)
                break b;
            if ($this.$parseBigDecimal0 != $other.$parseBigDecimal0)
                break b;
            if ($this.$exponentDigits == $other.$exponentDigits) {
                var$3 = 1;
                break a;
            }
        }
        var$3 = 0;
    }
    return var$3;
},
jt_DecimalFormat_hashCode = $this => {
    let var$1, $result;
    var$1 = !$this.$groupingUsed ? 1237 : 1231;
    $result = !$this.$parseIntegerOnly ? 1237 : 1231;
    return ((((((((((((((((((((((((var$1 + $result | 0) + $this.$maximumFractionDigits | 0) + $this.$maximumIntegerDigits | 0) + $this.$minimumFractionDigits | 0) + $this.$minimumIntegerDigits | 0) + jl_Object_identity($this.$roundingMode) | 0) + ju_Objects_hashCode($this.$currency) | 0) * 31 | 0) + ju_Arrays_hashCode($this.$positivePrefix) | 0) * 31 | 0) + ju_Arrays_hashCode($this.$positiveSuffix) | 0) * 31 | 0) + ju_Arrays_hashCode($this.$negativePrefix) | 0) * 31 | 0) + ju_Arrays_hashCode($this.$negativeSuffix)
    | 0) * 31 | 0) + $this.$multiplier | 0) * 31 | 0) + $this.$groupingSize | 0) * 31 | 0) + (!$this.$decimalSeparatorAlwaysShown ? 0 : 1) | 0) * 31 | 0) + (!$this.$parseBigDecimal0 ? 0 : 1) | 0) * 31 | 0) + $this.$exponentDigits | 0;
},
jt_DecimalFormat_parseBigDecimal = ($this, $string, $position) => {
    let $mantissa, $exponent, $index, $allowGroupSeparator, $exponentSeparator, $intSize, $fracSize, $fractionalPart, $positive, $negPrefix, $posPrefix, var$14, $suffix, $c, $digit, $positiveExponent, $exponentLength, var$20, $result, var$22, var$23;
    $mantissa = jm_BigInteger_ZERO;
    $exponent = 0;
    $index = $position.$currentPosition;
    $allowGroupSeparator = 0;
    $exponentSeparator = $this.$symbols.$exponentSeparator;
    $intSize = 0;
    $fracSize = 0;
    $fractionalPart = 0;
    $positive = 1;
    $negPrefix = jt_DecimalFormat_getNegativePrefix($this);
    $posPrefix = jt_DecimalFormat_getPositivePrefix($this);
    if (jl_String_regionMatches($string, $index, $negPrefix, 0, $negPrefix.$nativeString.length)) {
        $positive = 0;
        var$14 = $index + $negPrefix.$nativeString.length | 0;
    } else {
        if (!jl_String_regionMatches($string, $index, $posPrefix, 0, $posPrefix.$nativeString.length)) {
            $position.$errorIndex = $index;
            return null;
        }
        var$14 = $index + jl_String_length($posPrefix) | 0;
    }
    $suffix = !$positive ? jt_DecimalFormat_getNegativeSuffix($this) : jt_DecimalFormat_getPositiveSuffix($this);
    if ($suffix === null)
        $suffix = jt_DecimalFormat_getPositiveSuffix($this);
    $posPrefix = $this;
    a: {
        while (true) {
            if (var$14 >= $string.$nativeString.length)
                break a;
            $c = jl_String_charAt($string, var$14);
            $negPrefix = $this.$symbols;
            $digit = $c - $negPrefix.$zeroDigit | 0;
            if ($digit >= 0 && $digit <= 9) {
                if ($fractionalPart)
                    $fracSize = $fracSize + 1 | 0;
                else {
                    $intSize = $intSize + 1 | 0;
                    $allowGroupSeparator = $posPrefix.$groupingUsed && $this.$groupingSize > 1 ? 1 : 0;
                }
                $mantissa = jm_BigInteger_add(jm_BigInteger_multiply($mantissa, jm_BigInteger_TEN), jm_BigInteger_valueOf(Long_fromInt($digit)));
                var$14 = var$14 + 1 | 0;
            } else if ($c == $negPrefix.$decimalSeparator) {
                if ($fractionalPart)
                    break a;
                if ($intSize < 1)
                    break;
                $fractionalPart = 1;
                $allowGroupSeparator = 0;
                var$14 = var$14 + 1 | 0;
            } else {
                if ($c != $negPrefix.$groupingSeparator) {
                    if (!jl_String_regionMatches($string, var$14, $exponentSeparator, 0, $exponentSeparator.$nativeString.length))
                        break a;
                    if (!$this.$exponentDigits)
                        break a;
                    var$14 = var$14 + $exponentSeparator.$nativeString.length | 0;
                    if (var$14 == $string.$nativeString.length) {
                        $position.$errorIndex = var$14;
                        return null;
                    }
                    $positiveExponent = 1;
                    if (jl_String_charAt($string, var$14) == $this.$symbols.$minusSign) {
                        $positiveExponent = 0;
                        var$14 = var$14 + 1 | 0;
                    }
                    $exponentLength = 0;
                    b: {
                        while (true) {
                            if (var$14 >= $string.$nativeString.length)
                                break b;
                            var$20 = jl_String_charAt($string, var$14) - $this.$symbols.$zeroDigit | 0;
                            if (var$20 < 0)
                                break b;
                            if (var$20 > 9)
                                break;
                            $exponent = ($exponent * 10 | 0) + var$20 | 0;
                            $exponentLength = $exponentLength + 1 | 0;
                            var$14 = var$14 + 1 | 0;
                        }
                    }
                    if (!$exponentLength) {
                        $position.$errorIndex = var$14;
                        return null;
                    }
                    if ($positiveExponent)
                        break a;
                    $exponent =  -$exponent | 0;
                    break a;
                }
                if (!$allowGroupSeparator)
                    break a;
                $allowGroupSeparator = 0;
                var$14 = var$14 + 1 | 0;
            }
        }
        $position.$errorIndex = var$14;
        return null;
    }
    if (!$fracSize && $fractionalPart && !$this.$decimalSeparatorAlwaysShown) {
        $position.$errorIndex = var$14;
        return null;
    }
    if ($suffix !== null && !jl_String_regionMatches($string, var$14, $suffix, 0, $suffix.$nativeString.length)) {
        $position.$errorIndex = var$14;
        return null;
    }
    $position.$currentPosition = var$14;
    $result = jm_BigDecimal__init_0($mantissa,  -($exponent - $fracSize | 0) | 0);
    var$20 = $this.$multiplier;
    if (var$20 != 1) {
        $string = jm_BigDecimal_valueOf(Long_fromInt(var$20));
        $position = jm_BigDecimal_getUnscaledValue($result);
        $mantissa = jm_BigDecimal_getUnscaledValue($string);
        var$22 = Long_sub(Long_fromInt($result.$scale0), Long_fromInt($string.$scale0));
        var$20 = 0;
        $index = 1;
        $exponent = jm_BigDecimal_FIVE_POW.data.length - 1 | 0;
        if (jm_BigDecimal_isZero($string)) {
            $string = new jl_ArithmeticException;
            jl_Exception__init_($string, $rt_s(809));
            $rt_throw($string);
        }
        if (!$position.$sign0)
            $result = jm_BigDecimal_zeroScaledBy(var$22);
        else {
            $string = jm_BigInteger_gcd($position, $mantissa);
            $position = jm_BigInteger_divide($position, $string);
            $string = jm_BigInteger_divide($mantissa, $string);
            $fracSize = jm_BigInteger_getLowestSetBit($string);
            $string = jm_BigInteger_shiftRight($string, $fracSize);
            while (true) {
                var$23 = (jm_BigInteger_divideAndRemainder($string, jm_BigDecimal_FIVE_POW.data[$index])).data;
                if (!var$23[1].$sign0) {
                    var$20 = var$20 + $index | 0;
                    if ($index < $exponent)
                        $index = $index + 1 | 0;
                    $string = var$23[0];
                    continue;
                }
                if ($index == 1)
                    break;
                $index = 1;
            }
            if (!jm_BigInteger_equals(jm_BigInteger_abs($string), jm_BigInteger_ONE)) {
                $string = new jl_ArithmeticException;
                jl_Exception__init_($string, $rt_s(810));
                $rt_throw($string);
            }
            if ($string.$sign0 < 0)
                $position = jm_BigInteger_negate($position);
            $index = jm_BigDecimal_toIntScale(Long_add(var$22, Long_fromInt(jl_Math_max($fracSize, var$20))));
            var$20 = $fracSize - var$20 | 0;
            $result = jm_BigDecimal__init_0(var$20 > 0 ? jm_Multiplication_multiplyByFivePow($position, var$20) : jm_BigInteger_shiftLeft($position,  -var$20 | 0), $index);
        }
    }
    if (!$positive)
        $result = jm_BigDecimal_negate($result);
    return $result;
},
jt_DecimalFormat_parseNumber = ($this, $string, $position) => {
    let $mantissa, $shift, $exponent, $index, $allowGroupSeparator, $exponentSeparator, $intSize, $fracSize, $fractionalPart, $positive, $negPrefix, $posPrefix, $multiplierDigits, $suffix, $c, $digit, $next, var$20, $positiveExponent, $exponentLength, var$23;
    $mantissa = Long_ZERO;
    $shift = 0;
    $exponent = 0;
    $index = jt_ParsePosition_getIndex($position);
    $allowGroupSeparator = 0;
    $exponentSeparator = jt_DecimalFormatSymbols_getExponentSeparator($this.$symbols);
    $intSize = 0;
    $fracSize = 0;
    $fractionalPart = 0;
    $positive = 1;
    $negPrefix = jt_DecimalFormat_getNegativePrefix($this);
    $posPrefix = jt_DecimalFormat_getPositivePrefix($this);
    if (jl_String_regionMatches($string, $index, $negPrefix, 0, jl_String_length($negPrefix))) {
        $positive = 0;
        $multiplierDigits = $index + jl_String_length($negPrefix) | 0;
    } else {
        if (!jl_String_regionMatches($string, $index, $posPrefix, 0, jl_String_length($posPrefix))) {
            jt_ParsePosition_setErrorIndex($position, $index);
            return null;
        }
        $multiplierDigits = $index + jl_String_length($posPrefix) | 0;
    }
    $suffix = !$positive ? jt_DecimalFormat_getNegativeSuffix($this) : jt_DecimalFormat_getPositiveSuffix($this);
    if ($suffix === null)
        $suffix = jt_DecimalFormat_getPositiveSuffix($this);
    if (jl_String_regionMatches($string, $multiplierDigits, jt_DecimalFormatSymbols_getInfinity($this.$symbols), 0, jl_String_length(jt_DecimalFormatSymbols_getInfinity($this.$symbols)))) {
        $multiplierDigits = $multiplierDigits + jl_String_length(jt_DecimalFormatSymbols_getInfinity($this.$symbols)) | 0;
        if ($suffix !== null && !jl_String_regionMatches($string, $multiplierDigits, $suffix, 0, jl_String_length($suffix))) {
            jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
            return null;
        }
        jt_ParsePosition_setIndex($position, $multiplierDigits);
        return jl_Double_valueOf(!$positive ? (-Infinity) : Infinity);
    }
    $negPrefix = $this;
    a: {
        while (true) {
            if ($multiplierDigits >= jl_String_length($string))
                break a;
            $c = jl_String_charAt($string, $multiplierDigits);
            $digit = $c - jt_DecimalFormatSymbols_getZeroDigit($this.$symbols) | 0;
            if ($digit >= 0 && $digit <= 9) {
                if ($fractionalPart)
                    $fracSize = $fracSize + 1 | 0;
                else {
                    $intSize = $intSize + 1 | 0;
                    $allowGroupSeparator = jt_NumberFormat_isGroupingUsed($negPrefix) && $this.$groupingSize > 1 ? 1 : 0;
                }
                if (Long_le($mantissa, Long_create(3435973836, 214748364))) {
                    $next = Long_mul($mantissa, Long_fromInt(10));
                    var$20 = Long_fromInt($digit);
                    if (Long_le($next, Long_sub(Long_create(4294967295, 2147483647), var$20)))
                        $mantissa = Long_add($next, var$20);
                    else
                        $shift = $shift + 1 | 0;
                } else {
                    if (!$shift && $digit > 5)
                        $mantissa = Long_add($mantissa, Long_fromInt(1));
                    $shift = $shift + 1 | 0;
                }
                $multiplierDigits = $multiplierDigits + 1 | 0;
            } else if ($c == jt_DecimalFormatSymbols_getDecimalSeparator($this.$symbols)) {
                if ($fractionalPart)
                    break a;
                if ($intSize < 1)
                    break;
                $fractionalPart = 1;
                $allowGroupSeparator = 0;
                $multiplierDigits = $multiplierDigits + 1 | 0;
            } else {
                if ($c != jt_DecimalFormatSymbols_getGroupingSeparator($this.$symbols)) {
                    if (!jl_String_regionMatches($string, $multiplierDigits, $exponentSeparator, 0, jl_String_length($exponentSeparator)))
                        break a;
                    if (!$this.$exponentDigits)
                        break a;
                    $multiplierDigits = $multiplierDigits + jl_String_length($exponentSeparator) | 0;
                    if ($multiplierDigits == jl_String_length($string)) {
                        jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
                        return null;
                    }
                    $positiveExponent = 1;
                    if (jl_String_charAt($string, $multiplierDigits) == jt_DecimalFormatSymbols_getMinusSign($this.$symbols)) {
                        $positiveExponent = 0;
                        $multiplierDigits = $multiplierDigits + 1 | 0;
                    }
                    $exponentLength = 0;
                    b: {
                        while (true) {
                            if ($multiplierDigits >= jl_String_length($string))
                                break b;
                            $digit = jl_String_charAt($string, $multiplierDigits) - jt_DecimalFormatSymbols_getZeroDigit($this.$symbols) | 0;
                            if ($digit < 0)
                                break b;
                            if ($digit > 9)
                                break;
                            $exponent = ($exponent * 10 | 0) + $digit | 0;
                            $exponentLength = $exponentLength + 1 | 0;
                            $multiplierDigits = $multiplierDigits + 1 | 0;
                        }
                    }
                    if (!$exponentLength) {
                        jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
                        return null;
                    }
                    if ($positiveExponent)
                        break a;
                    $exponent =  -$exponent | 0;
                    break a;
                }
                if (!$allowGroupSeparator)
                    break a;
                $allowGroupSeparator = 0;
                $multiplierDigits = $multiplierDigits + 1 | 0;
            }
        }
        jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
        return null;
    }
    if (!$fracSize && $fractionalPart && !jt_DecimalFormat_isDecimalSeparatorAlwaysShown($this)) {
        jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
        return null;
    }
    if ($suffix !== null && !jl_String_regionMatches($string, $multiplierDigits, $suffix, 0, jl_String_length($suffix))) {
        jt_ParsePosition_setErrorIndex($position, $multiplierDigits);
        return null;
    }
    jt_ParsePosition_setIndex($position, $multiplierDigits);
    $multiplierDigits = $this.$multiplier;
    if ($multiplierDigits != 1) {
        $multiplierDigits = jt_DecimalFormat_fastLn100($this, $multiplierDigits);
        $positiveExponent = jt_DecimalFormat_POW10_INT_ARRAY.data[$multiplierDigits];
        $exponentLength = $this.$multiplier;
        if ($positiveExponent == $exponentLength)
            $exponent = $exponent - $multiplierDigits | 0;
        else
            $mantissa = Long_div($mantissa, Long_fromInt($exponentLength));
    }
    c: {
        $multiplierDigits = $exponent + ($shift - $fracSize | 0) | 0;
        if ($multiplierDigits > 0) {
            var$23 = jt_DecimalFormat_POW10_ARRAY.data;
            if ($multiplierDigits < var$23.length) {
                if (Long_ge($mantissa, Long_div(Long_create(4294967295, 2147483647), var$23[$multiplierDigits])))
                    break c;
                $mantissa = Long_mul($mantissa, var$23[$multiplierDigits]);
                $multiplierDigits = 0;
                break c;
            }
        }
        if ($multiplierDigits < 0) {
            $positiveExponent =  -$multiplierDigits | 0;
            var$23 = jt_DecimalFormat_POW10_ARRAY.data;
            if ($positiveExponent < var$23.length && Long_eq(Long_rem($mantissa, var$23[$positiveExponent]), Long_ZERO)) {
                $mantissa = Long_div($mantissa, var$23[$positiveExponent]);
                $multiplierDigits = 0;
            }
        }
    }
    $positiveExponent = Long_compare($mantissa, Long_ZERO);
    if (!$positiveExponent && !$positive)
        return jl_Double_valueOf(-0.0);
    if (!$multiplierDigits) {
        if (!$positive)
            $mantissa = Long_neg($mantissa);
        return jl_Long_valueOf($mantissa);
    }
    $multiplierDigits = $multiplierDigits + 18 | 0;
    if ($positiveExponent)
        while (Long_eq(Long_div($mantissa, Long_create(2808348672, 232830643)), Long_ZERO)) {
            $mantissa = Long_mul($mantissa, Long_fromInt(10));
            $multiplierDigits = $multiplierDigits + (-1) | 0;
        }
    return jl_Double_valueOf(otcit_DoubleSynthesizer_synthesizeDouble($mantissa, $multiplierDigits, $positive ? 0 : 1));
},
jt_DecimalFormat_format2 = ($this, $object, $buffer, $field) => {
    let var$4;
    if ($object instanceof jm_BigDecimal)
        return jt_DecimalFormat_format($this, $object, $buffer, $field);
    if (!($object instanceof jm_BigInteger))
        return jt_NumberFormat_format($this, $object, $buffer, $field);
    $object = $object;
    var$4 = new jm_BigDecimal;
    jm_BigDecimal_$callClinit();
    jm_BigDecimal__init_2(var$4, $object, 0);
    return jt_DecimalFormat_format($this, var$4, $buffer, $field);
},
jt_DecimalFormat_format = ($this, $value, $buffer, $field) => {
    if ($this.$exponentDigits <= 0)
        jt_DecimalFormat_formatRegular($this, $value, $buffer);
    else
        jt_DecimalFormat_formatExponent($this, $value, $buffer);
    return $buffer;
},
jt_DecimalFormat_format1 = ($this, $value, $buffer, $field) => {
    let var$4;
    if ($this.$exponentDigits <= 0) {
        var$4 = jl_Math_abs1($value);
        jt_DecimalFormat_formatRegular0($this, var$4, jt_DecimalFormat_fastLn10($this, var$4), Long_lt($value, Long_ZERO) ? 0 : 1, $buffer);
    } else {
        var$4 = jl_Math_abs1($value);
        jt_DecimalFormat_formatExponent0($this, var$4, jt_DecimalFormat_fastLn10($this, var$4), Long_lt($value, Long_ZERO) ? 0 : 1, $buffer);
    }
    return $buffer;
},
jt_DecimalFormat_format0 = ($this, $value, $buffer, $field) => {
    let $analysisResult, var$5, var$6;
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_append0(jt_DecimalFormat_fieldsToText($this, $this.$positivePrefix, $buffer), $this.$symbols.$nan);
        jt_DecimalFormat_appendSuffix($this, 1, $buffer);
    } else if (!(!isFinite($value) ? 1 : 0)) {
        $analysisResult = jt_DecimalFormat$Constants_doubleAnalysisResult;
        otcit_DoubleAnalyzer_analyze($value, $analysisResult);
        if ($this.$exponentDigits <= 0)
            jt_DecimalFormat_formatRegular0($this, $analysisResult.$mantissa, $analysisResult.$exponent, $analysisResult.$sign1 ? 0 : 1, $buffer);
        else
            jt_DecimalFormat_formatExponent0($this, $analysisResult.$mantissa, $analysisResult.$exponent, $analysisResult.$sign1 ? 0 : 1, $buffer);
    } else {
        var$5 = $rt_compare($value, 0.0);
        var$6 = var$5 <= 0 ? $this.$negativePrefix : $this.$positivePrefix;
        jl_AbstractStringBuilder_append0(jt_DecimalFormat_fieldsToText($this, var$6, $buffer), $this.$symbols.$infinity);
        jt_DecimalFormat_appendSuffix($this, var$5 <= 0 ? 0 : 1, $buffer);
    }
    return $buffer;
},
jt_DecimalFormat_formatExponent0 = ($this, $mantissa, $exponent, $sign, $buffer) => {
    let $visibleExponent, $mantissaLength, $exponentLength, $multiplierDigits, $tenMultiplier, var$10, var$11, $i, $significantSize, $exponentMultiplier, $delta, $newMantissaLength, $exponentPos, $i_0, $mantissaDigitMask, $exponentDigit, $requiredSize, $limit, $count;
    $visibleExponent = jt_DecimalFormat_fastLn10($this, $mantissa);
    $mantissaLength = $visibleExponent + 1 | 0;
    $exponentLength = $this.$multiplier;
    if ($exponentLength != 1) {
        $multiplierDigits = jt_DecimalFormat_fastLn100($this, $exponentLength);
        $tenMultiplier = jt_DecimalFormat_POW10_INT_ARRAY.data[$multiplierDigits];
        $exponentLength = $this.$multiplier;
        if ($tenMultiplier == $exponentLength)
            $exponent = $exponent + $multiplierDigits | 0;
        else {
            var$10 = Long_fromInt($exponentLength);
            if (Long_ge($mantissa, Long_div(Long_create(4294967295, 2147483647), var$10))) {
                jt_DecimalFormat_formatExponent($this, jm_BigDecimal__init_0(jm_BigInteger_valueOf($mantissa), $visibleExponent - $exponent | 0), $buffer);
                return;
            }
            $mantissa = Long_mul($mantissa, var$10);
            $visibleExponent = jt_DecimalFormat_fastLn10($this, $mantissa);
            $mantissaLength = $visibleExponent + 1 | 0;
        }
    }
    var$11 = $this;
    $i = var$11.$minimumIntegerDigits;
    $significantSize = $i + var$11.$maximumFractionDigits | 0;
    $exponentMultiplier = (var$11.$maximumIntegerDigits - $i | 0) + 1 | 0;
    if ($exponentMultiplier <= 1) {
        $exponentLength = $i - 1 | 0;
        $multiplierDigits = $exponent - $exponentLength | 0;
        $i = $visibleExponent - $exponentLength | 0;
    } else {
        $delta = $exponent - $rt_imul($exponent / $exponentMultiplier | 0, $exponentMultiplier) | 0;
        $multiplierDigits = $exponent - $delta | 0;
        $i = $visibleExponent - $delta | 0;
    }
    if ($significantSize < 0)
        $mantissa = Long_ZERO;
    else if ($significantSize < $mantissaLength) {
        $mantissa = jt_DecimalFormat_applyRounding0($this, $mantissa, $mantissaLength, $significantSize, $sign);
        $newMantissaLength = jt_DecimalFormat_fastLn10($this, $mantissa) + 1 | 0;
        if ($newMantissaLength > $mantissaLength) {
            $multiplierDigits = $multiplierDigits + 1 | 0;
            $i = $i + 1 | 0;
            $mantissaLength = $newMantissaLength;
        }
    }
    jt_DecimalFormat_fieldsToText($this, !$sign ? $this.$negativePrefix : $this.$positivePrefix, $buffer);
    $exponentPos = jl_Math_max($i, 0);
    $i_0 = $mantissaLength - 1 | 0;
    while ($i_0 >= $exponentPos) {
        $mantissaDigitMask = jt_DecimalFormat_POW10_ARRAY.data[$i_0];
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, Long_lo(Long_div($mantissa, $mantissaDigitMask))));
        $mantissa = Long_rem($mantissa, $mantissaDigitMask);
        $i_0 = $i_0 + (-1) | 0;
    }
    $i_0 = $exponentPos - 1 | 0;
    while ($i_0 >= $i) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        $i_0 = $i_0 + (-1) | 0;
    }
    a: {
        $exponentDigit = $significantSize - ($mantissaLength - $i | 0) | 0;
        $requiredSize = $exponentDigit - (var$11.$maximumFractionDigits - var$11.$minimumFractionDigits | 0) | 0;
        if ($requiredSize <= 0) {
            if (Long_eq($mantissa, Long_ZERO))
                break a;
            if ($exponentDigit <= 0)
                break a;
        }
        jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
        $limit = jl_Math_max(0, $i - $exponentDigit | 0);
        $count = 0;
        $i = $i - 1 | 0;
        b: {
            while ($i >= $limit) {
                $mantissaDigitMask = jt_DecimalFormat_POW10_ARRAY.data[$i];
                jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, Long_lo(Long_div($mantissa, $mantissaDigitMask))));
                $mantissa = Long_rem($mantissa, $mantissaDigitMask);
                $count = $count + 1 | 0;
                if (Long_eq($mantissa, Long_ZERO))
                    break b;
                $i = $i + (-1) | 0;
            }
        }
        while (true) {
            $exponent = $count + 1 | 0;
            if ($count >= $requiredSize)
                break a;
            jl_AbstractStringBuilder_append2($buffer, 48);
            $count = $exponent;
        }
    }
    jl_AbstractStringBuilder_append0($buffer, $this.$symbols.$exponentSeparator);
    if ($multiplierDigits < 0) {
        $multiplierDigits =  -$multiplierDigits | 0;
        jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$minusSign);
    }
    $i = jl_Math_max($this.$exponentDigits, jt_DecimalFormat_fastLn100($this, $multiplierDigits) + 1 | 0) - 1 | 0;
    while ($i >= 0) {
        $exponentDigit = jt_DecimalFormat_POW10_INT_ARRAY.data[$i];
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, $multiplierDigits / $exponentDigit | 0));
        $multiplierDigits = $multiplierDigits % $exponentDigit | 0;
        $i = $i + (-1) | 0;
    }
    jt_DecimalFormat_appendSuffix($this, $sign, $buffer);
},
jt_DecimalFormat_formatRegular0 = ($this, $mantissa, $exponent, $sign, $buffer) => {
    let $mantissaLength, $significantFracDigits, $multiplierDigits, $tenMultiplier, var$9, var$10, $roundingPos, $newMantissaLength, $intLength, $digitPos, $i, $significantIntDigits, $mantissaDigit, $i_0, var$19, $mantissaDigitMask, $fracZeros;
    $mantissaLength = jt_DecimalFormat_fastLn10($this, $mantissa) + 1 | 0;
    $significantFracDigits = $exponent + 1 | 0;
    $exponent = $this.$multiplier;
    if ($exponent != 1) {
        $multiplierDigits = jt_DecimalFormat_fastLn100($this, $exponent);
        $tenMultiplier = jt_DecimalFormat_POW10_INT_ARRAY.data[$multiplierDigits];
        $exponent = $this.$multiplier;
        if ($tenMultiplier == $exponent)
            $significantFracDigits = $significantFracDigits + $multiplierDigits | 0;
        else {
            var$9 = Long_fromInt($exponent);
            if (Long_ge($mantissa, Long_div(Long_create(4294967295, 2147483647), var$9))) {
                jt_DecimalFormat_formatRegular($this, jm_BigDecimal__init_0(jm_BigInteger_valueOf($mantissa), $mantissaLength - $significantFracDigits | 0), $buffer);
                return;
            }
            $mantissa = Long_mul($mantissa, var$9);
            $mantissaLength = jt_DecimalFormat_fastLn10($this, $mantissa) + 1 | 0;
        }
    }
    var$10 = $this;
    $roundingPos = $significantFracDigits + var$10.$maximumFractionDigits | 0;
    if ($roundingPos < 0)
        $mantissa = Long_ZERO;
    else if ($roundingPos < $mantissaLength) {
        $mantissa = jt_DecimalFormat_applyRounding0($this, $mantissa, $mantissaLength, $roundingPos, $sign);
        $newMantissaLength = jt_DecimalFormat_fastLn10($this, $mantissa) + 1 | 0;
        if ($newMantissaLength > $mantissaLength) {
            $significantFracDigits = $significantFracDigits + 1 | 0;
            $mantissaLength = $newMantissaLength;
        }
    }
    jt_DecimalFormat_fieldsToText($this, !$sign ? $this.$negativePrefix : $this.$positivePrefix, $buffer);
    $intLength = jl_Math_max(0, $significantFracDigits);
    $digitPos = jl_Math_max($intLength, var$10.$minimumIntegerDigits) - 1 | 0;
    $i = var$10.$minimumIntegerDigits - 1 | 0;
    while ($i >= $intLength) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        if (var$10.$groupingUsed) {
            $exponent = $this.$groupingSize;
            if ($exponent > 0 && !($digitPos % $exponent | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    $significantIntDigits = jl_Math_min($mantissaLength, $intLength);
    $mantissaDigit = $mantissaLength - 1 | 0;
    $i_0 = 0;
    while ($i_0 < $significantIntDigits) {
        var$19 = jt_DecimalFormat_POW10_ARRAY.data;
        $exponent = $mantissaDigit + (-1) | 0;
        $mantissaDigitMask = var$19[$mantissaDigit];
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(Long_lo(Long_div($mantissa, $mantissaDigitMask)))));
        $mantissa = Long_rem($mantissa, $mantissaDigitMask);
        if (var$10.$groupingUsed) {
            $i = $this.$groupingSize;
            if ($i > 0 && !($digitPos % $i | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $i_0 = $i_0 + 1 | 0;
        $mantissaDigit = $exponent;
    }
    $intLength = $intLength - $significantIntDigits | 0;
    $i = 0;
    while ($i < $intLength) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        if (var$10.$groupingUsed) {
            $exponent = $this.$groupingSize;
            if ($exponent > 0 && !($digitPos % $exponent | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $i = $i + 1 | 0;
    }
    a: {
        if (Long_eq($mantissa, Long_ZERO)) {
            if (var$10.$minimumFractionDigits) {
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
                $i = 0;
                while ($i < var$10.$minimumFractionDigits) {
                    jl_AbstractStringBuilder_append2($buffer, 48);
                    $i = $i + 1 | 0;
                }
            } else if ($this.$decimalSeparatorAlwaysShown)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
        } else {
            jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
            $fracZeros = jl_Math_min(var$10.$maximumFractionDigits, jl_Math_max(0,  -$significantFracDigits | 0));
            $i_0 = 0;
            $i = 0;
            while ($i < $fracZeros) {
                $i_0 = $i_0 + 1 | 0;
                jl_AbstractStringBuilder_append2($buffer, 48);
                $i = $i + 1 | 0;
            }
            $significantFracDigits = jl_Math_min(var$10.$maximumFractionDigits - $i_0 | 0, $mantissaDigit);
            $i = 0;
            b: {
                while (true) {
                    if ($i >= $significantFracDigits)
                        break b;
                    if (Long_eq($mantissa, Long_ZERO))
                        break;
                    $i_0 = $i_0 + 1 | 0;
                    $mantissaDigitMask = jt_DecimalFormat_POW10_ARRAY.data[$mantissaDigit];
                    jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(Long_lo(Long_div($mantissa, $mantissaDigitMask)))));
                    $mantissa = Long_rem($mantissa, $mantissaDigitMask);
                    $mantissaDigit = $mantissaDigit + (-1) | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i_0 >= var$10.$minimumFractionDigits)
                    break a;
                jl_AbstractStringBuilder_append2($buffer, 48);
                $i_0 = $i_0 + 1 | 0;
            }
        }
    }
    jt_DecimalFormat_appendSuffix($this, $sign, $buffer);
},
jt_DecimalFormat_formatExponent = ($this, $value, $buffer) => {
    let $i, $mantissa, $exponentDigit, $exponentLength, var$7, var$8, var$9, $positive, $mantissaLength, $i_0, $exponent, $significantSize, $exponentMultiplier, $delta, $exponentPos, $mantissaDigitMask, $parts, $requiredSize, $limit, $count;
    $i = $this.$multiplier;
    if ($i != 1)
        $value = jm_BigDecimal_multiply($value, jm_BigDecimal_valueOf(Long_fromInt($i)));
    jm_BigDecimal_$callClinit();
    $mantissa = jm_BigDecimal_ZERO;
    $exponentDigit = jm_BigDecimal_signum($value);
    $exponentLength = $rt_compare($exponentDigit, jm_BigDecimal_signum($mantissa));
    if ($exponentLength)
        $exponentDigit = $exponentLength >= 0 ? 1 : (-1);
    else {
        $exponentLength = $value.$scale0;
        $i = $mantissa.$scale0;
        if ($exponentLength == $i && $value.$bitLength1 < 64 && $mantissa.$bitLength1 < 64) {
            $exponentLength = Long_compare($value.$smallValue, $mantissa.$smallValue);
            $exponentDigit = $exponentLength < 0 ? (-1) : $exponentLength <= 0 ? 0 : 1;
        } else {
            var$7 = Long_sub(Long_fromInt($exponentLength), Long_fromInt($i));
            var$8 = Long_fromInt(jm_BigDecimal_aproxPrecision($value) - jm_BigDecimal_aproxPrecision($mantissa) | 0);
            if (Long_le(var$8, Long_add(var$7, Long_fromInt(1)))) {
                if (Long_lt(var$8, Long_sub(var$7, Long_fromInt(1))))
                    $exponentDigit =  -$exponentDigit | 0;
                else {
                    var$9 = jm_BigDecimal_getUnscaledValue($value);
                    $mantissa = jm_BigDecimal_getUnscaledValue($mantissa);
                    $exponentLength = Long_compare(var$7, Long_ZERO);
                    if ($exponentLength < 0)
                        var$9 = jm_BigInteger_multiply(var$9, jm_Multiplication_powerOf10(Long_neg(var$7)));
                    else if ($exponentLength > 0)
                        $mantissa = jm_BigInteger_multiply($mantissa, jm_Multiplication_powerOf10(var$7));
                    $exponentDigit = jm_BigInteger_compareTo(var$9, $mantissa);
                }
            }
        }
    }
    $positive = $exponentDigit < 0 ? 0 : 1;
    $mantissaLength = jm_BigDecimal_precision($value);
    $i_0 = $mantissaLength - 1 | 0;
    $exponent = $i_0 - $value.$scale0 | 0;
    $mantissa = jm_BigDecimal_getUnscaledValue($value);
    var$9 = $this;
    $i = var$9.$minimumIntegerDigits;
    $significantSize = $i + var$9.$maximumFractionDigits | 0;
    $exponentMultiplier = (var$9.$maximumIntegerDigits - $i | 0) + 1 | 0;
    if ($exponentMultiplier <= 1) {
        $exponentLength = $i - 1 | 0;
        $exponent = $exponent - $exponentLength | 0;
        $exponentMultiplier = $i_0 - $exponentLength | 0;
    } else {
        $delta = $exponent - $rt_imul($exponent / $exponentMultiplier | 0, $exponentMultiplier) | 0;
        $exponent = $exponent - $delta | 0;
        $exponentMultiplier = $i_0 - $delta | 0;
    }
    if ($significantSize < 0)
        $mantissa = jm_BigInteger_ZERO;
    else if ($significantSize < $mantissaLength)
        $mantissa = jt_DecimalFormat_applyRounding($this, $mantissa, $mantissaLength, $significantSize);
    jt_DecimalFormat_fieldsToText($this, !$positive ? $this.$negativePrefix : $this.$positivePrefix, $buffer);
    $exponentPos = jl_Math_max($exponentMultiplier, 0);
    $mantissaDigitMask = jt_DecimalFormat_pow10($this, jm_BigInteger_ONE, $i_0);
    while ($i_0 >= $exponentPos) {
        $parts = (jm_BigInteger_divideAndRemainder($mantissa, $mantissaDigitMask)).data;
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(jm_BigInteger_intValue($parts[0]))));
        $mantissa = $parts[1];
        $mantissaDigitMask = jm_BigInteger_divide($mantissaDigitMask, jm_BigInteger_TEN);
        $i_0 = $i_0 + (-1) | 0;
    }
    $i = $exponentPos - 1 | 0;
    while ($i >= $exponentMultiplier) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        $i = $i + (-1) | 0;
    }
    a: {
        $exponentDigit = $significantSize - ($mantissaLength - $exponentMultiplier | 0) | 0;
        $requiredSize = $exponentDigit - (var$9.$maximumFractionDigits - var$9.$minimumFractionDigits | 0) | 0;
        if ($requiredSize <= 0) {
            if (jm_BigInteger_equals($mantissa, jm_BigInteger_ZERO))
                break a;
            if ($exponentDigit <= 0)
                break a;
        }
        jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
        $limit = jl_Math_max(0, $exponentMultiplier - $exponentDigit | 0);
        $count = 0;
        $i = $exponentMultiplier - 1 | 0;
        b: {
            while ($i >= $limit) {
                $parts = (jm_BigInteger_divideAndRemainder($mantissa, $mantissaDigitMask)).data;
                jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(jm_BigInteger_intValue($parts[0]))));
                $mantissa = $parts[1];
                $count = $count + 1 | 0;
                if (jm_BigInteger_equals($mantissa, jm_BigInteger_ZERO))
                    break b;
                $mantissaDigitMask = jm_BigInteger_divide($mantissaDigitMask, jm_BigInteger_TEN);
                $i = $i + (-1) | 0;
            }
        }
        while (true) {
            $exponentLength = $count + 1 | 0;
            if ($count >= $requiredSize)
                break a;
            jl_AbstractStringBuilder_append2($buffer, 48);
            $count = $exponentLength;
        }
    }
    jl_AbstractStringBuilder_append0($buffer, $this.$symbols.$exponentSeparator);
    if ($exponent < 0) {
        $exponent =  -$exponent | 0;
        jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$minusSign);
    }
    $i = jl_Math_max($this.$exponentDigits, jt_DecimalFormat_fastLn100($this, $exponent) + 1 | 0) - 1 | 0;
    while ($i >= 0) {
        $exponentDigit = jt_DecimalFormat_POW10_INT_ARRAY.data[$i];
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, $exponent / $exponentDigit | 0));
        $exponent = $exponent % $exponentDigit | 0;
        $i = $i + (-1) | 0;
    }
    jt_DecimalFormat_appendSuffix($this, $positive, $buffer);
},
jt_DecimalFormat_appendSuffix = ($this, $positive, $buffer) => {
    let var$3;
    if ($positive) {
        var$3 = $this.$positiveSuffix;
        if (var$3 !== null)
            jt_DecimalFormat_fieldsToText($this, var$3, $buffer);
    } else {
        var$3 = $this.$negativeSuffix;
        if (var$3 === null) {
            var$3 = $this.$positiveSuffix;
            if (var$3 === null)
                var$3 = $rt_createArray(jt_DecimalFormat$FormatField, 0);
        }
        jt_DecimalFormat_fieldsToText($this, var$3, $buffer);
    }
},
jt_DecimalFormat_formatRegular = ($this, $value, $buffer) => {
    let $positive, $mantissa, $mantissaLength, $exponent, var$7, $roundingPos, $intLength, $digitPos, $i, $fracZeros, $significantIntDigits, $mantissaDigitMask, $parts, $i_0, $significantFracDigits;
    $positive = $this.$multiplier;
    if ($positive != 1)
        $value = jm_BigDecimal_multiply($value, jm_BigDecimal_valueOf(Long_fromInt($positive)));
    $mantissa = jm_BigDecimal_getUnscaledValue($value);
    $positive = jm_BigInteger_compareTo($mantissa, jm_BigInteger_ZERO) < 0 ? 0 : 1;
    $mantissaLength = jm_BigDecimal_precision($value);
    $exponent = jm_BigDecimal_precision($value) - $value.$scale0 | 0;
    var$7 = $this;
    $roundingPos = $exponent + var$7.$maximumFractionDigits | 0;
    if ($roundingPos < 0)
        $mantissa = jm_BigInteger_ZERO;
    else if ($roundingPos < $mantissaLength)
        $mantissa = jt_DecimalFormat_applyRounding($this, $mantissa, $mantissaLength, $roundingPos);
    jt_DecimalFormat_fieldsToText($this, !$positive ? $this.$negativePrefix : $this.$positivePrefix, $buffer);
    $intLength = jl_Math_max(0, $exponent);
    $digitPos = jl_Math_max($intLength, var$7.$minimumIntegerDigits) - 1 | 0;
    $i = var$7.$minimumIntegerDigits - 1 | 0;
    while ($i >= $intLength) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        if (var$7.$groupingUsed) {
            $fracZeros = $this.$groupingSize;
            if ($fracZeros > 0 && !($digitPos % $fracZeros | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    $significantIntDigits = jl_Math_min($mantissaLength, $intLength);
    $mantissaDigitMask = jt_DecimalFormat_pow10($this, jm_BigInteger_ONE, $mantissaLength - 1 | 0);
    $i = 0;
    while ($i < $significantIntDigits) {
        $parts = (jm_BigInteger_divideAndRemainder($mantissa, $mantissaDigitMask)).data;
        jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(jm_BigInteger_intValue($parts[0]))));
        $mantissa = $parts[1];
        if (var$7.$groupingUsed) {
            $fracZeros = $this.$groupingSize;
            if ($fracZeros > 0 && !($digitPos % $fracZeros | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $mantissaLength = $mantissaLength + (-1) | 0;
        $mantissaDigitMask = jm_BigInteger_divide($mantissaDigitMask, jm_BigInteger_TEN);
        $i = $i + 1 | 0;
    }
    $intLength = $intLength - $significantIntDigits | 0;
    $i = 0;
    while ($i < $intLength) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        if (var$7.$groupingUsed) {
            $fracZeros = $this.$groupingSize;
            if ($fracZeros > 0 && !($digitPos % $fracZeros | 0) && $digitPos > 0)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$groupingSeparator);
        }
        $digitPos = $digitPos + (-1) | 0;
        $i = $i + 1 | 0;
    }
    a: {
        if (jm_BigInteger_equals($mantissa, jm_BigInteger_ZERO)) {
            if (var$7.$minimumFractionDigits) {
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
                $i = 0;
                while ($i < var$7.$minimumFractionDigits) {
                    jl_AbstractStringBuilder_append2($buffer, 48);
                    $i = $i + 1 | 0;
                }
            } else if ($this.$decimalSeparatorAlwaysShown)
                jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
        } else {
            jl_AbstractStringBuilder_append2($buffer, $this.$symbols.$decimalSeparator);
            $fracZeros = jl_Math_min(var$7.$maximumFractionDigits, jl_Math_max(0,  -$exponent | 0));
            $i = 0;
            $i_0 = 0;
            while ($i_0 < $fracZeros) {
                $i = $i + 1 | 0;
                jl_AbstractStringBuilder_append2($buffer, 48);
                $i_0 = $i_0 + 1 | 0;
            }
            $significantFracDigits = jl_Math_min(var$7.$maximumFractionDigits - $i | 0, $mantissaLength);
            $i_0 = 0;
            b: {
                while (true) {
                    if ($i_0 >= $significantFracDigits)
                        break b;
                    if (jm_BigInteger_equals($mantissa, jm_BigInteger_ZERO))
                        break;
                    $i = $i + 1 | 0;
                    $parts = (jm_BigInteger_divideAndRemainder($mantissa, $mantissaDigitMask)).data;
                    jl_AbstractStringBuilder_append2($buffer, jt_DecimalFormat_forDigit($this, jl_Math_abs0(jm_BigInteger_intValue($parts[0]))));
                    $mantissa = $parts[1];
                    $mantissaDigitMask = jm_BigInteger_divide($mantissaDigitMask, jm_BigInteger_TEN);
                    $i_0 = $i_0 + 1 | 0;
                }
            }
            while (true) {
                if ($i >= var$7.$minimumFractionDigits)
                    break a;
                jl_AbstractStringBuilder_append2($buffer, 48);
                $i = $i + 1 | 0;
            }
        }
    }
    jt_DecimalFormat_appendSuffix($this, $positive, $buffer);
},
jt_DecimalFormat_applyRounding0 = ($this, $mantissa, $mantissaLength, $exponent, $sign) => {
    let $rounding, var$6, var$7, var$8;
    a: {
        $rounding = jt_DecimalFormat_POW10_ARRAY.data[$mantissaLength - $exponent | 0];
        jt_DecimalFormat$1_$callClinit();
        switch (jt_DecimalFormat$1_$SwitchMap$java$math$RoundingMode.data[$this.$roundingMode.$ordinal0]) {
            case 1:
                $mantissa = Long_mul(Long_div($mantissa, $rounding), $rounding);
                if (!$sign)
                    break a;
                $mantissa = Long_add($mantissa, $rounding);
                break a;
            case 2:
                $mantissa = Long_mul(Long_div($mantissa, $rounding), $rounding);
                if ($sign)
                    break a;
                $mantissa = Long_add($mantissa, $rounding);
                break a;
            case 3:
                $mantissa = Long_add(Long_mul(Long_div($mantissa, $rounding), $rounding), $rounding);
                break a;
            case 4:
                $mantissa = Long_mul(Long_div($mantissa, $rounding), $rounding);
                break a;
            case 5:
                if (Long_eq(Long_rem($mantissa, $rounding), Long_ZERO))
                    break a;
                var$6 = new jl_ArithmeticException;
                jl_Exception__init_(var$6, $rt_s(811));
                $rt_throw(var$6);
            case 6:
                var$7 = Long_rem($mantissa, $rounding);
                var$8 = Long_div($rounding, Long_fromInt(2));
                if (Long_eq(var$7, var$8)) {
                    $mantissa = Long_mul(Long_div($mantissa, $rounding), $rounding);
                    break a;
                }
                $mantissa = Long_mul(Long_div(Long_add($mantissa, var$8), $rounding), $rounding);
                break a;
            case 7:
                var$8 = Long_rem($mantissa, $rounding);
                var$7 = Long_div($rounding, Long_fromInt(2));
                if (Long_ne(var$8, var$7)) {
                    $mantissa = Long_mul(Long_div(Long_add($mantissa, var$7), $rounding), $rounding);
                    break a;
                }
                $mantissa = Long_add(Long_mul(Long_div($mantissa, $rounding), $rounding), $rounding);
                break a;
            case 8:
                var$8 = Long_rem($mantissa, $rounding);
                var$7 = Long_div($rounding, Long_fromInt(2));
                if (Long_ne(var$8, var$7)) {
                    $mantissa = Long_mul(Long_div(Long_add($mantissa, var$7), $rounding), $rounding);
                    break a;
                }
                $mantissa = Long_mul(Long_div($mantissa, $rounding), $rounding);
                if (Long_eq(Long_rem(Long_div($mantissa, $rounding), Long_fromInt(2)), Long_ZERO))
                    break a;
                $mantissa = Long_add($mantissa, $rounding);
                break a;
            default:
        }
    }
    return $mantissa;
},
jt_DecimalFormat_applyRounding = ($this, $mantissa, $mantissaLength, $exponent) => {
    let $rounding, $signedRounding;
    $rounding = jt_DecimalFormat_pow10($this, jm_BigInteger_ONE, $mantissaLength - $exponent | 0);
    $signedRounding = jm_BigInteger_compareTo($mantissa, jm_BigInteger_ZERO) < 0 ? jm_BigInteger_negate($rounding) : $rounding;
    a: {
        jt_DecimalFormat$1_$callClinit();
        switch (jt_DecimalFormat$1_$SwitchMap$java$math$RoundingMode.data[$this.$roundingMode.$ordinal0]) {
            case 1:
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding);
                if (jm_BigInteger_compareTo($mantissa, jm_BigInteger_ZERO) < 0)
                    break a;
                $mantissa = jm_BigInteger_add($mantissa, $rounding);
                break a;
            case 2:
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding);
                if (jm_BigInteger_compareTo($mantissa, jm_BigInteger_ZERO) > 0)
                    break a;
                $mantissa = jm_BigInteger_subtract($mantissa, $rounding);
                break a;
            case 3:
                $mantissa = jm_BigInteger_add(jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding), $signedRounding);
                break a;
            case 4:
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding);
                break a;
            case 5:
                if (!jm_BigInteger_equals(jm_BigInteger_remainder($mantissa, $rounding), jm_BigInteger_ZERO))
                    break a;
                $mantissa = new jl_ArithmeticException;
                jl_Exception__init_($mantissa, $rt_s(811));
                $rt_throw($mantissa);
            case 6:
                if (jm_BigInteger_equals(jm_BigInteger_remainder($mantissa, $rounding), jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2))))) {
                    $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding);
                    break a;
                }
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide(jm_BigInteger_add($mantissa, jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2)))), $rounding), $rounding);
                break a;
            case 7:
                if (jm_BigInteger_equals(jm_BigInteger_remainder($mantissa, $rounding), jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2))))) {
                    $mantissa = jm_BigInteger_add(jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding), $signedRounding);
                    break a;
                }
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide(jm_BigInteger_add($mantissa, jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2)))), $rounding), $rounding);
                break a;
            case 8:
                if (!jm_BigInteger_equals(jm_BigInteger_remainder($mantissa, $rounding), jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2))))) {
                    $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide(jm_BigInteger_add($mantissa, jm_BigInteger_divide($signedRounding, jm_BigInteger_valueOf(Long_fromInt(2)))), $rounding), $rounding);
                    break a;
                }
                $mantissa = jm_BigInteger_multiply(jm_BigInteger_divide($mantissa, $rounding), $rounding);
                if (jm_BigInteger_equals(jm_BigInteger_remainder(jm_BigInteger_divide($mantissa, $rounding), jm_BigInteger_valueOf(Long_fromInt(2))), jm_BigInteger_ZERO))
                    break a;
                $mantissa = jm_BigInteger_add($mantissa, $signedRounding);
                break a;
            default:
        }
    }
    return $mantissa;
},
jt_DecimalFormat_fastLn10 = ($this, $value) => {
    let $result;
    if (Long_eq($value, Long_create(0, 2147483648)))
        return 18;
    $result = 0;
    if (Long_ge($value, Long_create(1874919424, 2328306))) {
        $result = 16;
        $value = Long_div($value, Long_create(1874919424, 2328306));
    }
    if (Long_ge($value, Long_fromInt(100000000))) {
        $result = $result + 8 | 0;
        $value = Long_div($value, Long_fromInt(100000000));
    }
    if (Long_ge($value, Long_fromInt(10000))) {
        $result = $result + 4 | 0;
        $value = Long_div($value, Long_fromInt(10000));
    }
    if (Long_ge($value, Long_fromInt(100))) {
        $result = $result + 2 | 0;
        $value = Long_div($value, Long_fromInt(100));
    }
    if (Long_ge($value, Long_fromInt(10)))
        $result = $result + 1 | 0;
    return $result;
},
jt_DecimalFormat_fastLn100 = ($this, $value) => {
    let $result;
    $result = 0;
    if ($value >= 100000000) {
        $result = 8;
        $value = $value / 100000000 | 0;
    }
    if ($value >= 10000) {
        $result = $result + 4 | 0;
        $value = $value / 10000 | 0;
    }
    if ($value >= 100) {
        $result = $result + 2 | 0;
        $value = $value / 100 | 0;
    }
    if ($value >= 10)
        $result = $result + 1 | 0;
    return $result;
},
jt_DecimalFormat_pow10 = ($this, $value, $power) => {
    let $digit;
    $digit = jm_BigInteger_TEN;
    while ($power) {
        if ($power & 1)
            $value = jm_BigInteger_multiply($value, $digit);
        $digit = jm_BigInteger_multiply($digit, $digit);
        $power = $power >>> 1 | 0;
    }
    return $value;
},
jt_DecimalFormat_forDigit = ($this, $n) => {
    return ($this.$symbols.$zeroDigit + $n | 0) & 65535;
},
jt_DecimalFormat__clinit_ = () => {
    jt_DecimalFormat_POW10_ARRAY = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(1000), Long_fromInt(10000), Long_fromInt(100000), Long_fromInt(1000000), Long_fromInt(10000000), Long_fromInt(100000000), Long_fromInt(1000000000), Long_create(1410065408, 2), Long_create(1215752192, 23), Long_create(3567587328, 232), Long_create(1316134912, 2328), Long_create(276447232, 23283), Long_create(2764472320, 232830), Long_create(1874919424, 2328306), Long_create(1569325056, 23283064),
    Long_create(2808348672, 232830643)]);
    jt_DecimalFormat_POW10_INT_ARRAY = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
};
function jt_DecimalFormatSymbols() {
    let a = this; jl_Object.call(a);
    a.$locale4 = null;
    a.$zeroDigit = 0;
    a.$groupingSeparator = 0;
    a.$decimalSeparator = 0;
    a.$perMill = 0;
    a.$percent = 0;
    a.$digit0 = 0;
    a.$patternSeparator = 0;
    a.$nan = null;
    a.$infinity = null;
    a.$minusSign = 0;
    a.$monetaryDecimalSeparator = 0;
    a.$exponentSeparator = null;
}
let jt_DecimalFormatSymbols__init_0 = $this => {
    jt_DecimalFormatSymbols__init_1($this, ju_Locale_getDefault());
},
jt_DecimalFormatSymbols__init_2 = () => {
    let var_0 = new jt_DecimalFormatSymbols();
    jt_DecimalFormatSymbols__init_0(var_0);
    return var_0;
},
jt_DecimalFormatSymbols__init_1 = ($this, $locale) => {
    let var$2, var$3, var$4;
    $this.$locale4 = $locale;
    var$2 = $locale.$languageCode;
    var$3 = $locale.$countryCode;
    if (otciu_CLDRHelper_$$metadata$$20 === null)
        otciu_CLDRHelper_$$metadata$$20 = otciu_CLDRHelper_getDecimalDataMap$$create();
    var$4 = otciu_CLDRHelper_$$metadata$$20;
    $locale = otciu_CLDRHelper_getCode(var$2, var$3);
    var$4 = var$4.hasOwnProperty($rt_ustr($locale)) ? var$4[$rt_ustr($locale)] : var$4.hasOwnProperty($rt_ustr(var$2)) ? var$4[$rt_ustr(var$2)] : var$4.root;
    $this.$zeroDigit = 48;
    $this.$groupingSeparator = var$4.groupingSeparator & 65535;
    $this.$decimalSeparator = var$4.decimalSeparator & 65535;
    $this.$perMill = var$4.perMille & 65535;
    $this.$percent = var$4.percent & 65535;
    $this.$digit0 = 35;
    $this.$patternSeparator = 59;
    $this.$nan = (var$4.naN !== null ? $rt_str(var$4.naN) : null);
    $this.$infinity = (var$4.infinity !== null ? $rt_str(var$4.infinity) : null);
    $this.$minusSign = var$4.minusSign & 65535;
    $this.$monetaryDecimalSeparator = var$4.decimalSeparator & 65535;
    $this.$exponentSeparator = (var$4.exponentSeparator !== null ? $rt_str(var$4.exponentSeparator) : null);
},
jt_DecimalFormatSymbols__init_ = var_0 => {
    let var_1 = new jt_DecimalFormatSymbols();
    jt_DecimalFormatSymbols__init_1(var_1, var_0);
    return var_1;
},
jt_DecimalFormatSymbols_getZeroDigit = $this => {
    return $this.$zeroDigit;
},
jt_DecimalFormatSymbols_getGroupingSeparator = $this => {
    return $this.$groupingSeparator;
},
jt_DecimalFormatSymbols_getDecimalSeparator = $this => {
    return $this.$decimalSeparator;
},
jt_DecimalFormatSymbols_getInfinity = $this => {
    return $this.$infinity;
},
jt_DecimalFormatSymbols_getMinusSign = $this => {
    return $this.$minusSign;
},
jt_DecimalFormatSymbols_getExponentSeparator = $this => {
    return $this.$exponentSeparator;
};
function jt_DateFormat() {
    jt_Format.call(this);
    this.$calendar = null;
}
let jt_DateFormat_format = ($this, $object, $buffer, $field) => {
    let var$4;
    if ($object instanceof ju_Date) {
        $object = $object;
        return jt_SimpleDateFormat_format($this, $object, $buffer, $field);
    }
    if (!($object instanceof jl_Number)) {
        $object = new jl_IllegalArgumentException;
        jl_Throwable__init_($object);
        $rt_throw($object);
    }
    var$4 = new ju_Date;
    var$4.$value5 = $object.$longValue();
    return jt_SimpleDateFormat_format($this, var$4, $buffer, $field);
},
jt_DateFormat_getDateInstance = ($style, $locale) => {
    return jt_SimpleDateFormat__init_(jt_DateFormat_getDateFormatString($style, $locale), $locale);
},
jt_DateFormat_getDateFormatString = ($style, $locale) => {
    let $formats;
    $formats = otciu_CLDRHelper_resolveDateFormats0($locale.$languageCode, $locale.$countryCode);
    switch ($style) {
        case 0:
            break;
        case 1:
            return ($formats.longFormat !== null ? $rt_str($formats.longFormat) : null);
        case 2:
            return ($formats.mediumFormat !== null ? $rt_str($formats.mediumFormat) : null);
        case 3:
            return ($formats.shortFormat !== null ? $rt_str($formats.shortFormat) : null);
        default:
            $locale = new jl_IllegalArgumentException;
            $formats = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($formats);
            jl_AbstractStringBuilder_append($formats, $rt_s(749));
            jl_AbstractStringBuilder_append1($formats, $style);
            jl_Exception__init_($locale, jl_AbstractStringBuilder_toString($formats));
            $rt_throw($locale);
    }
    return ($formats.fullFormat !== null ? $rt_str($formats.fullFormat) : null);
},
jt_DateFormat_getTimeInstance = ($style, $locale) => {
    return jt_SimpleDateFormat__init_(jt_DateFormat_getTimeFormatString($style, $locale), $locale);
},
jt_DateFormat_getTimeFormatString = ($style, $locale) => {
    let var$3, var$4, $formats;
    var$3 = $locale.$languageCode;
    var$4 = $locale.$countryCode;
    if (otciu_CLDRHelper_$$metadata$$15 === null)
        otciu_CLDRHelper_$$metadata$$15 = otciu_CLDRHelper_getTimeFormatMap$$create();
    $formats = otciu_CLDRHelper_resolveDateFormats(otciu_CLDRHelper_$$metadata$$15, var$3, var$4);
    switch ($style) {
        case 0:
            break;
        case 1:
            return ($formats.longFormat !== null ? $rt_str($formats.longFormat) : null);
        case 2:
            return ($formats.mediumFormat !== null ? $rt_str($formats.mediumFormat) : null);
        case 3:
            return ($formats.shortFormat !== null ? $rt_str($formats.shortFormat) : null);
        default:
            $locale = new jl_IllegalArgumentException;
            $formats = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($formats);
            jl_AbstractStringBuilder_append($formats, $rt_s(749));
            jl_AbstractStringBuilder_append1($formats, $style);
            jl_Exception__init_($locale, jl_AbstractStringBuilder_toString($formats));
            $rt_throw($locale);
    }
    return ($formats.fullFormat !== null ? $rt_str($formats.fullFormat) : null);
};
function jt_SimpleDateFormat() {
    let a = this; jt_DateFormat.call(a);
    a.$dateFormatSymbols = null;
    a.$elements0 = null;
    a.$pattern2 = null;
    a.$locale1 = null;
}
let jt_SimpleDateFormat__init_1 = $this => {
    let var$1;
    var$1 = ju_Locale_getDefault();
    jt_SimpleDateFormat__init_0($this, ((otciu_CLDRHelper_resolveDateFormats0(var$1.$languageCode, var$1.$countryCode)).mediumFormat !== null ? $rt_str((otciu_CLDRHelper_resolveDateFormats0(var$1.$languageCode, var$1.$countryCode)).mediumFormat) : null), ju_Locale_getDefault());
},
jt_SimpleDateFormat__init_2 = () => {
    let var_0 = new jt_SimpleDateFormat();
    jt_SimpleDateFormat__init_1(var_0);
    return var_0;
},
jt_SimpleDateFormat__init_0 = ($this, $pattern, $locale) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    var$3 = jt_DateFormatSymbols__init_1($locale);
    $this.$calendar = ju_GregorianCalendar__init_2();
    var$4 = jt_DateFormatSymbols__init_1(var$3.$locale0);
    var$5 = var$3.$ampms;
    if (var$5 !== null)
        var$4.$ampms = ju_Arrays_copyOf(var$5, var$5.data.length);
    var$5 = var$3.$eras;
    if (var$5 !== null)
        var$4.$eras = ju_Arrays_copyOf(var$5, var$5.data.length);
    var$5 = var$3.$months;
    if (var$5 !== null)
        var$4.$months = ju_Arrays_copyOf(var$5, var$5.data.length);
    var$5 = var$3.$shortMonths;
    if (var$5 !== null)
        var$4.$shortMonths = ju_Arrays_copyOf(var$5, var$5.data.length);
    var$5 = var$3.$shortWeekdays;
    if (var$5 !== null) {
        var$6 = var$5.data;
        var$4.$shortWeekdays = ju_Arrays_copyOf(var$5.$clone0(), var$6.length);
    }
    var$5 = var$3.$weekdays;
    if (var$5 !== null)
        var$4.$weekdays = ju_Arrays_copyOf(var$5, var$5.data.length);
    a: {
        var$5 = var$3.$zoneStrings;
        if (var$5 !== null) {
            var$4.$zoneStrings = $rt_createArray($rt_arraycls(jl_String), var$5.data.length);
            var$7 = 0;
            while (true) {
                var$5 = var$3.$zoneStrings.data;
                if (var$7 >= var$5.length)
                    break a;
                var$4.$zoneStrings.data[var$7] = ju_Arrays_copyOf(var$5[var$7], var$5[var$7].data.length);
                var$7 = var$7 + 1 | 0;
            }
        }
    }
    $this.$dateFormatSymbols = var$4;
    var$8 = ju_Locale_getDefault();
    $this.$locale1 = var$8;
    $this.$pattern2 = $pattern;
    $pattern = new jt_SimpleDatePatternParser;
    var$3 = $this.$dateFormatSymbols;
    $pattern.$elements = ju_ArrayList__init_();
    $pattern.$symbols0 = var$3;
    $pattern.$locale3 = var$8;
    jt_SimpleDatePatternParser_parsePattern($pattern, $this.$pattern2);
    $pattern = $pattern.$elements;
    var$5 = $rt_createArray(jt_DateFormatElement, 0);
    $this.$elements0 = ju_AbstractCollection_toArray($pattern, var$5);
    $this.$locale1 = $locale;
},
jt_SimpleDateFormat__init_ = (var_0, var_1) => {
    let var_2 = new jt_SimpleDateFormat();
    jt_SimpleDateFormat__init_0(var_2, var_0, var_1);
    return var_2;
},
jt_SimpleDateFormat_format = ($this, $date, $buffer, $field) => {
    let $calendar, var$5, var$6, var$7;
    $calendar = ju_GregorianCalendar__init_1($this.$locale1);
    ju_Calendar_setTimeInMillis($calendar, $date.$value5);
    ju_Calendar_setTimeZone($calendar, $this.$calendar.$zone);
    var$5 = $this.$elements0.data;
    var$6 = var$5.length;
    var$7 = 0;
    while (var$7 < var$6) {
        var$5[var$7].$format7($calendar, $buffer);
        var$7 = var$7 + 1 | 0;
    }
    return $buffer;
},
jt_SimpleDateFormat_equals = ($this, $object) => {
    let $other, var$3, var$4;
    if ($object === $this)
        return 1;
    if (!($object instanceof jt_SimpleDateFormat))
        return 0;
    $other = $object;
    if ($this === $other)
        var$3 = 1;
    else if (!($other instanceof jt_DateFormat))
        var$3 = 0;
    else {
        $object = $other;
        var$4 = $this.$calendar;
        var$3 = var$4.$firstDayOfWeek;
        $object = $object.$calendar;
        var$3 = var$3 == $object.$firstDayOfWeek && var$4.$minimalDaysInFirstWeek == $object.$minimalDaysInFirstWeek && var$4.$lenient == $object.$lenient ? 1 : 0;
    }
    if (!var$3)
        return 0;
    a: {
        if (ju_Arrays_equals($this.$elements0, $other.$elements0)) {
            b: {
                $object = $this.$dateFormatSymbols;
                var$4 = $other.$dateFormatSymbols;
                if ($object === var$4) {
                    var$3 = 1;
                    break b;
                }
                if (!(var$4 instanceof jt_DateFormatSymbols)) {
                    var$3 = 0;
                    break b;
                }
                var$4 = var$4;
                if (!ju_Locale_equals($object.$locale0, var$4.$locale0)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Objects_equals($object.$localPatternChars, var$4.$localPatternChars)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$ampms, var$4.$ampms)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$eras, var$4.$eras)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$months, var$4.$months)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$shortMonths, var$4.$shortMonths)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$shortWeekdays, var$4.$shortWeekdays)) {
                    var$3 = 0;
                    break b;
                }
                if (!ju_Arrays_equals($object.$weekdays, var$4.$weekdays)) {
                    var$3 = 0;
                    break b;
                }
                var$3 = ju_Arrays_equals($object.$zoneStrings, var$4.$zoneStrings);
            }
            if (var$3 && ju_Locale_equals($this.$locale1, $other.$locale1)) {
                var$3 = 1;
                break a;
            }
        }
        var$3 = 0;
    }
    return var$3;
},
jt_SimpleDateFormat_hashCode = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$1 = $rt_createIntArray(4);
    var$2 = $this.$calendar;
    var$3 = var$2.$firstDayOfWeek + var$2.$minimalDaysInFirstWeek | 0;
    var$4 = !var$2.$lenient ? 1237 : 1231;
    var$1 = var$1.data;
    var$1[0] = var$3 + var$4 | 0;
    var$2 = $this.$dateFormatSymbols;
    var$5 = var$2.$localPatternChars.$hashCode();
    var$6 = var$2.$ampms.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$eras.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$months.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$shortMonths.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$shortWeekdays.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$weekdays.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$5 = var$5 + jl_String_hashCode(var$6[var$4]) | 0;
        var$4 = var$4 + 1 | 0;
    }
    var$6 = var$2.$zoneStrings.data;
    var$3 = var$6.length;
    var$4 = 0;
    while (var$4 < var$3) {
        var$7 = var$6[var$4];
        var$8 = 0;
        while (true) {
            var$9 = var$7.data;
            if (var$8 >= var$9.length)
                break;
            if (var$9[var$8] !== null)
                var$5 = var$5 + jl_String_hashCode(var$9[var$8]) | 0;
            var$8 = var$8 + 1 | 0;
        }
        var$4 = var$4 + 1 | 0;
    }
    var$1[1] = var$5;
    var$1[2] = ju_Arrays_hashCode($this.$elements0);
    var$1[3] = ju_Locale_hashCode($this.$locale1);
    var$10 = 1;
    var$3 = 0;
    while (var$3 < var$1.length) {
        var$10 = (31 * var$10 | 0) + var$1[var$3] | 0;
        var$3 = var$3 + 1 | 0;
    }
    return var$10;
};
function cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0() {
    let a = this; jl_Object.call(a);
    a.$_06 = null;
    a.$_14 = null;
    a.$_23 = null;
    a.$_32 = null;
    a.$_40 = 0;
    a.$_5 = 0;
}
let cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$1 = var$1;
    var$2 = var$1.$_06;
    var$3 = var$1.$_14;
    var$4 = var$1.$_23;
    var$5 = var$1.$_32;
    var$6 = var$1.$_40;
    var$7 = var$1.$_5;
    if (var$3.readyState == 4) {
        var$8 = var$3.status;
        if (!var$8) {
            if (var$4 !== null)
                cgxgbta_AssetDownloadImpl$1_onFailure(var$4, var$5);
        } else if (var$8 != 200) {
            if (var$8 != 404 && var$8 != 403) {
                var$9 = var$6 + 1 | 0;
                var$1 = new cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0;
                var$1.$_0 = var$2;
                var$1.$_1 = var$7;
                var$1.$_2 = var$5;
                var$1.$_3 = var$4;
                var$1.$_4 = var$9;
                setTimeout(otji_JS_function(otji_JSWrapper_unwrap(var$1), "onTimer"), 100);
            } else if (var$4 !== null)
                cgxgbta_AssetDownloadImpl$1_onFailure(var$4, var$5);
        } else {
            var$1 = var$3.response;
            if (!(typeof var$1 == 'string' ? 1 : 0))
                var$10 = new Int8Array(var$1);
            else {
                var$10 = cgxgbtdt_TypedArrays_getInt8Array(jl_String_getBytes($rt_str(var$1)));
                var$1 = var$10.buffer;
            }
            if (var$4 !== null) {
                var$3 = new cgxgbta_TeaBlob;
                var$3.$data10 = var$10;
                var$3.$response = var$1;
                cgxgbta_AssetDownloadImpl$1_onSuccess(var$4, var$5, var$3);
            }
        }
        cgxgbta_AssetDownloadImpl_subtractQueue(var$2);
    }
};
function jl_Boolean() {
    jl_Object.call(this);
    this.$value2 = 0;
}
let jl_Boolean_TRUE = null,
jl_Boolean_FALSE = null,
jl_Boolean_TYPE = null,
jl_Boolean__init_0 = ($this, $value) => {
    $this.$value2 = $value;
},
jl_Boolean__init_ = var_0 => {
    let var_1 = new jl_Boolean();
    jl_Boolean__init_0(var_1, var_0);
    return var_1;
},
jl_Boolean_valueOf = $value => {
    return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
},
jl_Boolean_toString = $this => {
    return !$this.$value2 ? $rt_s(48) : $rt_s(49);
},
jl_Boolean_hashCode = $this => {
    return !$this.$value2 ? 1237 : 1231;
},
jl_Boolean_equals = ($this, $obj) => {
    if ($this === $obj)
        return 1;
    return $obj instanceof jl_Boolean && $obj.$value2 == $this.$value2 ? 1 : 0;
},
jl_Boolean__clinit_ = () => {
    jl_Boolean_TRUE = jl_Boolean__init_(1);
    jl_Boolean_FALSE = jl_Boolean__init_(0);
    jl_Boolean_TYPE = $rt_cls($rt_booleancls);
},
ccvu_PrioritizedArray$Wrapper$1 = $rt_classWithoutFields(cbgu_Pool),
ccvu_PrioritizedArray$Wrapper$1__init_ = $this => {
    cbgu_Pool__init_($this, 16, 2147483647);
},
ccvu_PrioritizedArray$Wrapper$1__init_0 = () => {
    let var_0 = new ccvu_PrioritizedArray$Wrapper$1();
    ccvu_PrioritizedArray$Wrapper$1__init_(var_0);
    return var_0;
},
ccvu_PrioritizedArray$Wrapper$1_newObject = $this => {
    let var$1;
    var$1 = new ccvu_PrioritizedArray$Wrapper;
    ccvu_PrioritizedArray$Wrapper_$callClinit();
    ccvu_PrioritizedArray$Wrapper__init_(var$1);
    return var$1;
};
function jnc_CodingErrorAction() {
    jl_Object.call(this);
    this.$name8 = null;
}
let jnc_CodingErrorAction_IGNORE = null,
jnc_CodingErrorAction_REPLACE = null,
jnc_CodingErrorAction_REPORT = null,
jnc_CodingErrorAction__init_0 = ($this, $name) => {
    $this.$name8 = $name;
},
jnc_CodingErrorAction__init_ = var_0 => {
    let var_1 = new jnc_CodingErrorAction();
    jnc_CodingErrorAction__init_0(var_1, var_0);
    return var_1;
},
jnc_CodingErrorAction__clinit_ = () => {
    jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(812));
    jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(813));
    jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(814));
};
function jnc_CharsetDecoder() {
    let a = this; jl_Object.call(a);
    a.$charset1 = null;
    a.$averageCharsPerByte = 0.0;
    a.$maxCharsPerByte = 0.0;
    a.$replacement = null;
    a.$malformedAction = null;
    a.$unmappableAction0 = null;
    a.$state = 0;
}
let jnc_CharsetDecoder_onMalformedInput = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$malformedAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2, $rt_s(815));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnMalformedInput = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_onUnmappableCharacter = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$unmappableAction0 = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2, $rt_s(815));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnUnmappableCharacter = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_decode = ($this, $in, $out, $endOfInput) => {
    let var$4, var$5, $result, $e, $$je;
    var$4 = $this.$state;
    if (!(var$4 == 2 && !$endOfInput) && var$4 != 3) {
        $this.$state = $endOfInput ? 2 : 1;
        var$5 = $this;
        while (true) {
            try {
                $result = jnci_BufferedDecoder_decodeLoop(var$5, $in, $out);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $e = $$je;
                    $in = new jnc_CoderMalfunctionError;
                    jl_Throwable__init_1($in, $e);
                    $rt_throw($in);
                } else {
                    throw $$e;
                }
            }
            if (jnc_CoderResult_isOverflow($result))
                return $result;
            if (jnc_CoderResult_isUnderflow($result)) {
                if ($endOfInput && jn_Buffer_hasRemaining($in)) {
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPORT)
                        return jnc_CoderResult_malformedForLength(jn_Buffer_remaining($in));
                    if (jn_Buffer_remaining($out) <= $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_Buffer_position($in, $in.$position0 + jn_Buffer_remaining($in) | 0);
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPLACE)
                        jn_CharBuffer_put($out, $this.$replacement);
                }
                return $result;
            }
            if (jnc_CoderResult_isMalformed($result)) {
                $e = $this.$malformedAction;
                if ($e === jnc_CodingErrorAction_REPORT)
                    return $result;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            } else if (jnc_CoderResult_isUnmappable($result)) {
                $e = $this.$unmappableAction0;
                if ($e === jnc_CodingErrorAction_REPORT)
                    break;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            }
        }
        return $result;
    }
    $in = new jl_IllegalStateException;
    jl_Throwable__init_($in);
    $rt_throw($in);
},
jnc_CharsetDecoder_flush = ($this, $out) => {
    let var$2;
    var$2 = $this.$state;
    if (var$2 != 3 && var$2 != 2) {
        $out = new jl_IllegalStateException;
        jl_Throwable__init_($out);
        $rt_throw($out);
    }
    $this.$state = 3;
    return jnc_CoderResult_UNDERFLOW;
},
jnc_CharsetDecoder_decode0 = ($this, $in) => {
    let var$2, $out, $result;
    var$2 = $this.$state;
    if (var$2 && var$2 != 3) {
        $in = new jl_IllegalStateException;
        jl_Throwable__init_($in);
        $rt_throw($in);
    }
    if (!jn_Buffer_remaining($in))
        return jn_CharBuffer_allocate(0);
    if ($this.$state)
        $this.$state = 0;
    $out = jn_CharBuffer_allocate(jl_Math_max(8, jn_Buffer_remaining($in) * $this.$averageCharsPerByte | 0));
    while (true) {
        $result = jnc_CharsetDecoder_decode($this, $in, $out, 0);
        if (jnc_CoderResult_isUnderflow($result))
            break;
        if (jnc_CoderResult_isOverflow($result))
            $out = jnc_CharsetDecoder_expand($this, $out);
        if (!jnc_CoderResult_isError($result))
            continue;
        jnc_CoderResult_throwException($result);
    }
    $in = jnc_CharsetDecoder_decode($this, $in, $out, 1);
    if (jnc_CoderResult_isError($in))
        jnc_CoderResult_throwException($in);
    while (!jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush($this, $out))) {
        $out = jnc_CharsetDecoder_expand($this, $out);
    }
    jn_Buffer_flip($out);
    return $out;
},
jnc_CharsetDecoder_expand = ($this, $buffer) => {
    let $array, $result;
    $array = jn_CharBuffer_array($buffer);
    $result = jn_CharBuffer_wrap(ju_Arrays_copyOf1($array, jl_Math_max(8, $array.data.length * 2 | 0)));
    jn_Buffer_position($result, $buffer.$position0);
    return $result;
},
jnc_CharsetDecoder_implFlush = ($this, $out) => {
    return jnc_CoderResult_UNDERFLOW;
},
jnc_CharsetDecoder_implReset = $this => {
    return;
},
cbgg_TextureData$TextureDataType = $rt_classWithoutFields(jl_Enum),
cbgg_TextureData$TextureDataType_Pixmap = null,
cbgg_TextureData$TextureDataType_Custom = null,
cbgg_TextureData$TextureDataType_$VALUES = null,
cbgg_TextureData$TextureDataType_values = () => {
    return cbgg_TextureData$TextureDataType_$VALUES.$clone0();
},
cbgg_TextureData$TextureDataType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_TextureData$TextureDataType;
    jl_Enum__init_(var$1, $rt_s(816), 0);
    cbgg_TextureData$TextureDataType_Pixmap = var$1;
    var$1 = new cbgg_TextureData$TextureDataType;
    jl_Enum__init_(var$1, $rt_s(817), 1);
    cbgg_TextureData$TextureDataType_Custom = var$1;
    var$2 = $rt_createArray(cbgg_TextureData$TextureDataType, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_TextureData$TextureDataType_Pixmap;
    var$3[1] = var$1;
    cbgg_TextureData$TextureDataType_$VALUES = var$2;
},
cbggg_MipMapGenerator = $rt_classWithoutFields(),
cbggg_MipMapGenerator_useHWMipMap = 0,
cbggg_MipMapGenerator__init_ = $this => {
    return;
},
cbggg_MipMapGenerator__init_0 = () => {
    let var_0 = new cbggg_MipMapGenerator();
    cbggg_MipMapGenerator__init_(var_0);
    return var_0;
},
cbggg_MipMapGenerator_generateMipMapCPU = ($target, $pixmap, $textureWidth, $textureHeight) => {
    let $width, $height, $level, $tmp_0, var$9, var$10, var$11, var$12, var$13;
    cbg_Gdx_gl.$glTexImage2D($target, 0, cbgg_Pixmap_getGLInternalFormat($pixmap), cbgg_Pixmap_getWidth($pixmap), cbgg_Pixmap_getHeight($pixmap), 0, cbgg_Pixmap_getGLFormat($pixmap), cbgg_Pixmap_getGLType($pixmap), cbgg_Pixmap_getPixels($pixmap));
    if (cbg_Gdx_gl20 === null && $textureWidth != $textureHeight) {
        $pixmap = new cbgu_GdxRuntimeException;
        jl_Exception__init_($pixmap, $rt_s(818));
        $rt_throw($pixmap);
    }
    $width = cbgg_Pixmap_getWidth($pixmap) / 2 | 0;
    $height = cbgg_Pixmap_getHeight($pixmap) / 2 | 0;
    $level = 1;
    while ($width > 0 && $height > 0) {
        $tmp_0 = cbgg_Pixmap__init_($width, $height, cbgg_Pixmap_getFormat($pixmap));
        cbgg_Pixmap_setBlending($tmp_0, cbgg_Pixmap$Blending_None);
        var$9 = cbgg_Pixmap_getWidth($pixmap);
        var$10 = cbgg_Pixmap_getHeight($pixmap);
        var$11 = $tmp_0.$nativePixmap;
        var$12 = $pixmap.$nativePixmap;
        var$13 = var$11.$nativePixmap0;
        Gdx.Gdx.prototype.g2d_draw_pixmap(var$12.$nativePixmap0.$basePtr, var$13.$basePtr, 0, 0, var$9, var$10, 0, 0, $width, $height);
        cbggg_Gdx2DPixmapNative_copyHeapToBuffer(var$13);
        if ($level > 1)
            cbgg_Pixmap_dispose($pixmap);
        cbg_Gdx_gl.$glTexImage2D($target, $level, cbgg_Pixmap_getGLInternalFormat($tmp_0), cbgg_Pixmap_getWidth($tmp_0), cbgg_Pixmap_getHeight($tmp_0), 0, cbgg_Pixmap_getGLFormat($tmp_0), cbgg_Pixmap_getGLType($tmp_0), cbgg_Pixmap_getPixels($tmp_0));
        $width = cbgg_Pixmap_getWidth($tmp_0) / 2 | 0;
        $height = cbgg_Pixmap_getHeight($tmp_0) / 2 | 0;
        $level = $level + 1 | 0;
        $pixmap = $tmp_0;
    }
},
cbggg_MipMapGenerator__clinit_ = () => {
    cbggg_MipMapGenerator_useHWMipMap = 1;
},
jt_DecimalFormat$FormatField = $rt_classWithoutFields(0);
function jt_DecimalFormat$TextField() {
    jl_Object.call(this);
    this.$text = null;
}
let jt_DecimalFormat$TextField__init_0 = ($this, $text) => {
    $this.$text = $text;
},
jt_DecimalFormat$TextField__init_ = var_0 => {
    let var_1 = new jt_DecimalFormat$TextField();
    jt_DecimalFormat$TextField__init_0(var_1, var_0);
    return var_1;
},
jt_DecimalFormat$TextField_render = ($this, $format, $buffer) => {
    jl_AbstractStringBuilder_append0($buffer, $this.$text);
},
jt_DecimalFormat$TextField_equals = ($this, $obj) => {
    let $other;
    if ($this === $obj)
        return 1;
    if (!($obj instanceof jt_DecimalFormat$TextField))
        return 0;
    $other = $obj;
    return jl_String_equals($this.$text, $other.$text);
},
jt_DecimalFormat$TextField_hashCode = $this => {
    return jl_String_hashCode($this.$text);
};
function jt_DateFormatSymbols() {
    let a = this; jl_Object.call(a);
    a.$locale0 = null;
    a.$localPatternChars = null;
    a.$ampms = null;
    a.$eras = null;
    a.$months = null;
    a.$shortMonths = null;
    a.$shortWeekdays = null;
    a.$weekdays = null;
    a.$zoneStrings = null;
}
let jt_DateFormatSymbols__init_0 = $this => {
    jt_DateFormatSymbols__init_($this, ju_Locale_getDefault());
},
jt_DateFormatSymbols__init_2 = () => {
    let var_0 = new jt_DateFormatSymbols();
    jt_DateFormatSymbols__init_0(var_0);
    return var_0;
},
jt_DateFormatSymbols__init_ = ($this, $locale) => {
    $this.$locale0 = $locale;
},
jt_DateFormatSymbols__init_1 = var_0 => {
    let var_1 = new jt_DateFormatSymbols();
    jt_DateFormatSymbols__init_(var_1, var_0);
    return var_1;
},
jt_DateFormatSymbols_getAmPmStrings = $this => {
    let var$1, var$2, var$3;
    if ($this.$ampms === null) {
        var$1 = $this.$locale0;
        var$2 = var$1.$languageCode;
        var$3 = var$1.$countryCode;
        if (otciu_CLDRHelper_$$metadata$$2 === null)
            otciu_CLDRHelper_$$metadata$$2 = otciu_CLDRHelper_getAmPmMap$$create();
        $this.$ampms = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$2, var$2, var$3);
    }
    return $this.$ampms.$clone0();
},
jn_NativeBuffer = $rt_classWithoutFields(0);
function cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0() {
    jl_Object.call(this);
    this.$_018 = null;
}
let cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1.$_018;
    var$3 = var$2.loaded;
    var$4 = var$2.total;
    if (var$1 !== null) {
        var$1 = var$1.$val$listener;
        if (var$1 !== null)
            var$1.$onProgress(var$4, var$3);
    }
},
otjde_EventTarget = $rt_classWithoutFields(0),
otja_XMLHttpRequest = $rt_classWithoutFields();
function otcit_DoubleAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa = Long_ZERO;
    a.$exponent = 0;
    a.$sign1 = 0;
}
let otcit_DoubleAnalyzer$Result__init_ = $this => {
    return;
},
otcit_DoubleAnalyzer$Result__init_0 = () => {
    let var_0 = new otcit_DoubleAnalyzer$Result();
    otcit_DoubleAnalyzer$Result__init_(var_0);
    return var_0;
};
function jur_Matcher$1() {
    let a = this; jl_Object.call(a);
    a.$grN = 0;
    a.$val$gr = 0;
    a.$this$017 = null;
}
let jur_Matcher$1__init_ = ($this, $this$0, var$2) => {
    $this.$this$017 = $this$0;
    $this.$val$gr = var$2;
    $this.$grN = var$2;
},
jur_Matcher$1__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Matcher$1();
    jur_Matcher$1__init_(var_2, var_0, var_1);
    return var_2;
},
jur_Matcher$1_toString = $this => {
    return jur_Matcher_group($this.$this$017, $this.$grN);
},
jn_CharBuffer = $rt_classWithoutFields(jn_Buffer),
jn_CharBuffer_allocate = $capacity => {
    let $array, var$3, var$4;
    if ($capacity >= 0) {
        $array = $rt_createCharArray($capacity);
        return jn_CharBufferOverTypedArray__init_(0, $capacity, 0, $array.data, $array);
    }
    var$3 = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(669));
    jl_AbstractStringBuilder_append1(var$4, $capacity);
    jl_Exception__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
jn_CharBuffer_wrap = $array => {
    let var$2, var$3, var$4, var$5;
    var$2 = $array.data.length;
    if (var$2 >= 0) {
        var$3 = var$2 + 0 | 0;
        if (var$3 <= var$2) {
            var$4 = jn_CharBufferOverTypedArray__init_(0, var$2, 0, $array.data, $array);
            var$4.$position0 = 0;
            var$4.$limit0 = var$3;
            return var$4;
        }
    }
    var$5 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jn_CharBuffer_get = ($this, $dst, $offset, $length) => {
    let var$4, var$5, var$6, var$7;
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $dst.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$4 = new jn_BufferUnderflowException;
            jl_Throwable__init_(var$4);
            $rt_throw(var$4);
        }
        var$5 = $this.$position0;
        var$6 = $this;
        var$7 = new Uint16Array(var$6.$data1.buffer, var$6.$data1.byteOffset + (var$5 * 2 | 0) | 0, $length);
        $dst.data.set(var$7, $offset);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
},
jn_CharBuffer_put = ($this, $src) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$2 = 0;
    var$3 = $src.$nativeString.length;
    if (jn_CharBufferImpl_isReadOnly($this)) {
        $src = new jn_ReadOnlyBufferException;
        jl_Throwable__init_($src);
        $rt_throw($src);
    }
    if (var$3 >= var$2 && var$3 <= $src.$nativeString.length) {
        var$4 = var$3 - var$2 | 0;
        if (jn_Buffer_remaining($this) < var$4) {
            $src = new jn_BufferOverflowException;
            jl_Throwable__init_($src);
            $rt_throw($src);
        }
        var$5 = $this.$position0;
        var$6 = $this;
        while (true) {
            var$7 = var$3 + (-1) | 0;
            if (var$3 <= 0)
                break;
            var$8 = var$6.$data1;
            var$9 = var$5 + 1 | 0;
            var$10 = var$2 + 1 | 0;
            var$8[var$5] = jl_String_charAt($src, var$2);
            var$3 = var$7;
            var$5 = var$9;
            var$2 = var$10;
        }
        $this.$position0 = $this.$position0 + var$4 | 0;
        return $this;
    }
    $src = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($src);
    $rt_throw($src);
},
jn_CharBuffer_array = $this => {
    let var$1, var$2;
    var$1 = $this.$array6;
    if (var$1 !== null)
        return var$1;
    var$2 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
otjt_Uint8Array = $rt_classWithoutFields(otjt_TypedArray),
otjt_Uint16Array = $rt_classWithoutFields(otjt_TypedArray);
function jm_RoundingMode() {
    jl_Enum.call(this);
    this.$bigDecimalRM = 0;
}
let jm_RoundingMode_UP = null,
jm_RoundingMode_DOWN = null,
jm_RoundingMode_CEILING = null,
jm_RoundingMode_FLOOR = null,
jm_RoundingMode_HALF_UP = null,
jm_RoundingMode_HALF_DOWN = null,
jm_RoundingMode_HALF_EVEN = null,
jm_RoundingMode_UNNECESSARY = null,
jm_RoundingMode_$VALUES = null,
jm_RoundingMode_values = () => {
    return jm_RoundingMode_$VALUES.$clone0();
},
jm_RoundingMode__init_0 = ($this, var$1, var$2, $rm) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$bigDecimalRM = $rm;
},
jm_RoundingMode__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jm_RoundingMode();
    jm_RoundingMode__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jm_RoundingMode__clinit_ = () => {
    let var$1, var$2, var$3;
    jm_RoundingMode_UP = jm_RoundingMode__init_($rt_s(819), 0, 0);
    jm_RoundingMode_DOWN = jm_RoundingMode__init_($rt_s(820), 1, 1);
    jm_RoundingMode_CEILING = jm_RoundingMode__init_($rt_s(821), 2, 2);
    jm_RoundingMode_FLOOR = jm_RoundingMode__init_($rt_s(822), 3, 3);
    jm_RoundingMode_HALF_UP = jm_RoundingMode__init_($rt_s(823), 4, 4);
    jm_RoundingMode_HALF_DOWN = jm_RoundingMode__init_($rt_s(824), 5, 5);
    jm_RoundingMode_HALF_EVEN = jm_RoundingMode__init_($rt_s(825), 6, 6);
    var$1 = jm_RoundingMode__init_($rt_s(826), 7, 7);
    jm_RoundingMode_UNNECESSARY = var$1;
    var$2 = $rt_createArray(jm_RoundingMode, 8);
    var$3 = var$2.data;
    var$3[0] = jm_RoundingMode_UP;
    var$3[1] = jm_RoundingMode_DOWN;
    var$3[2] = jm_RoundingMode_CEILING;
    var$3[3] = jm_RoundingMode_FLOOR;
    var$3[4] = jm_RoundingMode_HALF_UP;
    var$3[5] = jm_RoundingMode_HALF_DOWN;
    var$3[6] = jm_RoundingMode_HALF_EVEN;
    var$3[7] = var$1;
    jm_RoundingMode_$VALUES = var$2;
};
function ju_Currency() {
    jl_Object.call(this);
    this.$resource = null;
}
let ju_Currency_currencies = null,
ju_Currency_getCurrencyCode = $this => {
    return ($this.$resource.code !== null ? $rt_str($this.$resource.code) : null);
},
jnc_CharacterCodingException = $rt_classWithoutFields(ji_IOException),
jnc_CharacterCodingException__init_ = $this => {
    jl_Throwable__init_($this);
},
jnc_CharacterCodingException__init_0 = () => {
    let var_0 = new jnc_CharacterCodingException();
    jnc_CharacterCodingException__init_(var_0);
    return var_0;
},
jl_Error = $rt_classWithoutFields(jl_Throwable),
jl_Error__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_Error__init_0 = () => {
    let var_0 = new jl_Error();
    jl_Error__init_(var_0);
    return var_0;
},
jl_AssertionError = $rt_classWithoutFields(jl_Error),
jl_AssertionError__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_AssertionError__init_0 = () => {
    let var_0 = new jl_AssertionError();
    jl_AssertionError__init_(var_0);
    return var_0;
},
otcic_CurrencyHelper = $rt_classWithoutFields(),
otcic_CurrencyHelper_$$metadata$$0 = null,
otcic_CurrencyHelper_$$metadata$$1 = null,
otcic_CurrencyHelper__init_ = $this => {
    return;
},
otcic_CurrencyHelper__init_0 = () => {
    let var_0 = new otcic_CurrencyHelper();
    otcic_CurrencyHelper__init_(var_0);
    return var_0;
},
otcic_CurrencyHelper_getCurrencies$$create = () => {
    return [{"code" : "AFN", "fractionDigits" : 2, "numericCode" : 971}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "ALL", "fractionDigits" : 2, "numericCode" : 8}, {"code" : "DZD", "fractionDigits" : 2, "numericCode" : 12}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "AOA", "fractionDigits" : 2, "numericCode" : 973}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : null,
    "fractionDigits" : 0, "numericCode" : 0}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "ARS", "fractionDigits" : 2, "numericCode" : 32}, {"code" : "AMD", "fractionDigits" : 2, "numericCode" : 51}, {"code" : "AWG", "fractionDigits" : 2, "numericCode" : 533}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "AZN", "fractionDigits" : 2, "numericCode" : 944}, {"code" : "BSD", "fractionDigits" : 2, "numericCode"
    : 44}, {"code" : "BHD", "fractionDigits" : 3, "numericCode" : 48}, {"code" : "BDT", "fractionDigits" : 2, "numericCode" : 50}, {"code" : "BBD", "fractionDigits" : 2, "numericCode" : 52}, {"code" : "BYR", "fractionDigits" : 0, "numericCode" : 974}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "BZD", "fractionDigits" : 2, "numericCode" : 84}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "BMD", "fractionDigits" : 2, "numericCode" : 60}, {"code" : "BTN", "fractionDigits"
    : 2, "numericCode" : 64}, {"code" : "INR", "fractionDigits" : 2, "numericCode" : 356}, {"code" : "BOB", "fractionDigits" : 2, "numericCode" : 68}, {"code" : "BOV", "fractionDigits" : 2, "numericCode" : 984}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "BAM", "fractionDigits" : 2, "numericCode" : 977}, {"code" : "BWP", "fractionDigits" : 2, "numericCode" : 72}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code" : "BRL", "fractionDigits" : 2, "numericCode" : 986}
    , {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "BND", "fractionDigits" : 2, "numericCode" : 96}, {"code" : "BGN", "fractionDigits" : 2, "numericCode" : 975}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "BIF", "fractionDigits" : 0, "numericCode" : 108}, {"code" : "KHR", "fractionDigits" : 2, "numericCode" : 116}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CAD", "fractionDigits" : 2, "numericCode" : 124}, {"code" : "CVE", "fractionDigits"
    : 2, "numericCode" : 132}, {"code" : "KYD", "fractionDigits" : 2, "numericCode" : 136}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CLF", "fractionDigits" : 4, "numericCode" : 990}, {"code" : "CLP", "fractionDigits" : 0, "numericCode" : 152}, {"code" : "CNY", "fractionDigits" : 2, "numericCode" : 156}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}
    , {"code" : "COP", "fractionDigits" : 2, "numericCode" : 170}, {"code" : "COU", "fractionDigits" : 2, "numericCode" : 970}, {"code" : "KMF", "fractionDigits" : 0, "numericCode" : 174}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CDF", "fractionDigits" : 2, "numericCode" : 976}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "CRC", "fractionDigits" : 2, "numericCode" : 188}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "HRK", "fractionDigits"
    : 2, "numericCode" : 191}, {"code" : "CUC", "fractionDigits" : 2, "numericCode" : 931}, {"code" : "CUP", "fractionDigits" : 2, "numericCode" : 192}, {"code" : "ANG", "fractionDigits" : 2, "numericCode" : 532}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "CZK", "fractionDigits" : 2, "numericCode" : 203}, {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "DJF", "fractionDigits" : 0, "numericCode" : 262}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" :
    951}, {"code" : "DOP", "fractionDigits" : 2, "numericCode" : 214}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EGP", "fractionDigits" : 2, "numericCode" : 818}, {"code" : "SVC", "fractionDigits" : 2, "numericCode" : 222}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "ERN", "fractionDigits" : 2, "numericCode" : 232}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "ETB",
    "fractionDigits" : 2, "numericCode" : 230}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "FKP", "fractionDigits" : 2, "numericCode" : 238}, {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "FJD", "fractionDigits" : 2, "numericCode" : 242}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XPF", "fractionDigits" : 0,
    "numericCode" : 953}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "GMD", "fractionDigits" : 2, "numericCode" : 270}, {"code" : "GEL", "fractionDigits" : 2, "numericCode" : 981}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "GHS", "fractionDigits" : 2, "numericCode" : 936}, {"code" : "GIP", "fractionDigits" : 2, "numericCode" : 292}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}
    , {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "GTQ", "fractionDigits" : 2, "numericCode" : 320}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "GNF", "fractionDigits" : 0, "numericCode" : 324}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "GYD", "fractionDigits"
    : 2, "numericCode" : 328}, {"code" : "HTG", "fractionDigits" : 2, "numericCode" : 332}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "HNL", "fractionDigits" : 2, "numericCode" : 340}, {"code" : "HKD", "fractionDigits" : 2, "numericCode" : 344}, {"code" : "HUF", "fractionDigits" : 2, "numericCode" : 348}, {"code" : "ISK", "fractionDigits" : 0, "numericCode" : 352}
    , {"code" : "INR", "fractionDigits" : 2, "numericCode" : 356}, {"code" : "IDR", "fractionDigits" : 2, "numericCode" : 360}, {"code" : "XDR", "fractionDigits" : -1, "numericCode" : 960}, {"code" : "IRR", "fractionDigits" : 2, "numericCode" : 364}, {"code" : "IQD", "fractionDigits" : 3, "numericCode" : 368}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "ILS", "fractionDigits" : 2, "numericCode" : 376}, {"code" : "EUR", "fractionDigits"
    : 2, "numericCode" : 978}, {"code" : "JMD", "fractionDigits" : 2, "numericCode" : 388}, {"code" : "JPY", "fractionDigits" : 0, "numericCode" : 392}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "JOD", "fractionDigits" : 3, "numericCode" : 400}, {"code" : "KZT", "fractionDigits" : 2, "numericCode" : 398}, {"code" : "KES", "fractionDigits" : 2, "numericCode" : 404}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "KPW", "fractionDigits" : 2, "numericCode" : 408}
    , {"code" : "KRW", "fractionDigits" : 0, "numericCode" : 410}, {"code" : "KWD", "fractionDigits" : 3, "numericCode" : 414}, {"code" : "KGS", "fractionDigits" : 2, "numericCode" : 417}, {"code" : "LAK", "fractionDigits" : 2, "numericCode" : 418}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "LBP", "fractionDigits" : 2, "numericCode" : 422}, {"code" : "LSL", "fractionDigits" : 2, "numericCode" : 426}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : "LRD", "fractionDigits"
    : 2, "numericCode" : 430}, {"code" : "LYD", "fractionDigits" : 3, "numericCode" : 434}, {"code" : "CHF", "fractionDigits" : 2, "numericCode" : 756}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MOP", "fractionDigits" : 2, "numericCode" : 446}, {"code" : "MKD", "fractionDigits" : 2, "numericCode" : 807}, {"code" : "MGA", "fractionDigits" : 2, "numericCode" : 969}, {"code" : "MWK", "fractionDigits" : 2, "numericCode" :
    454}, {"code" : "MYR", "fractionDigits" : 2, "numericCode" : 458}, {"code" : "MVR", "fractionDigits" : 2, "numericCode" : 462}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MRO", "fractionDigits" : 2, "numericCode" : 478}, {"code" : "MUR", "fractionDigits" : 2, "numericCode" : 480}, {"code" : "EUR",
    "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XUA", "fractionDigits" : -1, "numericCode" : 965}, {"code" : "MXN", "fractionDigits" : 2, "numericCode" : 484}, {"code" : "MXV", "fractionDigits" : 2, "numericCode" : 979}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "MDL", "fractionDigits" : 2, "numericCode" : 498}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MNT", "fractionDigits" : 2, "numericCode" : 496}, {"code" : "EUR", "fractionDigits" : 2,
    "numericCode" : 978}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "MAD", "fractionDigits" : 2, "numericCode" : 504}, {"code" : "MZN", "fractionDigits" : 2, "numericCode" : 943}, {"code" : "MMK", "fractionDigits" : 2, "numericCode" : 104}, {"code" : "NAD", "fractionDigits" : 2, "numericCode" : 516}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "NPR", "fractionDigits" : 2, "numericCode" : 524},
    {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XPF", "fractionDigits" : 0, "numericCode" : 953}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "NIO", "fractionDigits" : 2, "numericCode" : 558}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "NGN", "fractionDigits" : 2, "numericCode" : 566}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "USD", "fractionDigits"
    : 2, "numericCode" : 840}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code" : "OMR", "fractionDigits" : 3, "numericCode" : 512}, {"code" : "PKR", "fractionDigits" : 2, "numericCode" : 586}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : null, "fractionDigits" : 0, "numericCode" : 0}, {"code" : "PAB", "fractionDigits" : 2, "numericCode" : 590}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "PGK", "fractionDigits" : 2, "numericCode" : 598}
    , {"code" : "PYG", "fractionDigits" : 0, "numericCode" : 600}, {"code" : "PEN", "fractionDigits" : 2, "numericCode" : 604}, {"code" : "PHP", "fractionDigits" : 2, "numericCode" : 608}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "PLN", "fractionDigits" : 2, "numericCode" : 985}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "QAR", "fractionDigits" : 2, "numericCode" : 634}, {"code" : "EUR", "fractionDigits"
    : 2, "numericCode" : 978}, {"code" : "RON", "fractionDigits" : 2, "numericCode" : 946}, {"code" : "RUB", "fractionDigits" : 2, "numericCode" : 643}, {"code" : "RWF", "fractionDigits" : 0, "numericCode" : 646}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "SHP", "fractionDigits" : 2, "numericCode" : 654}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" :
    978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "WST", "fractionDigits" : 2, "numericCode" : 882}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "STD", "fractionDigits" : 2, "numericCode" : 678}, {"code" : "SAR", "fractionDigits" : 2, "numericCode" : 682}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "RSD", "fractionDigits" : 2, "numericCode" : 941}, {"code" : "SCR",
    "fractionDigits" : 2, "numericCode" : 690}, {"code" : "SLL", "fractionDigits" : 2, "numericCode" : 694}, {"code" : "SGD", "fractionDigits" : 2, "numericCode" : 702}, {"code" : "ANG", "fractionDigits" : 2, "numericCode" : 532}, {"code" : "XSU", "fractionDigits" : -1, "numericCode" : 994}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "SBD", "fractionDigits" : 2, "numericCode" : 90}, {"code" : "SOS", "fractionDigits" : 2,
    "numericCode" : 706}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : null, "fractionDigits" : 0, "numericCode" : 0}, {"code" : "SSP", "fractionDigits" : 2, "numericCode" : 728}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "LKR", "fractionDigits" : 2, "numericCode" : 144}, {"code" : "SDG", "fractionDigits" : 2, "numericCode" : 938}, {"code" : "SRD", "fractionDigits" : 2, "numericCode" : 968}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code"
    : "SZL", "fractionDigits" : 2, "numericCode" : 748}, {"code" : "SEK", "fractionDigits" : 2, "numericCode" : 752}, {"code" : "CHE", "fractionDigits" : 2, "numericCode" : 947}, {"code" : "CHF", "fractionDigits" : 2, "numericCode" : 756}, {"code" : "CHW", "fractionDigits" : 2, "numericCode" : 948}, {"code" : "SYP", "fractionDigits" : 2, "numericCode" : 760}, {"code" : "TWD", "fractionDigits" : 2, "numericCode" : 901}, {"code" : "TJS", "fractionDigits" : 2, "numericCode" : 972}, {"code" : "TZS", "fractionDigits"
    : 2, "numericCode" : 834}, {"code" : "THB", "fractionDigits" : 2, "numericCode" : 764}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "TOP", "fractionDigits" : 2, "numericCode" : 776}, {"code" : "TTD", "fractionDigits" : 2, "numericCode" : 780}, {"code" : "TND", "fractionDigits" : 3, "numericCode" : 788}, {"code" : "TRY", "fractionDigits" : 2, "numericCode" :
    949}, {"code" : "TMT", "fractionDigits" : 2, "numericCode" : 934}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "UGX", "fractionDigits" : 0, "numericCode" : 800}, {"code" : "UAH", "fractionDigits" : 2, "numericCode" : 980}, {"code" : "AED", "fractionDigits" : 2, "numericCode" : 784}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "USN",
    "fractionDigits" : 2, "numericCode" : 997}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "UYI", "fractionDigits" : 0, "numericCode" : 940}, {"code" : "UYU", "fractionDigits" : 2, "numericCode" : 858}, {"code" : "UZS", "fractionDigits" : 2, "numericCode" : 860}, {"code" : "VUV", "fractionDigits" : 0, "numericCode" : 548}, {"code" : "VEF", "fractionDigits" : 2, "numericCode" : 937}, {"code" : "VND", "fractionDigits" : 0, "numericCode" : 704}, {"code" : "USD", "fractionDigits" : 2,
    "numericCode" : 840}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XPF", "fractionDigits" : 0, "numericCode" : 953}, {"code" : "MAD", "fractionDigits" : 2, "numericCode" : 504}, {"code" : "YER", "fractionDigits" : 2, "numericCode" : 886}, {"code" : "ZMW", "fractionDigits" : 2, "numericCode" : 967}, {"code" : "ZWL", "fractionDigits" : 2, "numericCode" : 932}, {"code" : "XBA", "fractionDigits" : -1, "numericCode" : 955}, {"code" : "XBB", "fractionDigits" : -1, "numericCode" : 956}
    , {"code" : "XBC", "fractionDigits" : -1, "numericCode" : 957}, {"code" : "XBD", "fractionDigits" : -1, "numericCode" : 958}, {"code" : "XTS", "fractionDigits" : -1, "numericCode" : 963}, {"code" : "XXX", "fractionDigits" : -1, "numericCode" : 999}, {"code" : "XAU", "fractionDigits" : -1, "numericCode" : 959}, {"code" : "XPD", "fractionDigits" : -1, "numericCode" : 964}, {"code" : "XPT", "fractionDigits" : -1, "numericCode" : 962}, {"code" : "XAG", "fractionDigits" : -1, "numericCode" : 961}];
},
otcic_CurrencyHelper_getCountryToCurrencyMap$$create = () => {
    return {"": {"value" : "CYP"}, "PR": {"value" : "USD"}, "PT": {"value" : "EUR"}, "PW": {"value" : "USD"}, "PY": {"value" : "PYG"}, "QA": {"value" : "QAR"}, "AC": {"value" : "SHP"}, "AD": {"value" : "EUR"}, "AE": {"value" : "AED"}, "AF": {"value" : "AFN"}, "AG": {"value" : "XCD"}, "AI": {"value" : "XCD"}, "AL": {"value" : "ALL"}, "AM": {"value" : "AMD"}, "AN": {"value" : "ANG"}, "AO": {"value" : "AOA"}, "242": {"value" : "Brazzaville"}, "AQ": {"value" : ""}, "AR": {"value" : "ARS"}, "243": {"value" : "Kinshasa"}
    , "AS": {"value" : "USD"}, "AT": {"value" : "EUR"}, "RE": {"value" : "EUR"}, "AU": {"value" : ""}, "AW": {"value" : "AWG"}, "AX": {"value" : "EUR"}, "AZ": {"value" : "AMD"}, "RO": {"value" : "RON"}, "BA": {"value" : "BAM"}, "BB": {"value" : "BBD"}, "RS": {"value" : "RSD"}, "BD": {"value" : "BDT"}, "BE": {"value" : "EUR"}, "RU": {"value" : "RUB"}, "BF": {"value" : "XOF"}, "BG": {"value" : "BGN"}, "RW": {"value" : "RWF"}, "27": {"value" : ""}, "BH": {"value" : "BHD"}, "BI": {"value" : "BIF"}, "BJ": {"value"
    : "XOF"}, "BM": {"value" : "BMD"}, "BN": {"value" : "BND"}, "BO": {"value" : "BOB"}, "SA": {"value" : "SAR"}, "SB": {"value" : "SBD"}, "BR": {"value" : "BRL"}, "SC": {"value" : "SCR"}, "SD": {"value" : "SDD"}, "BT": {"value" : "BTN"}, "SE": {"value" : "SEK"}, "SG": {"value" : "SGD"}, "BV": {"value" : ""}, "BW": {"value" : "BWP"}, "SH": {"value" : "SHP"}, "SI": {"value" : "EUR"}, "BY": {"value" : "BYR"}, "SJ": {"value" : "NOK"}, "BZ": {"value" : "BZD"}, "SK": {"value" : "SKK"}, "SL": {"value" : "SLL"}, "SM":
    {"value" : "EUR"}, "SN": {"value" : "XOF"}, "SO": {"value" : ""}, "CA": {"value" : "CAD"}, "SR": {"value" : "SRD"}, "CC": {"value" : "AUD"}, "ST": {"value" : "STD"}, "CF": {"value" : "XAF"}, "SV": {"value" : "USD"}, "CH": {"value" : "CHF"}, "CI": {"value" : "XOF"}, "SY": {"value" : "SYP"}, "SZ": {"value" : "SZL"}, "CK": {"value" : "NZD"}, "CL": {"value" : "CLP"}, "CM": {"value" : "XAF"}, "CO": {"value" : "COP"}, "TA": {"value" : "SHP"}, "CR": {"value" : "CRC"}, "TC": {"value" : "USD"}, "TD": {"value" : "XAF"}
    , "CU": {"value" : "CUP"}, "TF": {"value" : ""}, "CV": {"value" : "CVE"}, "TG": {"value" : "XOF"}, "TH": {"value" : "THB"}, "CX": {"value" : "AUD"}, "CY": {"value" : "TRY"}, "TJ": {"value" : "TJS"}, "CZ": {"value" : "CZK"}, "TK": {"value" : "NZD"}, "TL": {"value" : "USD"}, "TM": {"value" : "TMM"}, "TN": {"value" : "TND"}, "TO": {"value" : "TOP"}, "TR": {"value" : "TRY"}, "TT": {"value" : "TTD"}, "DE": {"value" : "EUR"}, "TV": {"value" : "AUD"}, "DJ": {"value" : "DJF"}, "TZ": {"value" : "TZS"}, "DK": {"value"
    : "DKK"}, "DM": {"value" : "XCD"}, "DO": {"value" : "DOP"}, "UA": {"value" : "UAH"}, "UG": {"value" : "UGX"}, "DZ": {"value" : "DZD"}, "UM": {"value" : ""}, "EC": {"value" : "USD"}, "US": {"value" : "USD"}, "EE": {"value" : "EEK"}, "EG": {"value" : "EGP"}, "UY": {"value" : "UYU"}, "UZ": {"value" : "UZS"}, "VA": {"value" : "EUR"}, "ER": {"value" : "ERN"}, "VC": {"value" : "XCD"}, "ES": {"value" : "EUR"}, "ET": {"value" : "ETB"}, "VE": {"value" : "VEB"}, "VG": {"value" : "USD"}, "VI": {"value" : "USD"}, "VN":
    {"value" : "VND"}, "VU": {"value" : "VUV"}, "FI": {"value" : "EUR"}, "FJ": {"value" : "FJD"}, "FK": {"value" : "FKP"}, "FM": {"value" : "USD"}, "FO": {"value" : "DKK"}, "FR": {"value" : "EUR"}, "WF": {"value" : "XPF"}, "850": {"value" : "Pyongyang"}, "GA": {"value" : "XAF"}, "GB": {"value" : "GBP"}, "WS": {"value" : "WST"}, "GD": {"value" : "XCD"}, "GE": {"value" : "RUB and GEL"}, "GF": {"value" : "EUR"}, "GG": {"value" : "GGP"}, "GH": {"value" : "GHC"}, "GI": {"value" : "GIP"}, "GL": {"value" : "DKK"},
    "GN": {"value" : "GNF"}, "GP": {"value" : "EUR"}, "GQ": {"value" : "XAF"}, "GR": {"value" : "EUR"}, "GS": {"value" : ""}, "GT": {"value" : "GTQ"}, "GU": {"value" : "USD"}, "GW": {"value" : "XOF"}, "GY": {"value" : "GYD"}, "-241": {"value" : "Nassau"}, "82": {"value" : "Seoul"}, "86": {"value" : "Beijing"}, "HK": {"value" : "HKD"}, "HM": {"value" : ""}, "HN": {"value" : "HNL"}, "HR": {"value" : "HRK"}, "HT": {"value" : "HTG"}, "YE": {"value" : "YER"}, "HU": {"value" : "HUF"}, "ID": {"value" : "IDR"}, "YT":
    {"value" : "EUR"}, "IE": {"value" : "EUR"}, "IL": {"value" : "ILS"}, "IM": {"value" : "IMP"}, "IN": {"value" : "INR"}, "IO": {"value" : ""}, "IQ": {"value" : "IQD"}, "IR": {"value" : "IRR"}, "IS": {"value" : "ISK"}, "IT": {"value" : "EUR"}, "ZM": {"value" : "ZMK"}, "886": {"value" : "Taipei"}, "JE": {"value" : "JEP"}, "ZW": {"value" : "ZWD"}, "JM": {"value" : "JMD"}, "JO": {"value" : "JOD"}, "JP": {"value" : "JPY"}, "KE": {"value" : "KES"}, "KG": {"value" : "KGS"}, "KH": {"value" : "KHR"}, "KI": {"value"
    : "AUD"}, "KM": {"value" : "KMF"}, "KN": {"value" : "XCD"}, "KW": {"value" : "KWD"}, "KY": {"value" : "KYD"}, "KZ": {"value" : "KZT"}, "LA": {"value" : "LAK"}, "LB": {"value" : "LBP"}, "LC": {"value" : "XCD"}, "LI": {"value" : "CHF"}, "LK": {"value" : "LKR"}, "LR": {"value" : "LRD"}, "LS": {"value" : "LSL"}, "LT": {"value" : "LTL"}, "LU": {"value" : "EUR"}, "LV": {"value" : "LVL"}, "LY": {"value" : "LYD"}, "MA": {"value" : "MAD"}, "MC": {"value" : "EUR"}, "MD": {"value" : ""}, "ME": {"value" : "EUR"}, "MG":
    {"value" : "MGA"}, "MH": {"value" : "USD"}, "MK": {"value" : "MKD"}, "ML": {"value" : "XOF"}, "MM": {"value" : "MMK"}, "MN": {"value" : "MNT"}, "MO": {"value" : "MOP"}, "MP": {"value" : "USD"}, "MQ": {"value" : "EUR"}, "MR": {"value" : "MRO"}, "MS": {"value" : "XCD"}, "MT": {"value" : "MTL"}, "MU": {"value" : "MUR"}, "MV": {"value" : "MVR"}, "MW": {"value" : "MWK"}, "MX": {"value" : "MXN"}, "MY": {"value" : "MYR"}, "MZ": {"value" : "MZM"}, "NA": {"value" : "NAD"}, "NC": {"value" : "XPF"}, "NE": {"value"
    : "XOF"}, "NF": {"value" : "AUD"}, "NG": {"value" : "NGN"}, "NI": {"value" : "NIO"}, "NL": {"value" : "EUR"}, "NO": {"value" : "NOK"}, "NP": {"value" : "NPR"}, "NR": {"value" : "AUD"}, "NU": {"value" : "NZD"}, "NZ": {"value" : "NZD"}, "OM": {"value" : "OMR"}, "220": {"value" : "Banjul"}, "PA": {"value" : "PAB"}, "PE": {"value" : "PEN"}, "PF": {"value" : ""}, "PG": {"value" : "PGK"}, "PH": {"value" : "PHP"}, "PK": {"value" : "PKR"}, "PL": {"value" : "PLN"}, "PM": {"value" : "EUR"}, "PN": {"value" : "NZD"}
    };
};
function ju_Calendar() {
    let a = this; jl_Object.call(a);
    a.$areFieldsSet = 0;
    a.$fields = null;
    a.$isSet = null;
    a.$isTimeSet = 0;
    a.$time = Long_ZERO;
    a.$lastTimeFieldSet = 0;
    a.$lastDateFieldSet = 0;
    a.$lenient = 0;
    a.$firstDayOfWeek = 0;
    a.$minimalDaysInFirstWeek = 0;
    a.$zone = null;
}
let ju_Calendar_fieldNames = null,
ju_Calendar_firstDayOfWeekCache = 0,
ju_Calendar_minimalDaysInFirstWeekCache = 0,
ju_Calendar_cacheFor = null,
ju_Calendar_complete = $this => {
    if (!$this.$isTimeSet) {
        ju_GregorianCalendar_computeTime($this);
        $this.$isTimeSet = 1;
    }
    if (!$this.$areFieldsSet) {
        ju_GregorianCalendar_computeFields($this);
        $this.$areFieldsSet = 1;
    }
},
ju_Calendar_get = ($this, $field) => {
    ju_Calendar_complete($this);
    return $this.$fields.data[$field];
},
ju_Calendar_getFirstDayOfWeek = $this => {
    return $this.$firstDayOfWeek;
},
ju_Calendar_getMinimalDaysInFirstWeek = $this => {
    return $this.$minimalDaysInFirstWeek;
},
ju_Calendar_getTimeInMillis = $this => {
    if (!$this.$isTimeSet) {
        ju_GregorianCalendar_computeTime($this);
        $this.$isTimeSet = 1;
    }
    return $this.$time;
},
ju_Calendar_setTimeZone = ($this, $timezone) => {
    $this.$zone = $timezone;
    $this.$areFieldsSet = 0;
},
ju_Calendar_isLenient = $this => {
    return $this.$lenient;
},
ju_Calendar_setTimeInMillis = ($this, $milliseconds) => {
    if (!($this.$isTimeSet && $this.$areFieldsSet && Long_eq($this.$time, $milliseconds))) {
        $this.$time = $milliseconds;
        $this.$isTimeSet = 1;
        $this.$areFieldsSet = 0;
        ju_Calendar_complete($this);
    }
},
ju_Calendar__clinit_ = () => {
    ju_Calendar_fieldNames = $rt_wrapArray(jl_String, [$rt_s(827), $rt_s(828), $rt_s(829), $rt_s(830), $rt_s(831), $rt_s(832), $rt_s(833), $rt_s(834), $rt_s(835), $rt_s(836), $rt_s(837), $rt_s(838), $rt_s(839), $rt_s(840), $rt_s(841), $rt_s(842), $rt_s(843)]);
    ju_Calendar_firstDayOfWeekCache = (-1);
    ju_Calendar_minimalDaysInFirstWeekCache = (-1);
};
function otjde_Registration() {
    let a = this; jl_Object.call(a);
    a.$target0 = null;
    a.$type10 = null;
    a.$listener = null;
    a.$useCapture = null;
}
let jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer),
jn_CharBufferImpl_isReadOnly = $this => {
    return $this.$readOnly1;
};
function jn_CharBufferOverTypedArray() {
    let a = this; jn_CharBufferImpl.call(a);
    a.$readOnly1 = 0;
    a.$data1 = null;
    a.$array6 = null;
}
let jn_CharBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
    $this.$readOnly1 = $readOnly;
    $this.$data1 = $data;
    $this.$array6 = $array;
},
jn_CharBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_CharBufferOverTypedArray();
    jn_CharBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_CharBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data1.length;
};
function ju_GregorianCalendar() {
    let a = this; ju_Calendar.call(a);
    a.$gregorianCutover = Long_ZERO;
    a.$changeYear = 0;
    a.$julianSkew = 0;
    a.$isCached = 0;
    a.$cachedFields = null;
    a.$nextMidnightMillis = Long_ZERO;
    a.$lastMidnightMillis = Long_ZERO;
    a.$currentYearSkew = 0;
    a.$lastYearSkew = 0;
}
let ju_GregorianCalendar_daysInMonth0 = null,
ju_GregorianCalendar_daysInYear0 = null,
ju_GregorianCalendar_maximums = null,
ju_GregorianCalendar_minimums = null,
ju_GregorianCalendar_leastMaximums = null,
ju_GregorianCalendar__init_0 = $this => {
    ju_GregorianCalendar__init_($this, ju_Locale_getDefault());
},
ju_GregorianCalendar__init_2 = () => {
    let var_0 = new ju_GregorianCalendar();
    ju_GregorianCalendar__init_0(var_0);
    return var_0;
},
ju_GregorianCalendar__init_ = ($this, $locale) => {
    let var$2, var$3, var$4, var$5, var$6, $$je;
    ju_TimeZone_$callClinit();
    if (ju_TimeZone_defaultTz === null) {
        ju_TimeZone_defaultTz = null;
        ju_TimeZone_defaultTz = ju_TimeZone_GMT;
    }
    var$2 = ju_TimeZone_defaultTz;
    a: {
        try {
            var$3 = jl_Object_clone(var$2);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_CloneNotSupportedException) {
            } else {
                throw $$e;
            }
        }
        var$3 = null;
    }
    b: {
        var$3 = var$3;
        var$3.$rawOffset = var$2.$rawOffset;
        var$3.$underlyingZone = var$2.$underlyingZone;
        var$2 = var$3;
        $this.$fields = $rt_createIntArray(17);
        $this.$isSet = $rt_createBooleanArray(17);
        $this.$areFieldsSet = 0;
        $this.$isTimeSet = 0;
        $this.$lenient = 1;
        ju_Calendar_setTimeZone($this, var$2);
        $this.$fields = $rt_createIntArray(17);
        $this.$isSet = $rt_createBooleanArray(17);
        $this.$areFieldsSet = 0;
        $this.$isTimeSet = 0;
        $this.$lenient = 1;
        if ($locale === ju_Calendar_cacheFor) {
            var$4 = ju_Calendar_firstDayOfWeekCache;
            if (var$4 >= 0)
                break b;
        }
        var$2 = otciu_CLDRHelper_resolveCountry($locale.$languageCode, $locale.$countryCode);
        if (otciu_CLDRHelper_$$metadata$$13 === null)
            otciu_CLDRHelper_$$metadata$$13 = otciu_CLDRHelper_getFirstDayOfWeek$$create();
        var$3 = otciu_CLDRHelper_$$metadata$$13;
        var$4 = var$3.hasOwnProperty($rt_ustr(var$2)) ? var$3[$rt_ustr(var$2)].value : var$3[$rt_ustr($rt_s(844))].value;
        ju_Calendar_firstDayOfWeekCache = var$4;
    }
    c: {
        var$2 = $this;
        var$2.$firstDayOfWeek = var$4;
        var$2.$isCached = 0;
        if ($locale === ju_Calendar_cacheFor) {
            var$4 = ju_Calendar_minimalDaysInFirstWeekCache;
            if (var$4 >= 0)
                break c;
        }
        var$3 = otciu_CLDRHelper_resolveCountry($locale.$languageCode, $locale.$countryCode);
        if (otciu_CLDRHelper_$$metadata$$12 === null)
            otciu_CLDRHelper_$$metadata$$12 = otciu_CLDRHelper_getMinimalDaysInFirstWeek$$create();
        var$5 = otciu_CLDRHelper_$$metadata$$12;
        var$4 = var$5.hasOwnProperty($rt_ustr(var$3)) ? var$5[$rt_ustr(var$3)].value : var$5[$rt_ustr($rt_s(844))].value;
        ju_Calendar_minimalDaysInFirstWeekCache = var$4;
    }
    var$2.$minimalDaysInFirstWeek = var$4;
    var$2.$isCached = 0;
    ju_Calendar_cacheFor = $locale;
    $this.$gregorianCutover = Long_create(4184124416, 4294964450);
    $this.$changeYear = 1582;
    $this.$julianSkew = ((-1) + ju_GregorianCalendar_julianError($this) | 0) - (($this.$changeYear - 2000 | 0) / 100 | 0) | 0;
    $this.$cachedFields = $rt_createIntArrayFromData([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    $this.$currentYearSkew = 10;
    var$6 = jl_System_currentTimeMillis();
    ju_Calendar_setTimeInMillis($this, var$6);
},
ju_GregorianCalendar__init_1 = var_0 => {
    let var_1 = new ju_GregorianCalendar();
    ju_GregorianCalendar__init_(var_1, var_0);
    return var_1;
},
ju_GregorianCalendar_fullFieldsCalc = ($this, $timeVal, $millis, $zoneOffset) => {
    let $days, var$5, var$6, $dayOfYear, var$8, $month, $leapYear, $date, $dstOffset, var$13, var$14, $daysFromStart, $week;
    $days = Long_div($timeVal, Long_fromInt(86400000));
    if ($millis < 0) {
        $millis = $millis + 86400000 | 0;
        $days = Long_sub($days, Long_fromInt(1));
    }
    $millis = $millis + $zoneOffset | 0;
    while ($millis < 0) {
        $millis = $millis + 86400000 | 0;
        $days = Long_sub($days, Long_fromInt(1));
    }
    while ($millis >= 86400000) {
        $millis = $millis - 86400000 | 0;
        $days = Long_add($days, Long_fromInt(1));
    }
    var$5 = Long_fromInt($zoneOffset);
    var$6 = Long_add($timeVal, var$5);
    $dayOfYear = ju_GregorianCalendar_computeYearAndDay($this, $days, var$6);
    var$8 = $this.$fields.data;
    var$8[6] = $dayOfYear;
    if (var$8[1] == $this.$changeYear && Long_le($this.$gregorianCutover, var$6))
        $dayOfYear = $dayOfYear + $this.$currentYearSkew | 0;
    $month = $dayOfYear / 32 | 0;
    $leapYear = ju_GregorianCalendar_isLeapYear($this, var$8[1]);
    $date = $dayOfYear - ju_GregorianCalendar_daysInYear($this, $leapYear, $month) | 0;
    if ($date > ju_GregorianCalendar_daysInMonth($this, $leapYear, $month)) {
        $date = $date - ju_GregorianCalendar_daysInMonth($this, $leapYear, $month) | 0;
        $month = $month + 1 | 0;
    }
    $this.$fields.data[7] = ju_GregorianCalendar_mod7($this, Long_sub($days, Long_fromInt(3))) + 1 | 0;
    $dstOffset = ju_GregorianCalendar_getTimeZoneOffset($this, $timeVal);
    var$8 = $this.$fields.data;
    if (var$8[1] > 0)
        $dstOffset = $dstOffset - $zoneOffset | 0;
    var$8[16] = $dstOffset;
    if (!$dstOffset)
        var$13 = $days;
    else {
        $millis = $millis + $dstOffset | 0;
        if ($millis < 0) {
            $millis = $millis + 86400000 | 0;
            var$13 = Long_sub($days, Long_fromInt(1));
        } else if ($millis < 86400000)
            var$13 = $days;
        else {
            $millis = $millis - 86400000 | 0;
            var$13 = Long_add($days, Long_fromInt(1));
        }
        if (Long_ne($days, var$13)) {
            $timeVal = Long_add(Long_sub($timeVal, var$5), Long_fromInt($dstOffset));
            $zoneOffset = ju_GregorianCalendar_computeYearAndDay($this, var$13, $timeVal);
            var$8 = $this.$fields.data;
            var$8[6] = $zoneOffset;
            if (var$8[1] == $this.$changeYear && Long_le($this.$gregorianCutover, $timeVal))
                $zoneOffset = $zoneOffset + $this.$currentYearSkew | 0;
            $month = $zoneOffset / 32 | 0;
            $leapYear = ju_GregorianCalendar_isLeapYear($this, var$8[1]);
            $date = $zoneOffset - ju_GregorianCalendar_daysInYear($this, $leapYear, $month) | 0;
            if ($date > ju_GregorianCalendar_daysInMonth($this, $leapYear, $month)) {
                $date = $date - ju_GregorianCalendar_daysInMonth($this, $leapYear, $month) | 0;
                $month = $month + 1 | 0;
            }
            $this.$fields.data[7] = ju_GregorianCalendar_mod7($this, Long_sub(var$13, Long_fromInt(3))) + 1 | 0;
        }
    }
    var$8 = $this.$fields.data;
    var$8[14] = $millis % 1000 | 0;
    $millis = $millis / 1000 | 0;
    var$8[13] = $millis % 60 | 0;
    $millis = $millis / 60 | 0;
    var$8[12] = $millis % 60 | 0;
    var$8[11] = ($millis / 60 | 0) % 24 | 0;
    var$8[9] = var$8[11] <= 11 ? 0 : 1;
    var$8[10] = var$8[11] % 12 | 0;
    if (var$8[1] > 0)
        var$8[0] = 1;
    else {
        var$8[0] = 0;
        var$8[1] = ( -var$8[1] | 0) + 1 | 0;
    }
    var$8[2] = $month;
    var$8[5] = $date;
    $zoneOffset = $date - 1 | 0;
    var$8[8] = ($zoneOffset / 7 | 0) + 1 | 0;
    $timeVal = Long_sub(Long_sub(var$13, Long_fromInt($date)), Long_fromInt(2));
    var$14 = $this;
    var$8[4] = (($zoneOffset + ju_GregorianCalendar_mod7($this, Long_sub($timeVal, Long_fromInt(ju_Calendar_getFirstDayOfWeek(var$14) - 1 | 0))) | 0) / 7 | 0) + 1 | 0;
    $daysFromStart = ju_GregorianCalendar_mod7($this, Long_sub(Long_sub(Long_sub(var$13, Long_fromInt(3)), Long_fromInt($this.$fields.data[6] - 1 | 0)), Long_fromInt(ju_Calendar_getFirstDayOfWeek(var$14) - 1 | 0)));
    $week = ((($this.$fields.data[6] - 1 | 0) + $daysFromStart | 0) / 7 | 0) + ((7 - $daysFromStart | 0) < ju_Calendar_getMinimalDaysInFirstWeek(var$14) ? 0 : 1) | 0;
    if (!$week) {
        var$8 = $this.$fields.data;
        $dstOffset = !ju_GregorianCalendar_isLeapYear($this, var$8[1] - 1 | 0) ? 1 : 2;
        var$8[3] = (7 - ju_GregorianCalendar_mod7($this, Long_fromInt($daysFromStart - $dstOffset | 0)) | 0) < ju_Calendar_getMinimalDaysInFirstWeek(var$14) ? 52 : 53;
    } else {
        $millis = $this.$fields.data[6];
        $zoneOffset = !$leapYear ? 366 : 367;
        $dstOffset = !$leapYear ? 1 : 2;
        if ($millis < ($zoneOffset - ju_GregorianCalendar_mod7($this, Long_fromInt($daysFromStart + $dstOffset | 0)) | 0))
            $this.$fields.data[3] = $week;
        else {
            var$8 = $this.$fields;
            $dstOffset = !$leapYear ? 1 : 2;
            if ((7 - ju_GregorianCalendar_mod7($this, Long_fromInt($daysFromStart + $dstOffset | 0)) | 0) >= ju_Calendar_getMinimalDaysInFirstWeek(var$14))
                $week = 1;
            var$8.data[3] = $week;
        }
    }
},
ju_GregorianCalendar_cachedFieldsCheckAndGet = ($this, $timeVal, $newTimeMillis, $newTimeMillisAdjusted, $millis, $zoneOffset) => {
    let var$6, $dstOffset, var$8, var$9, var$10;
    a: {
        b: {
            var$6 = $this.$fields.data;
            $dstOffset = var$6[16];
            if ($this.$isCached) {
                var$8 = $this.$nextMidnightMillis;
                if (Long_lt($newTimeMillis, var$8)) {
                    var$9 = $this.$lastMidnightMillis;
                    if (Long_gt($newTimeMillis, var$9)) {
                        var$10 = $this.$cachedFields.data;
                        if (var$10[4] == $zoneOffset && !(!$dstOffset && Long_ge($newTimeMillisAdjusted, var$8))) {
                            if (!$dstOffset)
                                break b;
                            if (Long_gt($newTimeMillisAdjusted, var$9))
                                break b;
                        }
                    }
                }
            }
            ju_GregorianCalendar_fullFieldsCalc($this, $timeVal, $millis, $zoneOffset);
            $this.$isCached = 0;
            break a;
        }
        var$6[1] = var$10[0];
        var$6[2] = var$10[1];
        var$6[5] = var$10[2];
        var$6[7] = var$10[3];
        var$6[0] = var$10[5];
        var$6[3] = var$10[6];
        var$6[4] = var$10[7];
        var$6[6] = var$10[8];
        var$6[8] = var$10[9];
    }
},
ju_GregorianCalendar_getTimeZoneOffset = ($this, $localTime) => {
    return ju_IANATimeZone_getOffset($this.$zone, $localTime);
},
ju_GregorianCalendar_computeFields = $this => {
    let $zoneOffset, var$2, $millis, var$4, $dstOffset, $offset, $newTime, $i, var$9;
    $zoneOffset = ju_GregorianCalendar_getTimeZoneOffset($this, $this.$time);
    if (!$this.$isSet.data[15])
        $this.$fields.data[15] = $zoneOffset;
    var$2 = $this.$time;
    $millis = Long_lo(Long_rem(var$2, Long_fromInt(86400000)));
    var$4 = $this.$fields.data;
    $dstOffset = var$4[16];
    $offset = $zoneOffset + $dstOffset | 0;
    $newTime = Long_add(var$2, Long_fromInt($offset));
    $i = Long_compare(var$2, Long_ZERO);
    if ($i > 0 && Long_lt($newTime, Long_ZERO) && $offset > 0)
        $newTime = Long_create(4294967295, 2147483647);
    else if ($i < 0 && Long_gt($newTime, Long_ZERO) && $offset < 0)
        $newTime = Long_create(0, 2147483648);
    if (!$this.$isCached)
        ju_GregorianCalendar_fullFieldsCalc($this, var$2, $millis, $zoneOffset);
    else {
        $i = (($millis >= 0 ? $millis : $millis + 86400000 | 0) + $zoneOffset | 0) + $dstOffset | 0;
        if ($i < 0)
            $i = $i + 86400000 | 0;
        else if ($i >= 86400000)
            $i = $i - 86400000 | 0;
        var$4[14] = $i % 1000 | 0;
        $offset = $i / 1000 | 0;
        var$4[13] = $offset % 60 | 0;
        $offset = $offset / 60 | 0;
        var$4[12] = $offset % 60 | 0;
        var$4[11] = ($offset / 60 | 0) % 24 | 0;
        var$4[9] = var$4[11] <= 11 ? 0 : 1;
        var$4[10] = var$4[11] % 12 | 0;
        $offset = Long_compare($newTime, Long_ZERO);
        ju_GregorianCalendar_cachedFieldsCheckAndGet($this, var$2, $newTime, $offset > 0 && $offset < 0 && !$dstOffset ? Long_create(4294967295, 2147483647) : $offset >= 0 ? $newTime : $offset <= 0 ? $newTime : $dstOffset ? Long_create(0, 2147483648) : $newTime, $millis, $zoneOffset);
    }
    $i = 0;
    while ($i < 17) {
        $this.$isSet.data[$i] = 1;
        $i = $i + 1 | 0;
    }
    if (!$this.$isCached && Long_ne($newTime, Long_create(4294967295, 2147483647)) && Long_ne($newTime, Long_create(0, 2147483648))) {
        var$9 = $this.$cachedFields.data;
        var$4 = $this.$fields.data;
        var$9[0] = var$4[1];
        var$9[1] = var$4[2];
        var$9[2] = var$4[5];
        var$9[3] = var$4[7];
        var$9[4] = $zoneOffset;
        var$9[5] = var$4[0];
        var$9[6] = var$4[3];
        var$9[7] = var$4[4];
        var$9[8] = var$4[6];
        var$9[9] = var$4[8];
        $this.$nextMidnightMillis = Long_add($newTime, Long_fromInt(((0 + ((((23 - var$4[11] | 0) * 60 | 0) * 60 | 0) * 1000 | 0) | 0) + (((59 - var$4[12] | 0) * 60 | 0) * 1000 | 0) | 0) + ((59 - var$4[13] | 0) * 1000 | 0) | 0));
        $this.$lastMidnightMillis = Long_sub($newTime, Long_fromInt(((((var$4[11] * 60 | 0) * 60 | 0) * 1000 | 0) + ((var$4[12] * 60 | 0) * 1000 | 0) | 0) + (var$4[13] * 1000 | 0) | 0));
        $this.$isCached = 1;
    }
},
ju_GregorianCalendar_computeTime = $this => {
    let var$1, var$2, var$3, $hour, $timeVal, $year, $weekMonthSet, $useMonth, $month, $useWeekYear, $days, $dayOfWeek, $skew, $leapYear, $useDate;
    a: {
        b: {
            c: {
                d: {
                    var$1 = $this;
                    if (!ju_Calendar_isLenient(var$1)) {
                        e: {
                            var$2 = $this.$isSet.data;
                            if (var$2[11]) {
                                var$3 = $this.$fields.data;
                                if (var$3[11] >= 0 && var$3[11] <= 23)
                                    break e;
                                $rt_throw(jl_IllegalArgumentException__init_());
                            }
                            if (var$2[10]) {
                                var$3 = $this.$fields.data;
                                if (!(var$3[10] >= 0 && var$3[10] <= 11))
                                    $rt_throw(jl_IllegalArgumentException__init_());
                            }
                        }
                        if (var$2[12]) {
                            var$3 = $this.$fields.data;
                            if (!(var$3[12] >= 0 && var$3[12] <= 59))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[13]) {
                            var$3 = $this.$fields.data;
                            if (!(var$3[13] >= 0 && var$3[13] <= 59))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[14]) {
                            var$3 = $this.$fields.data;
                            if (!(var$3[14] >= 0 && var$3[14] <= 999))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[3]) {
                            var$3 = $this.$fields.data;
                            if (var$3[3] < 1)
                                break a;
                            if (var$3[3] > 53)
                                break a;
                        }
                        if (var$2[7]) {
                            var$3 = $this.$fields.data;
                            if (!(var$3[7] >= 1 && var$3[7] <= 7))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[8]) {
                            var$3 = $this.$fields.data;
                            if (var$3[8] < 1)
                                break b;
                            if (var$3[8] > 6)
                                break b;
                        }
                        if (var$2[4]) {
                            var$3 = $this.$fields.data;
                            if (!(var$3[4] >= 1 && var$3[4] <= 6))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[9]) {
                            var$3 = $this.$fields.data;
                            if (var$3[9] && var$3[9] != 1)
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[10]) {
                            var$3 = $this.$fields.data;
                            if (var$3[10] < 0)
                                break c;
                            if (var$3[10] > 11)
                                break c;
                        }
                        if (var$2[1]) {
                            if (var$2[0]) {
                                var$3 = $this.$fields.data;
                                if (!var$3[0] && !(var$3[1] >= 1 && var$3[1] <= 292269054))
                                    $rt_throw(jl_IllegalArgumentException__init_());
                            }
                            var$3 = $this.$fields.data;
                            if (!(var$3[1] >= 1 && var$3[1] <= 292278994))
                                $rt_throw(jl_IllegalArgumentException__init_());
                        }
                        if (var$2[2]) {
                            var$2 = $this.$fields.data;
                            if (var$2[2] < 0)
                                break d;
                            if (var$2[2] > 11)
                                break d;
                        }
                    }
                    $hour = Long_ZERO;
                    var$2 = $this.$isSet.data;
                    if (var$2[11] && $this.$lastTimeFieldSet != 10)
                        $hour = Long_fromInt($this.$fields.data[11]);
                    else if (var$2[10]) {
                        var$3 = $this.$fields.data;
                        $hour = Long_fromInt((var$3[9] * 12 | 0) + var$3[10] | 0);
                    }
                    $timeVal = Long_mul($hour, Long_fromInt(3600000));
                    if (var$2[12])
                        $timeVal = Long_add($timeVal, Long_mul(Long_fromInt($this.$fields.data[12]), Long_fromInt(60000)));
                    if (var$2[13])
                        $timeVal = Long_add($timeVal, Long_mul(Long_fromInt($this.$fields.data[13]), Long_fromInt(1000)));
                    if (var$2[14])
                        $timeVal = Long_add($timeVal, Long_fromInt($this.$fields.data[14]));
                    $year = !var$2[1] ? 1970 : $this.$fields.data[1];
                    if (var$2[0]) {
                        var$3 = $this.$fields.data;
                        if (var$3[0] && var$3[0] != 1)
                            $rt_throw(jl_IllegalArgumentException__init_());
                        if (!var$3[0])
                            $year = 1 - $year | 0;
                    }
                    $weekMonthSet = !var$2[4] && !var$2[8] ? 0 : 1;
                    $useMonth = !(!var$2[5] && !var$2[2] && !$weekMonthSet) && $this.$lastDateFieldSet != 6 ? 1 : 0;
                    if ($useMonth) {
                        $month = $this.$lastDateFieldSet;
                        if (!($month != 7 && $month != 3)) {
                            if (var$2[3] && var$2[7])
                                $useMonth = $month != 3 && $weekMonthSet && var$2[7] ? 1 : 0;
                            else if (var$2[6])
                                $useMonth = var$2[5] && var$2[2] ? 1 : 0;
                        }
                    }
                    if (!$useMonth) {
                        $useWeekYear = var$2[3] && $this.$lastDateFieldSet != 6 ? 1 : 0;
                        if ($useWeekYear && var$2[6])
                            $useWeekYear = var$2[7];
                        $days = ju_GregorianCalendar_daysFromBaseYear($this, $year);
                        if ($useWeekYear) {
                            $dayOfWeek = !$this.$isSet.data[7] ? ju_Calendar_getFirstDayOfWeek(var$1) - 1 | 0 : $this.$fields.data[7] - 1 | 0;
                            $hour = Long_sub($days, Long_fromInt(3));
                            $skew = ju_GregorianCalendar_mod7($this, Long_sub($hour, Long_fromInt(ju_Calendar_getFirstDayOfWeek(var$1) - 1 | 0)));
                            $days = Long_add($days, Long_fromInt(((($this.$fields.data[3] - 1 | 0) * 7 | 0) + ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($skew + $dayOfWeek | 0), $hour)) | 0) - $skew | 0));
                            if ((7 - $skew | 0) < ju_Calendar_getMinimalDaysInFirstWeek(var$1))
                                $days = Long_add($days, Long_fromInt(7));
                        } else {
                            var$2 = $this.$isSet.data;
                            if (var$2[6]) {
                                if (!ju_Calendar_isLenient(var$1)) {
                                    var$2 = $this.$fields.data;
                                    if (!(var$2[6] >= 1 && var$2[6] <= (365 + (!ju_GregorianCalendar_isLeapYear($this, $year) ? 0 : 1) | 0)))
                                        $rt_throw(jl_IllegalArgumentException__init_());
                                }
                                $days = Long_add($days, Long_fromInt($this.$fields.data[6] - 1 | 0));
                            } else if (var$2[7])
                                $days = Long_add($days, Long_fromInt(ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($this.$fields.data[7] - 1 | 0), Long_sub($days, Long_fromInt(3))))));
                        }
                    } else {
                        $month = $this.$fields.data[2];
                        $year = $year + ($month / 12 | 0) | 0;
                        $month = $month % 12 | 0;
                        if ($month < 0) {
                            $year = $year + (-1) | 0;
                            $month = $month + 12 | 0;
                        }
                        $leapYear = ju_GregorianCalendar_isLeapYear($this, $year);
                        $days = Long_add(ju_GregorianCalendar_daysFromBaseYear($this, $year), Long_fromInt(ju_GregorianCalendar_daysInYear($this, $leapYear, $month)));
                        var$2 = $this.$isSet.data;
                        $useDate = var$2[5];
                        if ($useDate) {
                            $dayOfWeek = $this.$lastDateFieldSet;
                            if (!($dayOfWeek != 7 && $dayOfWeek != 4 && $dayOfWeek != 8))
                                $useDate = var$2[7] && $weekMonthSet ? 0 : 1;
                        }
                        if ($useDate) {
                            if (!ju_Calendar_isLenient(var$1)) {
                                var$2 = $this.$fields.data;
                                if (!(var$2[5] >= 1 && var$2[5] <= ju_GregorianCalendar_daysInMonth($this, $leapYear, $month)))
                                    $rt_throw(jl_IllegalArgumentException__init_());
                            }
                            $days = Long_add($days, Long_fromInt($this.$fields.data[5] - 1 | 0));
                        } else {
                            $dayOfWeek = !var$2[7] ? ju_Calendar_getFirstDayOfWeek(var$1) - 1 | 0 : $this.$fields.data[7] - 1 | 0;
                            var$2 = $this.$isSet.data;
                            if (var$2[4] && $this.$lastDateFieldSet != 8) {
                                $skew = ju_GregorianCalendar_mod7($this, Long_sub(Long_sub($days, Long_fromInt(3)), Long_fromInt(ju_Calendar_getFirstDayOfWeek(var$1) - 1 | 0)));
                                $days = Long_add($days, Long_fromInt(((($this.$fields.data[4] - 1 | 0) * 7 | 0) + ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($skew + $dayOfWeek | 0), Long_sub($days, Long_fromInt(2)))) | 0) - $skew | 0));
                            } else if (var$2[8])
                                $days = $this.$fields.data[8] >= 0 ? Long_add($days, Long_fromInt(ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($dayOfWeek), Long_sub($days, Long_fromInt(3)))) + (($this.$fields.data[8] - 1 | 0) * 7 | 0) | 0)) : Long_add($days, Long_fromInt((ju_GregorianCalendar_daysInMonth($this, $leapYear, $month) + ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($dayOfWeek), Long_sub(Long_add($days, Long_fromInt(ju_GregorianCalendar_daysInMonth($this, $leapYear, $month))), Long_fromInt(3))))
                                | 0) + ($this.$fields.data[8] * 7 | 0) | 0));
                            else if (var$2[7]) {
                                $hour = Long_sub($days, Long_fromInt(3));
                                $skew = ju_GregorianCalendar_mod7($this, Long_sub($hour, Long_fromInt(ju_Calendar_getFirstDayOfWeek(var$1) - 1 | 0)));
                                $days = Long_add($days, Long_fromInt(ju_GregorianCalendar_mod7($this, Long_fromInt(ju_GregorianCalendar_mod7($this, Long_sub(Long_fromInt($skew + $dayOfWeek | 0), $hour)) - $skew | 0))));
                            }
                        }
                    }
                    $this.$lastDateFieldSet = 0;
                    $hour = Long_add($timeVal, Long_mul($days, Long_fromInt(86400000)));
                    if ($year == $this.$changeYear && Long_ge($hour, Long_add($this.$gregorianCutover, Long_mul(Long_fromInt(ju_GregorianCalendar_julianError($this)), Long_fromInt(86400000)))))
                        $hour = Long_sub($hour, Long_mul(Long_fromInt(ju_GregorianCalendar_julianError($this)), Long_fromInt(86400000)));
                    $this.$time = Long_sub($hour, Long_fromInt(ju_GregorianCalendar_getTimeZoneOffset($this, $hour)));
                    return;
                }
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            $rt_throw(jl_IllegalArgumentException__init_());
        }
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ju_GregorianCalendar_computeYearAndDay = ($this, $dayCount, $localTime) => {
    let $year, var$4, var$5, var$6;
    $year = 1970;
    $localTime = Long_ge($localTime, $this.$gregorianCutover) ? $dayCount : Long_sub($dayCount, Long_fromInt($this.$julianSkew));
    while (true) {
        var$4 = Long_lo(Long_div($localTime, Long_fromInt(365)));
        if (!var$4)
            break;
        $year = $year + var$4 | 0;
        $localTime = Long_sub($dayCount, ju_GregorianCalendar_daysFromBaseYear($this, $year));
    }
    if (Long_lt($localTime, Long_ZERO)) {
        $year = $year - 1 | 0;
        var$5 = !ju_GregorianCalendar_isLeapYear($this, $year) ? 365 : 366;
        var$6 = $this.$changeYear;
        if ($year == var$6)
            var$5 = var$5 - $this.$currentYearSkew | 0;
        if ($year == (var$6 - 1 | 0))
            var$5 = var$5 - $this.$lastYearSkew | 0;
        $localTime = Long_add($localTime, Long_fromInt(var$5));
    }
    $this.$fields.data[1] = $year;
    return Long_lo($localTime) + 1 | 0;
},
ju_GregorianCalendar_daysFromBaseYear = ($this, $iyear) => {
    let $year, $days, var$4;
    $year = Long_fromInt($iyear);
    if (Long_lt($year, Long_fromInt(1970))) {
        if (Long_le($year, Long_fromInt($this.$changeYear)))
            return Long_add(Long_add(Long_mul(Long_sub($year, Long_fromInt(1970)), Long_fromInt(365)), Long_div(Long_sub($year, Long_fromInt(1972)), Long_fromInt(4))), Long_fromInt($this.$julianSkew));
        $days = Long_add(Long_mul(Long_sub($year, Long_fromInt(1970)), Long_fromInt(365)), Long_div(Long_sub($year, Long_fromInt(1972)), Long_fromInt(4)));
        $year = Long_sub($year, Long_fromInt(2000));
        return Long_add(Long_sub($days, Long_div($year, Long_fromInt(100))), Long_div($year, Long_fromInt(400)));
    }
    $days = Long_add(Long_mul(Long_sub($year, Long_fromInt(1970)), Long_fromInt(365)), Long_div(Long_sub($year, Long_fromInt(1969)), Long_fromInt(4)));
    var$4 = $this.$changeYear;
    $iyear = Long_compare($year, Long_fromInt(var$4));
    return $iyear > 0 ? Long_sub($days, Long_sub(Long_div(Long_sub($year, Long_fromInt(1901)), Long_fromInt(100)), Long_div(Long_sub($year, Long_fromInt(1601)), Long_fromInt(400)))) : !$iyear ? Long_add($days, Long_fromInt($this.$currentYearSkew)) : Long_ne($year, Long_fromInt(var$4 - 1 | 0)) ? Long_add($days, Long_fromInt($this.$julianSkew)) : Long_add($days, Long_fromInt($this.$lastYearSkew));
},
ju_GregorianCalendar_daysInMonth = ($this, $leapYear, $month) => {
    if ($leapYear && $month == 1)
        return ju_GregorianCalendar_daysInMonth0.data[$month] + 1 | 0;
    return ju_GregorianCalendar_daysInMonth0.data[$month];
},
ju_GregorianCalendar_daysInYear = ($this, $leapYear, $month) => {
    if ($leapYear && $month > 1)
        return ju_GregorianCalendar_daysInYear0.data[$month] + 1 | 0;
    return ju_GregorianCalendar_daysInYear0.data[$month];
},
ju_GregorianCalendar_isLeapYear = ($this, $year) => {
    if ($year <= $this.$changeYear)
        return $year % 4 | 0 ? 0 : 1;
    a: {
        b: {
            if (!($year % 4 | 0)) {
                if ($year % 100 | 0)
                    break b;
                if (!($year % 400 | 0))
                    break b;
            }
            $year = 0;
            break a;
        }
        $year = 1;
    }
    return $year;
},
ju_GregorianCalendar_julianError = $this => {
    let var$1;
    var$1 = $this.$changeYear;
    return ((var$1 / 100 | 0) - (var$1 / 400 | 0) | 0) - 2 | 0;
},
ju_GregorianCalendar_mod7 = ($this, $num1) => {
    let $rem;
    $rem = Long_lo(Long_rem($num1, Long_fromInt(7)));
    if (Long_lt($num1, Long_ZERO) && $rem < 0)
        return $rem + 7 | 0;
    return $rem;
},
ju_GregorianCalendar__clinit_ = () => {
    ju_GregorianCalendar_daysInMonth0 = $rt_createByteArrayFromData([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
    ju_GregorianCalendar_daysInYear0 = $rt_createIntArrayFromData([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);
    ju_GregorianCalendar_maximums = $rt_createIntArrayFromData([1, 292278994, 11, 53, 6, 31, 366, 7, 6, 1, 11, 23, 59, 59, 999, 50400000, 7200000]);
    ju_GregorianCalendar_minimums = $rt_createIntArrayFromData([0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, (-46800000), 0]);
    ju_GregorianCalendar_leastMaximums = $rt_createIntArrayFromData([1, 292269054, 11, 50, 3, 28, 355, 7, 3, 1, 11, 23, 59, 59, 999, 50400000, 1200000]);
};
function jnc_CoderResult() {
    let a = this; jl_Object.call(a);
    a.$kind = 0;
    a.$length6 = 0;
}
let jnc_CoderResult_UNDERFLOW = null,
jnc_CoderResult_OVERFLOW = null,
jnc_CoderResult__init_0 = ($this, $kind, $length) => {
    $this.$kind = $kind;
    $this.$length6 = $length;
},
jnc_CoderResult__init_ = (var_0, var_1) => {
    let var_2 = new jnc_CoderResult();
    jnc_CoderResult__init_0(var_2, var_0, var_1);
    return var_2;
},
jnc_CoderResult_isUnderflow = $this => {
    return $this.$kind ? 0 : 1;
},
jnc_CoderResult_isOverflow = $this => {
    return $this.$kind != 1 ? 0 : 1;
},
jnc_CoderResult_isError = $this => {
    return !jnc_CoderResult_isMalformed($this) && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
},
jnc_CoderResult_isMalformed = $this => {
    return $this.$kind != 2 ? 0 : 1;
},
jnc_CoderResult_isUnmappable = $this => {
    return $this.$kind != 3 ? 0 : 1;
},
jnc_CoderResult_length = $this => {
    let var$1;
    if (jnc_CoderResult_isError($this))
        return $this.$length6;
    var$1 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
jnc_CoderResult_malformedForLength = $length => {
    return jnc_CoderResult__init_(2, $length);
},
jnc_CoderResult_throwException = $this => {
    let var$1, var$2;
    switch ($this.$kind) {
        case 0:
            var$1 = new jnc_BufferUnderflowException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        case 1:
            var$1 = new jnc_BufferOverflowException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        case 2:
            var$1 = new jnc_MalformedInputException;
            var$2 = $this.$length6;
            jl_Throwable__init_(var$1);
            var$1.$length8 = var$2;
            $rt_throw(var$1);
        case 3:
            var$1 = new jnc_UnmappableCharacterException;
            var$2 = $this.$length6;
            jl_Throwable__init_(var$1);
            var$1.$length9 = var$2;
            $rt_throw(var$1);
        default:
    }
},
jnc_CoderResult__clinit_ = () => {
    jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
    jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
},
jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error);
function jnc_IllegalCharsetNameException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName = null;
}
let jnc_IllegalCharsetNameException__init_0 = ($this, $charsetName) => {
    jl_Throwable__init_($this);
    $this.$charsetName = $charsetName;
},
jnc_IllegalCharsetNameException__init_ = var_0 => {
    let var_1 = new jnc_IllegalCharsetNameException();
    jnc_IllegalCharsetNameException__init_0(var_1, var_0);
    return var_1;
};
function ju_TimeZone() {
    jl_Object.call(this);
    this.$id0 = null;
}
let ju_TimeZone_defaultTz = null,
ju_TimeZone_GMT = null,
ju_TimeZone_$callClinit = () => {
    ju_TimeZone_$callClinit = $rt_eraseClinit(ju_TimeZone);
    ju_TimeZone__clinit_();
},
ju_TimeZone__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new ju_IANATimeZone;
    var$2 = new otcit_FixedDateTimeZone;
    var$2.$iID = $rt_s(845);
    var$2.$iWallOffset = 0;
    var$2.$iStandardOffset = 0;
    ju_TimeZone_$callClinit();
    var$1.$id0 = $rt_s(845);
    var$1.$underlyingZone = var$2;
    jl_System_currentTimeMillis();
    var$3 = var$2.$iStandardOffset;
    var$1.$rawOffset = var$3;
    var$1.$diff =  -var$3 | 0;
    ju_TimeZone_GMT = var$1;
};
function ju_IANATimeZone() {
    let a = this; ju_TimeZone.call(a);
    a.$underlyingZone = null;
    a.$rawOffset = 0;
    a.$diff = 0;
}
let ju_IANATimeZone_getOffset = ($this, $time) => {
    return ($this.$rawOffset + $this.$diff | 0) + $this.$underlyingZone.$iWallOffset | 0;
};
function otcit_DateTimeZone() {
    jl_Object.call(this);
    this.$iID = null;
}
let otcit_StorableDateTimeZone = $rt_classWithoutFields(otcit_DateTimeZone);
function otcit_FixedDateTimeZone() {
    let a = this; otcit_StorableDateTimeZone.call(a);
    a.$iWallOffset = 0;
    a.$iStandardOffset = 0;
}
let cgxgbt_TeaFileHandle$1 = $rt_classWithoutFields(),
cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType = null,
cgxgbt_TeaFileHandle$1_$callClinit = () => {
    cgxgbt_TeaFileHandle$1_$callClinit = $rt_eraseClinit(cgxgbt_TeaFileHandle$1);
    cgxgbt_TeaFileHandle$1__clinit_();
},
cgxgbt_TeaFileHandle$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cbg_Files$FileType_values()).data.length);
    var$2 = var$1.data;
    cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType = var$1;
    var$2[cbg_Files$FileType_Internal.$ordinal0] = 1;
    var$2[cbg_Files$FileType_Classpath.$ordinal0] = 2;
};
function ju_HashMap$AbstractMapIterator() {
    let a = this; jl_Object.call(a);
    a.$position4 = 0;
    a.$expectedModCount = 0;
    a.$futureEntry = null;
    a.$currentEntry = null;
    a.$prevEntry = null;
    a.$associatedMap = null;
}
let ju_HashMap$AbstractMapIterator__init_ = ($this, $hm) => {
    $this.$associatedMap = $hm;
    $this.$expectedModCount = $hm.$modCount0;
    $this.$futureEntry = null;
},
ju_HashMap$AbstractMapIterator__init_0 = var_0 => {
    let var_1 = new ju_HashMap$AbstractMapIterator();
    ju_HashMap$AbstractMapIterator__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$AbstractMapIterator_hasNext = $this => {
    let var$1, var$2;
    if ($this.$futureEntry !== null)
        return 1;
    while (true) {
        var$1 = $this.$position4;
        var$2 = $this.$associatedMap.$elementData.data;
        if (var$1 >= var$2.length)
            break;
        if (var$2[var$1] !== null)
            return 1;
        $this.$position4 = var$1 + 1 | 0;
    }
    return 0;
},
ju_HashMap$AbstractMapIterator_makeNext = $this => {
    let var$1, var$2, var$3, var$4;
    if ($this.$expectedModCount != $this.$associatedMap.$modCount0) {
        var$1 = new ju_ConcurrentModificationException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    if (!ju_HashMap$AbstractMapIterator_hasNext($this)) {
        var$1 = new ju_NoSuchElementException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    var$1 = $this.$futureEntry;
    if (var$1 !== null) {
        var$2 = $this.$currentEntry;
        if (var$2 !== null)
            $this.$prevEntry = var$2;
        $this.$currentEntry = var$1;
        $this.$futureEntry = var$1.$next2;
    } else {
        var$3 = $this.$associatedMap.$elementData.data;
        var$4 = $this.$position4;
        $this.$position4 = var$4 + 1 | 0;
        var$1 = var$3[var$4];
        $this.$currentEntry = var$1;
        $this.$futureEntry = var$1.$next2;
        $this.$prevEntry = null;
    }
},
ju_HashMap$EntryIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator),
ju_HashMap$EntryIterator_next = $this => {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry;
};
function jnci_BufferedDecoder() {
    let a = this; jnc_CharsetDecoder.call(a);
    a.$inArray = null;
    a.$outArray0 = null;
}
let jnci_BufferedDecoder__init_ = ($this, $cs, $averageCharsPerByte, $maxCharsPerByte) => {
    let var$4;
    $this.$replacement = $rt_s(846);
    var$4 = jnc_CodingErrorAction_REPORT;
    $this.$malformedAction = var$4;
    $this.$unmappableAction0 = var$4;
    if ($averageCharsPerByte <= 0.0) {
        $cs = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(847));
        jl_StringBuilder_append1(var$4, $averageCharsPerByte);
        jl_Exception__init_($cs, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($cs);
    }
    if ($maxCharsPerByte > 0.0) {
        $this.$charset1 = $cs;
        $this.$averageCharsPerByte = $averageCharsPerByte;
        $this.$maxCharsPerByte = $maxCharsPerByte;
        $this.$inArray = $rt_createByteArray(512);
        $this.$outArray0 = $rt_createCharArray(512);
        return;
    }
    $cs = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(848));
    jl_StringBuilder_append1(var$4, $maxCharsPerByte);
    jl_Exception__init_($cs, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw($cs);
},
jnci_BufferedDecoder_decodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, $i, var$8, $result, var$10, $outSize, $controller, var$13, var$14;
    $inArray = $this.$inArray;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray0;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$8 = $inArray.data;
                    var$8[$i - $inPos | 0] = var$8[$i];
                    $i = $i + 1 | 0;
                }
                var$8 = $inArray.data;
                $i = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $i | 0, var$8.length);
                jn_ByteBuffer_get($in, $inArray, $i, $inSize - $i | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            var$8 = $outArray.data;
            $i = jn_Buffer_remaining($out);
            var$10 = var$8.length;
            $outSize = jl_Math_min($i, var$10);
            $controller = new jnci_BufferedDecoder$Controller;
            $controller.$in = $in;
            $controller.$out1 = $out;
            $result = $this.$arrayDecode($inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition;
            if ($result === null && 0 == $controller.$outPosition)
                $result = jnc_CoderResult_UNDERFLOW;
            $outSize = $controller.$outPosition;
            if (jn_CharBufferImpl_isReadOnly($out)) {
                $in = new jn_ReadOnlyBufferException;
                jl_Throwable__init_($in);
                $rt_throw($in);
            }
            if (jn_Buffer_remaining($out) < $outSize) {
                $in = new jn_BufferOverflowException;
                jl_Throwable__init_($in);
                $rt_throw($in);
            }
            if ($outSize < 0)
                break;
            if ((0 + $outSize | 0) > var$10)
                break;
            $i = $out.$position0;
            var$13 = $out;
            var$14 = new Uint16Array($outArray.data.buffer, 0, $outSize);
            var$13.$data1.set(var$14, $i);
            $out.$position0 = $out.$position0 + $outSize | 0;
            if ($result !== null)
                break a;
        }
        $in = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($in);
        $rt_throw($in);
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_UTF8Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b, $b2_0, $b3, $c, $b4, $code;
    $result = null;
    a: {
        b: {
            c: {
                while ($inPos < $inSize) {
                    if ($outPos >= $outSize)
                        break a;
                    var$9 = $inArray.data;
                    $b2 = $inPos + 1 | 0;
                    $b = var$9[$inPos] & 255;
                    if (!($b & 128)) {
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $b & 65535;
                    } else if (($b & 224) == 192) {
                        if ($b2 >= $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2 = var$9[$b2];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2)) {
                            $inPos = $inPos + (-2) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = (($b & 31) << 6 | $b2 & 63) & 65535;
                        $b2 = $inPos;
                    } else if (($b & 240) == 224) {
                        if (($b2 + 2 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 3))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b2 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break b;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break b;
                        $c = (($b & 15) << 12 | ($b2_0 & 63) << 6 | $b3 & 63) & 65535;
                        if (jl_Character_isSurrogate($c)) {
                            $inPos = $b2 + (-3) | 0;
                            $result = jnc_CoderResult_malformedForLength(3);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $c;
                    } else {
                        if (($b & 248) != 240) {
                            $inPos = $b2 + (-1) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        if (($b2 + 3 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        if (($outPos + 2 | 0) > $outSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_OVERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b4 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        $b2 = $b4 + 1 | 0;
                        $b4 = var$9[$b4];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b4))
                            break c;
                        var$9 = $outArray.data;
                        $code = ($b & 7) << 18 | ($b2_0 & 63) << 12 | ($b3 & 63) << 6 | $b4 & 63;
                        $inPos = $outPos + 1 | 0;
                        var$9[$outPos] = jl_Character_highSurrogate($code);
                        $b2_0 = $inPos + 1 | 0;
                        var$9[$inPos] = jl_Character_lowSurrogate($code);
                    }
                    $inPos = $b2;
                    $outPos = $b2_0;
                }
                break a;
            }
            $inPos = $b2 + (-3) | 0;
            $result = jnc_CoderResult_malformedForLength(1);
            break a;
        }
        $inPos = $b2 + (-3) | 0;
        $result = jnc_CoderResult_malformedForLength(1);
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF8Decoder_checkMidByte = ($this, $b) => {
    return ($b & 192) != 128 ? 0 : 1;
},
jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException),
jn_BufferOverflowException__init_ = $this => {
    jl_Throwable__init_($this);
},
jn_BufferOverflowException__init_0 = () => {
    let var_0 = new jn_BufferOverflowException();
    jn_BufferOverflowException__init_(var_0);
    return var_0;
},
jnc_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException),
jnc_BufferUnderflowException__init_ = $this => {
    jl_Throwable__init_($this);
},
jnc_BufferUnderflowException__init_0 = () => {
    let var_0 = new jnc_BufferUnderflowException();
    jnc_BufferUnderflowException__init_(var_0);
    return var_0;
},
jnc_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException),
jnc_BufferOverflowException__init_ = $this => {
    jl_Throwable__init_($this);
},
jnc_BufferOverflowException__init_0 = () => {
    let var_0 = new jnc_BufferOverflowException();
    jnc_BufferOverflowException__init_(var_0);
    return var_0;
};
function jnc_MalformedInputException() {
    jnc_CharacterCodingException.call(this);
    this.$length8 = 0;
}
let jnc_MalformedInputException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length8;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(849));
    jl_AbstractStringBuilder_append1(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jnc_UnmappableCharacterException() {
    jnc_CharacterCodingException.call(this);
    this.$length9 = 0;
}
let jnc_UnmappableCharacterException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length9;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(850));
    jl_AbstractStringBuilder_append1(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function cbgu_ObjectSet$ObjectSetIterator() {
    let a = this; jl_Object.call(a);
    a.$hasNext1 = 0;
    a.$set11 = null;
    a.$nextIndex1 = 0;
    a.$currentIndex = 0;
    a.$valid1 = 0;
}
let cbgu_ObjectSet$ObjectSetIterator__init_0 = ($this, $set) => {
    $this.$valid1 = 1;
    $this.$set11 = $set;
    cbgu_ObjectSet$ObjectSetIterator_reset($this);
},
cbgu_ObjectSet$ObjectSetIterator__init_ = var_0 => {
    let var_1 = new cbgu_ObjectSet$ObjectSetIterator();
    cbgu_ObjectSet$ObjectSetIterator__init_0(var_1, var_0);
    return var_1;
},
cbgu_ObjectSet$ObjectSetIterator_reset = $this => {
    $this.$currentIndex = (-1);
    $this.$nextIndex1 = (-1);
    cbgu_ObjectSet$ObjectSetIterator_findNextIndex($this);
},
cbgu_ObjectSet$ObjectSetIterator_findNextIndex = $this => {
    let $keyTable, $n, var$3;
    $keyTable = $this.$set11.$keyTable0.data;
    $n = $keyTable.length;
    while (true) {
        var$3 = $this.$nextIndex1 + 1 | 0;
        $this.$nextIndex1 = var$3;
        if (var$3 >= $n)
            break;
        if ($keyTable[var$3] === null)
            continue;
        else {
            $this.$hasNext1 = 1;
            return;
        }
    }
    $this.$hasNext1 = 0;
};
function cgxgbta_TeaBlob() {
    let a = this; jl_Object.call(a);
    a.$response = null;
    a.$data10 = null;
}
function cgxgbtwh_HowlMusic() {
    jl_Object.call(this);
    this.$howl = null;
}
let cgxgbtwh_HowlMusic_setVolume = ($this, $volume) => {
    $this.$howl.volume($volume);
};
function cgxgbtwh_HowlSound() {
    jl_Object.call(this);
    this.$howl0 = null;
}
let cgxgbtwh_HowlSound_play = ($this, $volume, $pitch, $pan) => {
    let $soundId;
    $soundId = $this.$howl0.play();
    $this.$howl0.volume($volume, $soundId);
    $this.$howl0.rate($pitch, $soundId);
    $this.$howl0.stereo($pan, $soundId);
    return Long_fromInt($soundId);
},
cgxgbtwh_HowlSound_dispose = $this => {
    $this.$howl0.stop();
    $this.$howl0 = null;
};
function cbgu_Sort() {
    jl_Object.call(this);
    this.$timSort = null;
}
let cbgu_Sort_instance = null,
cbgu_Sort__init_ = $this => {
    return;
},
cbgu_Sort__init_0 = () => {
    let var_0 = new cbgu_Sort();
    cbgu_Sort__init_(var_0);
    return var_0;
};
function jt_DecimalFormatParser() {
    let a = this; jl_Object.call(a);
    a.$positivePrefix0 = null;
    a.$positiveSuffix0 = null;
    a.$negativePrefix0 = null;
    a.$negativeSuffix0 = null;
    a.$groupSize = 0;
    a.$minimumIntLength = 0;
    a.$intLength = 0;
    a.$minimumFracLength = 0;
    a.$fracLength = 0;
    a.$exponentLength = 0;
    a.$decimalSeparatorRequired = 0;
    a.$string = null;
    a.$index = 0;
    a.$multiplier0 = 0;
}
let jt_DecimalFormatParser__init_ = $this => {
    return;
},
jt_DecimalFormatParser__init_0 = () => {
    let var_0 = new jt_DecimalFormatParser();
    jt_DecimalFormatParser__init_(var_0);
    return var_0;
},
jt_DecimalFormatParser_parseText = ($this, $suffix, $end) => {
    let $fields, $sb, var$5, $c, var$7, $next, var$9;
    $fields = ju_ArrayList__init_();
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    var$5 = $fields;
    a: {
        b: {
            c: while (true) {
                if ($this.$index >= $this.$string.$nativeString.length)
                    break a;
                d: {
                    $c = jl_String_charAt($this.$string, $this.$index);
                    switch ($c) {
                        case 35:
                        case 48:
                            if (!$suffix)
                                break a;
                            $fields = new jl_IllegalArgumentException;
                            $suffix = $this.$index;
                            var$7 = $this.$string;
                            var$5 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$5);
                            jl_AbstractStringBuilder_append(var$5, $rt_s(851));
                            jl_AbstractStringBuilder_append1(var$5, $suffix);
                            jl_AbstractStringBuilder_append(var$5, $rt_s(808));
                            jl_AbstractStringBuilder_append(var$5, var$7);
                            jl_Exception__init_($fields, jl_AbstractStringBuilder_toString(var$5));
                            $rt_throw($fields);
                        case 37:
                            if ($sb.$length1 > 0) {
                                ju_ArrayList_add(var$5, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                $sb.$length1 = 0;
                            }
                            ju_ArrayList_add(var$5, new jt_DecimalFormat$PercentField);
                            $this.$index = $this.$index + 1 | 0;
                            $this.$multiplier0 = 100;
                            break d;
                        case 39:
                            $next = $this.$index + 1 | 0;
                            $this.$index = $next;
                            $next = jl_String_indexOf($this.$string, 39, $next);
                            if ($next < 0) {
                                $fields = new jl_IllegalArgumentException;
                                $suffix = $this.$index;
                                var$7 = $this.$string;
                                var$5 = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_(var$5);
                                jl_AbstractStringBuilder_append(var$5, $rt_s(852));
                                jl_AbstractStringBuilder_append1(var$5, $suffix);
                                jl_AbstractStringBuilder_append(var$5, $rt_s(853));
                                jl_AbstractStringBuilder_append(var$5, var$7);
                                jl_Exception__init_($fields, jl_AbstractStringBuilder_toString(var$5));
                                $rt_throw($fields);
                            }
                            $c = $this.$index;
                            if ($next == $c)
                                jl_AbstractStringBuilder_append2($sb, 39);
                            else
                                jl_AbstractStringBuilder_append0($sb, jl_String_substring($this.$string, $c, $next));
                            $this.$index = $next + 1 | 0;
                            break d;
                        case 45:
                            if ($sb.$length1 > 0) {
                                ju_ArrayList_add(var$5, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                $sb.$length1 = 0;
                            }
                            ju_ArrayList_add(var$5, new jt_DecimalFormat$MinusField);
                            $this.$index = $this.$index + 1 | 0;
                            break d;
                        case 46:
                        case 69:
                            break c;
                        case 59:
                            break b;
                        case 164:
                            if ($sb.$length1 > 0) {
                                ju_ArrayList_add(var$5, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                $sb.$length1 = 0;
                            }
                            ju_ArrayList_add(var$5, new jt_DecimalFormat$CurrencyField);
                            $this.$index = $this.$index + 1 | 0;
                            break d;
                        case 8240:
                            if ($sb.$length1 > 0) {
                                ju_ArrayList_add(var$5, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                $sb.$length1 = 0;
                            }
                            ju_ArrayList_add(var$5, new jt_DecimalFormat$PerMillField);
                            $this.$index = $this.$index + 1 | 0;
                            $this.$multiplier0 = 1000;
                            break d;
                        default:
                    }
                    jl_AbstractStringBuilder_append2($sb, $c);
                    $this.$index = $this.$index + 1 | 0;
                }
            }
            $fields = new jl_IllegalArgumentException;
            $suffix = $this.$index;
            var$7 = $this.$string;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(851));
            jl_AbstractStringBuilder_append1(var$5, $suffix);
            jl_AbstractStringBuilder_append(var$5, $rt_s(808));
            jl_AbstractStringBuilder_append(var$5, var$7);
            jl_Exception__init_($fields, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw($fields);
        }
        if ($end) {
            $fields = new jl_IllegalArgumentException;
            $suffix = $this.$index;
            var$7 = $this.$string;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(851));
            jl_AbstractStringBuilder_append1(var$5, $suffix);
            jl_AbstractStringBuilder_append(var$5, $rt_s(808));
            jl_AbstractStringBuilder_append(var$5, var$7);
            jl_Exception__init_($fields, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw($fields);
        }
    }
    if ($sb.$length1 > 0)
        ju_ArrayList_add(var$5, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
    var$9 = $rt_createArray(jt_DecimalFormat$FormatField, var$5.$size3);
    return ju_AbstractCollection_toArray($fields, var$9);
},
jt_DecimalFormatParser_parseNumber = ($this, $apply) => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    jt_DecimalFormatParser_parseIntegerPart($this, $apply);
    if ($this.$index < $this.$string.$nativeString.length && jl_String_charAt($this.$string, $this.$index) == 46) {
        $this.$index = $this.$index + 1 | 0;
        var$2 = 0;
        var$3 = 0;
        var$4 = 0;
        a: {
            b: while (true) {
                if ($this.$index >= $this.$string.$nativeString.length)
                    break a;
                c: {
                    switch (jl_String_charAt($this.$string, $this.$index)) {
                        case 35:
                            break;
                        case 44:
                            var$5 = new jl_IllegalArgumentException;
                            $apply = $this.$index;
                            var$6 = $this.$string;
                            var$7 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$7);
                            jl_AbstractStringBuilder_append(var$7, $rt_s(854));
                            jl_AbstractStringBuilder_append1(var$7, $apply);
                            jl_AbstractStringBuilder_append(var$7, $rt_s(808));
                            jl_AbstractStringBuilder_append(var$7, var$6);
                            jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$7));
                            $rt_throw(var$5);
                        case 46:
                            var$5 = new jl_IllegalArgumentException;
                            $apply = $this.$index;
                            var$6 = $this.$string;
                            var$7 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$7);
                            jl_AbstractStringBuilder_append(var$7, $rt_s(855));
                            jl_AbstractStringBuilder_append1(var$7, $apply);
                            jl_AbstractStringBuilder_append(var$7, $rt_s(808));
                            jl_AbstractStringBuilder_append(var$7, var$6);
                            jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$7));
                            $rt_throw(var$5);
                        case 48:
                            if (var$2)
                                break b;
                            var$3 = var$3 + 1 | 0;
                            var$4 = var$4 + 1 | 0;
                            break c;
                        default:
                            break a;
                    }
                    var$3 = var$3 + 1 | 0;
                    var$2 = 1;
                }
                $this.$index = $this.$index + 1 | 0;
            }
            var$5 = new jl_IllegalArgumentException;
            $apply = $this.$index;
            var$6 = $this.$string;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(var$7, $rt_s(856));
            jl_AbstractStringBuilder_append1(var$7, $apply);
            jl_AbstractStringBuilder_append(var$7, $rt_s(808));
            jl_AbstractStringBuilder_append(var$7, var$6);
            jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$7));
            $rt_throw(var$5);
        }
        if ($apply) {
            $this.$fracLength = var$3;
            $this.$minimumFracLength = var$4;
            $this.$decimalSeparatorRequired = var$3 ? 0 : 1;
        }
    }
    if ($this.$index < $this.$string.$nativeString.length && jl_String_charAt($this.$string, $this.$index) == 69) {
        $this.$index = $this.$index + 1 | 0;
        var$2 = 0;
        d: {
            e: while (true) {
                if ($this.$index >= $this.$string.$nativeString.length)
                    break d;
                switch (jl_String_charAt($this.$string, $this.$index)) {
                    case 35:
                    case 44:
                    case 46:
                    case 69:
                        break e;
                    case 48:
                        break;
                    default:
                        break d;
                }
                var$2 = var$2 + 1 | 0;
                $this.$index = $this.$index + 1 | 0;
            }
            var$5 = new jl_IllegalArgumentException;
            $apply = $this.$index;
            var$6 = $this.$string;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(var$7, $rt_s(857));
            jl_AbstractStringBuilder_append1(var$7, $apply);
            jl_AbstractStringBuilder_append(var$7, $rt_s(808));
            jl_AbstractStringBuilder_append(var$7, var$6);
            jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$7));
            $rt_throw(var$5);
        }
        if (!var$2) {
            var$5 = new jl_IllegalArgumentException;
            $apply = $this.$index;
            var$6 = $this.$string;
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_AbstractStringBuilder_append(var$7, $rt_s(858));
            jl_AbstractStringBuilder_append1(var$7, $apply);
            jl_AbstractStringBuilder_append(var$7, $rt_s(808));
            jl_AbstractStringBuilder_append(var$7, var$6);
            jl_Exception__init_(var$5, jl_AbstractStringBuilder_toString(var$7));
            $rt_throw(var$5);
        }
        if ($apply)
            $this.$exponentLength = var$2;
    }
},
jt_DecimalFormatParser_parseIntegerPart = ($this, $apply) => {
    let $lastGroup, $optionalDigits, $length, $minimumLength, var$6, var$7, var$8, var$9, var$10;
    $lastGroup = $this.$index;
    $optionalDigits = 1;
    $length = 0;
    $minimumLength = 0;
    var$6 = $lastGroup;
    a: {
        b: while (true) {
            if ($this.$index >= $this.$string.$nativeString.length)
                break a;
            c: {
                d: {
                    switch (jl_String_charAt($this.$string, $this.$index)) {
                        case 35:
                            if (!$optionalDigits) {
                                var$7 = new jl_IllegalArgumentException;
                                $apply = $this.$index;
                                var$8 = $this.$string;
                                var$9 = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_(var$9);
                                jl_AbstractStringBuilder_append(var$9, $rt_s(859));
                                jl_AbstractStringBuilder_append1(var$9, $apply);
                                jl_AbstractStringBuilder_append(var$9, $rt_s(808));
                                jl_AbstractStringBuilder_append(var$9, var$8);
                                jl_Exception__init_(var$7, jl_AbstractStringBuilder_toString(var$9));
                                $rt_throw(var$7);
                            }
                            $length = $length + 1 | 0;
                            break c;
                        case 44:
                            break d;
                        case 48:
                            break;
                        default:
                            break a;
                    }
                    $optionalDigits = 0;
                    $length = $length + 1 | 0;
                    $minimumLength = $minimumLength + 1 | 0;
                    break c;
                }
                var$10 = $this.$index;
                if (var$6 == var$10)
                    break b;
                if ($apply)
                    $this.$groupSize = var$10 - var$6 | 0;
                var$6 = var$10 + 1 | 0;
            }
            $this.$index = $this.$index + 1 | 0;
        }
        var$7 = new jl_IllegalArgumentException;
        var$8 = $this.$string;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(var$9, $rt_s(860));
        jl_AbstractStringBuilder_append1(var$9, var$10);
        jl_AbstractStringBuilder_append(var$9, $rt_s(808));
        jl_AbstractStringBuilder_append(var$9, var$8);
        jl_Exception__init_(var$7, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw(var$7);
    }
    if (!$length) {
        var$7 = new jl_IllegalArgumentException;
        $apply = $this.$index;
        var$8 = $this.$string;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(var$9, $rt_s(861));
        jl_AbstractStringBuilder_append1(var$9, $apply);
        jl_AbstractStringBuilder_append(var$9, $rt_s(808));
        jl_AbstractStringBuilder_append(var$9, var$8);
        jl_Exception__init_(var$7, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw(var$7);
    }
    $optionalDigits = $this.$index;
    if (var$6 == $optionalDigits) {
        var$7 = new jl_IllegalArgumentException;
        var$8 = $this.$string;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_AbstractStringBuilder_append(var$9, $rt_s(862));
        jl_AbstractStringBuilder_append1(var$9, $optionalDigits);
        jl_AbstractStringBuilder_append(var$9, $rt_s(808));
        jl_AbstractStringBuilder_append(var$9, var$8);
        jl_Exception__init_(var$7, jl_AbstractStringBuilder_toString(var$9));
        $rt_throw(var$7);
    }
    if ($apply && var$6 > $lastGroup)
        $this.$groupSize = $optionalDigits - var$6 | 0;
    if ($apply) {
        $this.$intLength = $length;
        $this.$minimumIntLength = $minimumLength;
    }
};
function ji_ByteArrayOutputStream() {
    let a = this; ji_OutputStream.call(a);
    a.$buf = null;
    a.$count1 = 0;
}
let ji_ByteArrayOutputStream__init_0 = $this => {
    ji_ByteArrayOutputStream__init_($this, 32);
},
ji_ByteArrayOutputStream__init_2 = () => {
    let var_0 = new ji_ByteArrayOutputStream();
    ji_ByteArrayOutputStream__init_0(var_0);
    return var_0;
},
ji_ByteArrayOutputStream__init_ = ($this, $size) => {
    $this.$buf = $rt_createByteArray($size);
},
ji_ByteArrayOutputStream__init_1 = var_0 => {
    let var_1 = new ji_ByteArrayOutputStream();
    ji_ByteArrayOutputStream__init_(var_1, var_0);
    return var_1;
},
ji_ByteArrayOutputStream_write = ($this, $b, $off, $len) => {
    let $i, var$5, var$6, var$7, var$8;
    $i = $this.$count1 + $len | 0;
    var$5 = $this.$buf.data.length;
    if (var$5 < $i) {
        var$6 = jl_Math_max($i, (var$5 * 3 | 0) / 2 | 0);
        $this.$buf = ju_Arrays_copyOf0($this.$buf, var$6);
    }
    $i = 0;
    while ($i < $len) {
        var$7 = $b.data;
        var$8 = $this.$buf.data;
        var$6 = $this.$count1;
        $this.$count1 = var$6 + 1 | 0;
        var$5 = $off + 1 | 0;
        var$8[var$6] = var$7[$off];
        $i = $i + 1 | 0;
        $off = var$5;
    }
},
ji_ByteArrayOutputStream_toByteArray = $this => {
    return ju_Arrays_copyOf0($this.$buf, $this.$count1);
},
cbgu_StreamUtils$OptimizedByteArrayOutputStream = $rt_classWithoutFields(ji_ByteArrayOutputStream),
cbgu_StreamUtils$OptimizedByteArrayOutputStream_toByteArray = $this => {
    let var$1, var$2;
    jl_Object_monitorEnterSync($this);
    try {
        var$1 = $this.$count1;
        var$2 = $this.$buf;
        if (var$1 == var$2.data.length)
            return var$2;
        return ji_ByteArrayOutputStream_toByteArray($this);
    } finally {
        jl_Object_monitorExitSync($this);
    }
};
function cbgu_ObjectMap$MapIterator() {
    let a = this; jl_Object.call(a);
    a.$hasNext0 = 0;
    a.$map0 = null;
    a.$nextIndex2 = 0;
    a.$currentIndex0 = 0;
    a.$valid0 = 0;
}
let cbgu_ObjectMap$MapIterator_findNextIndex = $this => {
    let $keyTable, $n, var$3;
    $keyTable = $this.$map0.$keyTable.data;
    $n = $keyTable.length;
    while (true) {
        var$3 = $this.$nextIndex2 + 1 | 0;
        $this.$nextIndex2 = var$3;
        if (var$3 >= $n)
            break;
        if ($keyTable[var$3] === null)
            continue;
        else {
            $this.$hasNext0 = 1;
            return;
        }
    }
    $this.$hasNext0 = 0;
},
cbgu_ObjectMap$Keys = $rt_classWithoutFields(cbgu_ObjectMap$MapIterator),
cbgu_ObjectMap$Keys__init_0 = ($this, $map) => {
    $this.$valid0 = 1;
    $this.$map0 = $map;
    cbgu_ObjectMap$Keys_reset($this);
},
cbgu_ObjectMap$Keys__init_ = var_0 => {
    let var_1 = new cbgu_ObjectMap$Keys();
    cbgu_ObjectMap$Keys__init_0(var_1, var_0);
    return var_1;
},
cbgu_ObjectMap$Keys_hasNext = $this => {
    let var$1;
    if ($this.$valid0)
        return $this.$hasNext0;
    var$1 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$1, $rt_s(86));
    $rt_throw(var$1);
},
cbgu_ObjectMap$Keys_next = $this => {
    let $key, var$2, var$3, var$4;
    if (!$this.$hasNext0) {
        $key = new ju_NoSuchElementException;
        jl_Throwable__init_($key);
        $rt_throw($key);
    }
    if (!$this.$valid0) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Exception__init_(var$2, $rt_s(86));
        $rt_throw(var$2);
    }
    var$3 = $this.$map0.$keyTable.data;
    var$4 = $this.$nextIndex2;
    $key = var$3[var$4];
    $this.$currentIndex0 = var$4;
    cbgu_ObjectMap$MapIterator_findNextIndex($this);
    return $key;
},
cbgu_ObjectMap$Keys_iterator = $this => {
    return $this;
},
cbgu_ObjectMap$Keys_reset = $this => {
    $this.$currentIndex0 = (-1);
    $this.$nextIndex2 = (-1);
    cbgu_ObjectMap$MapIterator_findNextIndex($this);
};
function jt_FieldPosition() {
    let a = this; jl_Object.call(a);
    a.$myField = 0;
    a.$beginIndex = 0;
    a.$endIndex = 0;
    a.$myAttribute = null;
}
let jt_FieldPosition__init_0 = ($this, $field) => {
    $this.$myField = $field;
},
jt_FieldPosition__init_ = var_0 => {
    let var_1 = new jt_FieldPosition();
    jt_FieldPosition__init_0(var_1, var_0);
    return var_1;
},
cbgm_MathUtils$Sin = $rt_classWithoutFields(),
cbgm_MathUtils$Sin_table = null,
cbgm_MathUtils$Sin__init_ = $this => {
    return;
},
cbgm_MathUtils$Sin__init_0 = () => {
    let var_0 = new cbgm_MathUtils$Sin();
    cbgm_MathUtils$Sin__init_(var_0);
    return var_0;
},
cbgm_MathUtils$Sin__clinit_ = () => {
    let $i, var$2;
    cbgm_MathUtils$Sin_table = $rt_createFloatArray(16384);
    $i = 0;
    while ($i < 16384) {
        cbgm_MathUtils$Sin_table.data[$i] = jl_Math_sin(($i + 0.5) / 16384.0 * 6.2831854820251465);
        $i = $i + 1 | 0;
    }
    var$2 = cbgm_MathUtils$Sin_table.data;
    var$2[0] = 0.0;
    var$2[4096] = 1.0;
    var$2[8192] = 0.0;
    var$2[12288] = (-1.0);
},
cgxgbtwh_Howl = $rt_classWithoutFields(),
cgxgbtwh_Howl_create$js_body$_1 = var$1 => {
    var blob = new Blob([var$1]);
    var howlSource = URL.createObjectURL(blob);
    return new Howl({ src : [howlSource], format : ['ogg', 'webm', 'mp3', 'wav'] });
};
function jl_Double() {
    jl_Number.call(this);
    this.$value6 = 0.0;
}
let jl_Double_TYPE = null,
jl_Double_doubleValue = $this => {
    return $this.$value6;
},
jl_Double_valueOf = $d => {
    let var$2;
    var$2 = new jl_Double;
    var$2.$value6 = $d;
    return var$2;
},
jl_Double_doubleToLongBits = $value => {
    if (!(isNaN($value) ? 1 : 0))
        return $rt_doubleToRawLongBits($value);
    return Long_create(0, 2146959360);
},
jl_Double__clinit_ = () => {
    jl_Double_TYPE = $rt_cls($rt_doublecls);
};
function jt_SimpleDatePatternParser() {
    let a = this; jl_Object.call(a);
    a.$symbols0 = null;
    a.$locale3 = null;
    a.$elements = null;
    a.$index1 = 0;
    a.$pattern1 = null;
}
let jt_SimpleDatePatternParser_parsePattern = ($this, $pattern) => {
    let $sb, $c, $rep, var$5, var$6, var$7, var$8, var$9;
    $sb = $this.$elements;
    ju_Arrays_fill0($sb.$array2, 0, $sb.$size3, null);
    $sb.$size3 = 0;
    $sb.$modCount = $sb.$modCount + 1 | 0;
    $this.$pattern1 = $pattern;
    $this.$index1 = 0;
    while ($this.$index1 < $pattern.$nativeString.length) {
        a: {
            b: {
                c: {
                    $c = jl_String_charAt($pattern, $this.$index1);
                    switch ($c) {
                        case 39:
                            break;
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 73:
                        case 74:
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 98:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 108:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 116:
                        case 118:
                        case 120:
                            break b;
                        case 68:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(6, $rep, 3);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 69:
                        case 99:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$WeekdayText__init_0($this.$symbols0, $rep > 3 ? 0 : 1);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 70:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(8, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 71:
                            jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = new jt_DateFormatElement$EraText;
                            var$6 = $this.$symbols0;
                            if (var$6.$eras === null) {
                                var$7 = var$6.$locale0;
                                var$8 = var$7.$languageCode;
                                var$9 = var$7.$countryCode;
                                if (otciu_CLDRHelper_$$metadata$$1 === null)
                                    otciu_CLDRHelper_$$metadata$$1 = otciu_CLDRHelper_getErasMap$$create();
                                var$6.$eras = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$1, var$8, var$9);
                            }
                            var$5.$eras0 = var$6.$eras.$clone0();
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 72:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(11, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 75:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(10, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 76:
                        case 77:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            if ($rep <= 2) {
                                $sb = $this.$elements;
                                var$5 = jt_DateFormatElement$NumericMonth__init_($rep);
                                ju_ArrayList_add($sb, var$5);
                                break a;
                            }
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$MonthText__init_0($this.$symbols0, $rep != 3 ? 0 : 1);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 83:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(14, $rep, 3);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 87:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(4, $rep, 1);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 88:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            if ($rep > 3) {
                                $pattern = new jl_IllegalArgumentException;
                                $c = $this.$index1;
                                $sb = jl_StringBuilder__init_();
                                jl_StringBuilder_append2(jl_StringBuilder_append($sb, $rt_s(863)), $c);
                                jl_IllegalArgumentException__init_1($pattern, jl_StringBuilder_toString($sb));
                                $rt_throw($pattern);
                            }
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Iso8601Timezone__init_0($rep);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 89:
                        case 121:
                            break c;
                        case 90:
                            jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = new jt_DateFormatElement$Rfc822Timezone;
                            jt_DateFormatElement$BaseTimezone__init_(var$5, $this.$locale3);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 97:
                            jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = new jt_DateFormatElement$AmPmText;
                            var$5.$ampms0 = jt_DateFormatSymbols_getAmPmStrings($this.$symbols0);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 100:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(5, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 104:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$NumericHour__init_(10, $rep, 12);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 107:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$NumericHour__init_(11, $rep, 24);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 109:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(12, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 115:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(13, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 117:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = new jt_DateFormatElement$NumericWeekday;
                            jt_DateFormatElement$Numeric__init_0(var$5, 7, $rep, 1);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 119:
                            $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = jt_DateFormatElement$Numeric__init_(3, $rep, 2);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        case 122:
                            jt_SimpleDatePatternParser_parseRepetitions($this);
                            $sb = $this.$elements;
                            var$5 = new jt_DateFormatElement$GeneralTimezone;
                            jt_DateFormatElement$BaseTimezone__init_(var$5, $this.$locale3);
                            ju_ArrayList_add($sb, var$5);
                            break a;
                        default:
                            break b;
                    }
                    $this.$index1 = $this.$index1 + 1 | 0;
                    jt_SimpleDatePatternParser_parseQuoted($this);
                    break a;
                }
                $rep = jt_SimpleDatePatternParser_parseRepetitions($this);
                if ($rep == 2) {
                    $sb = $this.$elements;
                    var$5 = jt_DateFormatElement$Year__init_0(1);
                    ju_ArrayList_add($sb, var$5);
                    break a;
                }
                $sb = $this.$elements;
                var$5 = jt_DateFormatElement$Numeric__init_(1, $rep, 8);
                ju_ArrayList_add($sb, var$5);
                break a;
            }
            if (jt_SimpleDatePatternParser_isControl($this, $c))
                jt_SimpleDatePatternParser_parseRepetitions($this);
            else {
                $sb = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($sb);
                while ($this.$index1 < jl_String_length($pattern) && !jt_SimpleDatePatternParser_isControl($this, jl_String_charAt($pattern, $this.$index1))) {
                    $rep = $this.$index1;
                    $this.$index1 = $rep + 1 | 0;
                    jl_StringBuilder_append3($sb, jl_String_charAt($pattern, $rep));
                }
                var$5 = $this.$elements;
                var$6 = jt_DateFormatElement$ConstantText__init_(jl_StringBuilder_toString($sb));
                ju_ArrayList_add(var$5, var$6);
            }
        }
    }
},
jt_SimpleDatePatternParser_isControl = ($this, $c) => {
    a: {
        b: {
            if ($c != 39 && !($c >= 97 && $c <= 122)) {
                if ($c < 65)
                    break b;
                if ($c > 90)
                    break b;
            }
            $c = 1;
            break a;
        }
        $c = 0;
    }
    return $c;
},
jt_SimpleDatePatternParser_parseQuoted = $this => {
    let $sb, var$2, var$3, $c, var$5;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    while ($this.$index1 < $this.$pattern1.$nativeString.length) {
        var$2 = $this.$pattern1;
        var$3 = $this.$index1;
        $this.$index1 = var$3 + 1 | 0;
        $c = jl_String_charAt(var$2, var$3);
        if ($c != 39)
            jl_AbstractStringBuilder_append2($sb, $c);
        else {
            if ($this.$index1 >= $this.$pattern1.$nativeString.length)
                break;
            if (jl_String_charAt($this.$pattern1, $this.$index1) != 39)
                break;
            jl_AbstractStringBuilder_append2($sb, 39);
            $this.$index1 = $this.$index1 + 1 | 0;
        }
    }
    var$2 = $this.$elements;
    var$5 = jt_DateFormatElement$ConstantText__init_(jl_AbstractStringBuilder_toString($sb));
    ju_ArrayList_add(var$2, var$5);
},
jt_SimpleDatePatternParser_parseRepetitions = $this => {
    let $count, var$2, var$3, $orig;
    $count = 1;
    var$2 = $this.$pattern1;
    var$3 = $this.$index1;
    $this.$index1 = var$3 + 1 | 0;
    $orig = jl_String_charAt(var$2, var$3);
    while ($this.$index1 < $this.$pattern1.$nativeString.length && jl_String_charAt($this.$pattern1, $this.$index1) == $orig) {
        $this.$index1 = $this.$index1 + 1 | 0;
        $count = $count + 1 | 0;
    }
    return $count;
},
jt_DateFormatElement = $rt_classWithoutFields();
function cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0() {
    let a = this; jl_Object.call(a);
    a.$_0 = null;
    a.$_1 = 0;
    a.$_2 = null;
    a.$_3 = null;
    a.$_4 = 0;
}
let cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0_onTimer$exported$0 = var$1 => {
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_loadBinary(var$1.$_0, var$1.$_1, var$1.$_2, var$1.$_3, var$1.$_4);
},
cbgggp_ParticleControllerComponent = $rt_classWithoutFields(),
cbgggp_ParticleControllerComponent_TMP_V1 = null,
cbgggp_ParticleControllerComponent_TMP_V2 = null,
cbgggp_ParticleControllerComponent_TMP_V3 = null,
cbgggp_ParticleControllerComponent_TMP_V4 = null,
cbgggp_ParticleControllerComponent_TMP_V5 = null,
cbgggp_ParticleControllerComponent_TMP_V6 = null,
cbgggp_ParticleControllerComponent_TMP_Q = null,
cbgggp_ParticleControllerComponent_TMP_Q2 = null,
cbgggp_ParticleControllerComponent_TMP_M3 = null,
cbgggp_ParticleControllerComponent_TMP_M4 = null,
cbgggp_ParticleControllerComponent_$callClinit = () => {
    cbgggp_ParticleControllerComponent_$callClinit = $rt_eraseClinit(cbgggp_ParticleControllerComponent);
    cbgggp_ParticleControllerComponent__clinit_();
},
cbgggp_ParticleControllerComponent__clinit_ = () => {
    cbgggp_ParticleControllerComponent_TMP_V1 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_V2 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_V3 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_V4 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_V5 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_V6 = cbgm_Vector3__init_();
    cbgggp_ParticleControllerComponent_TMP_Q = cbgm_Quaternion__init_();
    cbgggp_ParticleControllerComponent_TMP_Q2 = cbgm_Quaternion__init_();
    cbgggp_ParticleControllerComponent_TMP_M3 = cbgm_Matrix3__init_0();
    cbgggp_ParticleControllerComponent_TMP_M4 = cbgm_Matrix4__init_();
},
cbgggpi_Influencer = $rt_classWithoutFields(cbgggp_ParticleControllerComponent);
function cbgggp_ResourceData$SaveData() {
    let a = this; jl_Object.call(a);
    a.$data13 = null;
    a.$assets = null;
    a.$loadIndex = 0;
}
let cbgggp_ResourceData$SaveData__init_ = $this => {
    $this.$data13 = cbgu_ObjectMap__init_();
    $this.$assets = cbgu_IntArray__init_();
    $this.$loadIndex = 0;
},
cbgggp_ResourceData$SaveData__init_0 = () => {
    let var_0 = new cbgggp_ResourceData$SaveData();
    cbgggp_ResourceData$SaveData__init_(var_0);
    return var_0;
};
function jnci_BufferedDecoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in = null;
    a.$out1 = null;
    a.$inPosition = 0;
    a.$outPosition = 0;
}
let jnci_BufferedDecoder$Controller_hasMoreInput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$in) < $sz ? 0 : 1;
},
jnci_BufferedDecoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out1) < $sz ? 0 : 1;
};
function cbgu_TimSort() {
    let a = this; jl_Object.call(a);
    a.$a0 = null;
    a.$c = null;
    a.$minGallop = 0;
    a.$tmp = null;
    a.$tmpCount = 0;
    a.$stackSize = 0;
    a.$runBase = null;
    a.$runLen = null;
}
let cbgu_TimSort__init_ = $this => {
    $this.$minGallop = 7;
    $this.$stackSize = 0;
    $this.$tmp = $rt_createArray(jl_Object, 256);
    $this.$runBase = $rt_createIntArray(40);
    $this.$runLen = $rt_createIntArray(40);
},
cbgu_TimSort__init_0 = () => {
    let var_0 = new cbgu_TimSort();
    cbgu_TimSort__init_(var_0);
    return var_0;
},
cbgu_TimSort_binarySort = ($a, $lo, $hi, $start, $c) => {
    let var$6, $pivot, $right, var$9, $mid, $n;
    if ($start == $lo)
        $start = $start + 1 | 0;
    while ($start < $hi) {
        var$6 = $a.data;
        $pivot = var$6[$start];
        $right = $start;
        var$9 = $lo;
        while (var$9 < $right) {
            $mid = (var$9 + $right | 0) >>> 1 | 0;
            if ($c.$compare($pivot, var$6[$mid]) < 0)
                $right = $mid;
            else
                var$9 = $mid + 1 | 0;
        }
        a: {
            b: {
                $n = $start - var$9 | 0;
                switch ($n) {
                    case 1:
                        break b;
                    case 2:
                        var$6[var$9 + 2 | 0] = var$6[var$9 + 1 | 0];
                        break b;
                    default:
                }
                jl_System_fastArraycopy($a, var$9, $a, var$9 + 1 | 0, $n);
                break a;
            }
            var$6[var$9 + 1 | 0] = var$6[var$9];
        }
        var$6[var$9] = $pivot;
        $start = $start + 1 | 0;
    }
},
cbgu_TimSort_countRunAndMakeAscending = ($a, $lo, $hi, $c) => {
    let $runHi, var$6, var$7, var$8;
    $runHi = $lo + 1 | 0;
    if ($runHi == $hi)
        return 1;
    a: {
        $a = $a.data;
        var$6 = $runHi + 1 | 0;
        if ($c.$compare($a[$runHi], $a[$lo]) >= 0)
            while (var$6 < $hi) {
                if ($c.$compare($a[var$6], $a[var$6 - 1 | 0]) < 0)
                    break a;
                var$6 = var$6 + 1 | 0;
            }
        else {
            while (var$6 < $hi && $c.$compare($a[var$6], $a[var$6 - 1 | 0]) < 0) {
                var$6 = var$6 + 1 | 0;
            }
            $runHi = var$6 + (-1) | 0;
            var$7 = $lo;
            while (var$7 < $runHi) {
                $c = $a[var$7];
                $hi = var$7 + 1 | 0;
                $a[var$7] = $a[$runHi];
                var$8 = $runHi + (-1) | 0;
                $a[$runHi] = $c;
                var$7 = $hi;
                $runHi = var$8;
            }
        }
    }
    return var$6 - $lo | 0;
},
cbgu_TimSort_mergeAt = ($this, $i) => {
    let var$2, $base1, var$4, $len1, var$6, $base2, $len2, $k;
    var$2 = $this.$runBase.data;
    $base1 = var$2[$i];
    var$4 = $this.$runLen.data;
    $len1 = var$4[$i];
    var$6 = $i + 1 | 0;
    $base2 = var$2[var$6];
    $len2 = var$4[var$6];
    var$4[$i] = $len1 + $len2 | 0;
    $k = $this.$stackSize;
    if ($i == ($k - 3 | 0)) {
        $i = $i + 2 | 0;
        var$2[var$6] = var$2[$i];
        var$4[var$6] = var$4[$i];
    }
    $this.$stackSize = $k - 1 | 0;
    var$2 = $this.$a0;
    $k = cbgu_TimSort_gallopRight(var$2.data[$base2], var$2, $base1, $len1, 0, $this.$c);
    $i = $base1 + $k | 0;
    $k = $len1 - $k | 0;
    if (!$k)
        return;
    var$2 = $this.$a0;
    $base1 = cbgu_TimSort_gallopLeft(var$2.data[($i + $k | 0) - 1 | 0], var$2, $base2, $len2, $len2 - 1 | 0, $this.$c);
    if (!$base1)
        return;
    if ($k > $base1)
        cbgu_TimSort_mergeHi($this, $i, $k, $base2, $base1);
    else
        cbgu_TimSort_mergeLo($this, $i, $k, $base2, $base1);
},
cbgu_TimSort_gallopLeft = ($key, $a, $base, $len, $hint, $c) => {
    let $lastOfs, $ofs, $m, $maxOfs, var$11;
    $a = $a.data;
    $lastOfs = 0;
    $ofs = 1;
    $m = $base + $hint | 0;
    if ($c.$compare($key, $a[$m]) > 0) {
        $maxOfs = $len - $hint | 0;
        while (true) {
            var$11 = $rt_compare($ofs, $maxOfs);
            if (var$11 >= 0)
                break;
            if ($c.$compare($key, $a[$m + $ofs | 0]) <= 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if (var$11 <= 0)
            $maxOfs = $ofs;
        $len = $lastOfs + $hint | 0;
        $hint = $maxOfs + $hint | 0;
    } else {
        $maxOfs = $hint + 1 | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs);
            if ($len >= 0)
                break;
            if ($c.$compare($key, $a[$m - $ofs | 0]) > 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs = $ofs;
        $len = $hint - $maxOfs | 0;
        $hint = $hint - $lastOfs | 0;
    }
    $len = $len + 1 | 0;
    while ($len < $hint) {
        $m = $len + (($hint - $len | 0) >>> 1 | 0) | 0;
        if ($c.$compare($key, $a[$base + $m | 0]) > 0) {
            $len = $m + 1 | 0;
            $m = $hint;
        }
        $hint = $m;
    }
    return $hint;
},
cbgu_TimSort_gallopRight = ($key, $a, $base, $len, $hint, $c) => {
    let $ofs, $lastOfs, $m, $maxOfs, $maxOfs_0;
    $a = $a.data;
    $ofs = 1;
    $lastOfs = 0;
    $m = $base + $hint | 0;
    if ($c.$compare($key, $a[$m]) >= 0) {
        $maxOfs = $len - $hint | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs);
            if ($len >= 0)
                break;
            if ($c.$compare($key, $a[$m + $ofs | 0]) < 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs = $ofs;
        $len = $lastOfs + $hint | 0;
        $hint = $maxOfs + $hint | 0;
    } else {
        $maxOfs_0 = $hint + 1 | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs_0);
            if ($len >= 0)
                break;
            if ($c.$compare($key, $a[$m - $ofs | 0]) >= 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs_0;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs_0 = $ofs;
        $len = $hint - $maxOfs_0 | 0;
        $hint = $hint - $lastOfs | 0;
    }
    $len = $len + 1 | 0;
    while ($len < $hint) {
        $m = $len + (($hint - $len | 0) >>> 1 | 0) | 0;
        if ($c.$compare($key, $a[$base + $m | 0]) < 0)
            $hint = $m;
        else
            $len = $m + 1 | 0;
    }
    return $hint;
},
cbgu_TimSort_mergeLo = ($this, $base1, $len1, $base2, $len2) => {
    let $a, var$6, $tmp_0, $cursor1, var$9, var$10, var$11, $c, $minGallop, $count1, $count2, var$16, var$17, var$18;
    $a = $this.$a0;
    var$6 = $a.data;
    $tmp_0 = cbgu_TimSort_ensureCapacity($this, $len1);
    jl_System_fastArraycopy($a, $base1, $tmp_0, 0, $len1);
    $cursor1 = 0;
    var$9 = $base1 + 1 | 0;
    var$10 = $base2 + 1 | 0;
    var$6[$base1] = var$6[$base2];
    var$11 = $len2 + (-1) | 0;
    if (!var$11) {
        jl_System_fastArraycopy($tmp_0, $cursor1, $a, var$9, $len1);
        return;
    }
    if ($len1 == 1) {
        $tmp_0 = $tmp_0.data;
        jl_System_fastArraycopy($a, var$10, $a, var$9, var$11);
        var$6[var$9 + var$11 | 0] = $tmp_0[$cursor1];
        return;
    }
    $c = $this.$c;
    $minGallop = $this.$minGallop;
    a: {
        b: while (true) {
            $count1 = 0;
            $count2 = 0;
            $base1 = var$9;
            $base2 = var$10;
            var$16 = $cursor1;
            while (true) {
                var$17 = $tmp_0.data;
                if ($c.$compare(var$6[$base2], var$17[var$16]) < 0) {
                    var$9 = $base1 + 1 | 0;
                    var$10 = $base2 + 1 | 0;
                    var$6[$base1] = var$6[$base2];
                    $count2 = $count2 + 1 | 0;
                    $count1 = 0;
                    var$11 = var$11 + (-1) | 0;
                    if (!var$11)
                        break a;
                    $base2 = var$10;
                    $cursor1 = var$16;
                } else {
                    var$9 = $base1 + 1 | 0;
                    $cursor1 = var$16 + 1 | 0;
                    var$6[$base1] = var$17[var$16];
                    $count1 = $count1 + 1 | 0;
                    $count2 = 0;
                    $len1 = $len1 + (-1) | 0;
                    if ($len1 == 1) {
                        var$16 = $cursor1;
                        var$10 = $base2;
                        break a;
                    }
                }
                if (($count1 | $count2) >= $minGallop)
                    break;
                $base1 = var$9;
                var$16 = $cursor1;
            }
            var$10 = $base2;
            while (true) {
                $base1 = cbgu_TimSort_gallopRight(var$6[var$10], $tmp_0, $cursor1, $len1, 0, $c);
                if (!$base1) {
                    $base2 = var$9;
                    var$16 = $cursor1;
                } else {
                    jl_System_fastArraycopy($tmp_0, $cursor1, $a, var$9, $base1);
                    var$9 = var$9 + $base1 | 0;
                    var$16 = $cursor1 + $base1 | 0;
                    $len1 = $len1 - $base1 | 0;
                    if ($len1 <= 1)
                        break a;
                    $base2 = var$9;
                }
                var$9 = $base2 + 1 | 0;
                $cursor1 = var$10 + 1 | 0;
                var$6[$base2] = var$6[var$10];
                var$11 = var$11 + (-1) | 0;
                if (!var$11) {
                    var$10 = $cursor1;
                    break a;
                }
                $base2 = cbgu_TimSort_gallopLeft(var$17[var$16], $a, $cursor1, var$11, 0, $c);
                if (!$base2) {
                    $len2 = var$9;
                    var$10 = $cursor1;
                } else {
                    jl_System_fastArraycopy($a, $cursor1, $a, var$9, $base2);
                    var$9 = var$9 + $base2 | 0;
                    var$10 = $cursor1 + $base2 | 0;
                    var$11 = var$11 - $base2 | 0;
                    if (!var$11)
                        break b;
                    $len2 = var$9;
                }
                var$9 = $len2 + 1 | 0;
                $cursor1 = var$16 + 1 | 0;
                var$6[$len2] = var$17[var$16];
                $len1 = $len1 + (-1) | 0;
                if ($len1 == 1) {
                    var$16 = $cursor1;
                    break a;
                }
                $minGallop = $minGallop + (-1) | 0;
                if (!(($base1 < 7 ? 0 : 1) | ($base2 < 7 ? 0 : 1)))
                    break;
            }
            if ($minGallop < 0)
                $minGallop = 0;
            $minGallop = $minGallop + 2 | 0;
        }
    }
    if ($minGallop < 1)
        $minGallop = 1;
    $this.$minGallop = $minGallop;
    if ($len1 == 1) {
        jl_System_fastArraycopy($a, var$10, $a, var$9, var$11);
        var$6[var$9 + var$11 | 0] = var$17[var$16];
    } else {
        if (!$len1) {
            var$18 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$18, $rt_s(864));
            $rt_throw(var$18);
        }
        jl_System_fastArraycopy($tmp_0, var$16, $a, var$9, $len1);
    }
},
cbgu_TimSort_mergeHi = ($this, $base1, $len1, $base2, $len2) => {
    let $a, var$6, $tmp_0, $cursor1, $cursor2, $dest, var$11, var$12, $c, $minGallop, $count1, $count2, var$17, var$18;
    $a = $this.$a0;
    var$6 = $a.data;
    $tmp_0 = cbgu_TimSort_ensureCapacity($this, $len2);
    jl_System_fastArraycopy($a, $base2, $tmp_0, 0, $len2);
    $cursor1 = ($base1 + $len1 | 0) - 1 | 0;
    $cursor2 = $len2 - 1 | 0;
    $dest = ($base2 + $len2 | 0) - 1 | 0;
    var$11 = $dest + (-1) | 0;
    var$12 = $cursor1 + (-1) | 0;
    var$6[$dest] = var$6[$cursor1];
    $cursor1 = $len1 + (-1) | 0;
    if (!$cursor1) {
        jl_System_fastArraycopy($tmp_0, 0, $a, var$11 - $cursor2 | 0, $len2);
        return;
    }
    if ($len2 == 1) {
        $tmp_0 = $tmp_0.data;
        $base1 = var$11 - $cursor1 | 0;
        jl_System_fastArraycopy($a, (var$12 - $cursor1 | 0) + 1 | 0, $a, $base1 + 1 | 0, $cursor1);
        var$6[$base1] = $tmp_0[$cursor2];
        return;
    }
    $c = $this.$c;
    $minGallop = $this.$minGallop;
    a: {
        b: while (true) {
            $count1 = 0;
            $count2 = 0;
            $dest = var$11;
            while (true) {
                var$17 = $tmp_0.data;
                if ($c.$compare(var$17[$cursor2], var$6[var$12]) < 0) {
                    var$11 = $dest + (-1) | 0;
                    $base2 = var$12 + (-1) | 0;
                    var$6[$dest] = var$6[var$12];
                    $count1 = $count1 + 1 | 0;
                    $count2 = 0;
                    $cursor1 = $cursor1 + (-1) | 0;
                    if (!$cursor1)
                        break a;
                    var$12 = $base2;
                    $len1 = $cursor2;
                } else {
                    var$11 = $dest + (-1) | 0;
                    $len1 = $cursor2 + (-1) | 0;
                    var$6[$dest] = var$17[$cursor2];
                    $count2 = $count2 + 1 | 0;
                    $count1 = 0;
                    $len2 = $len2 + (-1) | 0;
                    if ($len2 == 1) {
                        $base2 = var$12;
                        $cursor2 = $len1;
                        break a;
                    }
                }
                if (($count1 | $count2) >= $minGallop)
                    break;
                $dest = var$11;
                $cursor2 = $len1;
            }
            $cursor2 = $len1;
            while (true) {
                $count1 = $cursor1 - cbgu_TimSort_gallopRight(var$17[$cursor2], $a, $base1, $cursor1, $cursor1 - 1 | 0, $c) | 0;
                if (!$count1) {
                    $len1 = var$11;
                    $base2 = var$12;
                } else {
                    var$11 = var$11 - $count1 | 0;
                    $base2 = var$12 - $count1 | 0;
                    $cursor1 = $cursor1 - $count1 | 0;
                    jl_System_fastArraycopy($a, $base2 + 1 | 0, $a, var$11 + 1 | 0, $count1);
                    if (!$cursor1)
                        break a;
                    $len1 = var$11;
                }
                var$11 = $len1 + (-1) | 0;
                var$12 = $cursor2 + (-1) | 0;
                var$6[$len1] = var$17[$cursor2];
                $len2 = $len2 + (-1) | 0;
                if ($len2 == 1) {
                    $cursor2 = var$12;
                    break a;
                }
                $count2 = $len2 - cbgu_TimSort_gallopLeft(var$6[$base2], $tmp_0, 0, $len2, $len2 - 1 | 0, $c) | 0;
                if (!$count2) {
                    $len1 = var$11;
                    $cursor2 = var$12;
                } else {
                    var$11 = var$11 - $count2 | 0;
                    $cursor2 = var$12 - $count2 | 0;
                    $len2 = $len2 - $count2 | 0;
                    jl_System_fastArraycopy($tmp_0, $cursor2 + 1 | 0, $a, var$11 + 1 | 0, $count2);
                    if ($len2 <= 1)
                        break b;
                    $len1 = var$11;
                }
                var$11 = $len1 + (-1) | 0;
                var$12 = $base2 + (-1) | 0;
                var$6[$len1] = var$6[$base2];
                $cursor1 = $cursor1 + (-1) | 0;
                if (!$cursor1) {
                    $base2 = var$12;
                    break a;
                }
                $minGallop = $minGallop + (-1) | 0;
                if (!(($count1 < 7 ? 0 : 1) | ($count2 < 7 ? 0 : 1)))
                    break;
            }
            if ($minGallop < 0)
                $minGallop = 0;
            $minGallop = $minGallop + 2 | 0;
        }
    }
    if ($minGallop < 1)
        $minGallop = 1;
    $this.$minGallop = $minGallop;
    if ($len2 == 1) {
        $base1 = var$11 - $cursor1 | 0;
        jl_System_fastArraycopy($a, ($base2 - $cursor1 | 0) + 1 | 0, $a, $base1 + 1 | 0, $cursor1);
        var$6[$base1] = var$17[$cursor2];
    } else {
        if (!$len2) {
            var$18 = new jl_IllegalArgumentException;
            jl_Exception__init_(var$18, $rt_s(864));
            $rt_throw(var$18);
        }
        jl_System_fastArraycopy($tmp_0, 0, $a, var$11 - ($len2 - 1 | 0) | 0, $len2);
    }
},
cbgu_TimSort_ensureCapacity = ($this, $minCapacity) => {
    let var$2;
    $this.$tmpCount = jl_Math_max($this.$tmpCount, $minCapacity);
    if ($this.$tmp.data.length < $minCapacity) {
        var$2 = $minCapacity | $minCapacity >> 1;
        var$2 = var$2 | var$2 >> 2;
        var$2 = var$2 | var$2 >> 4;
        var$2 = var$2 | var$2 >> 8;
        var$2 = (var$2 | var$2 >> 16) + 1 | 0;
        if (var$2 >= 0)
            $minCapacity = jl_Math_min(var$2, $this.$a0.data.length >>> 1 | 0);
        $this.$tmp = $rt_createArray(jl_Object, $minCapacity);
    }
    return $this.$tmp;
};
function cbggg_GLFrameBuffer() {
    let a = this; jl_Object.call(a);
    a.$textureAttachments = null;
    a.$framebufferHandle = 0;
    a.$depthbufferHandle = 0;
    a.$stencilbufferHandle = 0;
    a.$depthStencilPackedBufferHandle = 0;
    a.$hasDepthStencilPackedBuffer = 0;
    a.$colorBufferHandles = null;
    a.$isMRT = 0;
    a.$bufferBuilder = null;
    a.$defaultDrawBuffers = null;
}
let cbggg_GLFrameBuffer_buffers = null,
cbggg_GLFrameBuffer_defaultFramebufferHandle = 0,
cbggg_GLFrameBuffer_defaultFramebufferHandleInitialized = 0,
cbggg_GLFrameBuffer_singleInt = null,
cbggg_GLFrameBuffer_$callClinit = () => {
    cbggg_GLFrameBuffer_$callClinit = $rt_eraseClinit(cbggg_GLFrameBuffer);
    cbggg_GLFrameBuffer__clinit_();
},
cbggg_GLFrameBuffer__init_ = $this => {
    cbggg_GLFrameBuffer_$callClinit();
    $this.$textureAttachments = cbgu_Array__init_();
    $this.$colorBufferHandles = cbgu_IntArray__init_();
},
cbggg_GLFrameBuffer_getColorBufferTexture = $this => {
    return cbgu_Array_first($this.$textureAttachments);
},
cbggg_GLFrameBuffer_build = $this => {
    let $gl, $intbuf, $result, $texture, $width, $height, $colorbufferHandle, $colorAttachmentCounter, $colorBufferSpec, $attachmentSpec, $texture_0, $i;
    $gl = cbg_Gdx_gl20;
    cbggg_GLFrameBuffer_checkValidBuilder($this);
    if (!cbggg_GLFrameBuffer_defaultFramebufferHandleInitialized) {
        cbggg_GLFrameBuffer_defaultFramebufferHandleInitialized = 1;
        if (cgxgbt_TeaApplication_getType(cbg_Gdx_app) !== cbg_Application$ApplicationType_iOS)
            cbggg_GLFrameBuffer_defaultFramebufferHandle = 0;
        else {
            $intbuf = jn_ByteBufferJsImpl_asIntBuffer(jn_ByteBuffer_order(jn_ByteBuffer_allocateDirect(64), jn_ByteOrder_nativeOrder()));
            $gl.$glGetIntegerv(36006, $intbuf);
            cbggg_GLFrameBuffer_defaultFramebufferHandle = jn_IntBufferImpl_get($intbuf, 0);
        }
    }
    $intbuf = $gl;
    $result = cgxgbt_TeaGL20_glGenFramebuffer($intbuf);
    $this.$framebufferHandle = $result;
    $gl.$glBindFramebuffer(36160, $result);
    $texture = $this.$bufferBuilder;
    $width = $texture.$width4;
    $height = $texture.$height6;
    if ($texture.$hasDepthRenderBuffer) {
        $result = cgxgbt_TeaGL20_glGenRenderbuffer($intbuf);
        $this.$depthbufferHandle = $result;
        $gl.$glBindRenderbuffer(36161, $result);
        $texture = $this.$bufferBuilder;
        $result = $texture.$samples;
        if ($result <= 0)
            $gl.$glRenderbufferStorage(36161, $texture.$depthRenderBufferSpec.$internalFormat, $width, $height);
        else
            cbg_Gdx_gl31.$glRenderbufferStorageMultisample(36161, $result, $texture.$depthRenderBufferSpec.$internalFormat, $width, $height);
    }
    if ($this.$bufferBuilder.$hasStencilRenderBuffer) {
        $result = cgxgbt_TeaGL20_glGenRenderbuffer($intbuf);
        $this.$stencilbufferHandle = $result;
        $gl.$glBindRenderbuffer(36161, $result);
        $texture = $this.$bufferBuilder;
        $result = $texture.$samples;
        if ($result <= 0)
            $gl.$glRenderbufferStorage(36161, $texture.$stencilRenderBufferSpec.$internalFormat, $width, $height);
        else
            cbg_Gdx_gl31.$glRenderbufferStorageMultisample(36161, $result, $texture.$stencilRenderBufferSpec.$internalFormat, $width, $height);
    }
    if ($this.$bufferBuilder.$hasPackedStencilDepthRenderBuffer) {
        $result = cgxgbt_TeaGL20_glGenRenderbuffer($intbuf);
        $this.$depthStencilPackedBufferHandle = $result;
        $gl.$glBindRenderbuffer(36161, $result);
        $texture = $this.$bufferBuilder;
        $result = $texture.$samples;
        if ($result <= 0)
            $gl.$glRenderbufferStorage(36161, $texture.$packedStencilDepthRenderBufferSpec.$internalFormat, $width, $height);
        else
            cbg_Gdx_gl31.$glRenderbufferStorageMultisample(36161, $result, $texture.$packedStencilDepthRenderBufferSpec.$internalFormat, $width, $height);
        $this.$hasDepthStencilPackedBuffer = 1;
    }
    $texture = $this.$bufferBuilder.$textureAttachmentSpecs;
    $result = $texture.$size0;
    $colorbufferHandle = $result <= 1 ? 0 : 1;
    $this.$isMRT = $colorbufferHandle;
    $colorAttachmentCounter = 0;
    if ($colorbufferHandle) {
        $colorBufferSpec = cbgu_Array_iterator($texture);
        $texture = $this;
        while (cbgu_Array$ArrayIterator_hasNext($colorBufferSpec)) {
            $attachmentSpec = cbgu_Array$ArrayIterator_next($colorBufferSpec);
            $texture_0 = cbggg_FrameBuffer_createTexture($texture, $attachmentSpec);
            cbgu_Array_add($this.$textureAttachments, $texture_0);
            if (cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec_isColorTexture($attachmentSpec)) {
                $gl.$glFramebufferTexture2D(36160, 36064 + $colorAttachmentCounter | 0, 3553, cbgg_GLTexture_getTextureObjectHandle($texture_0), 0);
                $colorAttachmentCounter = $colorAttachmentCounter + 1 | 0;
            } else if ($attachmentSpec.$isDepth)
                $gl.$glFramebufferTexture2D(36160, 36096, 3553, cbgg_GLTexture_getTextureObjectHandle($texture_0), 0);
            else if ($attachmentSpec.$isStencil)
                $gl.$glFramebufferTexture2D(36160, 36128, 3553, cbgg_GLTexture_getTextureObjectHandle($texture_0), 0);
        }
    } else if ($result > 0) {
        $colorBufferSpec = cbgu_Array_first($texture);
        $texture = cbggg_FrameBuffer_createTexture($this, $colorBufferSpec);
        cbgu_Array_add($this.$textureAttachments, $texture);
        $gl.$glBindTexture($texture.$glTarget, cbgg_GLTexture_getTextureObjectHandle($texture));
    }
    $attachmentSpec = cbgu_Array_iterator($this.$bufferBuilder.$colorRenderBufferSpecs);
    while (cbgu_Array$ArrayIterator_hasNext($attachmentSpec)) {
        $colorBufferSpec = cbgu_Array$ArrayIterator_next($attachmentSpec);
        $colorbufferHandle = cgxgbt_TeaGL20_glGenRenderbuffer($intbuf);
        $gl.$glBindRenderbuffer(36161, $colorbufferHandle);
        $result = $this.$bufferBuilder.$samples;
        if ($result <= 0)
            $gl.$glRenderbufferStorage(36161, $colorBufferSpec.$internalFormat, $width, $height);
        else
            cbg_Gdx_gl31.$glRenderbufferStorageMultisample(36161, $result, $colorBufferSpec.$internalFormat, $width, $height);
        cbg_Gdx_gl.$glFramebufferRenderbuffer(36160, 36064 + $colorAttachmentCounter | 0, 36161, $colorbufferHandle);
        cbgu_IntArray_add($this.$colorBufferHandles, $colorbufferHandle);
        $colorAttachmentCounter = $colorAttachmentCounter + 1 | 0;
    }
    a: {
        if (!$this.$isMRT) {
            $texture = $this.$bufferBuilder;
            if ($texture.$samples <= 0) {
                if ($texture.$textureAttachmentSpecs.$size0 <= 0)
                    break a;
                $texture = cbgu_Array_first($this.$textureAttachments);
                cbggg_FrameBuffer_attachFrameBufferColorTexture($this, $texture);
                break a;
            }
        }
        $this.$defaultDrawBuffers = cbgu_BufferUtils_newIntBuffer($colorAttachmentCounter);
        $i = 0;
        while ($i < $colorAttachmentCounter) {
            $texture = $this.$defaultDrawBuffers;
            $result = 36064 + $i | 0;
            jn_IntBufferImpl_put0($texture, $result);
            $i = $i + 1 | 0;
        }
        jn_IntBuffer_position($this.$defaultDrawBuffers, 0);
        cbg_Gdx_gl30.$glDrawBuffers($colorAttachmentCounter, $this.$defaultDrawBuffers);
    }
    if ($this.$bufferBuilder.$hasDepthRenderBuffer)
        $gl.$glFramebufferRenderbuffer(36160, 36096, 36161, $this.$depthbufferHandle);
    if ($this.$bufferBuilder.$hasStencilRenderBuffer)
        $gl.$glFramebufferRenderbuffer(36160, 36128, 36161, $this.$stencilbufferHandle);
    if ($this.$bufferBuilder.$hasPackedStencilDepthRenderBuffer)
        $gl.$glFramebufferRenderbuffer(36160, 33306, 36161, $this.$depthStencilPackedBufferHandle);
    $gl.$glBindRenderbuffer(36161, 0);
    $colorBufferSpec = cbgu_Array_iterator($this.$textureAttachments);
    while (cbgu_Array$ArrayIterator_hasNext($colorBufferSpec)) {
        $gl.$glBindTexture((cbgu_Array$ArrayIterator_next($colorBufferSpec)).$glTarget, 0);
    }
    $result = $gl.$glCheckFramebufferStatus(36160);
    if ($result == 36061) {
        $texture = $this.$bufferBuilder;
        if ($texture.$hasDepthRenderBuffer && $texture.$hasStencilRenderBuffer && !(!cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(865)) && !cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(866)))) {
            if ($this.$bufferBuilder.$hasDepthRenderBuffer) {
                cgxgbt_TeaGL20_glDeleteRenderbuffer($intbuf, $this.$depthbufferHandle);
                $this.$depthbufferHandle = 0;
            }
            if ($this.$bufferBuilder.$hasStencilRenderBuffer) {
                cgxgbt_TeaGL20_glDeleteRenderbuffer($intbuf, $this.$stencilbufferHandle);
                $this.$stencilbufferHandle = 0;
            }
            if ($this.$bufferBuilder.$hasPackedStencilDepthRenderBuffer) {
                cgxgbt_TeaGL20_glDeleteRenderbuffer($intbuf, $this.$depthStencilPackedBufferHandle);
                $this.$depthStencilPackedBufferHandle = 0;
            }
            $result = cgxgbt_TeaGL20_glGenRenderbuffer($intbuf);
            $this.$depthStencilPackedBufferHandle = $result;
            $this.$hasDepthStencilPackedBuffer = 1;
            $gl.$glBindRenderbuffer(36161, $result);
            $result = $this.$bufferBuilder.$samples;
            if ($result <= 0)
                $gl.$glRenderbufferStorage(36161, 35056, $width, $height);
            else
                cbg_Gdx_gl31.$glRenderbufferStorageMultisample(36161, $result, 35056, $width, $height);
            $gl.$glBindRenderbuffer(36161, 0);
            $gl.$glFramebufferRenderbuffer(36160, 36096, 36161, $this.$depthStencilPackedBufferHandle);
            $gl.$glFramebufferRenderbuffer(36160, 36128, 36161, $this.$depthStencilPackedBufferHandle);
            $result = $gl.$glCheckFramebufferStatus(36160);
        }
    }
    $gl.$glBindFramebuffer(36160, cbggg_GLFrameBuffer_defaultFramebufferHandle);
    if ($result == 36053) {
        cbggg_GLFrameBuffer_addManagedFrameBuffer(cbg_Gdx_app, $this);
        return;
    }
    $texture = cbgu_Array_iterator($this.$textureAttachments);
    $gl = $this;
    while (cbgu_Array$ArrayIterator_hasNext($texture)) {
        cbggg_FrameBuffer_disposeColorTexture($gl, cbgu_Array$ArrayIterator_next($texture));
    }
    if ($this.$hasDepthStencilPackedBuffer)
        cgxgbt_TeaGL20_glDeleteBuffer($intbuf, $this.$depthStencilPackedBufferHandle);
    else {
        if ($this.$bufferBuilder.$hasDepthRenderBuffer)
            cgxgbt_TeaGL20_glDeleteRenderbuffer($intbuf, $this.$depthbufferHandle);
        if ($this.$bufferBuilder.$hasStencilRenderBuffer)
            cgxgbt_TeaGL20_glDeleteRenderbuffer($intbuf, $this.$stencilbufferHandle);
    }
    cgxgbt_TeaGL20_glDeleteFramebuffer($intbuf, $this.$framebufferHandle);
    if ($result == 36054)
        $rt_throw(jl_IllegalStateException__init_($rt_s(867)));
    if ($result == 36057)
        $rt_throw(jl_IllegalStateException__init_($rt_s(868)));
    if ($result == 36055)
        $rt_throw(jl_IllegalStateException__init_($rt_s(869)));
    if ($result == 36061)
        $rt_throw(jl_IllegalStateException__init_($rt_s(870)));
    if ($result == 36182)
        $rt_throw(jl_IllegalStateException__init_($rt_s(871)));
    $rt_throw(jl_IllegalStateException__init_(jl_StringBuilder_toString(jl_StringBuilder_append2(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(872)), $result))));
},
cbggg_GLFrameBuffer_checkValidBuilder = $this => {
    let $spec, $supportsPackedDepthStencil, var$3, $runningGL30, var$5;
    $spec = $this.$bufferBuilder;
    $supportsPackedDepthStencil = $spec.$samples;
    if ($supportsPackedDepthStencil > 0) {
        $spec = new cbgu_GdxRuntimeException;
        jl_Exception__init_($spec, $rt_s(873));
        $rt_throw($spec);
    }
    if ($supportsPackedDepthStencil > 0 && $spec.$textureAttachmentSpecs.$size0 > 0) {
        $spec = new cbgu_GdxRuntimeException;
        jl_Exception__init_($spec, $rt_s(874));
        $rt_throw($spec);
    }
    var$3 = cbg_Gdx_graphics;
    $runningGL30 = var$3.$gl30 === null ? 0 : 1;
    a: {
        if (!$runningGL30) {
            $supportsPackedDepthStencil = !cgxgbt_TeaGraphics_supportsExtension(var$3, $rt_s(865)) && !cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(866)) ? 0 : 1;
            $spec = $this.$bufferBuilder;
            if ($spec.$hasPackedStencilDepthRenderBuffer && !$supportsPackedDepthStencil) {
                $spec = new cbgu_GdxRuntimeException;
                jl_Exception__init_($spec, $rt_s(875));
                $rt_throw($spec);
            }
            $spec = $spec.$textureAttachmentSpecs;
            if ($spec.$size0 > 1) {
                $spec = new cbgu_GdxRuntimeException;
                jl_Exception__init_($spec, $rt_s(876));
                $rt_throw($spec);
            }
            var$5 = cbgu_Array_iterator($spec);
            while (true) {
                if (!cbgu_Array$ArrayIterator_hasNext(var$5))
                    break a;
                $spec = cbgu_Array$ArrayIterator_next(var$5);
                if ($spec.$isDepth) {
                    $spec = new cbgu_GdxRuntimeException;
                    jl_Exception__init_($spec, $rt_s(877));
                    $rt_throw($spec);
                }
                if ($spec.$isStencil) {
                    $spec = new cbgu_GdxRuntimeException;
                    jl_Exception__init_($spec, $rt_s(878));
                    $rt_throw($spec);
                }
                if ($spec.$isFloat && !cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(879)))
                    break;
            }
            $spec = new cbgu_GdxRuntimeException;
            jl_Exception__init_($spec, $rt_s(880));
            $rt_throw($spec);
        }
    }
    b: {
        $spec = $this.$bufferBuilder;
        if ($spec.$hasPackedStencilDepthRenderBuffer) {
            if ($spec.$hasDepthRenderBuffer)
                break b;
            if ($spec.$hasStencilRenderBuffer)
                break b;
        }
        return;
    }
    var$3 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$3, $rt_s(881));
    $rt_throw(var$3);
},
cbggg_GLFrameBuffer_getHeight = $this => {
    return $this.$bufferBuilder.$height6;
},
cbggg_GLFrameBuffer_getWidth = $this => {
    return $this.$bufferBuilder.$width4;
},
cbggg_GLFrameBuffer_addManagedFrameBuffer = ($app, $frameBuffer) => {
    let $managedResources;
    cbggg_GLFrameBuffer_$callClinit();
    $managedResources = ju_HashMap_get(cbggg_GLFrameBuffer_buffers, $app);
    if ($managedResources === null)
        $managedResources = cbgu_Array__init_();
    cbgu_Array_add($managedResources, $frameBuffer);
    ju_HashMap_put(cbggg_GLFrameBuffer_buffers, $app, $managedResources);
},
cbggg_GLFrameBuffer__clinit_ = () => {
    cbggg_GLFrameBuffer_buffers = ju_HashMap__init_();
    cbggg_GLFrameBuffer_defaultFramebufferHandleInitialized = 0;
    cbggg_GLFrameBuffer_singleInt = cbgu_BufferUtils_newIntBuffer(1);
},
cbggg_FrameBuffer = $rt_classWithoutFields(cbggg_GLFrameBuffer),
cbggg_FrameBuffer__init_ = $this => {
    cbggg_GLFrameBuffer__init_($this);
},
cbggg_FrameBuffer__init_0 = () => {
    let var_0 = new cbggg_FrameBuffer();
    cbggg_FrameBuffer__init_(var_0);
    return var_0;
},
cbggg_FrameBuffer_attachFrameBufferColorTexture = ($this, var$1) => {
    var$1 = var$1;
    cbg_Gdx_gl20.$glFramebufferTexture2D(36160, 36064, 3553, var$1.$glHandle, 0);
},
cbggg_FrameBuffer_disposeColorTexture = ($this, var$1) => {
    cbgg_Texture_dispose(var$1);
},
cbggg_FrameBuffer_createTexture = ($this, var$1) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    a: {
        var$2 = new cbggg_GLOnlyTextureData;
        var$3 = $this.$bufferBuilder;
        var$4 = var$3.$width4;
        var$5 = var$3.$height6;
        var$6 = var$1.$internalFormat0;
        var$7 = var$1.$format12;
        var$8 = var$1.$type9;
        var$2.$width2 = 0;
        var$2.$height4 = 0;
        var$2.$isPrepared1 = 0;
        var$2.$mipLevel = 0;
        var$2.$width2 = var$4;
        var$2.$height4 = var$5;
        var$2.$mipLevel = 0;
        var$2.$internalFormat1 = var$6;
        var$2.$format11 = var$7;
        var$2.$type8 = var$8;
        var$3 = cbgg_Texture__init_4(var$2);
        if (var$1.$isDepth) {
            var$1 = cbg_Application$ApplicationType_WebGL;
            if (var$1 === var$1) {
                var$9 = 1;
                break a;
            }
        }
        var$9 = 0;
    }
    if (!var$9) {
        var$1 = cbgg_Texture$TextureFilter_Linear;
        cbgg_GLTexture_setFilter(var$3, var$1, var$1);
    }
    var$1 = cbgg_Texture$TextureWrap_ClampToEdge;
    cbgg_GLTexture_setWrap(var$3, var$1, var$1);
    return var$3;
},
jt_DecimalFormat$MinusField = $rt_classWithoutFields(),
jt_DecimalFormat$MinusField__init_ = $this => {
    return;
},
jt_DecimalFormat$MinusField__init_0 = () => {
    let var_0 = new jt_DecimalFormat$MinusField();
    jt_DecimalFormat$MinusField__init_(var_0);
    return var_0;
},
jt_DecimalFormat$MinusField_render = ($this, $format, $buffer) => {
    jl_AbstractStringBuilder_append2($buffer, $format.$symbols.$minusSign);
},
jt_DecimalFormat$MinusField_equals = ($this, $obj) => {
    return $obj instanceof jt_DecimalFormat$MinusField;
},
jt_DecimalFormat$MinusField_hashCode = $this => {
    return 3;
};
function jt_DateFormatElement$Numeric() {
    let a = this; jt_DateFormatElement.call(a);
    a.$field0 = 0;
    a.$length4 = 0;
    a.$maxLength = 0;
}
let jt_DateFormatElement$Numeric__init_0 = ($this, $field, $length, $maxLength) => {
    $this.$field0 = $field;
    $this.$length4 = $length;
    $this.$maxLength = jl_Math_max($length, $maxLength);
},
jt_DateFormatElement$Numeric__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jt_DateFormatElement$Numeric();
    jt_DateFormatElement$Numeric__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jt_DateFormatElement$Numeric_format = ($this, $date, $buffer) => {
    let $str, $i;
    $str = jl_Integer_toString($this.$processBeforeFormat(ju_Calendar_get($date, $this.$field0)));
    $i = $str.$nativeString.length;
    while ($i < $this.$length4) {
        jl_AbstractStringBuilder_append2($buffer, 48);
        $i = $i + 1 | 0;
    }
    jl_AbstractStringBuilder_append0($buffer, $str);
},
jt_DateFormatElement$Numeric_processBeforeFormat = ($this, $num) => {
    return $num;
},
jt_DateFormatElement$Numeric_equals = ($this, $o) => {
    let $numeric;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $numeric = $o;
        return $this.$field0 == $numeric.$field0 && $this.$length4 == $numeric.$length4 ? 1 : 0;
    }
    return 0;
},
jt_DateFormatElement$Numeric_hashCode = $this => {
    let var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 2);
    var$2 = var$1.data;
    var$2[0] = jl_Integer_valueOf($this.$field0);
    var$2[1] = jl_Integer_valueOf($this.$length4);
    return ju_Arrays_hashCode(var$1);
};
function jt_DateFormatElement$WeekdayText() {
    let a = this; jt_DateFormatElement.call(a);
    a.$weeks = null;
    a.$shortWeeks = null;
    a.$abbreviated0 = 0;
}
let jt_DateFormatElement$WeekdayText__init_ = ($this, $symbols, $abbreviated) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    a: {
        if ($symbols.$weekdays === null) {
            $symbols.$weekdays = $rt_createArray(jl_String, 8);
            var$3 = $symbols.$locale0;
            var$4 = var$3.$languageCode;
            var$5 = var$3.$countryCode;
            if (otciu_CLDRHelper_$$metadata$$5 === null)
                otciu_CLDRHelper_$$metadata$$5 = otciu_CLDRHelper_getWeekdayMap$$create();
            var$6 = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$5, var$4, var$5);
            var$7 = 0;
            while (true) {
                if (var$7 >= 7)
                    break a;
                var$8 = var$6.data;
                var$9 = $symbols.$weekdays.data;
                var$10 = var$7 + 1 | 0;
                var$9[var$10] = var$8[var$7];
                var$7 = var$10;
            }
        }
    }
    b: {
        $this.$weeks = $symbols.$weekdays.$clone0();
        if ($symbols.$shortWeekdays === null) {
            $symbols.$shortWeekdays = $rt_createArray(jl_String, 8);
            var$3 = $symbols.$locale0;
            var$4 = var$3.$languageCode;
            var$5 = var$3.$countryCode;
            if (otciu_CLDRHelper_$$metadata$$6 === null)
                otciu_CLDRHelper_$$metadata$$6 = otciu_CLDRHelper_getShortWeekdayMap$$create();
            var$6 = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$6, var$4, var$5);
            var$10 = 0;
            while (true) {
                if (var$10 >= 7)
                    break b;
                var$8 = var$6.data;
                var$9 = $symbols.$shortWeekdays.data;
                var$7 = var$10 + 1 | 0;
                var$9[var$7] = var$8[var$10];
                var$10 = var$7;
            }
        }
    }
    $this.$shortWeeks = $symbols.$shortWeekdays.$clone0();
    $this.$abbreviated0 = $abbreviated;
},
jt_DateFormatElement$WeekdayText__init_0 = (var_0, var_1) => {
    let var_2 = new jt_DateFormatElement$WeekdayText();
    jt_DateFormatElement$WeekdayText__init_(var_2, var_0, var_1);
    return var_2;
},
jt_DateFormatElement$WeekdayText_format = ($this, $date, $buffer) => {
    let $weekday;
    $weekday = ju_Calendar_get($date, 7);
    jl_AbstractStringBuilder_append0($buffer, !$this.$abbreviated0 ? $this.$weeks.data[$weekday] : $this.$shortWeeks.data[$weekday]);
},
jt_DateFormatElement$WeekdayText_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $that = $o;
        return $this.$abbreviated0 == $that.$abbreviated0 && ju_Arrays_equals($this.$weeks, $that.$weeks) && ju_Arrays_equals($this.$shortWeeks, $that.$shortWeeks) ? 1 : 0;
    }
    return 0;
},
jt_DateFormatElement$WeekdayText_hashCode = $this => {
    let var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 3);
    var$2 = var$1.data;
    var$2[0] = $this.$weeks;
    var$2[1] = $this.$shortWeeks;
    var$2[2] = jl_Boolean_valueOf($this.$abbreviated0);
    return ju_Arrays_hashCode(var$1);
};
function jt_DateFormatElement$EraText() {
    jt_DateFormatElement.call(this);
    this.$eras0 = null;
}
let jt_DateFormatElement$EraText_format = ($this, $date, $buffer) => {
    let $era;
    $era = ju_Calendar_get($date, 0);
    jl_AbstractStringBuilder_append0($buffer, $this.$eras0.data[$era]);
},
jt_DateFormatElement$EraText_equals = ($this, $o) => {
    let $eraText;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $eraText = $o;
        return ju_Arrays_equals($this.$eras0, $eraText.$eras0);
    }
    return 0;
},
jt_DateFormatElement$EraText_hashCode = $this => {
    return ju_Arrays_hashCode($this.$eras0);
};
function jt_DateFormatElement$BaseTimezone() {
    let a = this; jt_DateFormatElement.call(a);
    a.$locale2 = null;
    a.$searchTrie = null;
}
let jt_DateFormatElement$BaseTimezone__init_ = ($this, $locale) => {
    $this.$locale2 = $locale;
},
jt_DateFormatElement$BaseTimezone_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $that = $o;
        return ju_Objects_equals($this.$locale2, $that.$locale2) && ju_Objects_equals($this.$searchTrie, $that.$searchTrie) ? 1 : 0;
    }
    return 0;
},
jt_DateFormatElement$BaseTimezone_hashCode = $this => {
    let var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 2);
    var$2 = var$1.data;
    var$2[0] = $this.$locale2;
    var$2[1] = $this.$searchTrie;
    return ju_Arrays_hashCode(var$1);
},
jt_DateFormatElement$Rfc822Timezone = $rt_classWithoutFields(jt_DateFormatElement$BaseTimezone),
jt_DateFormatElement$Rfc822Timezone_format = ($this, $date, $buffer) => {
    let $tz, var$4, $minutes, $hours, var$7;
    $tz = $date.$zone;
    var$4 = ju_Calendar_getTimeInMillis($date);
    $minutes = ju_IANATimeZone_getOffset($tz, var$4) / 60000 | 0;
    if ($minutes >= 0)
        jl_AbstractStringBuilder_append2($buffer, 43);
    else {
        $minutes =  -$minutes | 0;
        jl_AbstractStringBuilder_append2($buffer, 45);
    }
    $hours = $minutes / 60 | 0;
    var$7 = $minutes % 60 | 0;
    jl_AbstractStringBuilder_append1($buffer, $hours / 10 | 0);
    jl_AbstractStringBuilder_append1($buffer, $hours % 10 | 0);
    jl_AbstractStringBuilder_append1($buffer, var$7 / 10 | 0);
    jl_AbstractStringBuilder_append1($buffer, var$7 % 10 | 0);
};
function jt_DateFormatElement$AmPmText() {
    jt_DateFormatElement.call(this);
    this.$ampms0 = null;
}
let jt_DateFormatElement$AmPmText_format = ($this, $date, $buffer) => {
    let $ampm;
    $ampm = ju_Calendar_get($date, 9);
    jl_AbstractStringBuilder_append0($buffer, $this.$ampms0.data[$ampm]);
},
jt_DateFormatElement$AmPmText_equals = ($this, $o) => {
    let $amPmText;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $amPmText = $o;
        return ju_Arrays_equals($this.$ampms0, $amPmText.$ampms0);
    }
    return 0;
},
jt_DateFormatElement$AmPmText_hashCode = $this => {
    return ju_Arrays_hashCode($this.$ampms0);
};
function jt_DateFormatElement$NumericHour() {
    jt_DateFormatElement$Numeric.call(this);
    this.$limit1 = 0;
}
let jt_DateFormatElement$NumericHour__init_0 = ($this, $field, $length, $limit) => {
    jt_DateFormatElement$Numeric__init_0($this, $field, $length, 2);
    $this.$limit1 = $limit;
},
jt_DateFormatElement$NumericHour__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jt_DateFormatElement$NumericHour();
    jt_DateFormatElement$NumericHour__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jt_DateFormatElement$NumericHour_processBeforeFormat = ($this, $num) => {
    if (!$num)
        $num = $this.$limit1;
    return $num;
},
jt_DateFormatElement$NumericHour_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        if (!jt_DateFormatElement$Numeric_equals($this, $o))
            return 0;
        $that = $o;
        return $this.$limit1 != $that.$limit1 ? 0 : 1;
    }
    return 0;
},
jt_DateFormatElement$NumericHour_hashCode = $this => {
    let var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 2);
    var$2 = var$1.data;
    var$2[0] = jl_Integer_valueOf(jt_DateFormatElement$Numeric_hashCode($this));
    var$2[1] = jl_Integer_valueOf($this.$limit1);
    return ju_Arrays_hashCode(var$1);
},
jt_DateFormatElement$NumericWeekday = $rt_classWithoutFields(jt_DateFormatElement$Numeric),
jt_DateFormatElement$NumericWeekday_processBeforeFormat = ($this, $num) => {
    return $num == 1 ? 7 : $num - 1 | 0;
},
jt_DateFormatElement$GeneralTimezone = $rt_classWithoutFields(jt_DateFormatElement$BaseTimezone),
jt_DateFormatElement$GeneralTimezone_format = ($this, $date, $buffer) => {
    let $tz, $minutes, $hours, var$6, var$7, var$8;
    $tz = $date.$zone;
    if (jl_String_startsWith($tz.$id0, $rt_s(845))) {
        $minutes = $tz.$rawOffset / 60000 | 0;
        jl_AbstractStringBuilder_append0($buffer, $rt_s(845));
        if ($minutes >= 0)
            jl_AbstractStringBuilder_append2($buffer, 43);
        else {
            $minutes =  -$minutes | 0;
            jl_AbstractStringBuilder_append2($buffer, 45);
        }
        $hours = $minutes / 60 | 0;
        $minutes = $minutes % 60 | 0;
        jl_AbstractStringBuilder_append1($buffer, $hours / 10 | 0);
        jl_AbstractStringBuilder_append1($buffer, $hours % 10 | 0);
        jl_AbstractStringBuilder_append2($buffer, 58);
        jl_AbstractStringBuilder_append1($buffer, $minutes / 10 | 0);
        jl_AbstractStringBuilder_append1($buffer, $minutes % 10 | 0);
    } else {
        $date = $this.$locale2;
        var$6 = $date.$languageCode;
        var$7 = $date.$countryCode;
        $date = $tz.$id0;
        var$7 = otciu_CLDRHelper_getCode(var$6, var$7);
        if ((otciu_CLDRHelper_getTimeZoneLocalizationMap()).hasOwnProperty($rt_ustr(var$7)))
            var$6 = var$7;
        if (!(otciu_CLDRHelper_getTimeZoneLocalizationMap()).hasOwnProperty($rt_ustr(var$6)))
            $date = null;
        else {
            var$7 = (otciu_CLDRHelper_getTimeZoneLocalizationMap())[$rt_ustr(var$6)];
            $minutes = jl_String_indexOf0($date, 47);
            if ($minutes < 0)
                $date = null;
            else {
                var$8 = jl_String_substring($date, 0, $minutes);
                var$6 = jl_String_substring0($date, $minutes + 1 | 0);
                if (!var$7.timeZones.hasOwnProperty($rt_ustr(var$8)))
                    $date = null;
                else {
                    $date = var$7.timeZones[$rt_ustr(var$8)];
                    $date = !$date.hasOwnProperty($rt_ustr(var$6)) ? null : ($date[$rt_ustr(var$6)].value !== null ? $rt_str($date[$rt_ustr(var$6)].value) : null);
                }
            }
        }
        if ($date === null)
            $date = $tz.$id0;
        jl_AbstractStringBuilder_append0($buffer, $date);
    }
};
function jt_DateFormatElement$ConstantText() {
    jt_DateFormatElement.call(this);
    this.$textConstant = null;
}
let jt_DateFormatElement$ConstantText__init_0 = ($this, $textConstant) => {
    $this.$textConstant = $textConstant;
},
jt_DateFormatElement$ConstantText__init_ = var_0 => {
    let var_1 = new jt_DateFormatElement$ConstantText();
    jt_DateFormatElement$ConstantText__init_0(var_1, var_0);
    return var_1;
},
jt_DateFormatElement$ConstantText_format = ($this, $date, $buffer) => {
    jl_AbstractStringBuilder_append0($buffer, $this.$textConstant);
},
jt_DateFormatElement$ConstantText_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $that = $o;
        return ju_Objects_equals($this.$textConstant, $that.$textConstant);
    }
    return 0;
},
jt_DateFormatElement$ConstantText_hashCode = $this => {
    let var$1;
    var$1 = $rt_createArray(jl_Object, 1);
    var$1.data[0] = $this.$textConstant;
    return ju_Arrays_hashCode(var$1);
};
function jt_DateFormatElement$Year() {
    jt_DateFormatElement.call(this);
    this.$field = 0;
}
let jt_DateFormatElement$Year__init_ = ($this, $field) => {
    $this.$field = $field;
},
jt_DateFormatElement$Year__init_0 = var_0 => {
    let var_1 = new jt_DateFormatElement$Year();
    jt_DateFormatElement$Year__init_(var_1, var_0);
    return var_1;
},
jt_DateFormatElement$Year_format = ($this, $date, $buffer) => {
    let $number;
    $number = ju_Calendar_get($date, $this.$field);
    if ($number < 10)
        jl_AbstractStringBuilder_append1($buffer, $number);
    else {
        jl_AbstractStringBuilder_append2($buffer, ((($number % 100 | 0) / 10 | 0) + 48 | 0) & 65535);
        jl_AbstractStringBuilder_append2($buffer, (($number % 10 | 0) + 48 | 0) & 65535);
    }
},
jt_DateFormatElement$Year_equals = ($this, $o) => {
    let $year;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $year = $o;
        return $this.$field != $year.$field ? 0 : 1;
    }
    return 0;
},
jt_DateFormatElement$Year_hashCode = $this => {
    let var$1;
    var$1 = $rt_createArray(jl_Object, 1);
    var$1.data[0] = jl_Integer_valueOf($this.$field);
    return ju_Arrays_hashCode(var$1);
};
function jt_DateFormatElement$Iso8601Timezone() {
    jt_DateFormatElement.call(this);
    this.$size9 = 0;
}
let jt_DateFormatElement$Iso8601Timezone__init_ = ($this, $size) => {
    $this.$size9 = $size;
},
jt_DateFormatElement$Iso8601Timezone__init_0 = var_0 => {
    let var_1 = new jt_DateFormatElement$Iso8601Timezone();
    jt_DateFormatElement$Iso8601Timezone__init_(var_1, var_0);
    return var_1;
},
jt_DateFormatElement$Iso8601Timezone_format = ($this, $date, $buffer) => {
    let var$3, var$4, $minutes, $hours, var$7;
    var$3 = $date.$zone;
    var$4 = ju_Calendar_getTimeInMillis($date);
    $minutes = ju_IANATimeZone_getOffset(var$3, var$4) / 60000 | 0;
    if (!$minutes) {
        jl_AbstractStringBuilder_append2($buffer, 90);
        return;
    }
    if ($minutes > 0)
        jl_AbstractStringBuilder_append2($buffer, 43);
    else {
        $minutes =  -$minutes | 0;
        jl_AbstractStringBuilder_append2($buffer, 45);
    }
    $hours = $minutes / 60 | 0;
    var$7 = $minutes % 60 | 0;
    jl_AbstractStringBuilder_append1($buffer, $hours / 10 | 0);
    jl_AbstractStringBuilder_append1($buffer, $hours % 10 | 0);
    if ($this.$size9 >= 3)
        jl_AbstractStringBuilder_append2($buffer, 58);
    if ($this.$size9 > 1) {
        jl_AbstractStringBuilder_append1($buffer, var$7 / 10 | 0);
        jl_AbstractStringBuilder_append1($buffer, var$7 % 10 | 0);
    }
},
jt_DateFormatElement$Iso8601Timezone_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $that = $o;
        return $this.$size9 != $that.$size9 ? 0 : 1;
    }
    return 0;
},
jt_DateFormatElement$Iso8601Timezone_hashCode = $this => {
    let var$1;
    var$1 = $rt_createArray(jl_Object, 1);
    var$1.data[0] = jl_Integer_valueOf($this.$size9);
    return ju_Arrays_hashCode(var$1);
};
function jt_DateFormatElement$MonthText() {
    let a = this; jt_DateFormatElement.call(a);
    a.$months0 = null;
    a.$shortMonths0 = null;
    a.$abbreviated = 0;
}
let jt_DateFormatElement$MonthText__init_ = ($this, $symbols, $abbreviated) => {
    let var$3, var$4, var$5, var$6;
    if ($symbols.$months === null) {
        var$3 = $symbols.$locale0;
        var$4 = var$3.$languageCode;
        var$5 = var$3.$countryCode;
        if (otciu_CLDRHelper_$$metadata$$3 === null)
            otciu_CLDRHelper_$$metadata$$3 = otciu_CLDRHelper_getMonthMap$$create();
        $symbols.$months = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$3, var$4, var$5);
    }
    $this.$months0 = $symbols.$months.$clone0();
    if ($symbols.$shortMonths === null) {
        var$3 = $symbols.$locale0;
        var$5 = var$3.$languageCode;
        var$6 = var$3.$countryCode;
        if (otciu_CLDRHelper_$$metadata$$4 === null)
            otciu_CLDRHelper_$$metadata$$4 = otciu_CLDRHelper_getShortMonthMap$$create();
        $symbols.$shortMonths = otciu_CLDRHelper_resolveDateFormatSymbols(otciu_CLDRHelper_$$metadata$$4, var$5, var$6);
    }
    $this.$shortMonths0 = $symbols.$shortMonths.$clone0();
    $this.$abbreviated = $abbreviated;
},
jt_DateFormatElement$MonthText__init_0 = (var_0, var_1) => {
    let var_2 = new jt_DateFormatElement$MonthText();
    jt_DateFormatElement$MonthText__init_(var_2, var_0, var_1);
    return var_2;
},
jt_DateFormatElement$MonthText_format = ($this, $date, $buffer) => {
    let $month;
    $month = ju_Calendar_get($date, 2);
    jl_AbstractStringBuilder_append0($buffer, !$this.$abbreviated ? $this.$months0.data[$month] : $this.$shortMonths0.data[$month]);
},
jt_DateFormatElement$MonthText_equals = ($this, $o) => {
    let $monthText;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $monthText = $o;
        return $this.$abbreviated == $monthText.$abbreviated && ju_Arrays_equals($this.$months0, $monthText.$months0) && ju_Arrays_equals($this.$shortMonths0, $monthText.$shortMonths0) ? 1 : 0;
    }
    return 0;
},
jt_DateFormatElement$MonthText_hashCode = $this => {
    let var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 3);
    var$2 = var$1.data;
    var$2[0] = $this.$months0;
    var$2[1] = $this.$shortMonths0;
    var$2[2] = jl_Boolean_valueOf($this.$abbreviated);
    return ju_Arrays_hashCode(var$1);
},
jt_DateFormatElement$NumericMonth = $rt_classWithoutFields(jt_DateFormatElement$Numeric),
jt_DateFormatElement$NumericMonth__init_0 = ($this, $length) => {
    jt_DateFormatElement$Numeric__init_0($this, 2, $length, 2);
},
jt_DateFormatElement$NumericMonth__init_ = var_0 => {
    let var_1 = new jt_DateFormatElement$NumericMonth();
    jt_DateFormatElement$NumericMonth__init_0(var_1, var_0);
    return var_1;
},
jt_DateFormatElement$NumericMonth_processBeforeFormat = ($this, $num) => {
    return $num + 1 | 0;
};
function cbgm_Matrix3() {
    let a = this; jl_Object.call(a);
    a.$val0 = null;
    a.$tmp1 = null;
}
let cbgm_Matrix3__init_ = $this => {
    let var$1, var$2, var$3;
    var$1 = $rt_createFloatArray(9);
    var$2 = var$1.data;
    $this.$val0 = var$1;
    var$1 = $rt_createFloatArray(9);
    var$3 = var$1.data;
    $this.$tmp1 = var$1;
    var$3[8] = 1.0;
    var$2[0] = 1.0;
    var$2[1] = 0.0;
    var$2[2] = 0.0;
    var$2[3] = 0.0;
    var$2[4] = 1.0;
    var$2[5] = 0.0;
    var$2[6] = 0.0;
    var$2[7] = 0.0;
    var$2[8] = 1.0;
},
cbgm_Matrix3__init_0 = () => {
    let var_0 = new cbgm_Matrix3();
    cbgm_Matrix3__init_(var_0);
    return var_0;
},
otcit_DoubleSynthesizer = $rt_classWithoutFields(),
otcit_DoubleSynthesizer_mantissa10Table = null,
otcit_DoubleSynthesizer_exp10Table = null,
otcit_DoubleSynthesizer__init_ = $this => {
    return;
},
otcit_DoubleSynthesizer__init_0 = () => {
    let var_0 = new otcit_DoubleSynthesizer();
    otcit_DoubleSynthesizer__init_(var_0);
    return var_0;
},
otcit_DoubleSynthesizer_synthesizeDouble = ($mantissa, $exp, $negative) => {
    let $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $error, $correction, $binMantissaWithoutError, $cmp, $iee754;
    $indexInTable = 330 + $exp | 0;
    if (Long_ne($mantissa, Long_ZERO) && $indexInTable >= 0) {
        var$5 = otcit_DoubleSynthesizer_mantissa10Table.data;
        if ($indexInTable >= var$5.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
        $binExp = otcit_DoubleSynthesizer_exp10Table.data[$indexInTable];
        $binMantissaShift = (64 - jl_Long_numberOfLeadingZeros($binMantissa) | 0) - 58 | 0;
        $binMantissa = $binMantissaShift >= 0 ? Long_shru($binMantissa, $binMantissaShift) : Long_shl($binMantissa,  -$binMantissaShift | 0);
        $binExp = $binExp + $binMantissaShift | 0;
        if ($binExp >= 2047)
            return !$negative ? Infinity : (-Infinity);
        $error = Long_lo(Long_and($binMantissa, Long_fromInt(31)));
        $correction = 16;
        if (jl_Math_abs0($error - 16 | 0) <= 1) {
            $binMantissaWithoutError = Long_and($binMantissa, Long_fromInt(-32));
            $cmp = jl_Long_compareUnsigned(Long_sub($mantissa, otcit_DoubleSynthesizer_calcDecMantissa($binMantissaWithoutError, 32, $indexInTable, $binExp)), Long_sub(otcit_DoubleSynthesizer_calcDecMantissa(Long_add($binMantissaWithoutError, Long_fromInt(32)), 32, $indexInTable, $binExp), $mantissa));
            if ($cmp < 0)
                $correction =  -$error | 0;
            else if ($cmp > 0)
                $correction = 32 - $error | 0;
        }
        $mantissa = Long_add($binMantissa, Long_fromInt($correction));
        if (Long_ne(Long_and($mantissa, Long_create(0, 4227858432)), Long_ZERO)) {
            $mantissa = Long_shru($mantissa, 1);
            $binExp = $binExp + 1 | 0;
        }
        if ($binExp <= 0) {
            $mantissa = Long_shr($mantissa, jl_Math_min(( -$binExp | 0) + 1 | 0, 64));
            $binExp = 0;
        }
        $iee754 = Long_or(Long_and(Long_shru($mantissa, 5), Long_create(4294967295, 1048575)), Long_shl(Long_fromInt($binExp), 52));
        if ($negative)
            $iee754 = Long_xor($iee754, Long_create(0, 2147483648));
        return $rt_longBitsToDouble($iee754);
    }
    return $rt_longBitsToDouble((!$negative ? Long_ZERO : Long_create(0, 2147483648)));
},
otcit_DoubleSynthesizer_calcDecMantissa = ($mantissa, $lowerBit, $indexInTable, $binExp) => {
    let $half, $shift, $decMantissa, $lowerPos, $decMantissaHi, $upperPos, $posCmp;
    $half = $lowerBit >>> 1 | 0;
    $shift = 7 - (otcit_DoubleAnalyzer_exp10Table.data[$indexInTable] - $binExp | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $lowerPos = Long_fromInt($half);
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight(Long_add($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift));
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    return $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
},
otcit_DoubleSynthesizer__clinit_ = () => {
    otcit_DoubleSynthesizer_mantissa10Table = $rt_createLongArrayFromData([Long_create(136053384, 4203730336), Long_create(85033365, 2627331460), Long_create(106291706, 3284164325), Long_create(1206606457, 4105205406), Long_create(3975354508, 2565753378), Long_create(2821709486, 3207191723), Long_create(2453395034, 4008989654), Long_create(459630072, 2505618534), Long_create(2722021238, 3132023167), Long_create(2328784724, 3915028959), Long_create(3066103188, 2446893099), Long_create(2758887162, 3058616374),
    Long_create(1301125304, 3823270468), Long_create(2960686963, 2389544042), Long_create(1553375056, 2986930053), Long_create(3015460644, 3733662566), Long_create(810921078, 2333539104), Long_create(1013651348, 2916923880), Long_create(1267064185, 3646154850), Long_create(1865656940, 2278846781), Long_create(3405812998, 2848558476), Long_create(4257266248, 3560698095), Long_create(4271404141, 2225436309), Long_create(2118029704, 2781795387), Long_create(1573795306, 3477244234), Long_create(2057363890, 2173277646),
    Long_create(424221215, 2716597058), Long_create(2677760167, 3395746322), Long_create(1199716561, 4244682903), Long_create(2360435586, 2652926814), Long_create(803060835, 3316158518), Long_create(3151309692, 4145198147), Long_create(1432697645, 2590748842), Long_create(3938355705, 3238436052), Long_create(627977335, 4048045066), Long_create(1466227658, 2530028166), Long_create(3980268221, 3162535207), Long_create(3901593452, 3953169009), Long_create(827883171, 2470730631), Long_create(4256079436, 3088413288),
    Long_create(1025131999, 3860516611), Long_create(103836588, 2412822882), Long_create(2277279383, 3016028602), Long_create(699115580, 3770035753), Long_create(3121301798, 2356272345), Long_create(680401775, 2945340432), Long_create(850502219, 3681675540), Long_create(2679047535, 2301047212), Long_create(3348809418, 2876309015), Long_create(3112269949, 3595386269), Long_create(2482039630, 2247116418), Long_create(955065890, 2808895523), Long_create(120090538, 3511119404), Long_create(2222540234, 2194449627),
    Long_create(1704433469, 2743062034), Long_create(4278025484, 3428827542), Long_create(3200048207, 4286034428), Long_create(4147513777, 2678771517), Long_create(1963166750, 3348464397), Long_create(3527700261, 4185580496), Long_create(2204812663, 2615987810), Long_create(608532181, 3269984763), Long_create(3981890698, 4087480953), Long_create(878068951, 2554675596), Long_create(1097586188, 3193344495), Long_create(298240911, 3991680619), Long_create(3944496953, 2494800386), Long_create(2783137544, 3118500483),
    Long_create(2405180106, 3898125604), Long_create(3650721214, 2436328502), Long_create(2415917870, 3045410628), Long_create(3019897337, 3806763285), Long_create(2424306748, 2379227053), Long_create(4104125259, 2974033816), Long_create(835189277, 3717542271), Long_create(2132606034, 2323463919), Long_create(1592015719, 2904329899), Long_create(916277825, 3630412374), Long_create(3793899112, 2269007733), Long_create(1521148418, 2836259667), Long_create(827693699, 3545324584), Long_create(517308562, 2215827865),
    Long_create(1720377526, 2769784831), Long_create(1076730084, 3462231039), Long_create(2283569038, 2163894399), Long_create(1780719474, 2704867999), Long_create(1152157519, 3381084999), Long_create(366455074, 4226356249), Long_create(2913388981, 2641472655), Long_create(2567994403, 3301840819), Long_create(2136251179, 4127301024), Long_create(1335156987, 2579563140), Long_create(1668946234, 3224453925), Long_create(3159924616, 4030567406), Long_create(901211061, 2519104629), Long_create(2200255651, 3148880786),
    Long_create(602835915, 3936100983), Long_create(1987385183, 2460063114), Long_create(336747831, 3075078893), Long_create(1494676613, 3843848616), Long_create(934172883, 2402405385), Long_create(2241457928, 3003006731), Long_create(1728080585, 3753758414), Long_create(6308542, 2346099009), Long_create(1081627501, 2932623761), Long_create(2425776201, 3665779701), Long_create(2052981037, 2291112313), Long_create(3639968121, 2863890391), Long_create(3476218327, 3579862989), Long_create(2709507366, 2237414368),
    Long_create(3386884208, 2796767960), Long_create(4233605260, 3495959950), Long_create(1572261463, 2184974969), Long_create(3039068653, 2731218711), Long_create(2725093993, 3414023389), Long_create(185142019, 4267529237), Long_create(652584674, 2667205773), Long_create(1889472666, 3334007216), Long_create(2361840833, 4167509020), Long_create(3623634168, 2604693137), Long_create(1308317239, 3255866422), Long_create(3782880196, 4069833027), Long_create(1827429211, 2543645642), Long_create(136802865, 3179557053),
    Long_create(1244745406, 3974446316), Long_create(2925449527, 2484028947), Long_create(2583070084, 3105036184), Long_create(3228837605, 3881295230), Long_create(944281679, 2425809519), Long_create(106610275, 3032261899), Long_create(3354488316, 3790327373), Long_create(2633426109, 2368954608), Long_create(3291782637, 2961193260), Long_create(4114728296, 3701491575), Long_create(4182317921, 2313432234), Long_create(3080413753, 2891790293), Long_create(629291719, 3614737867), Long_create(4151403709, 2259211166),
    Long_create(3041770988, 2824013958), Long_create(1654730087, 3530017448), Long_create(1034206304, 2206260905), Long_create(2366499704, 2757826131), Long_create(1884382806, 3447282664), Long_create(1177739254, 2154551665), Long_create(2545915892, 2693189581), Long_create(4256136688, 3366486976), Long_create(1025203564, 4208108721), Long_create(3325106788, 2630067950), Long_create(2008899837, 3287584938), Long_create(363641148, 4109481173), Long_create(764146629, 2568425733), Long_create(2028925111, 3210532166),
    Long_create(388672741, 4013165208), Long_create(242920463, 2508228255), Long_create(3524876051, 3135285318), Long_create(2258611415, 3919106648), Long_create(1411632134, 2449441655), Long_create(690798344, 3061802069), Long_create(1937239754, 3827252586), Long_create(2284516670, 2392032866), Long_create(708162190, 2990041083), Long_create(4106428209, 3737551353), Long_create(955904895, 2335969596), Long_create(1194881119, 2919961995), Long_create(419859574, 3649952494), Long_create(3483637706, 2281220308),
    Long_create(59579836, 2851525386), Long_create(2221958443, 3564406732), Long_create(3536207675, 2227754207), Long_create(3346517770, 2784692759), Long_create(3109405388, 3480865949), Long_create(2480249280, 2175541218), Long_create(952827952, 2719426523), Long_create(117293116, 3399283154), Long_create(2294100043, 4249103942), Long_create(360070703, 2655689964), Long_create(450088378, 3319612455), Long_create(3783835945, 4149515568), Long_create(2364897466, 2593447230), Long_create(808638184, 3241809038),
    Long_create(3158281378, 4052261297), Long_create(363313125, 2532663311), Long_create(3675366878, 3165829138), Long_create(2446724950, 3957286423), Long_create(3139815830, 2473304014), Long_create(1777286139, 3091630018), Long_create(74124026, 3864537523), Long_create(3804423900, 2415335951), Long_create(3681788051, 3019169939), Long_create(3528493240, 3773962424), Long_create(2205308275, 2358726515), Long_create(1682893520, 2948408144), Long_create(2103616900, 3685510180), Long_create(3462244210, 2303443862),
    Long_create(2180321615, 2879304828), Long_create(2725402019, 3599131035), Long_create(1166505350, 2249456897), Long_create(2531873511, 2811821121), Long_create(4238583713, 3514776401), Long_create(1038502085, 2196735251), Long_create(224385782, 2745919064), Long_create(280482227, 3432398830), Long_create(2498086432, 4290498537), Long_create(4245658580, 2681561585), Long_create(2085847753, 3351951982), Long_create(459826043, 4189939978), Long_create(1361133101, 2618712486), Long_create(3848900024, 3273390607),
    Long_create(3737383206, 4091738259), Long_create(1798993592, 2557336412), Long_create(2248741990, 3196670515), Long_create(1737185663, 3995838144), Long_create(1085741040, 2497398840), Long_create(1357176300, 3121748550), Long_create(3843954022, 3902185687), Long_create(4013084000, 2438866054), Long_create(2868871352, 3048582568), Long_create(3586089190, 3810728210), Long_create(3315047568, 2381705131), Long_create(3070067636, 2977131414), Long_create(1690100897, 3721414268), Long_create(3203796708, 2325883917),
    Long_create(783520414, 2907354897), Long_create(2053142341, 3634193621), Long_create(1820084875, 2271371013), Long_create(3348847918, 2839213766), Long_create(2038576249, 3549017208), Long_create(1274110156, 2218135755), Long_create(518895871, 2772669694), Long_create(2796103486, 3465837117), Long_create(2284435591, 2166148198), Long_create(708060841, 2707685248), Long_create(885076051, 3384606560), Long_create(1106345064, 4230758200), Long_create(691465665, 2644223875), Long_create(4085557553, 3305279843),
    Long_create(4033205117, 4131599804), Long_create(373269550, 2582249878), Long_create(2614070586, 3227812347), Long_create(2193846408, 4034765434), Long_create(2444895829, 2521728396), Long_create(3056119787, 3152160495), Long_create(2746407909, 3940200619), Long_create(1179634031, 2462625387), Long_create(400800715, 3078281734), Long_create(2648484542, 3847852167), Long_create(3265915575, 2404907604), Long_create(4082394468, 3006134505), Long_create(1881767613, 3757668132), Long_create(3323588406, 2348542582),
    Long_create(2007001860, 2935678228), Long_create(2508752325, 3669597785), Long_create(4252324763, 2293498615), Long_create(4241664130, 2866873269), Long_create(2080854690, 3583591587), Long_create(763663269, 2239744742), Long_create(3102062735, 2799680927), Long_create(2803836594, 3499601159), Long_create(3363010608, 2187250724), Long_create(4203763259, 2734063405), Long_create(2033478602, 3417579257), Long_create(3615590077, 4271974071), Long_create(3870356534, 2669983794), Long_create(2690462020, 3337479743),
    Long_create(2289335700, 4171849679), Long_create(3041447549, 2607406049), Long_create(580583964, 3259257562), Long_create(2873213603, 4074071952), Long_create(1795758502, 2546294970), Long_create(97214479, 3182868713), Long_create(1195259923, 3978585891), Long_create(210166540, 2486616182), Long_create(2410191823, 3108270227), Long_create(1938997955, 3885337784), Long_create(1211873722, 2428336115), Long_create(441100328, 3035420144), Long_create(551375410, 3794275180), Long_create(2492093279, 2371421987),
    Long_create(2041374775, 2964277484), Long_create(2551718469, 3705346855), Long_create(3205436779, 2315841784), Long_create(4006795974, 2894802230), Long_create(2861011319, 3618502788), Long_create(3935615723, 2261564242), Long_create(2772036005, 2826955303), Long_create(2391303183, 3533694129), Long_create(4178919049, 2208558830), Long_create(3076165163, 2760698538), Long_create(1697722806, 3450873173), Long_create(1597947666, 2156795733), Long_create(3071176406, 2695994666), Long_create(1691486860, 3369993333),
    Long_create(3188100399, 4212491666), Long_create(3066304573, 2632807291), Long_create(2759138893, 3291009114), Long_create(1301439968, 4113761393), Long_create(3497754540, 2571100870), Long_create(2224709527, 3213876088), Long_create(2780886909, 4017345110), Long_create(664312494, 2510840694), Long_create(2977874265, 3138550867), Long_create(2648601008, 3923188584), Long_create(1655375630, 2451992865), Long_create(3142961361, 3064991081), Long_create(707476230, 3831238852), Long_create(2589656291, 2394524282),
    Long_create(1089586716, 2993155353), Long_create(2435725219, 3741444191), Long_create(3132940998, 2338402619), Long_create(2842434424, 2923003274), Long_create(1405559382, 3653754093), Long_create(1415345525, 2283596308), Long_create(1769181907, 2854495385), Long_create(3285219208, 3568119231), Long_create(3663874741, 2230074519), Long_create(3506101602, 2787593149), Long_create(1161401530, 3484491437), Long_create(1262746869, 2177807148), Long_create(1578433586, 2722258935), Long_create(899300158, 3402823669),
    Long_create(2197867022, 4253529586), Long_create(2447408712, 2658455991), Long_create(1985519067, 3323069989), Long_create(3555640657, 4153837486), Long_create(1148533587, 2596148429), Long_create(2509408807, 3245185536), Long_create(3136761009, 4056481920), Long_create(1960475631, 2535301200), Long_create(2450594539, 3169126500), Long_create(3063243173, 3961408125), Long_create(2451397895, 2475880078), Long_create(916763721, 3094850098), Long_create(3293438299, 3868562622), Long_create(984657113, 2417851639),
    Long_create(157079567, 3022314549), Long_create(1270091283, 3777893186), Long_create(1867548876, 2361183241), Long_create(3408177919, 2951479051), Long_create(3186480575, 3689348814), Long_create(917808535, 2305843009), Long_create(2221002493, 2882303761), Long_create(3849994940, 3602879701), Long_create(2943117750, 2251799813), Long_create(457671715, 2814749767), Long_create(3793315116, 3518437208), Long_create(2370821947, 2199023255), Long_create(1889785610, 2748779069), Long_create(3435973837, 3435973836),
    Long_create(0, 2147483648), Long_create(0, 2684354560), Long_create(0, 3355443200), Long_create(0, 4194304000), Long_create(0, 2621440000), Long_create(0, 3276800000), Long_create(0, 4096000000), Long_create(0, 2560000000), Long_create(0, 3200000000), Long_create(0, 4000000000), Long_create(0, 2500000000), Long_create(0, 3125000000), Long_create(0, 3906250000), Long_create(0, 2441406250), Long_create(2147483648, 3051757812), Long_create(2684354560, 3814697265), Long_create(67108864, 2384185791), Long_create(3305111552, 2980232238),
    Long_create(1983905792, 3725290298), Long_create(2313682944, 2328306436), Long_create(2892103680, 2910383045), Long_create(393904128, 3637978807), Long_create(1856802816, 2273736754), Long_create(173519872, 2842170943), Long_create(3438125312, 3552713678), Long_create(1075086496, 2220446049), Long_create(2417599944, 2775557561), Long_create(4095741754, 3469446951), Long_create(4170451332, 2168404344), Long_create(918096869, 2710505431), Long_create(73879263, 3388131789), Long_create(1166090902, 4235164736),
    Long_create(728806814, 2646977960), Long_create(911008517, 3308722450), Long_create(3286244295, 4135903062), Long_create(980160860, 2584939414), Long_create(3372684723, 3231174267), Long_create(3142114080, 4038967834), Long_create(3037563124, 2524354896), Long_create(3796953905, 3155443620), Long_create(451225085, 3944304526), Long_create(3503241150, 2465190328), Long_create(84084142, 3081487911), Long_create(3326330649, 3851859888), Long_create(2078956656, 2407412430), Long_create(451212172, 3009265538),
    Long_create(2711498863, 3761581922), Long_create(2768428613, 2350988701), Long_create(239310295, 2938735877), Long_create(1372879692, 3673419846), Long_create(4079275280, 2295887403), Long_create(4025352276, 2869859254), Long_create(2884206696, 3587324068), Long_create(3950112833, 2242077542), Long_create(2790157394, 2802596928), Long_create(3487696742, 3503246160), Long_create(2179810464, 2189528850), Long_create(577279432, 2736911063), Long_create(3942824762, 3421138828), Long_create(633563656, 4276423536),
    Long_create(395977285, 2672764710), Long_create(2642455254, 3340955887), Long_create(2229327244, 4176194859), Long_create(856458615, 2610121787), Long_create(4291798741, 3262652233), Long_create(2143522955, 4078315292), Long_create(3487185495, 2548947057), Long_create(1137756396, 3186183822), Long_create(3569679143, 3982729777), Long_create(620436729, 2489206111), Long_create(3996771383, 3111507638), Long_create(2848480580, 3889384548), Long_create(3927784011, 2430865342), Long_create(2762246365, 3038581678),
    Long_create(1305324309, 3798227098), Long_create(1889569517, 2373891936), Long_create(2361961896, 2967364920), Long_create(2952452370, 3709206150), Long_create(771540907, 2318253844), Long_create(964426134, 2897817305), Long_create(2279274492, 3622271631), Long_create(3035159293, 2263919769), Long_create(572723645, 2829899712), Long_create(715904556, 3537374640), Long_create(447440347, 2210859150), Long_create(2706784082, 2763573937), Long_create(162254631, 3454467422), Long_create(3322634616, 2159042138),
    Long_create(2005809622, 2698802673), Long_create(3581003852, 3373503341), Long_create(1255029343, 4216879177), Long_create(3468747899, 2635549485), Long_create(1114709402, 3294436857), Long_create(2467128577, 4118046071), Long_create(3152568096, 2573778794), Long_create(1793226473, 3217223493), Long_create(3315274915, 4021529366), Long_create(998304998, 2513455854), Long_create(3395364895, 3141819817), Long_create(1022980647, 3927274772), Long_create(2786846552, 2454546732), Long_create(3483558190, 3068183415),
    Long_create(3280705914, 3835229269), Long_create(2587312108, 2397018293), Long_create(12914663, 2996272867), Long_create(3237368801, 3745341083), Long_create(1486484589, 2340838177), Long_create(2931847560, 2926047721), Long_create(443583978, 3657559652), Long_create(2424723634, 2285974782), Long_create(883420895, 2857468478), Long_create(3251759766, 3571835597), Long_create(2569220766, 2232397248), Long_create(3211525958, 2790496560), Long_create(4014407447, 3488120700), Long_create(361521006, 2180075438),
    Long_create(2599384906, 2725094297), Long_create(28005660, 3406367872), Long_create(35007075, 4257959840), Long_create(21879422, 2661224900), Long_create(27349278, 3326531125), Long_create(1107928421, 4158163906), Long_create(1766197087, 2598852441), Long_create(3281488183, 3248565551), Long_create(3028118405, 4060706939), Long_create(1355703091, 2537941837), Long_create(2768370688, 3172427296), Long_create(3460463360, 3965534120), Long_create(2162789600, 2478458825), Long_create(3777228824, 3098073531),
    Long_create(3647794206, 3872591914), Long_create(3353613203, 2420369946), Long_create(2044532855, 3025462433), Long_create(3629407893, 3781828041), Long_create(657767197, 2363642526), Long_create(2969692644, 2954553157), Long_create(490890333, 3693191447), Long_create(1917419194, 2308244654), Long_create(249290345, 2885305818), Long_create(2459096579, 3606632272), Long_create(1536935362, 2254145170), Long_create(4068652851, 2817681462), Long_create(2938332415, 3522101828), Long_create(3983941407, 2201313642),
    Long_create(2832443111, 2751642053), Long_create(319328417, 3439552567), Long_create(1810192997, 2149720354), Long_create(115257598, 2687150443), Long_create(3365297469, 3358938053), Long_create(985396365, 4198672567), Long_create(2226485464, 2624170354), Long_create(635623182, 3280212943), Long_create(4015754449, 4100266178), Long_create(3583588355, 2562666361), Long_create(1258259972, 3203332952), Long_create(1572824965, 4004166190), Long_create(4204241075, 2502603868), Long_create(960334048, 3128254836),
    Long_create(1200417559, 3910318545), Long_create(3434615535, 2443949090), Long_create(2145785770, 3054936363), Long_create(1608490389, 3818670454), Long_create(4226531965, 2386669033), Long_create(2061939484, 2983336292), Long_create(2577424355, 3729170365), Long_create(2147761134, 2330731478), Long_create(537217770, 2913414348), Long_create(671522212, 3641767935), Long_create(2030314119, 2276104959), Long_create(1464150824, 2845131199), Long_create(756446706, 3556413999), Long_create(2083391927, 2222758749),
    Long_create(3677981733, 2778448436), Long_create(302509871, 3473060546), Long_create(1262810493, 2170662841), Long_create(2652254940, 2713328551), Long_create(2241576851, 3391660689), Long_create(3875712888, 4239575861), Long_create(2959191467, 2649734913), Long_create(477763862, 3312168642), Long_create(2744688476, 4140210802), Long_create(2789172121, 2587631751), Long_create(2412723328, 3234539689), Long_create(4089645983, 4043174611), Long_create(2019157828, 2526984132), Long_create(2523947285, 3158730165),
    Long_create(4228675930, 3948412706), Long_create(3716664280, 2467757941), Long_create(1424604878, 3084697427), Long_create(707014274, 3855871784), Long_create(441883921, 2409919865), Long_create(1626096725, 3012399831), Long_create(958879083, 3765499789), Long_create(1136170339, 2353437368), Long_create(1420212923, 2941796710), Long_create(3922749802, 3677245887), Long_create(4062331362, 2298278679), Long_create(4004172379, 2872848349), Long_create(1783990002, 3591060437), Long_create(1651864663, 2244412773),
    Long_create(3138572653, 2805515966), Long_create(1775732168, 3506894958), Long_create(36090781, 2191809349), Long_create(1118855300, 2739761686), Long_create(3546052773, 3424702107), Long_create(3358824142, 4280877634), Long_create(3173006913, 2675548521), Long_create(745033169, 3344435652), Long_create(931291462, 4180544565), Long_create(1118928076, 2612840353), Long_create(2472401918, 3266050441), Long_create(4164244222, 4082563051), Long_create(2065781727, 2551601907), Long_create(1508485334, 3189502384),
    Long_create(1885606668, 3986877980), Long_create(3325987816, 2491798737), Long_create(936259297, 3114748422), Long_create(3317807770, 3893435527), Long_create(3684242592, 2433397204), Long_create(310335944, 3041746506), Long_create(2535403578, 3802183132), Long_create(3732110884, 2376364457), Long_create(1443913133, 2970455572), Long_create(1804891417, 3713069465), Long_create(3812411696, 2320668415), Long_create(3691772795, 2900835519), Long_create(3540974170, 3626044399), Long_create(3823721592, 2266277749),
    Long_create(1558426518, 2832847187), Long_create(874291324, 3541058984), Long_create(546432078, 2213161865), Long_create(1756781921, 2766452331), Long_create(1122235577, 3458065414), Long_create(3922622708, 2161290883), Long_create(3829536561, 2701613604), Long_create(491953405, 3377017006), Long_create(2762425404, 4221271257), Long_create(115903142, 2638294536), Long_create(144878927, 3297868170), Long_create(2328582307, 4122335212), Long_create(3602847590, 2576459507), Long_create(3429817663, 3220574384),
    Long_create(4287272079, 4025717980), Long_create(532061401, 2516073738), Long_create(2812560400, 3145092172), Long_create(3515700500, 3931365215), Long_create(3807925548, 2457103259), Long_create(3686165111, 3071379074), Long_create(2460222741, 3839223843), Long_create(1000768301, 2399514902), Long_create(3398444024, 2999393627), Long_create(3174313207, 3749242034), Long_create(3057687578, 2343276271), Long_create(2748367649, 2929095339), Long_create(2361717737, 3661369174), Long_create(402331761, 2288355734),
    Long_create(2650398350, 2860444667), Long_create(2239256113, 3575555834), Long_create(2473276895, 2234722396), Long_create(3091596119, 2793402995), Long_create(2790753324, 3491753744), Long_create(1744220828, 2182346090), Long_create(32792387, 2727932613), Long_create(1114732307, 3409915766), Long_create(3540899032, 4262394707), Long_create(1676190983, 2663996692), Long_create(2095238729, 3329995865), Long_create(3692790235, 4162494831), Long_create(3918606633, 2601559269), Long_create(1677032819, 3251949087),
    Long_create(1022549200, 4064936359), Long_create(2249705986, 2540585224), Long_create(2812132482, 3175731530), Long_create(1367681955, 3969664413), Long_create(1391672134, 2481040258), Long_create(3887073815, 3101300322), Long_create(2711358621, 3876625403), Long_create(1157728226, 2422890877), Long_create(2520902107, 3028613596), Long_create(3151127633, 3785766995), Long_create(1432583859, 2366104372), Long_create(1790729824, 2957630465), Long_create(3312154103, 3697038081), Long_create(459483579, 2310648801),
    Long_create(1648096297, 2888311001), Long_create(3133862196, 3610388751), Long_create(3569276608, 2256492969), Long_create(1240370288, 2820616212), Long_create(1550462860, 3525770265), Long_create(3653393848, 2203606415), Long_create(3493000486, 2754508019), Long_create(3292508783, 3443135024), Long_create(2057817989, 2151959390), Long_create(424788839, 2689949238), Long_create(2678469697, 3362436547), Long_create(2274345297, 4203045684), Long_create(3568949458, 2626903552), Long_create(166219527, 3283629441),
    Long_create(1281516233, 4104536801), Long_create(3485302206, 2565335500), Long_create(61660461, 3206669376), Long_create(77075576, 4008336720), Long_create(48172235, 2505210450), Long_create(2207698942, 3131513062), Long_create(612140029, 3914391328), Long_create(382587518, 2446494580), Long_create(478234398, 3058118225), Long_create(1671534821, 3822647781), Long_create(1581580175, 2389154863), Long_create(903233395, 2986443579), Long_create(55299920, 3733054474), Long_create(1108304274, 2333159046)]);
    otcit_DoubleSynthesizer_exp10Table = $rt_createShortArrayFromData([(-76), (-72), (-69), (-66), (-62), (-59), (-56), (-52), (-49), (-46), (-42), (-39), (-36), (-32), (-29), (-26), (-22), (-19), (-16), (-12), (-9), (-6), (-2), 1, 4, 8, 11, 14, 17, 21, 24, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 77, 81, 84, 87, 91, 94, 97, 101, 104, 107, 110, 114, 117, 120, 124, 127, 130, 134, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 180, 184, 187, 190, 194, 197, 200, 204, 207, 210,
    213, 217, 220, 223, 227, 230, 233, 237, 240, 243, 247, 250, 253, 257, 260, 263, 267, 270, 273, 277, 280, 283, 287, 290, 293, 297, 300, 303, 306, 310, 313, 316, 320, 323, 326, 330, 333, 336, 340, 343, 346, 350, 353, 356, 360, 363, 366, 370, 373, 376, 380, 383, 386, 390, 393, 396, 400, 403, 406, 409, 413, 416, 419, 423, 426, 429, 433, 436, 439, 443, 446, 449, 453, 456, 459, 463, 466, 469, 473, 476, 479, 483, 486, 489, 493, 496, 499, 502, 506, 509, 512, 516, 519, 522, 526, 529, 532, 536, 539, 542, 546, 549,
    552, 556, 559, 562, 566, 569, 572, 576, 579, 582, 586, 589, 592, 595, 599, 602, 605, 609, 612, 615, 619, 622, 625, 629, 632, 635, 639, 642, 645, 649, 652, 655, 659, 662, 665, 669, 672, 675, 679, 682, 685, 689, 692, 695, 698, 702, 705, 708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 742, 745, 748, 752, 755, 758, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 805, 808, 811, 815, 818, 821, 825, 828, 831, 835, 838, 841, 845, 848, 851, 855, 858, 861, 865, 868, 871, 875, 878, 881, 885, 888,
    891, 894, 898, 901, 904, 908, 911, 914, 918, 921, 924, 928, 931, 934, 938, 941, 944, 948, 951, 954, 958, 961, 964, 968, 971, 974, 978, 981, 984, 987, 991, 994, 997, 1001, 1004, 1007, 1011, 1014, 1017, 1021, 1024, 1027, 1031, 1034, 1037, 1041, 1044, 1047, 1051, 1054, 1057, 1061, 1064, 1067, 1071, 1074, 1077, 1081, 1084, 1087, 1090, 1094, 1097, 1100, 1104, 1107, 1110, 1114, 1117, 1120, 1124, 1127, 1130, 1134, 1137, 1140, 1144, 1147, 1150, 1154, 1157, 1160, 1164, 1167, 1170, 1174, 1177, 1180, 1183, 1187, 1190,
    1193, 1197, 1200, 1203, 1207, 1210, 1213, 1217, 1220, 1223, 1227, 1230, 1233, 1237, 1240, 1243, 1247, 1250, 1253, 1257, 1260, 1263, 1267, 1270, 1273, 1276, 1280, 1283, 1286, 1290, 1293, 1296, 1300, 1303, 1306, 1310, 1313, 1316, 1320, 1323, 1326, 1330, 1333, 1336, 1340, 1343, 1346, 1350, 1353, 1356, 1360, 1363, 1366, 1370, 1373, 1376, 1379, 1383, 1386, 1389, 1393, 1396, 1399, 1403, 1406, 1409, 1413, 1416, 1419, 1423, 1426, 1429, 1433, 1436, 1439, 1443, 1446, 1449, 1453, 1456, 1459, 1463, 1466, 1469, 1472,
    1476, 1479, 1482, 1486, 1489, 1492, 1496, 1499, 1502, 1506, 1509, 1512, 1516, 1519, 1522, 1526, 1529, 1532, 1536, 1539, 1542, 1546, 1549, 1552, 1556, 1559, 1562, 1566, 1569, 1572, 1575, 1579, 1582, 1585, 1589, 1592, 1595, 1599, 1602, 1605, 1609, 1612, 1615, 1619, 1622, 1625, 1629, 1632, 1635, 1639, 1642, 1645, 1649, 1652, 1655, 1659, 1662, 1665, 1668, 1672, 1675, 1678, 1682, 1685, 1688, 1692, 1695, 1698, 1702, 1705, 1708, 1712, 1715, 1718, 1722, 1725, 1728, 1732, 1735, 1738, 1742, 1745, 1748, 1752, 1755,
    1758, 1761, 1765, 1768, 1771, 1775, 1778, 1781, 1785, 1788, 1791, 1795, 1798, 1801, 1805, 1808, 1811, 1815, 1818, 1821, 1825, 1828, 1831, 1835, 1838, 1841, 1845, 1848, 1851, 1855, 1858, 1861, 1864, 1868, 1871, 1874, 1878, 1881, 1884, 1888, 1891, 1894, 1898, 1901, 1904, 1908, 1911, 1914, 1918, 1921, 1924, 1928, 1931, 1934, 1938, 1941, 1944, 1948, 1951, 1954, 1957, 1961, 1964, 1967, 1971, 1974, 1977, 1981, 1984, 1987, 1991, 1994, 1997, 2001, 2004, 2007, 2011, 2014, 2017, 2021, 2024, 2027, 2031, 2034, 2037,
    2041, 2044, 2047, 2051, 2054, 2057, 2060, 2064, 2067, 2070, 2074, 2077, 2080, 2084, 2087, 2090, 2094, 2097, 2100, 2104, 2107, 2110, 2114]);
};
function jm_BigInteger() {
    let a = this; jl_Number.call(a);
    a.$digits = null;
    a.$numberLength = 0;
    a.$sign0 = 0;
    a.$firstNonzeroDigit = 0;
}
let jm_BigInteger_ZERO = null,
jm_BigInteger_ONE = null,
jm_BigInteger_TWO = null,
jm_BigInteger_TEN = null,
jm_BigInteger_MINUS_ONE = null,
jm_BigInteger_SMALL_VALUES = null,
jm_BigInteger_TWO_POWS = null,
jm_BigInteger__init_3 = ($this, $sign, $value) => {
    let var$3;
    $this.$firstNonzeroDigit = (-2);
    $this.$sign0 = $sign;
    $this.$numberLength = 1;
    var$3 = $rt_createIntArray(1);
    var$3.data[0] = $value;
    $this.$digits = var$3;
},
jm_BigInteger__init_0 = (var_0, var_1) => {
    let var_2 = new jm_BigInteger();
    jm_BigInteger__init_3(var_2, var_0, var_1);
    return var_2;
},
jm_BigInteger__init_4 = ($this, $sign, $numberLength, $digits) => {
    $this.$firstNonzeroDigit = (-2);
    $this.$sign0 = $sign;
    $this.$numberLength = $numberLength;
    $this.$digits = $digits;
},
jm_BigInteger__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jm_BigInteger();
    jm_BigInteger__init_4(var_3, var_0, var_1, var_2);
    return var_3;
},
jm_BigInteger__init_2 = ($this, $sign, $val) => {
    let var$3;
    $this.$firstNonzeroDigit = (-2);
    $this.$sign0 = $sign;
    if (Long_eq(Long_and($val, Long_create(0, 4294967295)), Long_ZERO)) {
        $this.$numberLength = 1;
        var$3 = $rt_createIntArray(1);
        var$3.data[0] = Long_lo($val);
        $this.$digits = var$3;
    } else {
        $this.$numberLength = 2;
        $this.$digits = $rt_createIntArrayFromData([Long_lo($val), Long_hi($val)]);
    }
},
jm_BigInteger__init_1 = (var_0, var_1) => {
    let var_2 = new jm_BigInteger();
    jm_BigInteger__init_2(var_2, var_0, var_1);
    return var_2;
},
jm_BigInteger_valueOf = $val => {
    if (Long_lt($val, Long_ZERO)) {
        if (Long_eq($val, Long_fromInt(-1)))
            return jm_BigInteger_MINUS_ONE;
        return jm_BigInteger__init_1((-1), Long_neg($val));
    }
    if (Long_gt($val, Long_fromInt(10)))
        return jm_BigInteger__init_1(1, $val);
    return jm_BigInteger_SMALL_VALUES.data[Long_lo($val)];
},
jm_BigInteger_abs = $this => {
    if ($this.$sign0 < 0)
        $this = jm_BigInteger__init_(1, $this.$numberLength, $this.$digits);
    return $this;
},
jm_BigInteger_negate = $this => {
    let var$1;
    var$1 = $this.$sign0;
    return !var$1 ? $this : jm_BigInteger__init_( -var$1 | 0, $this.$numberLength, $this.$digits);
},
jm_BigInteger_add = ($this, $val) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    a: {
        var$2 = $this.$sign0;
        var$3 = $val.$sign0;
        if (var$2) {
            if (!var$3)
                $val = $this;
            else {
                var$4 = $this.$numberLength;
                var$5 = $val.$numberLength;
                if ((var$4 + var$5 | 0) == 2) {
                    var$6 = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
                    var$7 = Long_and(Long_fromInt($val.$digits.data[0]), Long_create(4294967295, 0));
                    if (var$2 != var$3)
                        $val = jm_BigInteger_valueOf(var$2 >= 0 ? Long_sub(var$6, var$7) : Long_sub(var$7, var$6));
                    else {
                        var$6 = Long_add(var$6, var$7);
                        var$8 = Long_lo(var$6);
                        var$4 = Long_hi(var$6);
                        $val = !var$4 ? jm_BigInteger__init_0(var$2, var$8) : jm_BigInteger__init_(var$2, 2, $rt_createIntArrayFromData([var$8, var$4]));
                    }
                } else {
                    if (var$2 == var$3)
                        var$9 = var$4 < var$5 ? jm_Elementary_add($val.$digits, var$5, $this.$digits, var$4) : jm_Elementary_add($this.$digits, var$4, $val.$digits, var$5);
                    else {
                        var$8 = $rt_compare(var$4, var$5);
                        var$8 = !var$8 ? jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4) : var$8 <= 0 ? (-1) : 1;
                        if (!var$8) {
                            $val = jm_BigInteger_ZERO;
                            break a;
                        }
                        if (var$8 != 1) {
                            var$9 = jm_Elementary_subtract($val.$digits, var$5, $this.$digits, var$4);
                            var$2 = var$3;
                        } else
                            var$9 = jm_Elementary_subtract($this.$digits, var$4, $val.$digits, var$5);
                    }
                    var$10 = var$9.data;
                    $val = jm_BigInteger__init_(var$2, var$10.length, var$9);
                    jm_BigInteger_cutOffLeadingZeroes($val);
                }
            }
        }
    }
    return $val;
},
jm_BigInteger_subtract = ($this, $val) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    a: {
        var$2 = $this.$sign0;
        var$3 = $val.$sign0;
        if (var$3) {
            if (!var$2)
                $this = jm_BigInteger_negate($val);
            else {
                var$4 = $this.$numberLength;
                var$5 = $val.$numberLength;
                if ((var$4 + var$5 | 0) == 2) {
                    var$6 = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
                    var$7 = Long_and(Long_fromInt($val.$digits.data[0]), Long_create(4294967295, 0));
                    if (var$2 < 0)
                        var$6 = Long_neg(var$6);
                    if (var$3 < 0)
                        var$7 = Long_neg(var$7);
                    $this = jm_BigInteger_valueOf(Long_sub(var$6, var$7));
                } else {
                    var$8 = $rt_compare(var$4, var$5);
                    var$8 = !var$8 ? jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4) : var$8 <= 0 ? (-1) : 1;
                    if (var$8 == (-1)) {
                        var$8 =  -var$3 | 0;
                        var$9 = var$2 != var$3 ? jm_Elementary_add($val.$digits, var$5, $this.$digits, var$4) : jm_Elementary_subtract($val.$digits, var$5, $this.$digits, var$4);
                    } else if (var$2 != var$3) {
                        var$9 = jm_Elementary_add($this.$digits, var$4, $val.$digits, var$5);
                        var$8 = var$2;
                    } else {
                        if (!var$8) {
                            $this = jm_BigInteger_ZERO;
                            break a;
                        }
                        var$9 = jm_Elementary_subtract($this.$digits, var$4, $val.$digits, var$5);
                        var$8 = var$2;
                    }
                    var$10 = var$9.data;
                    $this = jm_BigInteger__init_(var$8, var$10.length, var$9);
                    jm_BigInteger_cutOffLeadingZeroes($this);
                }
            }
        }
    }
    return $this;
},
jm_BigInteger_shiftRight = ($this, $n) => {
    if ($n && $this.$sign0)
        return $n > 0 ? jm_BitLevel_shiftRight0($this, $n) : jm_BitLevel_shiftLeft0($this,  -$n | 0);
    return $this;
},
jm_BigInteger_shiftLeft = ($this, $n) => {
    if ($n && $this.$sign0)
        return $n > 0 ? jm_BitLevel_shiftLeft0($this, $n) : jm_BitLevel_shiftRight0($this,  -$n | 0);
    return $this;
},
jm_BigInteger_bitLength = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$sign0;
    if (!var$1)
        var$2 = 0;
    else {
        var$3 = $this.$numberLength;
        var$4 = var$3 << 5;
        var$2 = $this.$digits.data[var$3 - 1 | 0];
        if (var$1 < 0 && jm_BigInteger_getFirstNonzeroDigit($this) == ($this.$numberLength - 1 | 0))
            var$2 = var$2 + (-1) | 0;
        var$2 = var$4 - jl_Integer_numberOfLeadingZeros(var$2) | 0;
    }
    return var$2;
},
jm_BigInteger_testBit = ($this, $n) => {
    let var$2, $intCount, $digit, $firstNonZeroDigit;
    if (!$n)
        return !($this.$digits.data[0] & 1) ? 0 : 1;
    if ($n < 0) {
        var$2 = new jl_ArithmeticException;
        jl_Exception__init_(var$2, $rt_s(882));
        $rt_throw(var$2);
    }
    $intCount = $n >> 5;
    if ($intCount >= $this.$numberLength)
        return $this.$sign0 >= 0 ? 0 : 1;
    $digit = $this.$digits.data[$intCount];
    $n = 1 << ($n & 31);
    if ($this.$sign0 < 0) {
        $firstNonZeroDigit = jm_BigInteger_getFirstNonzeroDigit($this);
        if ($intCount < $firstNonZeroDigit)
            return 0;
        $digit = $firstNonZeroDigit == $intCount ?  -$digit | 0 : $digit ^ (-1);
    }
    return !($digit & $n) ? 0 : 1;
},
jm_BigInteger_getLowestSetBit = $this => {
    let $i;
    if (!$this.$sign0)
        return (-1);
    $i = jm_BigInteger_getFirstNonzeroDigit($this);
    return ($i << 5) + jl_Integer_numberOfTrailingZeros($this.$digits.data[$i]) | 0;
},
jm_BigInteger_intValue = $this => {
    return $rt_imul($this.$sign0, $this.$digits.data[0]);
},
jm_BigInteger_longValue = $this => {
    let $value, var$2;
    if ($this.$numberLength <= 1)
        $value = Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0));
    else {
        var$2 = $this.$digits.data;
        $value = Long_or(Long_shl(Long_fromInt(var$2[1]), 32), Long_and(Long_fromInt(var$2[0]), Long_create(4294967295, 0)));
    }
    return Long_mul(Long_fromInt($this.$sign0), $value);
},
jm_BigInteger_compareTo = ($this, $val) => {
    let var$2, var$3, var$4, var$5;
    var$2 = $this.$sign0;
    var$3 = $val.$sign0;
    var$4 = $rt_compare(var$2, var$3);
    if (var$4 > 0)
        return 1;
    if (var$4 < 0)
        return (-1);
    var$4 = $this.$numberLength;
    var$5 = $rt_compare(var$4, $val.$numberLength);
    if (var$5 > 0)
        return var$2;
    if (var$5 < 0)
        return  -var$3 | 0;
    return $rt_imul(var$2, jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4));
},
jm_BigInteger_equals = ($this, $x) => {
    let $x1, var$3, var$4, var$5;
    if ($this === $x)
        return 1;
    if (!($x instanceof jm_BigInteger))
        return 0;
    a: {
        $x1 = $x;
        if ($this.$sign0 == $x1.$sign0) {
            var$3 = $this.$numberLength;
            if (var$3 == $x1.$numberLength) {
                var$4 = $x1.$digits;
                var$3 = var$3 - 1 | 0;
                while (var$3 >= 0) {
                    var$5 = var$4.data;
                    if ($this.$digits.data[var$3] != var$5[var$3])
                        break;
                    var$3 = var$3 + (-1) | 0;
                }
                if (var$3 >= 0 ? 0 : 1) {
                    var$3 = 1;
                    break a;
                }
            }
        }
        var$3 = 0;
    }
    return var$3;
},
jm_BigInteger_gcd = ($this, $val) => {
    let $val1, $val2, var$4, var$5, var$6, var$7;
    $val1 = jm_BigInteger_abs($this);
    $val2 = jm_BigInteger_abs($val);
    if (!$val1.$sign0)
        return $val2;
    if (!$val2.$sign0)
        return $val1;
    a: {
        var$4 = $val1.$numberLength;
        if (var$4 != 1) {
            if (var$4 != 2)
                break a;
            if ($val1.$digits.data[1] <= 0)
                break a;
        }
        var$5 = $val2.$numberLength;
        if (var$5 != 1) {
            if (var$5 != 2)
                break a;
            if ($val2.$digits.data[1] <= 0)
                break a;
        }
        return jm_BigInteger_valueOf(jm_Division_gcdBinary(jm_BigInteger_longValue($val1), jm_BigInteger_longValue($val2)));
    }
    $val = jm_BigInteger_copy($val1);
    $val1 = jm_BigInteger_copy($val2);
    var$5 = jm_BigInteger_getLowestSetBit($val);
    var$4 = jm_BigInteger_getLowestSetBit($val1);
    var$6 = jl_Math_min(var$5, var$4);
    jm_BitLevel_inplaceShiftRight($val, var$5);
    jm_BitLevel_inplaceShiftRight($val1, var$4);
    if (jm_BigInteger_compareTo($val, $val1) != 1) {
        $val2 = $val1;
        $val1 = $val;
        $val = $val2;
    }
    b: {
        c: {
            while (true) {
                var$5 = $val.$numberLength;
                if (var$5 == 1)
                    break c;
                if (var$5 == 2 && $val.$digits.data[1] > 0)
                    break c;
                if (var$5 > $val1.$numberLength * 1.2) {
                    $val2 = jm_BigInteger_remainder($val, $val1);
                    if ($val2.$sign0)
                        jm_BitLevel_inplaceShiftRight($val2, jm_BigInteger_getLowestSetBit($val2));
                } else {
                    while (true) {
                        var$7 = $val.$digits;
                        jm_Elementary_subtract0(var$7, var$7, $val.$numberLength, $val1.$digits, $val1.$numberLength);
                        jm_BigInteger_cutOffLeadingZeroes($val);
                        jm_BigInteger_unCache($val);
                        jm_BitLevel_inplaceShiftRight($val, jm_BigInteger_getLowestSetBit($val));
                        if (jm_BigInteger_compareTo($val, $val1) >= 0)
                            continue;
                        else
                            break;
                    }
                    $val2 = $val;
                }
                if (!$val2.$sign0)
                    break;
                $val = $val1;
                $val1 = $val2;
            }
            break b;
        }
        $val1 = jm_BigInteger_valueOf(jm_Division_gcdBinary(jm_BigInteger_longValue($val1), jm_BigInteger_longValue($val)));
    }
    return jm_BigInteger_shiftLeft($val1, var$6);
},
jm_BigInteger_multiply = ($this, $val) => {
    if (!$val.$sign0)
        return jm_BigInteger_ZERO;
    if (!$this.$sign0)
        return jm_BigInteger_ZERO;
    jm_Multiplication_$callClinit();
    return jm_Multiplication_karatsuba($this, $val);
},
jm_BigInteger_pow = ($this, $exp) => {
    let var$2, $x, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    if ($exp < 0) {
        var$2 = new jl_ArithmeticException;
        jl_Exception__init_(var$2, $rt_s(883));
        $rt_throw(var$2);
    }
    if (!$exp)
        return jm_BigInteger_ONE;
    if ($exp != 1 && !jm_BigInteger_equals($this, jm_BigInteger_ONE) && !jm_BigInteger_equals($this, jm_BigInteger_ZERO)) {
        if (!jm_BigInteger_testBit($this, 0)) {
            $x = 1;
            while (!jm_BigInteger_testBit($this, $x)) {
                $x = $x + 1 | 0;
            }
            var$4 = $rt_imul($x, $exp);
            var$5 = jm_BigInteger_TWO_POWS.data;
            if (var$4 < var$5.length)
                var$2 = var$5[var$4];
            else {
                var$6 = var$4 >> 5;
                var$7 = var$4 & 31;
                var$8 = var$6 + 1 | 0;
                var$5 = $rt_createIntArray(var$8);
                var$5.data[var$6] = 1 << var$7;
                var$2 = jm_BigInteger__init_(1, var$8, var$5);
            }
            return jm_BigInteger_multiply(var$2, jm_BigInteger_pow(jm_BigInteger_shiftRight($this, $x), $exp));
        }
        jm_Multiplication_$callClinit();
        var$2 = jm_BigInteger_ONE;
        while ($exp > 1) {
            if ($exp & 1)
                var$2 = jm_BigInteger_multiply(var$2, $this);
            $x = $this.$numberLength;
            if ($x == 1)
                $this = jm_BigInteger_multiply($this, $this);
            else {
                var$9 = new jm_BigInteger;
                var$5 = jm_Multiplication_square($this.$digits, $x, $rt_createIntArray($x << 1));
                var$10 = var$5.data;
                var$9.$firstNonzeroDigit = (-2);
                $x = var$10.length;
                if ($x) {
                    var$9.$sign0 = 1;
                    var$9.$numberLength = $x;
                    var$9.$digits = var$5;
                    jm_BigInteger_cutOffLeadingZeroes(var$9);
                } else {
                    var$9.$sign0 = 0;
                    var$9.$numberLength = 1;
                    var$5 = $rt_createIntArray(1);
                    var$5.data[0] = 0;
                    var$9.$digits = var$5;
                }
                $this = var$9;
            }
            $exp = $exp >> 1;
        }
        return jm_BigInteger_multiply(var$2, $this);
    }
    return $this;
},
jm_BigInteger_divideAndRemainder = ($this, $divisor) => {
    let $divisorSign, $divisorLen, $divisorDigits, $thisLen, $thisSign, $thisDigits, $quotientDigits, $result0, var$10, var$11, var$12, $cmp, $quotientLength, $quotientSign, $remainderDigits, $result1;
    $divisorSign = $divisor.$sign0;
    if (!$divisorSign) {
        $divisor = new jl_ArithmeticException;
        jl_Exception__init_($divisor, $rt_s(884));
        $rt_throw($divisor);
    }
    $divisorLen = $divisor.$numberLength;
    $divisorDigits = $divisor.$digits;
    if ($divisorLen == 1) {
        $thisLen = $divisorDigits.data[0];
        $divisorDigits = $this.$digits;
        $divisorLen = $this.$numberLength;
        $thisSign = $this.$sign0;
        if ($divisorLen != 1) {
            $divisorSign = $thisSign != $divisorSign ? (-1) : 1;
            $thisDigits = $rt_createIntArray($divisorLen);
            $quotientDigits = $rt_createIntArray(1);
            $quotientDigits.data[0] = jm_Division_divideArrayByInt($thisDigits, $divisorDigits, $divisorLen, $thisLen);
            $divisor = jm_BigInteger__init_($divisorSign, $divisorLen, $thisDigits);
            $result0 = jm_BigInteger__init_($thisSign, 1, $quotientDigits);
            jm_BigInteger_cutOffLeadingZeroes($divisor);
            jm_BigInteger_cutOffLeadingZeroes($result0);
            $thisDigits = $rt_wrapArray(jm_BigInteger, [$divisor, $result0]);
        } else {
            var$10 = Long_and(Long_fromInt($divisorDigits.data[0]), Long_create(4294967295, 0));
            var$11 = Long_and(Long_fromInt($thisLen), Long_create(4294967295, 0));
            var$12 = Long_div(var$10, var$11);
            var$10 = Long_rem(var$10, var$11);
            if ($thisSign != $divisorSign)
                var$12 = Long_neg(var$12);
            if ($thisSign < 0)
                var$10 = Long_neg(var$10);
            $thisDigits = $rt_wrapArray(jm_BigInteger, [jm_BigInteger_valueOf(var$12), jm_BigInteger_valueOf(var$10)]);
        }
        return $thisDigits;
    }
    $thisDigits = $this.$digits;
    $thisLen = $this.$numberLength;
    $cmp = $rt_compare($thisLen, $divisorLen);
    if ((!$cmp ? jm_Elementary_compareArrays($thisDigits, $divisorDigits, $thisLen) : $cmp <= 0 ? (-1) : 1) < 0)
        return $rt_wrapArray(jm_BigInteger, [jm_BigInteger_ZERO, $this]);
    $thisSign = $this.$sign0;
    $quotientLength = ($thisLen - $divisorLen | 0) + 1 | 0;
    $quotientSign = $thisSign != $divisorSign ? (-1) : 1;
    $quotientDigits = $rt_createIntArray($quotientLength);
    $remainderDigits = jm_Division_divide($quotientDigits, $quotientLength, $thisDigits, $thisLen, $divisorDigits, $divisorLen);
    $result0 = jm_BigInteger__init_($quotientSign, $quotientLength, $quotientDigits);
    $result1 = jm_BigInteger__init_($thisSign, $divisorLen, $remainderDigits);
    jm_BigInteger_cutOffLeadingZeroes($result0);
    jm_BigInteger_cutOffLeadingZeroes($result1);
    return $rt_wrapArray(jm_BigInteger, [$result0, $result1]);
},
jm_BigInteger_divide = ($this, $divisor) => {
    let $divisorSign, $divisorLen, var$4, $thisSign, $thisLen, $val, $cmp, $resLength, $resDigits, $resSign, $result;
    $divisorSign = $divisor.$sign0;
    if (!$divisorSign) {
        $divisor = new jl_ArithmeticException;
        jl_Exception__init_($divisor, $rt_s(884));
        $rt_throw($divisor);
    }
    $divisorLen = $divisor.$numberLength;
    var$4 = $rt_compare($divisorLen, 1);
    if (!var$4 && $divisor.$digits.data[0] == 1 ? 1 : 0) {
        if ($divisorSign <= 0)
            $this = jm_BigInteger_negate($this);
        return $this;
    }
    $thisSign = $this.$sign0;
    $thisLen = $this.$numberLength;
    if (($thisLen + $divisorLen | 0) == 2) {
        $val = Long_div(Long_and(Long_fromInt($this.$digits.data[0]), Long_create(4294967295, 0)), Long_and(Long_fromInt($divisor.$digits.data[0]), Long_create(4294967295, 0)));
        if ($thisSign != $divisorSign)
            $val = Long_neg($val);
        return jm_BigInteger_valueOf($val);
    }
    $cmp = $rt_compare($thisLen, $divisorLen);
    $cmp = !$cmp ? jm_Elementary_compareArrays($this.$digits, $divisor.$digits, $thisLen) : $cmp <= 0 ? (-1) : 1;
    if (!$cmp)
        return $thisSign != $divisorSign ? jm_BigInteger_MINUS_ONE : jm_BigInteger_ONE;
    if ($cmp == (-1))
        return jm_BigInteger_ZERO;
    $resLength = ($thisLen - $divisorLen | 0) + 1 | 0;
    $resDigits = $rt_createIntArray($resLength);
    $resSign = $thisSign != $divisorSign ? (-1) : 1;
    if (var$4)
        jm_Division_divide($resDigits, $resLength, $this.$digits, $thisLen, $divisor.$digits, $divisorLen);
    else
        jm_Division_divideArrayByInt($resDigits, $this.$digits, $thisLen, $divisor.$digits.data[0]);
    $result = jm_BigInteger__init_($resSign, $resLength, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
},
jm_BigInteger_remainder = ($this, $divisor) => {
    let $thisLen, $divisorLen, $qLen, $resDigits, var$6, var$7, var$8, var$9, $result;
    if (!$divisor.$sign0) {
        $divisor = new jl_ArithmeticException;
        jl_Exception__init_($divisor, $rt_s(884));
        $rt_throw($divisor);
    }
    $thisLen = $this.$numberLength;
    $divisorLen = $divisor.$numberLength;
    $qLen = $rt_compare($thisLen, $divisorLen);
    if ((!$qLen ? jm_Elementary_compareArrays($this.$digits, $divisor.$digits, $thisLen) : $qLen <= 0 ? (-1) : 1) == (-1))
        return $this;
    $resDigits = $rt_createIntArray($divisorLen);
    if ($divisorLen != 1)
        $resDigits = jm_Division_divide(null, ($thisLen - $divisorLen | 0) + 1 | 0, $this.$digits, $thisLen, $divisor.$digits, $divisorLen);
    else {
        var$6 = $this.$digits;
        var$7 = $divisor.$digits.data[0];
        var$8 = Long_ZERO;
        $thisLen = $thisLen - 1 | 0;
        while ($thisLen >= 0) {
            var$9 = var$6.data;
            var$8 = Long_fromInt(Long_hi((jm_Division_divideLongByInt(Long_add(Long_shl(var$8, 32), Long_and(Long_fromInt(var$9[$thisLen]), Long_create(4294967295, 0))), var$7))));
            $thisLen = $thisLen + (-1) | 0;
        }
        $resDigits.data[0] = Long_lo(var$8);
    }
    $result = jm_BigInteger__init_($this.$sign0, $divisorLen, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
},
jm_BigInteger_cutOffLeadingZeroes = $this => {
    let var$1, var$2, var$3;
    while (true) {
        var$1 = $this.$numberLength;
        if (var$1 <= 0)
            break;
        var$2 = $this.$digits.data;
        var$1 = var$1 - 1 | 0;
        $this.$numberLength = var$1;
        if (var$2[var$1])
            break;
    }
    var$2 = $this.$digits.data;
    var$3 = $this.$numberLength;
    $this.$numberLength = var$3 + 1 | 0;
    if (!var$2[var$3])
        $this.$sign0 = 0;
},
jm_BigInteger_getFirstNonzeroDigit = $this => {
    let $i;
    if ($this.$firstNonzeroDigit == (-2)) {
        if (!$this.$sign0)
            $i = (-1);
        else {
            $i = 0;
            while (!$this.$digits.data[$i]) {
                $i = $i + 1 | 0;
            }
        }
        $this.$firstNonzeroDigit = $i;
    }
    return $this.$firstNonzeroDigit;
},
jm_BigInteger_copy = $this => {
    let var$1, $copyDigits;
    var$1 = $this.$numberLength;
    $copyDigits = $rt_createIntArray(var$1);
    jl_System_fastArraycopy($this.$digits, 0, $copyDigits, 0, var$1);
    return jm_BigInteger__init_($this.$sign0, $this.$numberLength, $copyDigits);
},
jm_BigInteger_unCache = $this => {
    $this.$firstNonzeroDigit = (-2);
},
jm_BigInteger__clinit_ = () => {
    let var$1, var$2, $i;
    jm_BigInteger_ZERO = jm_BigInteger__init_0(0, 0);
    jm_BigInteger_ONE = jm_BigInteger__init_0(1, 1);
    jm_BigInteger_TWO = jm_BigInteger__init_0(1, 2);
    jm_BigInteger_TEN = jm_BigInteger__init_0(1, 10);
    jm_BigInteger_MINUS_ONE = jm_BigInteger__init_0((-1), 1);
    var$1 = $rt_createArray(jm_BigInteger, 11);
    var$2 = var$1.data;
    var$2[0] = jm_BigInteger_ZERO;
    var$2[1] = jm_BigInteger_ONE;
    var$2[2] = jm_BigInteger_TWO;
    var$2[3] = jm_BigInteger__init_0(1, 3);
    var$2[4] = jm_BigInteger__init_0(1, 4);
    var$2[5] = jm_BigInteger__init_0(1, 5);
    var$2[6] = jm_BigInteger__init_0(1, 6);
    var$2[7] = jm_BigInteger__init_0(1, 7);
    var$2[8] = jm_BigInteger__init_0(1, 8);
    var$2[9] = jm_BigInteger__init_0(1, 9);
    var$2[10] = jm_BigInteger_TEN;
    jm_BigInteger_SMALL_VALUES = var$1;
    jm_BigInteger_TWO_POWS = $rt_createArray(jm_BigInteger, 32);
    $i = 0;
    while (true) {
        var$1 = jm_BigInteger_TWO_POWS.data;
        if ($i >= var$1.length)
            break;
        var$1[$i] = jm_BigInteger_valueOf(Long_shl(Long_fromInt(1), $i));
        $i = $i + 1 | 0;
    }
};
function jm_BigDecimal() {
    let a = this; jl_Number.call(a);
    a.$intVal = null;
    a.$bitLength1 = 0;
    a.$smallValue = Long_ZERO;
    a.$scale0 = 0;
    a.$precision0 = 0;
}
let jm_BigDecimal_ZERO = null,
jm_BigDecimal_ONE = null,
jm_BigDecimal_TEN = null,
jm_BigDecimal_FIVE_POW = null,
jm_BigDecimal_TEN_POW = null,
jm_BigDecimal_LONG_TEN_POW = null,
jm_BigDecimal_LONG_FIVE_POW = null,
jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = null,
jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = null,
jm_BigDecimal_BI_SCALED_BY_ZERO = null,
jm_BigDecimal_ZERO_SCALED_BY = null,
jm_BigDecimal_CH_ZEROS = null,
jm_BigDecimal_$callClinit = () => {
    jm_BigDecimal_$callClinit = $rt_eraseClinit(jm_BigDecimal);
    jm_BigDecimal__clinit_();
},
jm_BigDecimal__init_4 = ($this, $smallValue, $scale) => {
    jm_BigDecimal_$callClinit();
    $this.$smallValue = $smallValue;
    $this.$scale0 = $scale;
    $this.$bitLength1 = jm_BigDecimal_bitLength($smallValue);
},
jm_BigDecimal__init_1 = (var_0, var_1) => {
    let var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_4(var_2, var_0, var_1);
    return var_2;
},
jm_BigDecimal__init_3 = ($this, $smallValue, $scale) => {
    jm_BigDecimal_$callClinit();
    $this.$smallValue = Long_fromInt($smallValue);
    $this.$scale0 = $scale;
    if ($smallValue < 0)
        $smallValue = $smallValue ^ (-1);
    $this.$bitLength1 = 32 - jl_Integer_numberOfLeadingZeros($smallValue) | 0;
},
jm_BigDecimal__init_ = (var_0, var_1) => {
    let var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_3(var_2, var_0, var_1);
    return var_2;
},
jm_BigDecimal__init_2 = ($this, $unscaledVal, $scale) => {
    jm_BigDecimal_$callClinit();
    if ($unscaledVal === null) {
        $unscaledVal = new jl_NullPointerException;
        jl_Throwable__init_($unscaledVal);
        $rt_throw($unscaledVal);
    }
    $this.$scale0 = $scale;
    $this.$intVal = $unscaledVal;
    $scale = jm_BigInteger_bitLength($unscaledVal);
    $this.$bitLength1 = $scale;
    if ($scale < 64)
        $this.$smallValue = jm_BigInteger_longValue($unscaledVal);
},
jm_BigDecimal__init_0 = (var_0, var_1) => {
    let var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_2(var_2, var_0, var_1);
    return var_2;
},
jm_BigDecimal_valueOf0 = ($unscaledVal, $scale) => {
    let var$3;
    jm_BigDecimal_$callClinit();
    if (!$scale)
        return jm_BigDecimal_valueOf($unscaledVal);
    if (Long_eq($unscaledVal, Long_ZERO) && $scale >= 0) {
        var$3 = jm_BigDecimal_ZERO_SCALED_BY.data;
        if ($scale < var$3.length)
            return var$3[$scale];
    }
    return jm_BigDecimal__init_1($unscaledVal, $scale);
},
jm_BigDecimal_valueOf = $unscaledVal => {
    jm_BigDecimal_$callClinit();
    if (Long_ge($unscaledVal, Long_ZERO) && Long_lt($unscaledVal, Long_fromInt(11)))
        return jm_BigDecimal_BI_SCALED_BY_ZERO.data[Long_lo($unscaledVal)];
    return jm_BigDecimal__init_1($unscaledVal, 0);
},
jm_BigDecimal_multiply = ($this, $multiplicand) => {
    let $newScale;
    $newScale = Long_add(Long_fromInt($this.$scale0), Long_fromInt($multiplicand.$scale0));
    if (!jm_BigDecimal_isZero($this) && !jm_BigDecimal_isZero($multiplicand)) {
        if (($this.$bitLength1 + $multiplicand.$bitLength1 | 0) < 64)
            return jm_BigDecimal_valueOf0(Long_mul($this.$smallValue, $multiplicand.$smallValue), jm_BigDecimal_toIntScale($newScale));
        return jm_BigDecimal__init_0(jm_BigInteger_multiply(jm_BigDecimal_getUnscaledValue($this), jm_BigDecimal_getUnscaledValue($multiplicand)), jm_BigDecimal_toIntScale($newScale));
    }
    return jm_BigDecimal_zeroScaledBy($newScale);
},
jm_BigDecimal_negate = $this => {
    let var$1;
    a: {
        var$1 = $rt_compare($this.$bitLength1, 63);
        if (var$1 >= 0) {
            if (var$1)
                break a;
            if (Long_eq($this.$smallValue, Long_create(0, 2147483648)))
                break a;
        }
        return jm_BigDecimal_valueOf0(Long_neg($this.$smallValue), $this.$scale0);
    }
    return jm_BigDecimal__init_0(jm_BigInteger_negate(jm_BigDecimal_getUnscaledValue($this)), $this.$scale0);
},
jm_BigDecimal_signum = $this => {
    let var$1;
    if ($this.$bitLength1 >= 64)
        return (jm_BigDecimal_getUnscaledValue($this)).$sign0;
    var$1 = $this.$smallValue;
    return Long_lo(Long_or(Long_shr(var$1, 63), Long_shru(Long_neg(var$1), 63)));
},
jm_BigDecimal_isZero = $this => {
    return !$this.$bitLength1 && Long_ne($this.$smallValue, Long_fromInt(-1)) ? 1 : 0;
},
jm_BigDecimal_precision = $this => {
    let var$1, $bitLength, $doubleUnsc, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = $this.$precision0;
    if (var$1 > 0)
        return var$1;
    $bitLength = $this.$bitLength1;
    $doubleUnsc = 1.0;
    if ($bitLength >= 1024) {
        var$1 = 1.0 + ($bitLength - 1 | 0) * 0.3010299956639812 | 0;
        if ((jm_BigInteger_divide(jm_BigDecimal_getUnscaledValue($this), jm_Multiplication_powerOf10(Long_fromInt(var$1)))).$sign0)
            var$1 = var$1 + 1 | 0;
    } else {
        if ($bitLength >= 64)
            a: {
                b: {
                    var$4 = jm_BigDecimal_getUnscaledValue($this);
                    $bitLength = var$4.$numberLength;
                    var$1 = $rt_compare($bitLength, 2);
                    if (var$1 >= 0) {
                        if (var$1)
                            break b;
                        if (var$4.$digits.data[1] <= 0)
                            break b;
                    }
                    $doubleUnsc = Long_toNumber(jm_BigInteger_longValue(var$4));
                    break a;
                }
                if ($bitLength > 32)
                    $doubleUnsc = var$4.$sign0 <= 0 ? (-Infinity) : Infinity;
                else {
                    var$1 = jm_BigInteger_bitLength(jm_BigInteger_abs(var$4));
                    var$5 = Long_fromInt(var$1 - 1 | 0);
                    var$6 = var$1 - 54 | 0;
                    var$7 = Long_and(jm_BigInteger_longValue(jm_BigInteger_shiftRight(jm_BigInteger_abs(var$4), var$6)), Long_create(4294967295, 2097151));
                    if (Long_eq(var$5, Long_fromInt(1023))) {
                        if (Long_eq(var$7, Long_create(4294967295, 2097151))) {
                            $doubleUnsc = var$4.$sign0 <= 0 ? (-Infinity) : Infinity;
                            break a;
                        }
                        if (Long_eq(var$7, Long_create(4294967294, 2097151))) {
                            $doubleUnsc = var$4.$sign0 <= 0 ? (-1.7976931348623157E308) : 1.7976931348623157E308;
                            break a;
                        }
                    }
                    c: {
                        if (!(Long_eq(Long_and(var$7, Long_fromInt(1)), Long_fromInt(1)) && Long_eq(Long_and(var$7, Long_fromInt(2)), Long_fromInt(2)))) {
                            var$8 = var$4.$digits;
                            var$1 = var$6 >> 5;
                            $bitLength = var$6 & 31;
                            var$6 = 0;
                            while (true) {
                                var$9 = $rt_compare(var$6, var$1);
                                if (var$9 >= 0)
                                    break;
                                if (var$8.data[var$6])
                                    break;
                                var$6 = var$6 + 1 | 0;
                            }
                            if (!(!var$9 && !(var$8.data[var$6] << (32 - $bitLength | 0)) ? 0 : 1))
                                break c;
                        }
                        var$7 = Long_add(var$7, Long_fromInt(2));
                    }
                    var$7 = Long_shr(var$7, 1);
                    $doubleUnsc = $rt_longBitsToDouble(Long_or(Long_or(var$4.$sign0 >= 0 ? Long_ZERO : Long_create(0, 2147483648), Long_and(Long_shl(Long_add(Long_fromInt(1023), var$5), 52), Long_create(0, 2146435072))), var$7));
                }
            }
        else if ($bitLength >= 1)
            $doubleUnsc = Long_toNumber($this.$smallValue);
        $doubleUnsc = jl_Math_absImpl0($doubleUnsc);
        var$4 = otcit_DoubleAnalyzer_resultForLog10;
        otcit_DoubleAnalyzer_analyze($doubleUnsc, var$4);
        var$1 = var$4.$exponent;
        if (var$1 < 0 && Long_gt(var$4.$mantissa, Long_create(1569325056, 23283064)))
            var$1 = var$1 + 1 | 0;
        var$1 = 1 + var$1 | 0;
    }
    $this.$precision0 = var$1;
    return var$1;
},
jm_BigDecimal_doubleValue = $this => {
    let $sign, $exponent, $powerOfTwo, $mantisa, $k, $powerOfTen, $quotAndRem, var$8, $compRem, var$10, $lowestSetBit, $discardedSize, $bits;
    $sign = jm_BigDecimal_signum($this);
    $exponent = 1076;
    $powerOfTwo = Long_sub(Long_fromInt($this.$bitLength1), Long_fromNumber($this.$scale0 / 0.3010299956639812));
    if (Long_ge($powerOfTwo, Long_fromInt(-1074)) && $sign) {
        if (Long_gt($powerOfTwo, Long_fromInt(1025)))
            return $sign * Infinity;
        $mantisa = jm_BigInteger_abs(jm_BigDecimal_getUnscaledValue($this));
        $k = $this.$scale0;
        if ($k <= 0)
            $mantisa = jm_BigInteger_multiply($mantisa, jm_Multiplication_powerOf10(Long_fromInt( -$k | 0)));
        else {
            $powerOfTen = jm_Multiplication_powerOf10(Long_fromInt($k));
            $k = 100 - Long_lo($powerOfTwo) | 0;
            if ($k > 0) {
                $mantisa = jm_BigInteger_shiftLeft($mantisa, $k);
                $exponent = $exponent - $k | 0;
            }
            $quotAndRem = (jm_BigInteger_divideAndRemainder($mantisa, $powerOfTen)).data;
            $mantisa = $quotAndRem[1];
            if (!$mantisa.$sign0)
                var$8 = $mantisa;
            else {
                $k = $mantisa.$numberLength;
                $compRem = $k + 1 | 0;
                var$10 = $rt_createIntArray($compRem);
                jm_BitLevel_shiftLeftOneBit(var$10, $mantisa.$digits, $k);
                var$8 = jm_BigInteger__init_($mantisa.$sign0, $compRem, var$10);
                jm_BigInteger_cutOffLeadingZeroes(var$8);
            }
            $compRem = jm_BigInteger_compareTo(var$8, $powerOfTen);
            $mantisa = jm_BigInteger_add(jm_BigInteger_shiftLeft($quotAndRem[0], 2), jm_BigInteger_valueOf(Long_fromInt(($rt_imul($compRem, $compRem + 3 | 0) / 2 | 0) + 1 | 0)));
            $exponent = $exponent + (-2) | 0;
        }
        $lowestSetBit = jm_BigInteger_getLowestSetBit($mantisa);
        $discardedSize = jm_BigInteger_bitLength($mantisa) - 54 | 0;
        if ($discardedSize <= 0) {
            $bits = Long_shl(jm_BigInteger_longValue($mantisa),  -$discardedSize | 0);
            $powerOfTwo = Long_ne(Long_and($bits, Long_fromInt(3)), Long_fromInt(3)) ? $bits : Long_add($bits, Long_fromInt(2));
        } else {
            $bits = jm_BigInteger_longValue(jm_BigInteger_shiftRight($mantisa, $discardedSize));
            $powerOfTwo = !(Long_eq(Long_and($bits, Long_fromInt(1)), Long_fromInt(1)) && $lowestSetBit < $discardedSize) && Long_ne(Long_and($bits, Long_fromInt(3)), Long_fromInt(3)) ? $bits : Long_add($bits, Long_fromInt(2));
        }
        if (Long_eq(Long_and($powerOfTwo, Long_create(0, 4194304)), Long_ZERO)) {
            $powerOfTwo = Long_shr($powerOfTwo, 1);
            $exponent = $exponent + $discardedSize | 0;
        } else {
            $powerOfTwo = Long_shr($powerOfTwo, 2);
            $exponent = $exponent + ($discardedSize + 1 | 0) | 0;
        }
        if ($exponent > 2046)
            return $sign * Infinity;
        if ($exponent <= 0) {
            if ($exponent < (-53))
                return $sign * 0.0;
            a: {
                $bits = Long_shr($bits, 1);
                $powerOfTwo = Long_and($bits, Long_shru(Long_fromInt(-1), 63 + $exponent | 0));
                $bits = Long_shr($bits,  -$exponent | 0);
                if (Long_ne(Long_and($bits, Long_fromInt(3)), Long_fromInt(3))) {
                    if (Long_ne(Long_and($bits, Long_fromInt(1)), Long_fromInt(1)))
                        break a;
                    if (Long_eq($powerOfTwo, Long_ZERO))
                        break a;
                    if ($lowestSetBit >= $discardedSize)
                        break a;
                }
                $bits = Long_add($bits, Long_fromInt(1));
            }
            $exponent = 0;
            $powerOfTwo = Long_shr($bits, 1);
        }
        return $rt_longBitsToDouble(Long_or(Long_or(Long_and(Long_fromInt($sign), Long_create(0, 2147483648)), Long_shl(Long_fromInt($exponent), 52)), Long_and($powerOfTwo, Long_create(4294967295, 1048575))));
    }
    return $sign * 0.0;
},
jm_BigDecimal_aproxPrecision = $this => {
    let var$1;
    var$1 = $this.$precision0;
    if (var$1 <= 0)
        var$1 = (($this.$bitLength1 - 1 | 0) * 0.3010299956639812 | 0) + 1 | 0;
    return var$1;
},
jm_BigDecimal_toIntScale = $longScale => {
    let var$2;
    jm_BigDecimal_$callClinit();
    if (Long_lt($longScale, Long_fromInt(-2147483648))) {
        var$2 = new jl_ArithmeticException;
        jl_Exception__init_(var$2, $rt_s(885));
        $rt_throw(var$2);
    }
    if (Long_le($longScale, Long_fromInt(2147483647)))
        return Long_lo($longScale);
    var$2 = new jl_ArithmeticException;
    jl_Exception__init_(var$2, $rt_s(886));
    $rt_throw(var$2);
},
jm_BigDecimal_zeroScaledBy = $longScale => {
    let var$2;
    jm_BigDecimal_$callClinit();
    var$2 = Long_lo($longScale);
    if (Long_eq($longScale, Long_fromInt(var$2)))
        return jm_BigDecimal_valueOf0(Long_ZERO, var$2);
    if (Long_lt($longScale, Long_ZERO))
        return jm_BigDecimal__init_(0, (-2147483648));
    return jm_BigDecimal__init_(0, 2147483647);
},
jm_BigDecimal_getUnscaledValue = $this => {
    if ($this.$intVal === null)
        $this.$intVal = jm_BigInteger_valueOf($this.$smallValue);
    return $this.$intVal;
},
jm_BigDecimal_bitLength = $smallValue => {
    jm_BigDecimal_$callClinit();
    if (Long_lt($smallValue, Long_ZERO))
        $smallValue = Long_xor($smallValue, Long_fromInt(-1));
    return 64 - jl_Long_numberOfLeadingZeros($smallValue) | 0;
},
jm_BigDecimal__clinit_ = () => {
    let var$1, var$2, var$3, $i, $j;
    jm_BigDecimal_ZERO = jm_BigDecimal__init_(0, 0);
    jm_BigDecimal_ONE = jm_BigDecimal__init_(1, 0);
    jm_BigDecimal_TEN = jm_BigDecimal__init_(10, 0);
    var$1 = $rt_createLongArray(19);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(10);
    var$2[2] = Long_fromInt(100);
    var$2[3] = Long_fromInt(1000);
    var$2[4] = Long_fromInt(10000);
    var$2[5] = Long_fromInt(100000);
    var$2[6] = Long_fromInt(1000000);
    var$2[7] = Long_fromInt(10000000);
    var$2[8] = Long_fromInt(100000000);
    var$2[9] = Long_fromInt(1000000000);
    var$2[10] = Long_create(1410065408, 2);
    var$2[11] = Long_create(1215752192, 23);
    var$2[12] = Long_create(3567587328, 232);
    var$2[13] = Long_create(1316134912, 2328);
    var$2[14] = Long_create(276447232, 23283);
    var$2[15] = Long_create(2764472320, 232830);
    var$2[16] = Long_create(1874919424, 2328306);
    var$2[17] = Long_create(1569325056, 23283064);
    var$2[18] = Long_create(2808348672, 232830643);
    jm_BigDecimal_LONG_TEN_POW = var$1;
    var$1 = $rt_createLongArray(28);
    var$3 = var$1.data;
    var$3[0] = Long_fromInt(1);
    var$3[1] = Long_fromInt(5);
    var$3[2] = Long_fromInt(25);
    var$3[3] = Long_fromInt(125);
    var$3[4] = Long_fromInt(625);
    var$3[5] = Long_fromInt(3125);
    var$3[6] = Long_fromInt(15625);
    var$3[7] = Long_fromInt(78125);
    var$3[8] = Long_fromInt(390625);
    var$3[9] = Long_fromInt(1953125);
    var$3[10] = Long_fromInt(9765625);
    var$3[11] = Long_fromInt(48828125);
    var$3[12] = Long_fromInt(244140625);
    var$3[13] = Long_fromInt(1220703125);
    var$3[14] = Long_create(1808548329, 1);
    var$3[15] = Long_create(452807053, 7);
    var$3[16] = Long_create(2264035265, 35);
    var$3[17] = Long_create(2730241733, 177);
    var$3[18] = Long_create(766306777, 888);
    var$3[19] = Long_create(3831533885, 4440);
    var$3[20] = Long_create(1977800241, 22204);
    var$3[21] = Long_create(1299066613, 111022);
    var$3[22] = Long_create(2200365769, 555111);
    var$3[23] = Long_create(2411894253, 2775557);
    var$3[24] = Long_create(3469536673, 13877787);
    var$3[25] = Long_create(167814181, 69388939);
    var$3[26] = Long_create(839070905, 346944695);
    var$3[27] = Long_create(4195354525, 1734723475);
    jm_BigDecimal_LONG_FIVE_POW = var$1;
    jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = $rt_createIntArray(var$3.length);
    jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = $rt_createIntArray(var$2.length);
    jm_BigDecimal_BI_SCALED_BY_ZERO = $rt_createArray(jm_BigDecimal, 11);
    jm_BigDecimal_ZERO_SCALED_BY = $rt_createArray(jm_BigDecimal, 11);
    jm_BigDecimal_CH_ZEROS = $rt_createCharArray(100);
    $i = 0;
    while ($i < jm_BigDecimal_ZERO_SCALED_BY.data.length) {
        jm_BigDecimal_BI_SCALED_BY_ZERO.data[$i] = jm_BigDecimal__init_($i, 0);
        jm_BigDecimal_ZERO_SCALED_BY.data[$i] = jm_BigDecimal__init_(0, $i);
        jm_BigDecimal_CH_ZEROS.data[$i] = 48;
        $i = $i + 1 | 0;
    }
    while (true) {
        var$1 = jm_BigDecimal_CH_ZEROS.data;
        if ($i >= var$1.length)
            break;
        var$1[$i] = 48;
        $i = $i + 1 | 0;
    }
    $j = 0;
    while (true) {
        var$1 = jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH.data;
        if ($j >= var$1.length)
            break;
        var$1[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_FIVE_POW.data[$j]);
        $j = $j + 1 | 0;
    }
    $j = 0;
    while (true) {
        var$1 = jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH.data;
        if ($j >= var$1.length)
            break;
        var$1[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_TEN_POW.data[$j]);
        $j = $j + 1 | 0;
    }
    jm_Multiplication_$callClinit();
    jm_BigDecimal_TEN_POW = jm_Multiplication_bigTenPows;
    jm_BigDecimal_FIVE_POW = jm_Multiplication_bigFivePows;
},
otcit_DoubleAnalyzer = $rt_classWithoutFields(),
otcit_DoubleAnalyzer_MAX_MANTISSA = Long_ZERO,
otcit_DoubleAnalyzer_resultForLog10 = null,
otcit_DoubleAnalyzer_mantissa10Table = null,
otcit_DoubleAnalyzer_exp10Table = null,
otcit_DoubleAnalyzer__init_ = $this => {
    return;
},
otcit_DoubleAnalyzer__init_0 = () => {
    let var_0 = new otcit_DoubleAnalyzer();
    otcit_DoubleAnalyzer__init_(var_0);
    return var_0;
},
otcit_DoubleAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $posCmp, var$8, $binExponentCorrection, $mantissaShift, $decExponent, $decMantissa, $decMantissaHi, $lowerPos, $upperPos;
    $bits = jl_Double_doubleToLongBits($d);
    $result.$sign1 = Long_eq(Long_and($bits, Long_create(0, 2147483648)), Long_ZERO) ? 0 : 1;
    $mantissa = Long_and($bits, Long_create(4294967295, 1048575));
    $exponent = Long_lo(Long_shr($bits, 52)) & 2047;
    if (Long_eq($mantissa, Long_ZERO) && !$exponent) {
        $result.$mantissa = Long_ZERO;
        $result.$exponent = 0;
        return;
    }
    if ($exponent)
        $mantissa = Long_or($mantissa, Long_create(0, 1048576));
    else {
        $mantissa = Long_shl($mantissa, 1);
        while (Long_eq(Long_and($mantissa, Long_create(0, 1048576)), Long_ZERO)) {
            $mantissa = Long_shl($mantissa, 1);
            $exponent = $exponent + (-1) | 0;
        }
    }
    var$6 = otcit_DoubleAnalyzer_exp10Table.data;
    $posCmp = $exponent << 16 >> 16;
    var$8 = 0;
    $binExponentCorrection = var$6.length;
    if (var$8 > $binExponentCorrection) {
        $result = new jl_IllegalArgumentException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $mantissaShift = $binExponentCorrection - 1 | 0;
    a: {
        while (true) {
            if (var$8 > $mantissaShift) {
                $decExponent = ( -var$8 | 0) - 1 | 0;
                break a;
            }
            $decExponent = (var$8 + $mantissaShift | 0) / 2 | 0;
            $binExponentCorrection = $rt_compare(var$6[$decExponent], $posCmp);
            if (!$binExponentCorrection)
                break;
            if ($binExponentCorrection <= 0)
                var$8 = $decExponent + 1 | 0;
            else
                $mantissaShift = $decExponent - 1 | 0;
        }
    }
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    $posCmp = $decExponent + 1 | 0;
    $mantissaShift = 12 + ($exponent - var$6[$posCmp] | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $mantissaShift);
    if (Long_le($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA)) {
        while (jl_Long_compareUnsigned($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = Long_add(Long_mul($decMantissa, Long_fromInt(10)), Long_fromInt(9));
        }
        var$6 = otcit_DoubleAnalyzer_exp10Table.data;
        $posCmp = $decExponent + 1 | 0;
        $mantissaShift = 12 + ($exponent - var$6[$posCmp] | 0) | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $mantissaShift);
    }
    $mantissa = Long_shl($mantissa, 1);
    $bits = Long_add($mantissa, Long_fromInt(1));
    var$6 = otcit_DoubleAnalyzer_mantissa10Table.data;
    $posCmp = $decExponent + 1 | 0;
    $decMantissaHi = var$6[$posCmp];
    $exponent = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight($bits, $decMantissaHi, $exponent);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, Long_fromInt(1)), otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $exponent));
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    $mantissa = $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            $mantissa = jl_Long_divideUnsigned($mantissa, Long_fromInt(10));
            if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) < 0)
                break;
        }
    else if (jl_Long_compareUnsigned($mantissa, Long_create(1569325056, 23283064)) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = Long_mul($mantissa, Long_fromInt(10));
    }
    $result.$mantissa = $mantissa;
    $result.$exponent = $decExponent - 330 | 0;
},
otcit_DoubleAnalyzer_findLowerDistance = ($mantissa, $lower) => {
    let $pos, $pos_0;
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($lower, $pos_0)) <= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_findUpperDistance = ($mantissa, $upper) => {
    let $pos, $pos_0;
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($upper, $pos_0)) >= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    let $a1, $a2, $a3, $a4, $b1, $b2, $b3, $b4;
    $a1 = Long_and($a, Long_fromInt(65535));
    $a2 = Long_and(Long_shru($a, 16), Long_fromInt(65535));
    $a3 = Long_and(Long_shru($a, 32), Long_fromInt(65535));
    $a4 = Long_and(Long_shru($a, 48), Long_fromInt(65535));
    $b1 = Long_and($b, Long_fromInt(65535));
    $b2 = Long_and(Long_shru($b, 16), Long_fromInt(65535));
    $b3 = Long_and(Long_shru($b, 32), Long_fromInt(65535));
    $b4 = Long_and(Long_shru($b, 48), Long_fromInt(65535));
    return Long_add(Long_add(Long_add(Long_shl(Long_mul($b4, $a4), 32 + $shift | 0), Long_shl(Long_add(Long_mul($b4, $a3), Long_mul($b3, $a4)), 16 + $shift | 0)), Long_shl(Long_add(Long_add(Long_mul($b4, $a2), Long_mul($b3, $a3)), Long_mul($b2, $a4)), $shift)), Long_shru(Long_add(Long_add(Long_add(Long_mul($b3, $a1), Long_mul($b2, $a2)), Long_mul($b1, $a3)), Long_shl(Long_add(Long_add(Long_add(Long_mul($b4, $a1), Long_mul($b3, $a2)), Long_mul($b2, $a3)), Long_mul($b1, $a4)), 16)), 32 - $shift | 0));
},
otcit_DoubleAnalyzer__clinit_ = () => {
    otcit_DoubleAnalyzer_MAX_MANTISSA = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
    otcit_DoubleAnalyzer_resultForLog10 = otcit_DoubleAnalyzer$Result__init_0();
    otcit_DoubleAnalyzer_mantissa10Table = $rt_createLongArrayFromData([Long_create(3251292512, 2194092222), Long_create(1766094183, 3510547556), Long_create(553881887, 2808438045), Long_create(443105509, 2246750436), Long_create(3285949193, 3594800697), Long_create(910772436, 2875840558), Long_create(2446604867, 2300672446), Long_create(2196580869, 3681075914), Long_create(2616258154, 2944860731), Long_create(1234013064, 2355888585), Long_create(1974420903, 3769421736), Long_create(720543263, 3015537389), Long_create(1435428070, 2412429911),
    Long_create(578697993, 3859887858), Long_create(2180945313, 3087910286), Long_create(885762791, 2470328229), Long_create(3135207384, 3952525166), Long_create(1649172448, 3162020133), Long_create(3037324877, 2529616106), Long_create(3141732885, 4047385770), Long_create(2513386308, 3237908616), Long_create(1151715587, 2590326893), Long_create(983751480, 4144523029), Long_create(1645994643, 3315618423), Long_create(3034782633, 2652494738), Long_create(3996658754, 4243991581), Long_create(2338333544, 3395193265),
    Long_create(1870666835, 2716154612), Long_create(4073513845, 2172923689), Long_create(3940641775, 3476677903), Long_create(575533043, 2781342323), Long_create(2178413352, 2225073858), Long_create(2626467905, 3560118173), Long_create(3819161242, 2848094538), Long_create(478348616, 2278475631), Long_create(3342338164, 3645561009), Long_create(3532863990, 2916448807), Long_create(1108304273, 2333159046), Long_create(55299919, 3733054474), Long_create(903233395, 2986443579), Long_create(1581580175, 2389154863),
    Long_create(1671534821, 3822647781), Long_create(478234397, 3058118225), Long_create(382587518, 2446494580), Long_create(612140029, 3914391328), Long_create(2207698941, 3131513062), Long_create(48172235, 2505210450), Long_create(77075576, 4008336720), Long_create(61660460, 3206669376), Long_create(3485302205, 2565335500), Long_create(1281516232, 4104536801), Long_create(166219527, 3283629441), Long_create(3568949458, 2626903552), Long_create(2274345296, 4203045684), Long_create(2678469696, 3362436547), Long_create(424788838, 2689949238),
    Long_create(2057817989, 2151959390), Long_create(3292508783, 3443135024), Long_create(3493000485, 2754508019), Long_create(3653393847, 2203606415), Long_create(1550462860, 3525770265), Long_create(1240370288, 2820616212), Long_create(3569276608, 2256492969), Long_create(3133862195, 3610388751), Long_create(1648096297, 2888311001), Long_create(459483578, 2310648801), Long_create(3312154103, 3697038081), Long_create(1790729823, 2957630465), Long_create(1432583858, 2366104372), Long_create(3151127633, 3785766995),
    Long_create(2520902106, 3028613596), Long_create(1157728226, 2422890877), Long_create(2711358621, 3876625403), Long_create(3887073815, 3101300322), Long_create(1391672133, 2481040258), Long_create(1367681954, 3969664413), Long_create(2812132482, 3175731530), Long_create(2249705985, 2540585224), Long_create(1022549199, 4064936359), Long_create(1677032818, 3251949087), Long_create(3918606632, 2601559269), Long_create(3692790234, 4162494831), Long_create(2095238728, 3329995865), Long_create(1676190982, 2663996692),
    Long_create(3540899031, 4262394707), Long_create(1114732307, 3409915766), Long_create(32792386, 2727932613), Long_create(1744220827, 2182346090), Long_create(2790753324, 3491753744), Long_create(3091596118, 2793402995), Long_create(2473276894, 2234722396), Long_create(2239256113, 3575555834), Long_create(2650398349, 2860444667), Long_create(402331761, 2288355734), Long_create(2361717736, 3661369174), Long_create(2748367648, 2929095339), Long_create(3057687578, 2343276271), Long_create(3174313206, 3749242034),
    Long_create(3398444024, 2999393627), Long_create(1000768301, 2399514902), Long_create(2460222741, 3839223843), Long_create(3686165111, 3071379074), Long_create(3807925548, 2457103259), Long_create(3515700499, 3931365215), Long_create(2812560399, 3145092172), Long_create(532061401, 2516073738), Long_create(4287272078, 4025717980), Long_create(3429817663, 3220574384), Long_create(3602847589, 2576459507), Long_create(2328582306, 4122335212), Long_create(144878926, 3297868170), Long_create(115903141, 2638294536),
    Long_create(2762425404, 4221271257), Long_create(491953404, 3377017006), Long_create(3829536560, 2701613604), Long_create(3922622707, 2161290883), Long_create(1122235577, 3458065414), Long_create(1756781920, 2766452331), Long_create(546432077, 2213161865), Long_create(874291324, 3541058984), Long_create(1558426518, 2832847187), Long_create(3823721592, 2266277749), Long_create(3540974170, 3626044399), Long_create(3691772795, 2900835519), Long_create(3812411695, 2320668415), Long_create(1804891416, 3713069465),
    Long_create(1443913133, 2970455572), Long_create(3732110884, 2376364457), Long_create(2535403578, 3802183132), Long_create(310335944, 3041746506), Long_create(3684242592, 2433397204), Long_create(3317807769, 3893435527), Long_create(936259297, 3114748422), Long_create(3325987815, 2491798737), Long_create(1885606668, 3986877980), Long_create(1508485334, 3189502384), Long_create(2065781726, 2551601907), Long_create(4164244222, 4082563051), Long_create(2472401918, 3266050441), Long_create(1118928075, 2612840353),
    Long_create(931291461, 4180544565), Long_create(745033169, 3344435652), Long_create(3173006913, 2675548521), Long_create(3358824142, 4280877634), Long_create(3546052773, 3424702107), Long_create(1118855300, 2739761686), Long_create(36090780, 2191809349), Long_create(1775732167, 3506894958), Long_create(3138572652, 2805515966), Long_create(1651864662, 2244412773), Long_create(1783990001, 3591060437), Long_create(4004172378, 2872848349), Long_create(4062331362, 2298278679), Long_create(3922749802, 3677245887),
    Long_create(1420212923, 2941796710), Long_create(1136170338, 2353437368), Long_create(958879082, 3765499789), Long_create(1626096725, 3012399831), Long_create(441883920, 2409919865), Long_create(707014273, 3855871784), Long_create(1424604878, 3084697427), Long_create(3716664280, 2467757941), Long_create(4228675929, 3948412706), Long_create(2523947284, 3158730165), Long_create(2019157827, 2526984132), Long_create(4089645983, 4043174611), Long_create(2412723327, 3234539689), Long_create(2789172121, 2587631751),
    Long_create(2744688475, 4140210802), Long_create(477763862, 3312168642), Long_create(2959191467, 2649734913), Long_create(3875712888, 4239575861), Long_create(2241576851, 3391660689), Long_create(2652254940, 2713328551), Long_create(1262810493, 2170662841), Long_create(302509870, 3473060546), Long_create(3677981733, 2778448436), Long_create(2083391927, 2222758749), Long_create(756446706, 3556413999), Long_create(1464150824, 2845131199), Long_create(2030314118, 2276104959), Long_create(671522212, 3641767935),
    Long_create(537217769, 2913414348), Long_create(2147761134, 2330731478), Long_create(2577424355, 3729170365), Long_create(2061939484, 2983336292), Long_create(4226531965, 2386669033), Long_create(1608490388, 3818670454), Long_create(2145785770, 3054936363), Long_create(3434615534, 2443949090), Long_create(1200417559, 3910318545), Long_create(960334047, 3128254836), Long_create(4204241074, 2502603868), Long_create(1572824964, 4004166190), Long_create(1258259971, 3203332952), Long_create(3583588354, 2562666361),
    Long_create(4015754449, 4100266178), Long_create(635623181, 3280212943), Long_create(2226485463, 2624170354), Long_create(985396364, 4198672567), Long_create(3365297469, 3358938053), Long_create(115257597, 2687150443), Long_create(1810192996, 2149720354), Long_create(319328417, 3439552567), Long_create(2832443111, 2751642053), Long_create(3983941407, 2201313642), Long_create(2938332415, 3522101828), Long_create(4068652850, 2817681462), Long_create(1536935362, 2254145170), Long_create(2459096579, 3606632272),
    Long_create(249290345, 2885305818), Long_create(1917419194, 2308244654), Long_create(490890333, 3693191447), Long_create(2969692644, 2954553157), Long_create(657767197, 2363642526), Long_create(3629407892, 3781828041), Long_create(2044532855, 3025462433), Long_create(3353613202, 2420369946), Long_create(3647794205, 3872591914), Long_create(3777228823, 3098073531), Long_create(2162789599, 2478458825), Long_create(3460463359, 3965534120), Long_create(2768370687, 3172427296), Long_create(1355703090, 2537941837),
    Long_create(3028118404, 4060706939), Long_create(3281488183, 3248565551), Long_create(1766197087, 2598852441), Long_create(1107928421, 4158163906), Long_create(27349277, 3326531125), Long_create(21879422, 2661224900), Long_create(35007075, 4257959840), Long_create(28005660, 3406367872), Long_create(2599384905, 2725094297), Long_create(361521006, 2180075438), Long_create(4014407446, 3488120700), Long_create(3211525957, 2790496560), Long_create(2569220766, 2232397248), Long_create(3251759766, 3571835597),
    Long_create(883420894, 2857468478), Long_create(2424723634, 2285974782), Long_create(443583977, 3657559652), Long_create(2931847559, 2926047721), Long_create(1486484588, 2340838177), Long_create(3237368801, 3745341083), Long_create(12914663, 2996272867), Long_create(2587312108, 2397018293), Long_create(3280705914, 3835229269), Long_create(3483558190, 3068183415), Long_create(2786846552, 2454546732), Long_create(1022980646, 3927274772), Long_create(3395364895, 3141819817), Long_create(998304997, 2513455854),
    Long_create(3315274914, 4021529366), Long_create(1793226472, 3217223493), Long_create(3152568096, 2573778794), Long_create(2467128576, 4118046071), Long_create(1114709402, 3294436857), Long_create(3468747899, 2635549485), Long_create(1255029343, 4216879177), Long_create(3581003852, 3373503341), Long_create(2005809622, 2698802673), Long_create(3322634616, 2159042138), Long_create(162254630, 3454467422), Long_create(2706784082, 2763573937), Long_create(447440347, 2210859150), Long_create(715904555, 3537374640),
    Long_create(572723644, 2829899712), Long_create(3035159293, 2263919769), Long_create(2279274491, 3622271631), Long_create(964426134, 2897817305), Long_create(771540907, 2318253844), Long_create(2952452370, 3709206150), Long_create(2361961896, 2967364920), Long_create(1889569516, 2373891936), Long_create(1305324308, 3798227098), Long_create(2762246365, 3038581678), Long_create(3927784010, 2430865342), Long_create(2848480580, 3889384548), Long_create(3996771382, 3111507638), Long_create(620436728, 2489206111),
    Long_create(3569679143, 3982729777), Long_create(1137756396, 3186183822), Long_create(3487185494, 2548947057), Long_create(2143522954, 4078315292), Long_create(4291798741, 3262652233), Long_create(856458615, 2610121787), Long_create(2229327243, 4176194859), Long_create(2642455254, 3340955887), Long_create(395977285, 2672764710), Long_create(633563656, 4276423536), Long_create(3942824761, 3421138828), Long_create(577279431, 2736911063), Long_create(2179810463, 2189528850), Long_create(3487696741, 3503246160),
    Long_create(2790157393, 2802596928), Long_create(3950112833, 2242077542), Long_create(2884206696, 3587324068), Long_create(4025352275, 2869859254), Long_create(4079275279, 2295887403), Long_create(1372879692, 3673419846), Long_create(239310294, 2938735877), Long_create(2768428613, 2350988701), Long_create(2711498862, 3761581922), Long_create(451212171, 3009265538), Long_create(2078956655, 2407412430), Long_create(3326330649, 3851859888), Long_create(84084141, 3081487911), Long_create(3503241150, 2465190328),
    Long_create(451225085, 3944304526), Long_create(3796953905, 3155443620), Long_create(3037563124, 2524354896), Long_create(3142114080, 4038967834), Long_create(3372684723, 3231174267), Long_create(980160860, 2584939414), Long_create(3286244294, 4135903062), Long_create(911008517, 3308722450), Long_create(728806813, 2646977960), Long_create(1166090902, 4235164736), Long_create(73879262, 3388131789), Long_create(918096869, 2710505431), Long_create(4170451332, 2168404344), Long_create(4095741754, 3469446951),
    Long_create(2417599944, 2775557561), Long_create(1075086496, 2220446049), Long_create(3438125312, 3552713678), Long_create(173519872, 2842170943), Long_create(1856802816, 2273736754), Long_create(393904128, 3637978807), Long_create(2892103680, 2910383045), Long_create(2313682944, 2328306436), Long_create(1983905792, 3725290298), Long_create(3305111552, 2980232238), Long_create(67108864, 2384185791), Long_create(2684354560, 3814697265), Long_create(2147483648, 3051757812), Long_create(0, 2441406250), Long_create(0, 3906250000),
    Long_create(0, 3125000000), Long_create(0, 2500000000), Long_create(0, 4000000000), Long_create(0, 3200000000), Long_create(0, 2560000000), Long_create(0, 4096000000), Long_create(0, 3276800000), Long_create(0, 2621440000), Long_create(0, 4194304000), Long_create(0, 3355443200), Long_create(0, 2684354560), Long_create(0, 2147483648), Long_create(3435973836, 3435973836), Long_create(1889785610, 2748779069), Long_create(2370821947, 2199023255), Long_create(3793315115, 3518437208), Long_create(457671715, 2814749767),
    Long_create(2943117749, 2251799813), Long_create(3849994940, 3602879701), Long_create(2221002492, 2882303761), Long_create(917808535, 2305843009), Long_create(3186480574, 3689348814), Long_create(3408177918, 2951479051), Long_create(1867548875, 2361183241), Long_create(1270091283, 3777893186), Long_create(157079567, 3022314549), Long_create(984657113, 2417851639), Long_create(3293438299, 3868562622), Long_create(916763721, 3094850098), Long_create(2451397895, 2475880078), Long_create(3063243173, 3961408125),
    Long_create(2450594538, 3169126500), Long_create(1960475630, 2535301200), Long_create(3136761009, 4056481920), Long_create(2509408807, 3245185536), Long_create(1148533586, 2596148429), Long_create(3555640657, 4153837486), Long_create(1985519066, 3323069989), Long_create(2447408712, 2658455991), Long_create(2197867021, 4253529586), Long_create(899300158, 3402823669), Long_create(1578433585, 2722258935), Long_create(1262746868, 2177807148), Long_create(1161401530, 3484491437), Long_create(3506101601, 2787593149),
    Long_create(3663874740, 2230074519), Long_create(3285219207, 3568119231), Long_create(1769181906, 2854495385), Long_create(1415345525, 2283596308), Long_create(1405559381, 3653754093), Long_create(2842434423, 2923003274), Long_create(3132940998, 2338402619), Long_create(2435725219, 3741444191), Long_create(1089586716, 2993155353), Long_create(2589656291, 2394524282), Long_create(707476229, 3831238852), Long_create(3142961361, 3064991081), Long_create(1655375629, 2451992865), Long_create(2648601007, 3923188584),
    Long_create(2977874265, 3138550867), Long_create(664312493, 2510840694), Long_create(2780886908, 4017345110), Long_create(2224709526, 3213876088), Long_create(3497754539, 2571100870), Long_create(1301439967, 4113761393), Long_create(2759138892, 3291009114), Long_create(3066304573, 2632807291), Long_create(3188100398, 4212491666), Long_create(1691486859, 3369993333), Long_create(3071176406, 2695994666), Long_create(1597947665, 2156795733), Long_create(1697722806, 3450873173), Long_create(3076165163, 2760698538),
    Long_create(4178919049, 2208558830), Long_create(2391303182, 3533694129), Long_create(2772036005, 2826955303), Long_create(3935615722, 2261564242), Long_create(2861011319, 3618502788), Long_create(4006795973, 2894802230), Long_create(3205436779, 2315841784), Long_create(2551718468, 3705346855), Long_create(2041374775, 2964277484), Long_create(2492093279, 2371421987), Long_create(551375410, 3794275180), Long_create(441100328, 3035420144), Long_create(1211873721, 2428336115), Long_create(1938997954, 3885337784),
    Long_create(2410191822, 3108270227), Long_create(210166539, 2486616182), Long_create(1195259923, 3978585891), Long_create(97214479, 3182868713), Long_create(1795758501, 2546294970), Long_create(2873213602, 4074071952), Long_create(580583963, 3259257562), Long_create(3041447548, 2607406049), Long_create(2289335700, 4171849679), Long_create(2690462019, 3337479743), Long_create(3870356534, 2669983794), Long_create(3615590076, 4271974071), Long_create(2033478602, 3417579257), Long_create(4203763259, 2734063405),
    Long_create(3363010607, 2187250724), Long_create(2803836594, 3499601159), Long_create(3102062734, 2799680927), Long_create(763663269, 2239744742), Long_create(2080854690, 3583591587), Long_create(4241664129, 2866873269), Long_create(4252324763, 2293498615), Long_create(2508752324, 3669597785), Long_create(2007001859, 2935678228), Long_create(3323588406, 2348542582), Long_create(1881767613, 3757668132), Long_create(4082394468, 3006134505), Long_create(3265915574, 2404907604), Long_create(2648484541, 3847852167),
    Long_create(400800715, 3078281734), Long_create(1179634031, 2462625387), Long_create(2746407909, 3940200619), Long_create(3056119786, 3152160495), Long_create(2444895829, 2521728396), Long_create(2193846408, 4034765434), Long_create(2614070585, 3227812347), Long_create(373269550, 2582249878), Long_create(4033205117, 4131599804), Long_create(4085557553, 3305279843), Long_create(691465664, 2644223875), Long_create(1106345063, 4230758200), Long_create(885076050, 3384606560), Long_create(708060840, 2707685248),
    Long_create(2284435591, 2166148198), Long_create(2796103486, 3465837117), Long_create(518895870, 2772669694), Long_create(1274110155, 2218135755), Long_create(2038576249, 3549017208), Long_create(3348847917, 2839213766), Long_create(1820084875, 2271371013), Long_create(2053142340, 3634193621), Long_create(783520413, 2907354897), Long_create(3203796708, 2325883917), Long_create(1690100896, 3721414268), Long_create(3070067635, 2977131414), Long_create(3315047567, 2381705131), Long_create(3586089190, 3810728210),
    Long_create(2868871352, 3048582568), Long_create(4013084000, 2438866054), Long_create(3843954022, 3902185687), Long_create(1357176299, 3121748550), Long_create(1085741039, 2497398840), Long_create(1737185663, 3995838144), Long_create(2248741989, 3196670515), Long_create(1798993591, 2557336412), Long_create(3737383206, 4091738259), Long_create(3848900024, 3273390607), Long_create(1361133101, 2618712486), Long_create(459826043, 4189939978), Long_create(2085847752, 3351951982), Long_create(4245658579, 2681561585),
    Long_create(2498086431, 4290498537), Long_create(280482227, 3432398830), Long_create(224385781, 2745919064), Long_create(1038502084, 2196735251), Long_create(4238583712, 3514776401), Long_create(2531873511, 2811821121), Long_create(1166505349, 2249456897), Long_create(2725402018, 3599131035), Long_create(2180321615, 2879304828), Long_create(3462244210, 2303443862), Long_create(2103616899, 3685510180), Long_create(1682893519, 2948408144), Long_create(2205308275, 2358726515), Long_create(3528493240, 3773962424),
    Long_create(3681788051, 3019169939), Long_create(3804423900, 2415335951), Long_create(74124026, 3864537523), Long_create(1777286139, 3091630018), Long_create(3139815829, 2473304014), Long_create(2446724950, 3957286423), Long_create(3675366878, 3165829138), Long_create(363313125, 2532663311), Long_create(3158281377, 4052261297), Long_create(808638183, 3241809038), Long_create(2364897465, 2593447230), Long_create(3783835944, 4149515568), Long_create(450088378, 3319612455), Long_create(360070702, 2655689964),
    Long_create(2294100042, 4249103942), Long_create(117293115, 3399283154), Long_create(952827951, 2719426523), Long_create(2480249279, 2175541218), Long_create(3109405388, 3480865949), Long_create(3346517769, 2784692759), Long_create(3536207675, 2227754207), Long_create(2221958443, 3564406732), Long_create(59579836, 2851525386), Long_create(3483637705, 2281220308), Long_create(419859574, 3649952494), Long_create(1194881118, 2919961995), Long_create(955904894, 2335969596), Long_create(4106428209, 3737551353),
    Long_create(708162189, 2990041083), Long_create(2284516670, 2392032866), Long_create(1937239754, 3827252586), Long_create(690798344, 3061802069), Long_create(1411632134, 2449441655), Long_create(2258611415, 3919106648), Long_create(3524876050, 3135285318), Long_create(242920462, 2508228255), Long_create(388672740, 4013165208), Long_create(2028925110, 3210532166), Long_create(764146629, 2568425733), Long_create(363641147, 4109481173), Long_create(2008899836, 3287584938), Long_create(3325106787, 2630067950),
    Long_create(1025203564, 4208108721), Long_create(4256136688, 3366486976), Long_create(2545915891, 2693189581), Long_create(1177739254, 2154551665), Long_create(1884382806, 3447282664), Long_create(2366499704, 2757826131), Long_create(1034206304, 2206260905), Long_create(1654730086, 3530017448), Long_create(3041770987, 2824013958), Long_create(4151403708, 2259211166), Long_create(629291719, 3614737867), Long_create(3080413753, 2891790293), Long_create(4182317920, 2313432234), Long_create(4114728295, 3701491575),
    Long_create(3291782636, 2961193260), Long_create(2633426109, 2368954608), Long_create(3354488315, 3790327373), Long_create(106610275, 3032261899), Long_create(944281679, 2425809519), Long_create(3228837605, 3881295230), Long_create(2583070084, 3105036184), Long_create(2925449526, 2484028947), Long_create(1244745405, 3974446316), Long_create(136802865, 3179557053), Long_create(1827429210, 2543645642), Long_create(3782880196, 4069833027), Long_create(1308317238, 3255866422), Long_create(3623634168, 2604693137),
    Long_create(2361840832, 4167509020), Long_create(1889472666, 3334007216), Long_create(652584673, 2667205773), Long_create(185142018, 4267529237), Long_create(2725093992, 3414023389), Long_create(3039068653, 2731218711), Long_create(1572261463, 2184974969), Long_create(4233605259, 3495959950), Long_create(3386884207, 2796767960), Long_create(2709507366, 2237414368), Long_create(3476218326, 3579862989), Long_create(3639968120, 2863890391), Long_create(2052981037, 2291112313), Long_create(2425776200, 3665779701),
    Long_create(1081627501, 2932623761), Long_create(6308541, 2346099009), Long_create(1728080585, 3753758414), Long_create(2241457927, 3003006731), Long_create(934172882, 2402405385), Long_create(1494676612, 3843848616), Long_create(336747830, 3075078893), Long_create(1987385183, 2460063114), Long_create(602835915, 3936100983), Long_create(2200255650, 3148880786), Long_create(901211061, 2519104629), Long_create(3159924616, 4030567406), Long_create(1668946233, 3224453925), Long_create(1335156987, 2579563140),
    Long_create(2136251179, 4127301024), Long_create(2567994402, 3301840819), Long_create(2913388981, 2641472655), Long_create(366455074, 4226356249), Long_create(1152157518, 3381084999), Long_create(1780719474, 2704867999), Long_create(2283569038, 2163894399), Long_create(1076730083, 3462231039), Long_create(1720377526, 2769784831), Long_create(517308561, 2215827865), Long_create(827693699, 3545324584), Long_create(1521148418, 2836259667), Long_create(3793899112, 2269007733), Long_create(916277824, 3630412374),
    Long_create(1592015718, 2904329899), Long_create(2132606034, 2323463919), Long_create(835189277, 3717542271), Long_create(4104125258, 2974033816), Long_create(2424306747, 2379227053), Long_create(3019897337, 3806763285), Long_create(2415917869, 3045410628), Long_create(3650721214, 2436328502), Long_create(2405180105, 3898125604), Long_create(2783137543, 3118500483), Long_create(3944496953, 2494800386), Long_create(298240911, 3991680619), Long_create(1097586188, 3193344495), Long_create(878068950, 2554675596),
    Long_create(3981890698, 4087480953), Long_create(608532181, 3269984763), Long_create(2204812663, 2615987810), Long_create(3527700261, 4185580496), Long_create(1963166749, 3348464397), Long_create(4147513777, 2678771517), Long_create(3200048207, 4286034428), Long_create(4278025484, 3428827542), Long_create(1704433468, 2743062034), Long_create(2222540234, 2194449627), Long_create(120090538, 3511119404), Long_create(955065889, 2808895523), Long_create(2482039630, 2247116418), Long_create(3112269949, 3595386269),
    Long_create(3348809418, 2876309015), Long_create(2679047534, 2301047212), Long_create(850502218, 3681675540), Long_create(680401775, 2945340432), Long_create(3121301797, 2356272345), Long_create(699115580, 3770035753), Long_create(2277279382, 3016028602), Long_create(103836587, 2412822882), Long_create(1025131999, 3860516611), Long_create(4256079436, 3088413288), Long_create(827883168, 2470730631), Long_create(3901593088, 3953169009)]);
    otcit_DoubleAnalyzer_exp10Table = $rt_createShortArrayFromData([(-70), (-66), (-63), (-60), (-56), (-53), (-50), (-46), (-43), (-40), (-36), (-33), (-30), (-26), (-23), (-20), (-16), (-13), (-10), (-6), (-3), 0, 4, 7, 10, 14, 17, 20, 23, 27, 30, 33, 37, 40, 43, 47, 50, 53, 57, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 113, 116, 120, 123, 126, 130, 133, 136, 140, 143, 146, 150, 153, 156, 160, 163, 166, 170, 173, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216, 219,
    223, 226, 229, 233, 236, 239, 243, 246, 249, 253, 256, 259, 263, 266, 269, 273, 276, 279, 283, 286, 289, 293, 296, 299, 303, 306, 309, 312, 316, 319, 322, 326, 329, 332, 336, 339, 342, 346, 349, 352, 356, 359, 362, 366, 369, 372, 376, 379, 382, 386, 389, 392, 396, 399, 402, 406, 409, 412, 415, 419, 422, 425, 429, 432, 435, 439, 442, 445, 449, 452, 455, 459, 462, 465, 469, 472, 475, 479, 482, 485, 489, 492, 495, 499, 502, 505, 508, 512, 515, 518, 522, 525, 528, 532, 535, 538, 542, 545, 548, 552, 555, 558,
    562, 565, 568, 572, 575, 578, 582, 585, 588, 592, 595, 598, 601, 605, 608, 611, 615, 618, 621, 625, 628, 631, 635, 638, 641, 645, 648, 651, 655, 658, 661, 665, 668, 671, 675, 678, 681, 685, 688, 691, 695, 698, 701, 704, 708, 711, 714, 718, 721, 724, 728, 731, 734, 738, 741, 744, 748, 751, 754, 758, 761, 764, 768, 771, 774, 778, 781, 784, 788, 791, 794, 797, 801, 804, 807, 811, 814, 817, 821, 824, 827, 831, 834, 837, 841, 844, 847, 851, 854, 857, 861, 864, 867, 871, 874, 877, 881, 884, 887, 891, 894, 897,
    900, 904, 907, 910, 914, 917, 920, 924, 927, 930, 934, 937, 940, 944, 947, 950, 954, 957, 960, 964, 967, 970, 974, 977, 980, 984, 987, 990, 993, 997, 1000, 1003, 1007, 1010, 1013, 1017, 1020, 1023, 1027, 1030, 1033, 1037, 1040, 1043, 1047, 1050, 1053, 1057, 1060, 1063, 1067, 1070, 1073, 1077, 1080, 1083, 1086, 1090, 1093, 1096, 1100, 1103, 1106, 1110, 1113, 1116, 1120, 1123, 1126, 1130, 1133, 1136, 1140, 1143, 1146, 1150, 1153, 1156, 1160, 1163, 1166, 1170, 1173, 1176, 1180, 1183, 1186, 1189, 1193, 1196,
    1199, 1203, 1206, 1209, 1213, 1216, 1219, 1223, 1226, 1229, 1233, 1236, 1239, 1243, 1246, 1249, 1253, 1256, 1259, 1263, 1266, 1269, 1273, 1276, 1279, 1282, 1286, 1289, 1292, 1296, 1299, 1302, 1306, 1309, 1312, 1316, 1319, 1322, 1326, 1329, 1332, 1336, 1339, 1342, 1346, 1349, 1352, 1356, 1359, 1362, 1366, 1369, 1372, 1376, 1379, 1382, 1385, 1389, 1392, 1395, 1399, 1402, 1405, 1409, 1412, 1415, 1419, 1422, 1425, 1429, 1432, 1435, 1439, 1442, 1445, 1449, 1452, 1455, 1459, 1462, 1465, 1469, 1472, 1475, 1478,
    1482, 1485, 1488, 1492, 1495, 1498, 1502, 1505, 1508, 1512, 1515, 1518, 1522, 1525, 1528, 1532, 1535, 1538, 1542, 1545, 1548, 1552, 1555, 1558, 1562, 1565, 1568, 1572, 1575, 1578, 1581, 1585, 1588, 1591, 1595, 1598, 1601, 1605, 1608, 1611, 1615, 1618, 1621, 1625, 1628, 1631, 1635, 1638, 1641, 1645, 1648, 1651, 1655, 1658, 1661, 1665, 1668, 1671, 1674, 1678, 1681, 1684, 1688, 1691, 1694, 1698, 1701, 1704, 1708, 1711, 1714, 1718, 1721, 1724, 1728, 1731, 1734, 1738, 1741, 1744, 1748, 1751, 1754, 1758, 1761,
    1764, 1767, 1771, 1774, 1777, 1781, 1784, 1787, 1791, 1794, 1797, 1801, 1804, 1807, 1811, 1814, 1817, 1821, 1824, 1827, 1831, 1834, 1837, 1841, 1844, 1847, 1851, 1854, 1857, 1861, 1864, 1867, 1870, 1874, 1877, 1880, 1884, 1887, 1890, 1894, 1897, 1900, 1904, 1907, 1910, 1914, 1917, 1920, 1924, 1927, 1930, 1934, 1937, 1940, 1944, 1947, 1950, 1954, 1957, 1960, 1963, 1967, 1970, 1973, 1977, 1980, 1983, 1987, 1990, 1993, 1997, 2000, 2003, 2007, 2010, 2013, 2017, 2020, 2023, 2027, 2030, 2033, 2037, 2040, 2043,
    2047, 2050, 2053, 2057, 2060, 2063, 2066, 2070, 2073, 2076, 2080, 2083, 2086, 2090, 2093, 2096, 2100, 2103, 2106, 2110, 2113, 2116, 2120]);
};
function cbggg_GLFrameBuffer$GLFrameBufferBuilder() {
    let a = this; jl_Object.call(a);
    a.$width4 = 0;
    a.$height6 = 0;
    a.$samples = 0;
    a.$textureAttachmentSpecs = null;
    a.$colorRenderBufferSpecs = null;
    a.$stencilRenderBufferSpec = null;
    a.$depthRenderBufferSpec = null;
    a.$packedStencilDepthRenderBufferSpec = null;
    a.$hasStencilRenderBuffer = 0;
    a.$hasDepthRenderBuffer = 0;
    a.$hasPackedStencilDepthRenderBuffer = 0;
}
let cbggg_GLFrameBuffer$FrameBufferBuilder = $rt_classWithoutFields(cbggg_GLFrameBuffer$GLFrameBufferBuilder);
function ju_Date() {
    jl_Object.call(this);
    this.$value5 = Long_ZERO;
}
let ju_Date__init_ = $this => {
    $this.$value5 = jl_System_currentTimeMillis();
},
ju_Date__init_0 = () => {
    let var_0 = new ju_Date();
    ju_Date__init_(var_0);
    return var_0;
},
ju_Date__clinit_ = () => {
    return;
},
jm_Multiplication = $rt_classWithoutFields(),
jm_Multiplication_tenPows = null,
jm_Multiplication_fivePows = null,
jm_Multiplication_bigTenPows = null,
jm_Multiplication_bigFivePows = null,
jm_Multiplication_$callClinit = () => {
    jm_Multiplication_$callClinit = $rt_eraseClinit(jm_Multiplication);
    jm_Multiplication__clinit_();
},
jm_Multiplication__init_ = $this => {
    jm_Multiplication_$callClinit();
},
jm_Multiplication__init_0 = () => {
    let var_0 = new jm_Multiplication();
    jm_Multiplication__init_(var_0);
    return var_0;
},
jm_Multiplication_karatsuba = ($op1, $op2) => {
    let $upperOp1, $ndiv2, $upperOp2, $lowerOp1, $lowerOp2, $upper, $lower, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, var$23;
    jm_Multiplication_$callClinit();
    if ($op2.$numberLength <= $op1.$numberLength) {
        $upperOp1 = $op2;
        $op2 = $op1;
        $op1 = $upperOp1;
    }
    $ndiv2 = $op1.$numberLength;
    if ($ndiv2 >= 63) {
        $ndiv2 = ($op2.$numberLength & (-2)) << 4;
        $upperOp1 = jm_BigInteger_shiftRight($op2, $ndiv2);
        $upperOp2 = jm_BigInteger_shiftRight($op1, $ndiv2);
        $lowerOp1 = jm_BigInteger_subtract($op2, jm_BigInteger_shiftLeft($upperOp1, $ndiv2));
        $lowerOp2 = jm_BigInteger_subtract($op1, jm_BigInteger_shiftLeft($upperOp2, $ndiv2));
        $upper = jm_Multiplication_karatsuba($upperOp1, $upperOp2);
        $lower = jm_Multiplication_karatsuba($lowerOp1, $lowerOp2);
        $op1 = jm_BigInteger_shiftLeft(jm_BigInteger_add(jm_BigInteger_add(jm_Multiplication_karatsuba(jm_BigInteger_subtract($upperOp1, $lowerOp1), jm_BigInteger_subtract($lowerOp2, $upperOp2)), $upper), $lower), $ndiv2);
        return jm_BigInteger_add(jm_BigInteger_add(jm_BigInteger_shiftLeft($upper, $ndiv2 << 1), $op1), $lower);
    }
    var$10 = $op2.$numberLength;
    var$11 = var$10 + $ndiv2 | 0;
    var$12 = $op2.$sign0 == $op1.$sign0 ? 1 : (-1);
    if (var$11 == 2) {
        var$13 = jm_Multiplication_unsignedMultAddAdd($op2.$digits.data[0], $op1.$digits.data[0], 0, 0);
        $ndiv2 = Long_lo(var$13);
        var$10 = Long_hi(var$13);
        $op1 = !var$10 ? jm_BigInteger__init_0(var$12, $ndiv2) : jm_BigInteger__init_(var$12, 2, $rt_createIntArrayFromData([$ndiv2, var$10]));
    } else {
        var$14 = $op2.$digits;
        var$15 = $op1.$digits;
        var$16 = $rt_createIntArray(var$11);
        if (var$10 && $ndiv2) {
            if (var$10 == 1) {
                var$17 = var$14.data;
                var$16.data[$ndiv2] = jm_Multiplication_multiplyByInt(var$16, var$15, $ndiv2, var$17[0]);
            } else if ($ndiv2 == 1) {
                var$17 = var$15.data;
                var$16.data[var$10] = jm_Multiplication_multiplyByInt(var$16, var$14, var$10, var$17[0]);
            } else if (var$14 === var$15 && var$10 == $ndiv2)
                jm_Multiplication_square(var$14, var$10, var$16);
            else {
                var$18 = var$16.data;
                var$19 = 0;
                while (var$19 < var$10) {
                    var$17 = var$14.data;
                    var$13 = Long_ZERO;
                    var$20 = var$17[var$19];
                    var$21 = 0;
                    while (var$21 < $ndiv2) {
                        var$22 = var$15.data[var$21];
                        var$23 = var$19 + var$21 | 0;
                        var$13 = jm_Multiplication_unsignedMultAddAdd(var$20, var$22, var$18[var$23], Long_lo(var$13));
                        var$18[var$23] = Long_lo(var$13);
                        var$13 = Long_shru(var$13, 32);
                        var$21 = var$21 + 1 | 0;
                    }
                    var$18[var$19 + $ndiv2 | 0] = Long_lo(var$13);
                    var$19 = var$19 + 1 | 0;
                }
            }
        }
        $op1 = jm_BigInteger__init_(var$12, var$11, var$16);
        jm_BigInteger_cutOffLeadingZeroes($op1);
    }
    return $op1;
},
jm_Multiplication_multiplyByInt = ($res, $a, $aSize, $factor) => {
    let $carry, $i, var$7;
    jm_Multiplication_$callClinit();
    $carry = Long_ZERO;
    $i = 0;
    while ($i < $aSize) {
        var$7 = $res.data;
        $carry = jm_Multiplication_unsignedMultAddAdd($a.data[$i], $factor, Long_lo($carry), 0);
        var$7[$i] = Long_lo($carry);
        $carry = Long_shru($carry, 32);
        $i = $i + 1 | 0;
    }
    return Long_lo($carry);
},
jm_Multiplication_square = ($a, $aLen, $res) => {
    let $i, $carry, $i_0, $j, var$8, var$9, $index, var$11, var$12;
    jm_Multiplication_$callClinit();
    $i = 0;
    while ($i < $aLen) {
        $carry = Long_ZERO;
        $i_0 = $i + 1 | 0;
        $j = $i_0;
        while ($j < $aLen) {
            var$8 = $res.data;
            var$9 = $a.data;
            $index = var$9[$i];
            var$11 = var$9[$j];
            var$12 = $i + $j | 0;
            $carry = jm_Multiplication_unsignedMultAddAdd($index, var$11, var$8[var$12], Long_lo($carry));
            var$8[var$12] = Long_lo($carry);
            $carry = Long_shru($carry, 32);
            $j = $j + 1 | 0;
        }
        $res.data[$i + $aLen | 0] = Long_lo($carry);
        $i = $i_0;
    }
    jm_BitLevel_shiftLeftOneBit($res, $res, $aLen << 1);
    $carry = Long_ZERO;
    $i = 0;
    $index = 0;
    while ($i < $aLen) {
        var$8 = $res.data;
        var$9 = $a.data;
        $carry = jm_Multiplication_unsignedMultAddAdd(var$9[$i], var$9[$i], var$8[$index], Long_lo($carry));
        var$8[$index] = Long_lo($carry);
        $carry = Long_shru($carry, 32);
        $i_0 = $index + 1 | 0;
        $carry = Long_add($carry, Long_and(Long_fromInt(var$8[$i_0]), Long_create(4294967295, 0)));
        var$8[$i_0] = Long_lo($carry);
        $carry = Long_shru($carry, 32);
        $i = $i + 1 | 0;
        $index = $i_0 + 1 | 0;
    }
    return $res;
},
jm_Multiplication_powerOf10 = $exp => {
    let $intExp, var$3, $powerOfFive, $longExp, var$6;
    jm_Multiplication_$callClinit();
    $intExp = Long_lo($exp);
    var$3 = jm_Multiplication_bigTenPows.data;
    if (Long_lt($exp, Long_fromInt(var$3.length)))
        return var$3[$intExp];
    if (Long_le($exp, Long_fromInt(50)))
        return jm_BigInteger_pow(jm_BigInteger_TEN, $intExp);
    if (Long_le($exp, Long_fromInt(1000)))
        return jm_BigInteger_shiftLeft(jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp), $intExp);
    if (Long_gt(Long_add(Long_fromInt(1), Long_fromNumber(Long_toNumber($exp) / 2.4082399653118496)), Long_fromInt(1000000))) {
        $powerOfFive = new jl_ArithmeticException;
        jl_Exception__init_($powerOfFive, $rt_s(887));
        $rt_throw($powerOfFive);
    }
    if (Long_le($exp, Long_fromInt(2147483647)))
        return jm_BigInteger_shiftLeft(jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp), $intExp);
    $powerOfFive = jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], 2147483647);
    $longExp = Long_sub($exp, Long_fromInt(2147483647));
    $intExp = Long_lo(Long_rem($exp, Long_fromInt(2147483647)));
    var$6 = $powerOfFive;
    $exp = $longExp;
    while (Long_gt($exp, Long_fromInt(2147483647))) {
        var$6 = jm_BigInteger_multiply(var$6, $powerOfFive);
        $exp = Long_sub($exp, Long_fromInt(2147483647));
    }
    $powerOfFive = jm_BigInteger_shiftLeft(jm_BigInteger_multiply(var$6, jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp)), 2147483647);
    while (Long_gt($longExp, Long_fromInt(2147483647))) {
        $powerOfFive = jm_BigInteger_shiftLeft($powerOfFive, 2147483647);
        $longExp = Long_sub($longExp, Long_fromInt(2147483647));
    }
    return jm_BigInteger_shiftLeft($powerOfFive, $intExp);
},
jm_Multiplication_multiplyByFivePow = ($val, $exp) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    jm_Multiplication_$callClinit();
    var$3 = jm_Multiplication_fivePows.data;
    if ($exp >= var$3.length) {
        var$3 = jm_Multiplication_bigFivePows.data;
        if ($exp < var$3.length)
            return jm_BigInteger_multiply($val, var$3[$exp]);
        return jm_BigInteger_multiply($val, jm_BigInteger_pow(var$3[1], $exp));
    }
    $exp = var$3[$exp];
    var$4 = $val.$sign0;
    if (!var$4)
        $val = jm_BigInteger_ZERO;
    else {
        var$5 = $val.$numberLength;
        var$3 = $val.$digits;
        if (var$5 != 1) {
            var$6 = var$5 + 1 | 0;
            var$7 = $rt_createIntArray(var$6);
            var$7.data[var$5] = jm_Multiplication_multiplyByInt(var$7, var$3, var$5, $exp);
            $val = jm_BigInteger__init_(var$4, var$6, var$7);
            jm_BigInteger_cutOffLeadingZeroes($val);
        } else {
            var$8 = jm_Multiplication_unsignedMultAddAdd(var$3.data[0], $exp, 0, 0);
            var$5 = Long_lo(var$8);
            var$6 = Long_hi(var$8);
            $val = !var$6 ? jm_BigInteger__init_0(var$4, var$5) : jm_BigInteger__init_(var$4, 2, $rt_createIntArrayFromData([var$5, var$6]));
        }
    }
    return $val;
},
jm_Multiplication_unsignedMultAddAdd = ($a, $b, $c, $d) => {
    jm_Multiplication_$callClinit();
    return Long_add(Long_add(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), Long_and(Long_fromInt($c), Long_create(4294967295, 0))), Long_and(Long_fromInt($d), Long_create(4294967295, 0)));
},
jm_Multiplication__clinit_ = () => {
    let $fivePow, $i, var$3, var$4;
    jm_Multiplication_tenPows = $rt_createIntArrayFromData([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
    jm_Multiplication_fivePows = $rt_createIntArrayFromData([1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125]);
    jm_Multiplication_bigTenPows = $rt_createArray(jm_BigInteger, 32);
    jm_Multiplication_bigFivePows = $rt_createArray(jm_BigInteger, 32);
    $fivePow = Long_fromInt(1);
    $i = 0;
    while ($i <= 18) {
        jm_Multiplication_bigFivePows.data[$i] = jm_BigInteger_valueOf($fivePow);
        jm_Multiplication_bigTenPows.data[$i] = jm_BigInteger_valueOf(Long_shl($fivePow, $i));
        $fivePow = Long_mul($fivePow, Long_fromInt(5));
        $i = $i + 1 | 0;
    }
    while ($i < jm_Multiplication_bigTenPows.data.length) {
        var$3 = jm_Multiplication_bigFivePows.data;
        var$4 = $i - 1 | 0;
        var$3[$i] = jm_BigInteger_multiply(var$3[var$4], var$3[1]);
        var$3 = jm_Multiplication_bigTenPows.data;
        var$3[$i] = jm_BigInteger_multiply(var$3[var$4], jm_BigInteger_TEN);
        $i = $i + 1 | 0;
    }
};
function jnc_UnsupportedCharsetException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName0 = null;
}
let ji_UnsupportedEncodingException = $rt_classWithoutFields(ji_IOException),
ji_UnsupportedEncodingException__init_ = $this => {
    jl_Throwable__init_($this);
},
ji_UnsupportedEncodingException__init_0 = () => {
    let var_0 = new ji_UnsupportedEncodingException();
    ji_UnsupportedEncodingException__init_(var_0);
    return var_0;
};
function jt_MessageFormat$FieldContainer() {
    let a = this; jl_Object.call(a);
    a.$start6 = 0;
    a.$end6 = 0;
    a.$attribute = null;
    a.$value9 = null;
}
let jt_MessageFormat$FieldContainer__init_0 = ($this, $start, $end, $attribute, $value) => {
    $this.$start6 = $start;
    $this.$end6 = $end;
    $this.$attribute = $attribute;
    $this.$value9 = $value;
},
jt_MessageFormat$FieldContainer__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jt_MessageFormat$FieldContainer();
    jt_MessageFormat$FieldContainer__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
};
function jt_AttributedCharacterIterator$Attribute() {
    jl_Object.call(this);
    this.$name4 = null;
}
let jt_AttributedCharacterIterator$Attribute_INPUT_METHOD_SEGMENT = null,
jt_AttributedCharacterIterator$Attribute_LANGUAGE = null,
jt_AttributedCharacterIterator$Attribute_READING = null,
jt_AttributedCharacterIterator$Attribute__init_0 = ($this, $name) => {
    $this.$name4 = $name;
},
jt_AttributedCharacterIterator$Attribute__init_ = var_0 => {
    let var_1 = new jt_AttributedCharacterIterator$Attribute();
    jt_AttributedCharacterIterator$Attribute__init_0(var_1, var_0);
    return var_1;
},
jt_AttributedCharacterIterator$Attribute__clinit_ = () => {
    jt_AttributedCharacterIterator$Attribute_INPUT_METHOD_SEGMENT = jt_AttributedCharacterIterator$Attribute__init_($rt_s(888));
    jt_AttributedCharacterIterator$Attribute_LANGUAGE = jt_AttributedCharacterIterator$Attribute__init_($rt_s(889));
    jt_AttributedCharacterIterator$Attribute_READING = jt_AttributedCharacterIterator$Attribute__init_($rt_s(890));
},
jt_Format$Field = $rt_classWithoutFields(jt_AttributedCharacterIterator$Attribute),
jt_MessageFormat$Field = $rt_classWithoutFields(jt_Format$Field),
jt_MessageFormat$Field_ARGUMENT = null,
jt_MessageFormat$Field__clinit_ = () => {
    let var$1;
    var$1 = new jt_MessageFormat$Field;
    jt_AttributedCharacterIterator$Attribute__init_0(var$1, $rt_s(891));
    jt_MessageFormat$Field_ARGUMENT = var$1;
},
jnc_Charset$Charsets = $rt_classWithoutFields(),
jnc_Charset$Charsets_value = null,
jnc_Charset$Charsets_$callClinit = () => {
    jnc_Charset$Charsets_$callClinit = $rt_eraseClinit(jnc_Charset$Charsets);
    jnc_Charset$Charsets__clinit_();
},
jnc_Charset$Charsets__init_ = $this => {
    jnc_Charset$Charsets_$callClinit();
},
jnc_Charset$Charsets__init_0 = () => {
    let var_0 = new jnc_Charset$Charsets();
    jnc_Charset$Charsets__init_(var_0);
    return var_0;
},
jnc_Charset$Charsets__clinit_ = () => {
    let $charsets, var$2, var$3, $charset, var$5, var$6;
    jnc_Charset$Charsets_value = ju_HashMap__init_();
    $charsets = $rt_createArray(jnc_Charset, 6).data;
    jnc_StandardCharsets_$callClinit();
    $charsets[0] = jnc_StandardCharsets_UTF_8;
    $charsets[1] = jnc_StandardCharsets_US_ASCII;
    $charsets[2] = jnc_StandardCharsets_ISO_8859_1;
    $charsets[3] = jnc_StandardCharsets_UTF_16;
    $charsets[4] = jnc_StandardCharsets_UTF_16BE;
    $charsets[5] = jnc_StandardCharsets_UTF_16LE;
    var$2 = $charsets.length;
    var$3 = 0;
    while (var$3 < var$2) {
        $charset = $charsets[var$3];
        var$5 = jnc_Charset$Charsets_value;
        var$6 = $charset.$canonicalName;
        ju_HashMap_put(var$5, var$6, $charset);
        var$3 = var$3 + 1 | 0;
    }
},
jnc_StandardCharsets = $rt_classWithoutFields(),
jnc_StandardCharsets_UTF_8 = null,
jnc_StandardCharsets_US_ASCII = null,
jnc_StandardCharsets_ISO_8859_1 = null,
jnc_StandardCharsets_UTF_16 = null,
jnc_StandardCharsets_UTF_16BE = null,
jnc_StandardCharsets_UTF_16LE = null,
jnc_StandardCharsets_$callClinit = () => {
    jnc_StandardCharsets_$callClinit = $rt_eraseClinit(jnc_StandardCharsets);
    jnc_StandardCharsets__clinit_();
},
jnc_StandardCharsets__init_ = $this => {
    jnc_StandardCharsets_$callClinit();
},
jnc_StandardCharsets__init_0 = () => {
    let var_0 = new jnc_StandardCharsets();
    jnc_StandardCharsets__init_(var_0);
    return var_0;
},
jnc_StandardCharsets__clinit_ = () => {
    jnci_UTF8Charset_$callClinit();
    jnc_StandardCharsets_UTF_8 = jnci_UTF8Charset_INSTANCE;
    jnc_StandardCharsets_US_ASCII = jnci_AsciiCharset__init_0();
    jnc_StandardCharsets_ISO_8859_1 = jnci_Iso8859Charset__init_0();
    jnc_StandardCharsets_UTF_16 = jnci_UTF16Charset__init_($rt_s(892), 1, 0);
    jnc_StandardCharsets_UTF_16BE = jnci_UTF16Charset__init_($rt_s(893), 0, 0);
    jnc_StandardCharsets_UTF_16LE = jnci_UTF16Charset__init_($rt_s(894), 0, 1);
},
jnci_AsciiCharset = $rt_classWithoutFields(jnc_Charset),
jnci_AsciiCharset__init_ = $this => {
    jnc_Charset__init_($this, $rt_s(895), $rt_createArray(jl_String, 0));
},
jnci_AsciiCharset__init_0 = () => {
    let var_0 = new jnci_AsciiCharset();
    jnci_AsciiCharset__init_(var_0);
    return var_0;
},
jnci_AsciiCharset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_AsciiDecoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
},
jnci_Iso8859Charset = $rt_classWithoutFields(jnc_Charset),
jnci_Iso8859Charset__init_ = $this => {
    jnc_Charset__init_($this, $rt_s(896), $rt_createArray(jl_String, 0));
},
jnci_Iso8859Charset__init_0 = () => {
    let var_0 = new jnci_Iso8859Charset();
    jnci_Iso8859Charset__init_(var_0);
    return var_0;
},
jnci_Iso8859Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_Iso8859Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
};
function jnci_UTF16Charset() {
    let a = this; jnc_Charset.call(a);
    a.$bom0 = 0;
    a.$littleEndian3 = 0;
}
let jnci_UTF16Charset__init_0 = ($this, $canonicalName, $bom, $littleEndian) => {
    jnc_Charset__init_($this, $canonicalName, $rt_createArray(jl_String, 0));
    $this.$bom0 = $bom;
    $this.$littleEndian3 = $littleEndian;
},
jnci_UTF16Charset__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jnci_UTF16Charset();
    jnci_UTF16Charset__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jnci_UTF16Charset_newDecoder = $this => {
    let var$1, var$2, var$3;
    var$1 = new jnci_UTF16Decoder;
    var$2 = $this.$bom0;
    var$3 = $this.$littleEndian3;
    jnci_BufferedDecoder__init_(var$1, $this, 0.5, 0.5);
    var$1.$bom = var$2;
    var$1.$littleEndian0 = var$3;
    return var$1;
};
function ji_ByteArrayInputStream() {
    let a = this; ji_InputStream.call(a);
    a.$buf0 = null;
    a.$pos = 0;
    a.$mark1 = 0;
    a.$count2 = 0;
}
let ji_ByteArrayInputStream__init_ = ($this, $buf) => {
    let var$2;
    var$2 = $buf.data.length;
    $this.$buf0 = $buf;
    $this.$pos = 0;
    $this.$mark1 = 0;
    $this.$count2 = 0 + var$2 | 0;
},
ji_ByteArrayInputStream__init_0 = var_0 => {
    let var_1 = new ji_ByteArrayInputStream();
    ji_ByteArrayInputStream__init_(var_1, var_0);
    return var_1;
},
ji_ByteArrayInputStream_read = ($this, $b, $off, $len) => {
    let $bytesToRead, $i, var$6, var$7, var$8;
    $bytesToRead = jl_Math_min($len, $this.$count2 - $this.$pos | 0);
    $i = 0;
    while ($i < $bytesToRead) {
        var$6 = $b.data;
        $len = $off + 1 | 0;
        var$7 = $this.$buf0.data;
        var$8 = $this.$pos;
        $this.$pos = var$8 + 1 | 0;
        var$6[$off] = var$7[var$8];
        $i = $i + 1 | 0;
        $off = $len;
    }
    if ($bytesToRead <= 0)
        $bytesToRead = (-1);
    return $bytesToRead;
},
ji_ByteArrayInputStream_available = $this => {
    return $this.$count2 - $this.$pos | 0;
},
ji_ByteArrayInputStream_close = $this => {
    return;
};
function psl_BulletLogic() {
    let a = this; jl_Object.call(a);
    a.$position2 = null;
    a.$rotation = 0.0;
    a.$type4 = 0;
    a.$owner0 = 0;
}
let psl_BulletLogic_deque = null,
psl_BulletLogic_push = $bulletLogic => {
    let var$2, var$3;
    var$2 = psl_BulletLogic_deque;
    ju_Objects_requireNonNull($bulletLogic);
    ju_ArrayDeque_ensureCapacity(var$2, ju_ArrayDeque_size(var$2) + 1 | 0);
    var$3 = ju_ArrayDeque_modDec(var$2.$head, var$2.$array1.data.length);
    var$2.$head = var$3;
    var$2.$array1.data[var$3] = $bulletLogic;
    var$2.$version = var$2.$version + 1 | 0;
},
psl_BulletLogic__init_ = $this => {
    $this.$position2 = new cbgm_Vector2;
},
psl_BulletLogic__init_0 = () => {
    let var_0 = new psl_BulletLogic();
    psl_BulletLogic__init_(var_0);
    return var_0;
},
psl_BulletLogic__clinit_ = () => {
    psl_BulletLogic_deque = ju_ArrayDeque__init_0(1024);
},
pss_ChimeraShape = $rt_classWithoutFields(pss_Shape),
pss_ChimeraShape_ellipse = null,
pss_ChimeraShape_sizes = null,
pss_ChimeraShape_colors = null,
pss_ChimeraShape_$callClinit = () => {
    pss_ChimeraShape_$callClinit = $rt_eraseClinit(pss_ChimeraShape);
    pss_ChimeraShape__clinit_();
},
pss_ChimeraShape__init_ = $this => {
    pss_ChimeraShape_$callClinit();
},
pss_ChimeraShape__init_0 = () => {
    let var_0 = new pss_ChimeraShape();
    pss_ChimeraShape__init_(var_0);
    return var_0;
},
pss_ChimeraShape_draw = $chimeraLogic => {
    let var$2, var$3;
    pss_ChimeraShape_$callClinit();
    if ($chimeraLogic.$lives)
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.800000011920929, 0.10000000149011612);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.800000011920929, 0.05000000074505806);
    if ($chimeraLogic.$gravity) {
        cbgm_Polygon_resetTransformations(pss_ChimeraShape_ellipse);
        cbgm_Polygon_scale(pss_ChimeraShape_ellipse, $chimeraLogic.$gravityRadius);
        var$2 = pss_ChimeraShape_ellipse;
        var$3 = $chimeraLogic.$position1;
        cbgm_Polygon_translate(var$2, var$3.$x, var$3.$y);
        ses_ShapeDrawer_filledPolygon(pss_Shape_drawer, pss_ChimeraShape_ellipse);
    }
    if ($chimeraLogic.$blink)
        pss_Section_setDrawerColor(0.949999988079071, 0.949999988079071, 0.949999988079071, 1.0);
    else if ($chimeraLogic.$lives)
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.800000011920929, 0.5);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.800000011920929, 0.10000000149011612);
    cbgm_Polygon_resetTransformations(pss_ChimeraShape_ellipse);
    cbgm_Polygon_scale(pss_ChimeraShape_ellipse, $chimeraLogic.$forceRadius);
    var$2 = pss_ChimeraShape_ellipse;
    var$3 = $chimeraLogic.$position1;
    cbgm_Polygon_translate(var$2, var$3.$x, var$3.$y);
    ses_ShapeDrawer_filledPolygon(pss_Shape_drawer, pss_ChimeraShape_ellipse);
    if ($chimeraLogic.$lives)
        pss_Section_setDrawerColor(0.949999988079071, 0.949999988079071, 0.949999988079071, 1.0);
    else
        pss_Section_setDrawerColor(0.800000011920929, 0.800000011920929, 0.800000011920929, 0.20000000298023224);
    ses_ShapeDrawer_polygon(pss_Shape_drawer, pss_ChimeraShape_ellipse);
},
pss_ChimeraShape__clinit_ = () => {
    let var$1, var$2;
    pss_ChimeraShape_ellipse = pss_Shape_createEllipse(128, 1.0, 1.0);
    var$1 = $rt_createArray(cbgm_Vector2, 1);
    var$1.data[0] = cbgm_Vector2__init_(100.0, 100.0);
    pss_ChimeraShape_sizes = var$1;
    var$1 = $rt_createArray(cbgg_Color, 2);
    var$2 = var$1.data;
    var$2[0] = cbgg_Color__init_((-2004317953));
    var$2[1] = cbgg_Color__init_((-1));
    pss_ChimeraShape_colors = var$1;
},
jm_BitLevel = $rt_classWithoutFields(),
jm_BitLevel__init_ = $this => {
    return;
},
jm_BitLevel__init_0 = () => {
    let var_0 = new jm_BitLevel();
    jm_BitLevel__init_(var_0);
    return var_0;
},
jm_BitLevel_shiftLeft0 = ($source, $count) => {
    let $intCount, $resLength, $resDigits, $result;
    $intCount = $count >> 5;
    $count = $count & 31;
    $resLength = ($source.$numberLength + $intCount | 0) + ($count ? 1 : 0) | 0;
    $resDigits = $rt_createIntArray($resLength);
    jm_BitLevel_shiftLeft($resDigits, $source.$digits, $intCount, $count);
    $result = jm_BigInteger__init_($source.$sign0, $resLength, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
},
jm_BitLevel_shiftLeft = ($result, $source, $intCount, $count) => {
    let var$5, $rightShiftCount, $i, var$8, $i_0, var$10;
    a: {
        if (!$count)
            jl_System_fastArraycopy($source, 0, $result, $intCount, $result.data.length - $intCount | 0);
        else {
            var$5 = $result.data;
            $rightShiftCount = 32 - $count | 0;
            $i = var$5.length - 1 | 0;
            var$5[$i] = 0;
            while (true) {
                if ($i <= $intCount)
                    break a;
                var$8 = $source.data;
                $i_0 = var$5[$i];
                var$10 = ($i - $intCount | 0) - 1 | 0;
                var$5[$i] = $i_0 | (var$8[var$10] >>> $rightShiftCount | 0);
                var$5[$i - 1 | 0] = var$8[var$10] << $count;
                $i = $i + (-1) | 0;
            }
        }
    }
    $i_0 = 0;
    while ($i_0 < $intCount) {
        $result.data[$i_0] = 0;
        $i_0 = $i_0 + 1 | 0;
    }
},
jm_BitLevel_shiftLeftOneBit = ($result, $source, $srcLen) => {
    let $carry, $i, var$6, $val;
    $carry = 0;
    $i = 0;
    while ($i < $srcLen) {
        var$6 = $result.data;
        $val = $source.data[$i];
        var$6[$i] = $val << 1 | $carry;
        $carry = $val >>> 31 | 0;
        $i = $i + 1 | 0;
    }
    if ($carry)
        $result.data[$srcLen] = $carry;
},
jm_BitLevel_shiftRight0 = ($source, $count) => {
    let $intCount, $resLength, var$5, $resDigits, var$7, $i, var$9, var$10, var$11, $result;
    $intCount = $count >> 5;
    $count = $count & 31;
    $resLength = $source.$numberLength;
    if ($intCount >= $resLength)
        return $source.$sign0 >= 0 ? jm_BigInteger_ZERO : jm_BigInteger_MINUS_ONE;
    a: {
        $resLength = $resLength - $intCount | 0;
        var$5 = $resLength + 1 | 0;
        $resDigits = $rt_createIntArray(var$5);
        jm_BitLevel_shiftRight($resDigits, $resLength, $source.$digits, $intCount, $count);
        var$7 = $source.$sign0;
        if (var$7 >= 0)
            var$5 = $resLength;
        else {
            $i = 0;
            while (true) {
                var$9 = $rt_compare($i, $intCount);
                if (var$9 >= 0)
                    break;
                if ($source.$digits.data[$i])
                    break;
                $i = $i + 1 | 0;
            }
            if (var$9 >= 0) {
                if ($count <= 0) {
                    var$5 = $resLength;
                    break a;
                }
                if (!($source.$digits.data[$i] << (32 - $count | 0))) {
                    var$5 = $resLength;
                    break a;
                }
            }
            var$10 = $resDigits.data;
            var$11 = 0;
            while (true) {
                $i = $rt_compare(var$11, $resLength);
                if ($i >= 0)
                    break;
                if (var$10[var$11] != (-1))
                    break;
                var$10[var$11] = 0;
                var$11 = var$11 + 1 | 0;
            }
            if ($i)
                var$5 = $resLength;
            var$10[var$11] = var$10[var$11] + 1 | 0;
        }
    }
    $result = jm_BigInteger__init_(var$7, var$5, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
},
jm_BitLevel_inplaceShiftRight = ($val, $count) => {
    let $sign, $intCount, var$5, var$6, $i;
    $sign = $val.$sign0;
    if ($count && $sign) {
        $intCount = $count >> 5;
        var$5 = $val.$numberLength - $intCount | 0;
        $val.$numberLength = var$5;
        var$6 = $val.$digits;
        if (!jm_BitLevel_shiftRight(var$6, var$5, var$6, $intCount, $count & 31) && $sign < 0) {
            $i = 0;
            while (true) {
                $count = $val.$numberLength;
                $sign = $rt_compare($i, $count);
                if ($sign >= 0)
                    break;
                var$6 = $val.$digits.data;
                if (var$6[$i] != (-1))
                    break;
                var$6[$i] = 0;
                $i = $i + 1 | 0;
            }
            if (!$sign)
                $val.$numberLength = $count + 1 | 0;
            var$6 = $val.$digits.data;
            var$6[$i] = var$6[$i] + 1 | 0;
        }
        jm_BigInteger_cutOffLeadingZeroes($val);
        jm_BigInteger_unCache($val);
        return;
    }
},
jm_BitLevel_shiftRight = ($result, $resultLen, $source, $intCount, $count) => {
    let $allZero, $i, var$8, $leftShiftCount, var$10, var$11;
    $allZero = 1;
    $i = 0;
    while ($i < $intCount) {
        $allZero = $allZero & ($source.data[$i] ? 0 : 1);
        $i = $i + 1 | 0;
    }
    if (!$count)
        jl_System_fastArraycopy($source, $intCount, $result, 0, $resultLen);
    else {
        var$8 = $source.data;
        $leftShiftCount = 32 - $count | 0;
        $allZero = $allZero & (var$8[$i] << $leftShiftCount ? 0 : 1);
        var$10 = 0;
        var$11 = $resultLen - 1 | 0;
        while (var$10 < var$11) {
            $source = $result.data;
            $resultLen = var$10 + $intCount | 0;
            $source[var$10] = (var$8[$resultLen] >>> $count | 0) | var$8[$resultLen + 1 | 0] << $leftShiftCount;
            var$10 = var$10 + 1 | 0;
        }
        $result.data[var$10] = var$8[var$10 + $intCount | 0] >>> $count | 0;
    }
    return $allZero;
},
ses_ShapeUtils = $rt_classWithoutFields(),
ses_ShapeUtils_SQRT2 = 0.0,
ses_ShapeUtils_SQRT3 = 0.0,
ses_ShapeUtils__init_ = $this => {
    return;
},
ses_ShapeUtils__init_0 = () => {
    let var_0 = new ses_ShapeUtils();
    ses_ShapeUtils__init_(var_0);
    return var_0;
},
ses_ShapeUtils_snap = ($a, $pixelSize, $halfPixelSize) => {
    return jl_Math_round($a / $pixelSize) * $pixelSize + $halfPixelSize;
},
ses_ShapeUtils_epsilonEquals = ($a, $b) => {
    return jl_Math_abs($a - $b) >= 0.0010000000474974513 ? 0 : 1;
},
ses_ShapeUtils_angleRad = ($v, $reference) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = $reference.$x;
    var$4 = $v.$y;
    var$5 = var$3 * var$4;
    var$6 = $reference.$y;
    var$7 = $v.$x;
    return jl_Math_atan2(var$5 - var$6 * var$7, var$7 * var$3 + var$4 * var$6);
},
ses_ShapeUtils__clinit_ = () => {
    ses_ShapeUtils_SQRT2 = jl_Math_sqrt(2.0);
    ses_ShapeUtils_SQRT3 = jl_Math_sqrt(3.0);
},
jt_DecimalFormat$PerMillField = $rt_classWithoutFields(),
jt_DecimalFormat$PerMillField__init_ = $this => {
    return;
},
jt_DecimalFormat$PerMillField__init_0 = () => {
    let var_0 = new jt_DecimalFormat$PerMillField();
    jt_DecimalFormat$PerMillField__init_(var_0);
    return var_0;
},
jt_DecimalFormat$PerMillField_render = ($this, $format, $buffer) => {
    jl_AbstractStringBuilder_append2($buffer, $format.$symbols.$perMill);
},
jt_DecimalFormat$PerMillField_equals = ($this, $obj) => {
    return $obj instanceof jt_DecimalFormat$PerMillField;
},
jt_DecimalFormat$PerMillField_hashCode = $this => {
    return 2;
},
jt_DecimalFormat$CurrencyField = $rt_classWithoutFields(),
jt_DecimalFormat$CurrencyField__init_ = $this => {
    return;
},
jt_DecimalFormat$CurrencyField__init_0 = () => {
    let var_0 = new jt_DecimalFormat$CurrencyField();
    jt_DecimalFormat$CurrencyField__init_(var_0);
    return var_0;
},
jt_DecimalFormat$CurrencyField_render = ($this, $format, $buffer) => {
    let var$3, var$4, var$5, var$6;
    var$3 = $format.$currency;
    if (var$3 === null)
        jl_AbstractStringBuilder_append2($buffer, 164);
    else {
        $format = $format.$symbols.$locale4;
        var$4 = $format.$languageCode;
        var$5 = $format.$countryCode;
        $format = ju_Currency_getCurrencyCode(var$3);
        var$5 = otciu_CLDRHelper_getCode(var$4, var$5);
        if (otciu_CLDRHelper_$$metadata$$21 === null)
            otciu_CLDRHelper_$$metadata$$21 = otciu_CLDRHelper_getCurrencyMap$$create();
        a: {
            var$6 = otciu_CLDRHelper_$$metadata$$21;
            if (var$6.hasOwnProperty($rt_ustr(var$5))) {
                var$5 = var$6[$rt_ustr(var$5)];
                if (var$5.hasOwnProperty($rt_ustr($format))) {
                    $format = var$5[$rt_ustr($format)];
                    break a;
                }
            }
            if (var$6.hasOwnProperty($rt_ustr(var$4))) {
                var$5 = var$6[$rt_ustr(var$4)];
                if (var$5.hasOwnProperty($rt_ustr($format))) {
                    $format = var$5[$rt_ustr($format)];
                    break a;
                }
            }
            $format = null;
        }
        jl_AbstractStringBuilder_append0($buffer, $format !== null && !jl_String_isEmpty(($format.symbol !== null ? $rt_str($format.symbol) : null)) ? ($format.symbol !== null ? $rt_str($format.symbol) : null) : ju_Currency_getCurrencyCode(var$3));
    }
},
jt_DecimalFormat$CurrencyField_equals = ($this, $obj) => {
    return $obj instanceof jt_DecimalFormat$CurrencyField;
},
jt_DecimalFormat$CurrencyField_hashCode = $this => {
    return 0;
},
jt_DecimalFormat$PercentField = $rt_classWithoutFields(),
jt_DecimalFormat$PercentField__init_ = $this => {
    return;
},
jt_DecimalFormat$PercentField__init_0 = () => {
    let var_0 = new jt_DecimalFormat$PercentField();
    jt_DecimalFormat$PercentField__init_(var_0);
    return var_0;
},
jt_DecimalFormat$PercentField_render = ($this, $format, $buffer) => {
    jl_AbstractStringBuilder_append2($buffer, $format.$symbols.$percent);
},
jt_DecimalFormat$PercentField_equals = ($this, $obj) => {
    return $obj instanceof jt_DecimalFormat$PercentField;
},
jt_DecimalFormat$PercentField_hashCode = $this => {
    return 1;
};
let jl_ArithmeticException = $rt_classWithoutFields(jl_RuntimeException),
jl_ArithmeticException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ArithmeticException__init_0 = () => {
    let var_0 = new jl_ArithmeticException();
    jl_ArithmeticException__init_(var_0);
    return var_0;
};
function cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec() {
    jl_Object.call(this);
    this.$internalFormat = 0;
}
let cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec__init_ = ($this, $internalFormat) => {
    $this.$internalFormat = $internalFormat;
},
cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec__init_0 = var_0 => {
    let var_1 = new cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec();
    cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec__init_(var_1, var_0);
    return var_1;
};
function cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec() {
    let a = this; jl_Object.call(a);
    a.$internalFormat0 = 0;
    a.$format12 = 0;
    a.$type9 = 0;
    a.$isFloat = 0;
    a.$isDepth = 0;
    a.$isStencil = 0;
}
let cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec_isColorTexture = $this => {
    return !$this.$isDepth && !$this.$isStencil ? 1 : 0;
};
function jt_AttributedString() {
    let a = this; jl_Object.call(a);
    a.$text0 = null;
    a.$attributeMap = null;
}
let jnci_AsciiDecoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_AsciiDecoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $b, var$12;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            var$9 = $inArray.data;
            var$10 = $inPos + 1 | 0;
            $b = var$9[$inPos] & 255;
            if ($b & 128) {
                $result = jnc_CoderResult_malformedForLength(1);
                $inPos = var$10 + (-1) | 0;
                break a;
            }
            var$9 = $outArray.data;
            var$12 = $outPos + 1 | 0;
            var$9[$outPos] = $b & 65535;
            $inPos = var$10;
            $outPos = var$12;
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
};
function jnci_UTF16Decoder() {
    let a = this; jnci_BufferedDecoder.call(a);
    a.$bom = 0;
    a.$littleEndian0 = 0;
}
let jnci_UTF16Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let var$8, var$9, $b;
    if ($this.$bom) {
        if (($inPos + 2 | 0) > $inSize)
            return !jn_Buffer_hasRemaining($controller.$in) ? jnc_CoderResult_UNDERFLOW : null;
        var$8 = $inArray.data;
        $this.$bom = 0;
        var$9 = $inPos + 1 | 0;
        $b = var$8[$inPos];
        if ($b == (-1)) {
            if (var$8[var$9] != (-2))
                $inPos = var$9 + (-1) | 0;
            else {
                $inPos = var$9 + 1 | 0;
                $this.$littleEndian0 = 1;
            }
        } else if ($b != (-2))
            $inPos = var$9 + (-1) | 0;
        else if (var$8[var$9] != (-1))
            $inPos = var$9 + (-1) | 0;
        else {
            $inPos = var$9 + 1 | 0;
            $this.$littleEndian0 = 0;
        }
    }
    return !$this.$littleEndian0 ? jnci_UTF16Decoder_decodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) : jnci_UTF16Decoder_decodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller);
},
jnci_UTF16Decoder_decodeLE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF16Decoder_decodeBE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = (var$9[$b2] & 255 | $b1 << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = (var$9[$b2] & 255 | $b1 << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_Iso8859Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_Iso8859Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, var$11, $b, var$13;
    $result = null;
    while ($inPos < $inSize && $outPos < $outSize) {
        var$9 = $inArray.data;
        var$10 = $outArray.data;
        var$11 = $inPos + 1 | 0;
        $b = var$9[$inPos] & 255;
        var$13 = $outPos + 1 | 0;
        var$10[$outPos] = $b & 65535;
        $inPos = var$11;
        $outPos = var$13;
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jl_ArrayIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_ArrayIndexOutOfBoundsException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_ArrayIndexOutOfBoundsException__init_2 = () => {
    let var_0 = new jl_ArrayIndexOutOfBoundsException();
    jl_ArrayIndexOutOfBoundsException__init_(var_0);
    return var_0;
},
jl_ArrayIndexOutOfBoundsException__init_0 = ($this, $index) => {
    jl_Exception__init_($this, jl_Integer_toString($index));
},
jl_ArrayIndexOutOfBoundsException__init_1 = var_0 => {
    let var_1 = new jl_ArrayIndexOutOfBoundsException();
    jl_ArrayIndexOutOfBoundsException__init_0(var_1, var_0);
    return var_1;
},
pss_BulletShape = $rt_classWithoutFields(pss_Shape),
pss_BulletShape_ellipses = null,
pss_BulletShape_fillColors = null,
pss_BulletShape_outlineColors = null,
pss_BulletShape_$callClinit = () => {
    pss_BulletShape_$callClinit = $rt_eraseClinit(pss_BulletShape);
    pss_BulletShape__clinit_();
},
pss_BulletShape__init_ = $this => {
    pss_BulletShape_$callClinit();
},
pss_BulletShape__init_0 = () => {
    let var_0 = new pss_BulletShape();
    pss_BulletShape__init_(var_0);
    return var_0;
},
pss_BulletShape__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createArray(cbgm_Polygon, 3);
    var$2 = var$1.data;
    var$2[0] = pss_Shape_createEllipse(16, 24.0, 8.0);
    var$2[1] = pss_Shape_createEllipse(16, 16.0, 16.0);
    var$2[2] = pss_Shape_createEllipse(16, 12.0, 36.0);
    pss_BulletShape_ellipses = var$1;
    var$1 = $rt_createArray(cbgg_Color, 3);
    var$2 = var$1.data;
    var$2[0] = cbgg_Color__init_(1470089215);
    var$2[1] = cbgg_Color__init_((-1490260481));
    var$2[2] = cbgg_Color__init_(1145324799);
    pss_BulletShape_fillColors = var$1;
    var$1 = $rt_createArray(cbgg_Color, 3);
    var$2 = var$1.data;
    var$2[0] = cbgg_Color__init_((-419826689));
    var$2[1] = cbgg_Color__init_((-745170177));
    var$2[2] = cbgg_Color__init_((-286331137));
    pss_BulletShape_outlineColors = var$1;
};
function jnc_CharsetEncoder() {
    let a = this; jl_Object.call(a);
    a.$charset0 = null;
    a.$replacement1 = null;
    a.$averageBytesPerChar = 0.0;
    a.$maxBytesPerChar = 0.0;
    a.$malformedAction0 = null;
    a.$unmappableAction = null;
    a.$status = 0;
}
let jnc_CharsetEncoder_onMalformedInput = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$malformedAction0 = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2, $rt_s(897));
    $rt_throw(var$2);
},
jnc_CharsetEncoder_onUnmappableCharacter = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$unmappableAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2, $rt_s(897));
    $rt_throw(var$2);
},
jnc_CharsetEncoder_encode = ($this, $in, $out, $endOfInput) => {
    let var$4, $e, $result, $remaining, $action, var$9, $$je;
    a: {
        var$4 = $this.$status;
        if (var$4 != 3) {
            if ($endOfInput)
                break a;
            if (var$4 != 2)
                break a;
        }
        $in = new jl_IllegalStateException;
        jl_Throwable__init_($in);
        $rt_throw($in);
    }
    $this.$status = !$endOfInput ? 1 : 2;
    $e = $this;
    while (true) {
        try {
            $result = jnci_BufferedEncoder_encodeLoop($e, $in, $out);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $e = $$je;
                $in = new jnc_CoderMalfunctionError;
                jl_Throwable__init_1($in, $e);
                $rt_throw($in);
            } else {
                throw $$e;
            }
        }
        if (jnc_CoderResult_isUnderflow($result)) {
            if (!$endOfInput)
                return $result;
            $remaining = jn_Buffer_remaining($in);
            if ($remaining <= 0)
                return $result;
            $result = jnc_CoderResult_malformedForLength($remaining);
        } else if (jnc_CoderResult_isOverflow($result))
            break;
        $action = !jnc_CoderResult_isUnmappable($result) ? $this.$malformedAction0 : $this.$unmappableAction;
        b: {
            if ($action !== jnc_CodingErrorAction_REPLACE) {
                if ($action === jnc_CodingErrorAction_IGNORE)
                    break b;
                else
                    return $result;
            }
            $remaining = jn_Buffer_remaining($out);
            var$9 = $this.$replacement1;
            var$4 = var$9.data.length;
            if ($remaining < var$4)
                return jnc_CoderResult_OVERFLOW;
            jn_ByteBuffer_put($out, var$9, 0, var$4);
        }
        jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
    }
    return $result;
},
jnc_CharsetEncoder_encode0 = ($this, $in) => {
    let $output, $result, var$4;
    if (!jn_Buffer_remaining($in))
        return jn_ByteBuffer_allocate(0);
    $this.$status = 0;
    $output = jn_ByteBuffer_allocate(jn_Buffer_remaining($in) * $this.$averageBytesPerChar | 0);
    while (true) {
        $result = jnc_CharsetEncoder_encode($this, $in, $output, 0);
        if ($result === jnc_CoderResult_UNDERFLOW)
            break;
        if ($result === jnc_CoderResult_OVERFLOW) {
            $output = jnc_CharsetEncoder_allocateMore($this, $output);
            continue;
        }
        if (!jnc_CoderResult_isError($result))
            continue;
        jnc_CoderResult_throwException($result);
    }
    $in = jnc_CharsetEncoder_encode($this, $in, $output, 1);
    if (jnc_CoderResult_isError($in))
        jnc_CoderResult_throwException($in);
    while (true) {
        var$4 = $this.$status;
        if (var$4 != 2 && var$4 != 4) {
            $in = new jl_IllegalStateException;
            jl_Throwable__init_($in);
            $rt_throw($in);
        }
        $in = jnc_CoderResult_UNDERFLOW;
        if ($in === $in)
            $this.$status = 3;
        if (jnc_CoderResult_isUnderflow($in))
            break;
        if (!jnc_CoderResult_isOverflow($in))
            continue;
        $output = jnc_CharsetEncoder_allocateMore($this, $output);
    }
    jn_Buffer_flip($output);
    return $output;
},
jnc_CharsetEncoder_allocateMore = ($this, $buffer) => {
    let $array, $result;
    $array = jn_ByteBuffer_array($buffer);
    $result = jn_ByteBuffer_wrap(ju_Arrays_copyOf0($array, $array.data.length * 2 | 0));
    jn_Buffer_position($result, $buffer.$position0);
    return $result;
},
jt_DecimalFormat$1 = $rt_classWithoutFields(),
jt_DecimalFormat$1_$SwitchMap$java$math$RoundingMode = null,
jt_DecimalFormat$1_$callClinit = () => {
    jt_DecimalFormat$1_$callClinit = $rt_eraseClinit(jt_DecimalFormat$1);
    jt_DecimalFormat$1__clinit_();
},
jt_DecimalFormat$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((jm_RoundingMode_values()).data.length);
    var$2 = var$1.data;
    jt_DecimalFormat$1_$SwitchMap$java$math$RoundingMode = var$1;
    var$2[jm_RoundingMode_CEILING.$ordinal0] = 1;
    var$2[jm_RoundingMode_FLOOR.$ordinal0] = 2;
    var$2[jm_RoundingMode_UP.$ordinal0] = 3;
    var$2[jm_RoundingMode_DOWN.$ordinal0] = 4;
    var$2[jm_RoundingMode_UNNECESSARY.$ordinal0] = 5;
    var$2[jm_RoundingMode_HALF_DOWN.$ordinal0] = 6;
    var$2[jm_RoundingMode_HALF_UP.$ordinal0] = 7;
    var$2[jm_RoundingMode_HALF_EVEN.$ordinal0] = 8;
},
jm_Elementary = $rt_classWithoutFields(),
jm_Elementary__init_ = $this => {
    return;
},
jm_Elementary__init_0 = () => {
    let var_0 = new jm_Elementary();
    jm_Elementary__init_(var_0);
    return var_0;
},
jm_Elementary_compareArrays = ($a, $b, $size) => {
    let $i, var$5;
    $i = $size - 1 | 0;
    while ($i >= 0) {
        var$5 = $b.data;
        if ($a.data[$i] != var$5[$i])
            break;
        $i = $i + (-1) | 0;
    }
    if ($i < 0)
        $size = 0;
    else {
        $b = $b.data;
        $size = Long_ge(Long_and(Long_fromInt($a.data[$i]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[$i]), Long_create(4294967295, 0))) ? 1 : (-1);
    }
    return $size;
},
jm_Elementary_subtract0 = ($res, $a, $aSize, $b, $bSize) => {
    let $borrow, $i, var$8, var$9, var$10, var$11;
    $borrow = Long_ZERO;
    $i = 0;
    while ($i < $bSize) {
        var$8 = $res.data;
        var$9 = $b.data;
        var$10 = Long_add($borrow, Long_sub(Long_and(Long_fromInt($a.data[$i]), Long_create(4294967295, 0)), Long_and(Long_fromInt(var$9[$i]), Long_create(4294967295, 0))));
        var$8[$i] = Long_lo(var$10);
        $borrow = Long_shr(var$10, 32);
        $i = $i + 1 | 0;
    }
    while ($i < $aSize) {
        var$11 = $res.data;
        var$10 = Long_add($borrow, Long_and(Long_fromInt($a.data[$i]), Long_create(4294967295, 0)));
        var$11[$i] = Long_lo(var$10);
        $borrow = Long_shr(var$10, 32);
        $i = $i + 1 | 0;
    }
},
jm_Elementary_add = ($a, $aSize, $b, $bSize) => {
    let $res, var$6, var$7, var$8, var$9;
    $a = $a.data;
    $b = $b.data;
    $res = $rt_createIntArray($aSize + 1 | 0);
    var$6 = $res.data;
    var$7 = Long_add(Long_and(Long_fromInt($a[0]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[0]), Long_create(4294967295, 0)));
    var$6[0] = Long_lo(var$7);
    var$8 = Long_shr(var$7, 32);
    if ($aSize < $bSize) {
        var$9 = 1;
        while (var$9 < $aSize) {
            var$7 = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0))));
            var$6[var$9] = Long_lo(var$7);
            var$8 = Long_shr(var$7, 32);
            var$9 = var$9 + 1 | 0;
        }
        while (var$9 < $bSize) {
            var$7 = Long_add(var$8, Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0)));
            var$6[var$9] = Long_lo(var$7);
            var$8 = Long_shr(var$7, 32);
            var$9 = var$9 + 1 | 0;
        }
    } else {
        var$9 = 1;
        while (var$9 < $bSize) {
            var$7 = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)), Long_and(Long_fromInt($b[var$9]), Long_create(4294967295, 0))));
            var$6[var$9] = Long_lo(var$7);
            var$8 = Long_shr(var$7, 32);
            var$9 = var$9 + 1 | 0;
        }
        while (var$9 < $aSize) {
            var$7 = Long_add(var$8, Long_and(Long_fromInt($a[var$9]), Long_create(4294967295, 0)));
            var$6[var$9] = Long_lo(var$7);
            var$8 = Long_shr(var$7, 32);
            var$9 = var$9 + 1 | 0;
        }
    }
    if (Long_ne(var$8, Long_ZERO))
        var$6[var$9] = Long_lo(var$8);
    return $res;
},
jm_Elementary_subtract = ($a, $aSize, $b, $bSize) => {
    let $res;
    $res = $rt_createIntArray($aSize);
    jm_Elementary_subtract0($res, $a, $aSize, $b, $bSize);
    return $res;
},
jm_Division = $rt_classWithoutFields(),
jm_Division__init_ = $this => {
    return;
},
jm_Division__init_0 = () => {
    let var_0 = new jm_Division();
    jm_Division__init_(var_0);
    return var_0;
},
jm_Division_divide = ($quot, $quotLength, $a, $j, $b, $bLength) => {
    let var$7, $normA, $normB, $k, $divisorShift, $firstDivisorDigit, $i, var$14, var$15, var$16, $res, $rem, $rOverflowed, $carry, $product, $longR, $borrow;
    var$7 = $b.data;
    $normA = $rt_createIntArray($j + 1 | 0);
    $normB = $rt_createIntArray($bLength + 1 | 0);
    $k = $bLength - 1 | 0;
    $divisorShift = jl_Integer_numberOfLeadingZeros(var$7[$k]);
    if ($divisorShift) {
        jm_BitLevel_shiftLeft($normB, $b, 0, $divisorShift);
        jm_BitLevel_shiftLeft($normA, $a, 0, $divisorShift);
    } else {
        jl_System_fastArraycopy($a, 0, $normA, 0, $j);
        jl_System_fastArraycopy($b, 0, $normB, 0, $bLength);
    }
    var$7 = $normB.data;
    $a = $normA.data;
    $firstDivisorDigit = var$7[$k];
    $i = $quotLength - 1 | 0;
    var$14 = $bLength - 2 | 0;
    var$15 = Long_and(Long_fromInt($firstDivisorDigit), Long_create(4294967295, 0));
    while ($i >= 0) {
        a: {
            if ($a[$j] == $firstDivisorDigit)
                var$16 = (-1);
            else {
                $res = jm_Division_divideLongByInt(Long_add(Long_shl(Long_and(Long_fromInt($a[$j]), Long_create(4294967295, 0)), 32), Long_and(Long_fromInt($a[$j - 1 | 0]), Long_create(4294967295, 0))), $firstDivisorDigit);
                var$16 = Long_lo($res);
                $rem = Long_hi($res);
                if (var$16) {
                    $rOverflowed = 0;
                    var$16 = var$16 + 1 | 0;
                    while (true) {
                        var$16 = var$16 + (-1) | 0;
                        if ($rOverflowed)
                            break;
                        $carry = Long_mul(Long_and(Long_fromInt(var$16), Long_create(4294967295, 0)), Long_and(Long_fromInt(var$7[var$14]), Long_create(4294967295, 0)));
                        $res = Long_fromInt($rem);
                        $product = Long_add(Long_shl($res, 32), Long_and(Long_fromInt($a[$j - 2 | 0]), Long_create(4294967295, 0)));
                        $longR = Long_add(Long_and($res, Long_create(4294967295, 0)), var$15);
                        if (jl_Integer_numberOfLeadingZeros(Long_hi($longR)) >= 32)
                            $rem = Long_lo($longR);
                        else
                            $rOverflowed = 1;
                        if (Long_le(Long_xor($carry, Long_create(0, 2147483648)), Long_xor($product, Long_create(0, 2147483648))))
                            break a;
                    }
                }
            }
        }
        if (var$16) {
            $rem = $j - $bLength | 0;
            $carry = Long_ZERO;
            $longR = Long_ZERO;
            $quotLength = 0;
            while ($quotLength < $bLength) {
                $res = jm_Multiplication_unsignedMultAddAdd(var$7[$quotLength], var$16, Long_lo($carry), 0);
                $borrow = $rem + $quotLength | 0;
                $product = Long_add(Long_sub(Long_and(Long_fromInt($a[$borrow]), Long_create(4294967295, 0)), Long_and($res, Long_create(4294967295, 0))), $longR);
                $a[$borrow] = Long_lo($product);
                $longR = Long_shr($product, 32);
                $carry = Long_shru($res, 32);
                $quotLength = $quotLength + 1 | 0;
            }
            $quotLength = $rem + $bLength | 0;
            $product = Long_add(Long_sub(Long_and(Long_fromInt($a[$quotLength]), Long_create(4294967295, 0)), $carry), $longR);
            $a[$quotLength] = Long_lo($product);
            if (Long_hi($product)) {
                var$16 = var$16 + (-1) | 0;
                $carry = Long_ZERO;
                $k = 0;
                while ($k < $bLength) {
                    $quotLength = $rem + $k | 0;
                    $product = Long_add($carry, Long_add(Long_and(Long_fromInt($a[$quotLength]), Long_create(4294967295, 0)), Long_and(Long_fromInt(var$7[$k]), Long_create(4294967295, 0))));
                    $a[$quotLength] = Long_lo($product);
                    $carry = Long_shru($product, 32);
                    $k = $k + 1 | 0;
                }
            }
        }
        if ($quot !== null)
            $quot.data[$i] = var$16;
        $j = $j + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    if ($divisorShift) {
        jm_BitLevel_shiftRight($normB, $bLength, $normA, 0, $divisorShift);
        return $normB;
    }
    jl_System_fastArraycopy($normA, 0, $normB, 0, $bLength);
    return $normA;
},
jm_Division_divideArrayByInt = ($dest, $src, $srcLength, $divisor) => {
    let $rem, $bLong, $i, $bPos, var$9, var$10, $temp, $quot, $aPos;
    $rem = Long_ZERO;
    $bLong = Long_and(Long_fromInt($divisor), Long_create(4294967295, 0));
    $i = $srcLength - 1 | 0;
    $bPos = Long_fromInt($divisor >>> 1 | 0);
    $divisor = $divisor & 1;
    var$9 = Long_shl($bLong, 1);
    while ($i >= 0) {
        var$10 = $src.data;
        $temp = Long_or(Long_shl($rem, 32), Long_and(Long_fromInt(var$10[$i]), Long_create(4294967295, 0)));
        if (Long_ge($temp, Long_ZERO)) {
            $quot = Long_div($temp, $bLong);
            $rem = Long_rem($temp, $bLong);
        } else {
            $aPos = Long_shru($temp, 1);
            $quot = Long_div($aPos, $bPos);
            $rem = Long_add(Long_shl(Long_rem($aPos, $bPos), 1), Long_and($temp, Long_fromInt(1)));
            if ($divisor) {
                if (Long_le($quot, $rem))
                    $rem = Long_sub($rem, $quot);
                else if (Long_gt(Long_sub($quot, $rem), $bLong)) {
                    $rem = Long_add($rem, Long_sub(var$9, $quot));
                    $quot = Long_sub($quot, Long_fromInt(2));
                } else {
                    $rem = Long_add($rem, Long_sub($bLong, $quot));
                    $quot = Long_sub($quot, Long_fromInt(1));
                }
            }
        }
        $dest.data[$i] = Long_lo(Long_and($quot, Long_create(4294967295, 0)));
        $i = $i + (-1) | 0;
    }
    return Long_lo($rem);
},
jm_Division_divideLongByInt = ($a, $b) => {
    let $bLong, $quot, $rem, $aPos, $bPos;
    $bLong = Long_and(Long_fromInt($b), Long_create(4294967295, 0));
    if (Long_ge($a, Long_ZERO)) {
        $quot = Long_div($a, $bLong);
        $rem = Long_rem($a, $bLong);
    } else {
        $aPos = Long_shru($a, 1);
        $bPos = Long_fromInt($b >>> 1 | 0);
        $quot = Long_div($aPos, $bPos);
        $rem = Long_add(Long_shl(Long_rem($aPos, $bPos), 1), Long_and($a, Long_fromInt(1)));
        if ($b & 1) {
            if (Long_le($quot, $rem))
                $rem = Long_sub($rem, $quot);
            else if (Long_le(Long_sub($quot, $rem), $bLong)) {
                $rem = Long_add($rem, Long_sub($bLong, $quot));
                $quot = Long_sub($quot, Long_fromInt(1));
            } else {
                $rem = Long_add($rem, Long_sub(Long_shl($bLong, 1), $quot));
                $quot = Long_sub($quot, Long_fromInt(2));
            }
        }
    }
    return Long_or(Long_shl($rem, 32), Long_and($quot, Long_create(4294967295, 0)));
},
jm_Division_gcdBinary = ($op1, $op2) => {
    let $lsb1, $lsb2, $pow2Count;
    $lsb1 = jl_Long_numberOfTrailingZeros($op1);
    $lsb2 = jl_Long_numberOfTrailingZeros($op2);
    $pow2Count = jl_Math_min($lsb1, $lsb2);
    if ($lsb1)
        $op1 = Long_shru($op1, $lsb1);
    if ($lsb2)
        $op2 = Long_shru($op2, $lsb2);
    while (true) {
        if (Long_lt($op1, $op2)) {
            $op2 = Long_sub($op2, $op1);
            $op2 = Long_shru($op2, jl_Long_numberOfTrailingZeros($op2));
        } else {
            $op1 = Long_sub($op1, $op2);
            $op1 = Long_shru($op1, jl_Long_numberOfTrailingZeros($op1));
        }
        if (Long_eq($op1, Long_ZERO))
            break;
    }
    return Long_shl($op2, $pow2Count);
};
function ju_ArrayDeque$1() {
    let a = this; jl_Object.call(a);
    a.$refVersion = 0;
    a.$index4 = 0;
    a.$lastIndex = 0;
    a.$left = 0;
    a.$this$02 = null;
}
let ju_ArrayDeque$1_hasNext = $this => {
    return $this.$left <= 0 ? 0 : 1;
},
ju_ArrayDeque$1_next = $this => {
    let var$1, $result, var$3;
    var$1 = $this.$left - 1 | 0;
    $this.$left = var$1;
    if (var$1 < 0) {
        $result = new ju_NoSuchElementException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $result = $this.$this$02;
    if ($result.$version > $this.$refVersion) {
        $result = new ju_ConcurrentModificationException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    var$1 = $this.$index4;
    $this.$lastIndex = var$1;
    var$3 = $result.$array1.data;
    $result = var$3[var$1];
    $this.$index4 = ju_ArrayDeque_modInc(var$1, var$3.length);
    return $result;
},
ju_ArrayDeque$1_remove = $this => {
    let $toLeft, var$2;
    $toLeft = $this.$lastIndex;
    if ($toLeft < 0) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if (ju_ArrayDeque_removeAt($this.$this$02, $toLeft))
        $this.$index4 = ju_ArrayDeque_modInc($this.$index4, $this.$this$02.$array1.data.length);
    $this.$lastIndex = (-1);
},
jt_DecimalFormat$Constants = $rt_classWithoutFields(),
jt_DecimalFormat$Constants_doubleAnalysisResult = null,
jt_DecimalFormat$Constants_floatAnalysisResult = null,
jt_DecimalFormat$Constants__init_ = $this => {
    return;
},
jt_DecimalFormat$Constants__init_0 = () => {
    let var_0 = new jt_DecimalFormat$Constants();
    jt_DecimalFormat$Constants__init_(var_0);
    return var_0;
},
jt_DecimalFormat$Constants__clinit_ = () => {
    jt_DecimalFormat$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
    jt_DecimalFormat$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
},
cbggg_BitmapFontCache$addText$lambda$_31_0 = $rt_classWithoutFields(),
cbggg_BitmapFontCache$addText$lambda$_31_0__init_ = var$0 => {
    return;
},
cbggg_BitmapFontCache$addText$lambda$_31_0__init_0 = () => {
    let var_0 = new cbggg_BitmapFontCache$addText$lambda$_31_0();
    cbggg_BitmapFontCache$addText$lambda$_31_0__init_(var_0);
    return var_0;
},
cbggg_BitmapFontCache$addText$lambda$_31_0_get = var$0 => {
    return cbggg_GlyphLayout__init_0();
},
ses_Joiner = $rt_classWithoutFields(),
ses_Joiner_AB = null,
ses_Joiner_BC = null,
ses_Joiner_v = null,
ses_Joiner__init_ = $this => {
    return;
},
ses_Joiner__init_0 = () => {
    let var_0 = new ses_Joiner();
    ses_Joiner__init_(var_0);
    return var_0;
},
ses_Joiner_preparePointyJoin = ($A, $B, $C, $outsidePoint, $outsidePoint_0, $halfLineWidth) => {
    let $angle, $len, $bendsLeft, $insidePoint;
    cbgm_Vector2_sub(cbgm_Vector2_set0(ses_Joiner_AB, $B), $A);
    cbgm_Vector2_sub(cbgm_Vector2_set0(ses_Joiner_BC, $C), $B);
    $angle = ses_ShapeUtils_angleRad(ses_Joiner_AB, ses_Joiner_BC);
    if (!ses_ShapeUtils_epsilonEquals($angle, 0.0) && !ses_ShapeUtils_epsilonEquals($angle, 6.2831854820251465)) {
        $len = $halfLineWidth / jl_Math_sin($angle);
        $bendsLeft = $angle >= 0.0 ? 0 : 1;
        cbgm_Vector2_setLength(ses_Joiner_AB, $len);
        cbgm_Vector2_setLength(ses_Joiner_BC, $len);
        $insidePoint = !$bendsLeft ? $outsidePoint_0 : $outsidePoint;
        if ($bendsLeft)
            $outsidePoint = $outsidePoint_0;
        $A = cbgm_Vector2_set1($insidePoint, $B);
        $C = ses_Joiner_AB;
        $A = cbgm_Vector2_sub0($A, $C);
        $C = ses_Joiner_BC;
        cbgm_Vector2_add($A, $C);
        $A = cbgm_Vector2_set1($outsidePoint, $B);
        $B = ses_Joiner_AB;
        $A = cbgm_Vector2_add($A, $B);
        $B = ses_Joiner_BC;
        cbgm_Vector2_sub0($A, $B);
        return $angle;
    }
    ses_Joiner_prepareStraightJoin($B, $outsidePoint, $outsidePoint_0, $halfLineWidth);
    return $angle;
},
ses_Joiner_prepareSmoothJoin = ($A, $B, $C, $outsidePoint, $outsidePoint_0, $halfLineWidth, $startOfEdge) => {
    let $angle, $len, $bendsLeft, $insidePoint, $edgeDirection;
    cbgm_Vector2_sub(cbgm_Vector2_set0(ses_Joiner_AB, $B), $A);
    cbgm_Vector2_sub(cbgm_Vector2_set0(ses_Joiner_BC, $C), $B);
    $angle = ses_ShapeUtils_angleRad(ses_Joiner_AB, ses_Joiner_BC);
    if (!ses_ShapeUtils_epsilonEquals($angle, 0.0) && !ses_ShapeUtils_epsilonEquals($angle, 6.2831854820251465)) {
        $len = $halfLineWidth / jl_Math_sin($angle);
        cbgm_Vector2_setLength(ses_Joiner_AB, $len);
        cbgm_Vector2_setLength(ses_Joiner_BC, $len);
        $bendsLeft = $angle >= 0.0 ? 0 : 1;
        $insidePoint = !$bendsLeft ? $outsidePoint_0 : $outsidePoint;
        if ($bendsLeft)
            $outsidePoint = $outsidePoint_0;
        $A = cbgm_Vector2_set1($insidePoint, $B);
        $C = ses_Joiner_AB;
        $A = cbgm_Vector2_sub0($A, $C);
        $C = ses_Joiner_BC;
        cbgm_Vector2_add($A, $C);
        $edgeDirection = !$startOfEdge ? ses_Joiner_AB : ses_Joiner_BC;
        if (!$bendsLeft)
            cbgm_Vector2_set(ses_Joiner_v,  -$edgeDirection.$y, $edgeDirection.$x);
        else
            cbgm_Vector2_set(ses_Joiner_v, $edgeDirection.$y,  -$edgeDirection.$x);
        cbgm_Vector2_setLength(ses_Joiner_v, $halfLineWidth);
        $A = cbgm_Vector2_set1($outsidePoint, $B);
        $B = ses_Joiner_v;
        cbgm_Vector2_add($A, $B);
        return $bendsLeft;
    }
    ses_Joiner_prepareStraightJoin($B, $outsidePoint, $outsidePoint_0, $halfLineWidth);
    return 1;
},
ses_Joiner_prepareStraightJoin = ($B, $D, $E, $halfLineWidth) => {
    let var$5;
    cbgm_Vector2_setLength(ses_Joiner_AB, $halfLineWidth);
    var$5 = ses_Joiner_AB;
    cbgm_Vector2_add0(cbgm_Vector2_set($D,  -var$5.$y, var$5.$x), $B);
    $D = ses_Joiner_AB;
    cbgm_Vector2_add0(cbgm_Vector2_set($E, $D.$y,  -$D.$x), $B);
},
ses_Joiner_prepareFlatEndpoint = ($pathPointX, $pathPointY, $endPointX, $endPointY, $D, $E, $halfLineWidth) => {
    let var$8;
    var$8 = cbgm_Vector2_set(ses_Joiner_v, $endPointX, $endPointY);
    var$8.$x = var$8.$x - $pathPointX;
    var$8.$y = var$8.$y - $pathPointY;
    cbgm_Vector2_setLength(var$8, $halfLineWidth);
    var$8 = ses_Joiner_v;
    cbgm_Vector2_add1(cbgm_Vector2_set($D, var$8.$y,  -var$8.$x), $endPointX, $endPointY);
    $D = ses_Joiner_v;
    cbgm_Vector2_add1(cbgm_Vector2_set($E,  -$D.$y, $D.$x), $endPointX, $endPointY);
},
ses_Joiner_prepareFlatEndpoint0 = ($pathPoint, $endPoint, $D, $E, $halfLineWidth) => {
    ses_Joiner_prepareFlatEndpoint($pathPoint.$x, $pathPoint.$y, $endPoint.$x, $endPoint.$y, $D, $E, $halfLineWidth);
},
ses_Joiner__clinit_ = () => {
    ses_Joiner_AB = new cbgm_Vector2;
    ses_Joiner_BC = new cbgm_Vector2;
    ses_Joiner_v = new cbgm_Vector2;
},
jt_CharacterIterator = $rt_classWithoutFields(0),
jt_AttributedCharacterIterator = $rt_classWithoutFields(0);
function jt_AttributedString$AttributedIterator() {
    let a = this; jl_Object.call(a);
    a.$begin0 = 0;
    a.$end2 = 0;
    a.$offset = 0;
    a.$attrString = null;
    a.$attributesAllowed = null;
}
let jt_AttributedString$AttributedIterator_inRange = ($this, $range) => {
    let var$2, var$3, var$4;
    if (!($range.$value4 instanceof jt_Annotation))
        return 1;
    a: {
        var$2 = $range.$start1;
        var$3 = $this.$begin0;
        if (var$2 >= var$3) {
            var$4 = $this.$end2;
            if (var$2 < var$4) {
                var$2 = $range.$end3;
                if (var$2 > var$3 && var$2 <= var$4) {
                    var$2 = 1;
                    break a;
                }
            }
        }
        var$2 = 0;
    }
    return var$2;
},
jt_AttributedString$AttributedIterator_getAllAttributeKeys = $this => {
    let $result, $it, var$3, var$4, var$5, $entry, var$7, var$8, var$9, var$10, var$11;
    if (!$this.$begin0 && $this.$end2 == $this.$attrString.$text0.$nativeString.length && $this.$attributesAllowed === null)
        return ju_HashMap_keySet($this.$attrString.$attributeMap);
    $result = ju_HashSet__init_1(ju_HashMap__init_0((($this.$attrString.$attributeMap.$elementCount * 4 | 0) / 3 | 0) + 1 | 0));
    $it = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($this.$attrString.$attributeMap));
    var$3 = $it;
    var$4 = $it;
    var$5 = $result;
    while (ju_HashMap$AbstractMapIterator_hasNext(var$3)) {
        $entry = ju_HashMap$EntryIterator_next(var$4);
        $it = $this.$attributesAllowed;
        if (!($it !== null && !$it.$contains2($entry.$key))) {
            var$7 = $entry;
            $entry = var$7.$value.$iterator0();
            a: {
                while ($entry.$hasNext()) {
                    $it = $entry.$next();
                    var$8 = $it.$start1;
                    var$9 = $this.$begin0;
                    var$10 = $rt_compare(var$8, var$9);
                    if (var$10 >= 0) {
                        var$11 = $this.$end2;
                        if (var$8 < var$11) {
                            b: {
                                c: {
                                    if ($it.$value4 instanceof jt_Annotation) {
                                        var$8 = $it.$end3;
                                        if (var$8 <= var$9)
                                            break c;
                                        if (var$8 > var$11)
                                            break c;
                                    }
                                    var$8 = 1;
                                    break b;
                                }
                                var$8 = 0;
                            }
                            break a;
                        }
                    }
                    var$11 = $it.$end3;
                    if (var$11 > var$9) {
                        var$9 = $this.$end2;
                        if (var$11 <= var$9) {
                            d: {
                                e: {
                                    if ($it.$value4 instanceof jt_Annotation) {
                                        if (var$10 < 0)
                                            break e;
                                        if (var$8 >= var$9)
                                            break e;
                                    }
                                    var$8 = 1;
                                    break d;
                                }
                                var$8 = 0;
                            }
                            break a;
                        }
                    }
                }
                var$8 = 0;
            }
            if (var$8)
                ju_HashSet_add(var$5, var$7.$key);
        }
    }
    return $result;
},
jt_AttributedString$AttributedIterator_currentValue = ($this, $ranges) => {
    let $it, $range, var$4;
    $it = $ranges.$iterator0();
    while ($it.$hasNext()) {
        $range = $it.$next();
        var$4 = $this.$offset;
        if (var$4 >= $range.$start1 && var$4 < $range.$end3)
            return !jt_AttributedString$AttributedIterator_inRange($this, $range) ? null : $range.$value4;
    }
    return null;
};
function jnci_BufferedEncoder() {
    let a = this; jnc_CharsetEncoder.call(a);
    a.$inArray0 = null;
    a.$outArray = null;
}
let jnci_BufferedEncoder_encodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, var$7, $i, var$9, $outPos, $result, $outSize, $controller;
    $inArray = $this.$inArray0;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray;
    var$7 = $this;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$9 = $inArray.data;
                    var$9[$i - $inPos | 0] = var$9[$i];
                    $i = $i + 1 | 0;
                }
                var$9 = $inArray.data;
                $outPos = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $outPos | 0, var$9.length);
                jn_CharBuffer_get($in, $inArray, $outPos, $inSize - $outPos | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            var$9 = $outArray.data;
            $outSize = jl_Math_min(jn_Buffer_remaining($out), var$9.length);
            $controller = new jnci_BufferedEncoder$Controller;
            $controller.$in0 = $in;
            $controller.$out0 = $out;
            $result = jnci_UTF8Encoder_arrayEncode(var$7, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition0;
            $outPos = $controller.$outPosition0;
            if ($result === null) {
                if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                    $result = jnc_CoderResult_UNDERFLOW;
                else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                    $result = jnc_CoderResult_OVERFLOW;
            }
            jn_ByteBuffer_put($out, $outArray, 0, $outPos);
            if ($result !== null)
                break;
        }
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder),
jnci_UTF8Encoder_arrayEncode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $ch, $low, var$13, $codePoint;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize) {
                var$9 = $inPos;
                break a;
            }
            var$10 = $inArray.data;
            var$9 = $inPos + 1 | 0;
            $ch = var$10[$inPos];
            if ($ch < 128) {
                var$10 = $outArray.data;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = $ch << 24 >> 24;
            } else if ($ch < 2048) {
                if (($outPos + 2 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $inPos = $outPos + 1 | 0;
                var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else if (!jl_Character_isSurrogate($ch)) {
                if (($outPos + 3 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                var$13 = $outPos + 1 | 0;
                var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                $inPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else {
                if (!jl_Character_isHighSurrogate($ch)) {
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (var$9 >= $inSize) {
                    if (jn_Buffer_hasRemaining($controller.$in0))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                $inPos = var$9 + 1 | 0;
                $low = var$10[var$9];
                if (!jl_Character_isLowSurrogate($low)) {
                    var$9 = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (($outPos + 4 | 0) > $outSize) {
                    var$9 = $inPos + (-2) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $codePoint = jl_Character_toCodePoint($ch, $low);
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                var$13 = $low + 1 | 0;
                var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                $outPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                var$9 = $inPos;
            }
            $inPos = var$9;
            $outPos = $low;
        }
        var$9 = $inPos;
    }
    $controller.$inPosition0 = var$9;
    $controller.$outPosition0 = $outPos;
    return $result;
};
function cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0() {
    jl_Object.call(this);
    this.$_017 = null;
}
let cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3;
    var$1 = var$1.$_017;
    var$2 = jl_System_err();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(898));
    jl_AbstractStringBuilder_append(var$3, var$1);
    var$1 = jl_AbstractStringBuilder_toString(var$3);
    otcic_JsConsolePrintStream_println(var$2, var$1);
};
function cgxgbta_AssetLoadImpl$6() {
    let a = this; jl_Object.call(a);
    a.$val$listener0 = null;
    a.$val$path1 = null;
    a.$val$fileHandle = null;
    a.$this$09 = null;
}
let cgxgbta_AssetLoadImpl$6_onProgress = ($this, $total, $loaded) => {
    let var$3;
    var$3 = $this.$val$listener0;
    if (var$3 !== null)
        var$3.$onProgress($total, $loaded);
},
cgxgbta_AssetLoadImpl$6_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, $$je;
    a: {
        var$1 = var$2;
        var$2 = $this.$this$09.$assetInQueue;
        var$3 = $this.$val$path1;
        var$2 = var$2.$backingMap;
        var$4 = 0;
        var$5 = null;
        if (var$3 === null) {
            var$6 = var$2.$elementData.data[0];
            while (var$6 !== null) {
                if (var$6.$key === null)
                    break a;
                var$3 = var$6.$next2;
                var$5 = var$6;
                var$6 = var$3;
            }
        } else {
            var$7 = jl_String_hashCode(var$3);
            var$8 = var$2.$elementData.data;
            var$4 = var$7 & (var$8.length - 1 | 0);
            var$6 = var$8[var$4];
            while (var$6 !== null && !(var$6.$origKeyHash == var$7 && ju_HashMap_areEqualKeys(var$3, var$6.$key))) {
                var$9 = var$6.$next2;
                var$5 = var$6;
                var$6 = var$9;
            }
        }
    }
    if (var$6 === null)
        var$6 = null;
    else {
        if (var$5 !== null)
            var$5.$next2 = var$6.$next2;
        else
            var$2.$elementData.data[var$4] = var$6.$next2;
        var$2.$modCount0 = var$2.$modCount0 + 1 | 0;
        var$2.$elementCount = var$2.$elementCount - 1 | 0;
    }
    var$8 = cgxgbtdt_TypedArrays_toByteArray(var$1.$data10);
    var$2 = $this.$val$fileHandle;
    var$3 = cgxgbt_TeaFiles_getFileDB(var$2.$teaFiles, var$2.$type0);
    var$6 = ji_ByteArrayOutputStream__init_1(jl_Math_max(512, jl_Math_min(4096, 8192)));
    var$5 = new cgxgbtf_FileDB$1;
    var$5.$this$013 = var$3;
    var$5.$val$buffer = var$6;
    var$5.$val$file = var$2;
    var$5.$val$append = 0;
    var$5.$val$bufferSize = 4096;
    b: {
        c: {
            try {
                cgxgbtf_FileDB$1_write(var$5, var$8);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$1 = $$je;
                    break c;
                } else{
                    var$1 = $$je;
                    break b;
                }
            }
            cbgu_StreamUtils_closeQuietly(var$5);
            var$2 = $this.$val$listener0;
            if (var$2 !== null)
                var$2.$onSuccess($this.$val$path1, var$1);
            return;
        }
        try {
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = jl_String_valueOf($this.$val$fileHandle);
            var$6 = jl_String_valueOf(cgxgbt_TeaFileHandle_type($this.$val$fileHandle));
            var$9 = jl_StringBuilder__init_();
            jl_StringBuilder_append3(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(899)), var$3), $rt_s(770)), var$6), 41);
            cbgu_GdxRuntimeException__init_1(var$2, jl_StringBuilder_toString(var$9), var$1);
            $rt_throw(var$2);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            var$1 = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly(var$5);
    $rt_throw(var$1);
},
otc_PlatformDetector = $rt_classWithoutFields(),
otc_PlatformDetector__init_ = $this => {
    return;
},
otc_PlatformDetector__init_0 = () => {
    let var_0 = new otc_PlatformDetector();
    otc_PlatformDetector__init_(var_0);
    return var_0;
};
function jnci_BufferedEncoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in0 = null;
    a.$out0 = null;
    a.$inPosition0 = 0;
    a.$outPosition0 = 0;
}
let jnci_BufferedEncoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out0) < $sz ? 0 : 1;
};
function cbggg_GLOnlyTextureData() {
    let a = this; jl_Object.call(a);
    a.$width2 = 0;
    a.$height4 = 0;
    a.$isPrepared1 = 0;
    a.$mipLevel = 0;
    a.$internalFormat1 = 0;
    a.$format11 = 0;
    a.$type8 = 0;
}
let cbggg_GLOnlyTextureData_getType = $this => {
    return cbgg_TextureData$TextureDataType_Custom;
},
cbggg_GLOnlyTextureData_isPrepared = $this => {
    return $this.$isPrepared1;
},
cbggg_GLOnlyTextureData_prepare = $this => {
    let var$1;
    if (!$this.$isPrepared1) {
        $this.$isPrepared1 = 1;
        return;
    }
    var$1 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$1, $rt_s(730));
    $rt_throw(var$1);
},
cbggg_GLOnlyTextureData_consumeCustomData = ($this, $target) => {
    cbg_Gdx_gl.$glTexImage2D($target, $this.$mipLevel, $this.$internalFormat1, $this.$width2, $this.$height4, 0, $this.$format11, $this.$type8, null);
},
cbggg_GLOnlyTextureData_consumePixmap = $this => {
    let var$1;
    var$1 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$1, $rt_s(900));
    $rt_throw(var$1);
},
cbggg_GLOnlyTextureData_disposePixmap = $this => {
    let var$1;
    var$1 = new cbgu_GdxRuntimeException;
    jl_Exception__init_(var$1, $rt_s(900));
    $rt_throw(var$1);
},
cbggg_GLOnlyTextureData_getWidth = $this => {
    return $this.$width2;
},
cbggg_GLOnlyTextureData_getHeight = $this => {
    return $this.$height4;
},
cbggg_GLOnlyTextureData_getFormat = $this => {
    return cbgg_Pixmap$Format_RGBA8888;
},
cbggg_GLOnlyTextureData_useMipMaps = $this => {
    return 0;
},
cbggg_GLOnlyTextureData_isManaged = $this => {
    return 0;
},
ccvu_CommonUtils = $rt_classWithoutFields(),
ccvu_CommonUtils_tmpColor = null,
ccvu_CommonUtils__init_ = $this => {
    return;
},
ccvu_CommonUtils__init_0 = () => {
    let var_0 = new ccvu_CommonUtils();
    ccvu_CommonUtils__init_(var_0);
    return var_0;
},
ccvu_CommonUtils__clinit_ = () => {
    ccvu_CommonUtils_tmpColor = new cbgg_Color;
},
jm_Conversion = $rt_classWithoutFields(),
jm_Conversion_digitFitInInt = null,
jm_Conversion_bigRadices = null,
jm_Conversion__init_ = $this => {
    return;
},
jm_Conversion__init_0 = () => {
    let var_0 = new jm_Conversion();
    jm_Conversion__init_(var_0);
    return var_0;
},
jm_Conversion__clinit_ = () => {
    jm_Conversion_digitFitInInt = $rt_createIntArrayFromData([(-1), (-1), 31, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
    jm_Conversion_bigRadices = $rt_createIntArrayFromData([(-2147483648), 1162261467, 1073741824, 1220703125, 362797056, 1977326743, 1073741824, 387420489, 1000000000, 214358881, 429981696, 815730721, 1475789056, 170859375, 268435456, 410338673, 612220032, 893871739, 1280000000, 1801088541, 113379904, 148035889, 191102976, 244140625, 308915776, 387420489, 481890304, 594823321, 729000000, 887503681, 1073741824, 1291467969, 1544804416, 1838265625, 60466176]);
};
function jt_AttributedString$Range() {
    let a = this; jl_Object.call(a);
    a.$start1 = 0;
    a.$end3 = 0;
    a.$value4 = null;
}
let ses_Drawing = $rt_classWithoutFields(),
jt_Annotation = $rt_classWithoutFields();
function ju_HashMap$1() {
    ju_AbstractSet.call(this);
    this.$this$016 = null;
}
let ju_HashMap$1_iterator = $this => {
    let var$1;
    var$1 = new ju_HashMap$KeyIterator;
    ju_HashMap$AbstractMapIterator__init_(var$1, $this.$this$016);
    return var$1;
},
cbgg_Colors = $rt_classWithoutFields(),
cbgg_Colors_map = null,
cbgg_Colors_$callClinit = () => {
    cbgg_Colors_$callClinit = $rt_eraseClinit(cbgg_Colors);
    cbgg_Colors__clinit_();
},
cbgg_Colors_reset = () => {
    cbgg_Colors_$callClinit();
    cbgu_ObjectMap_clear(cbgg_Colors_map);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(901), cbgg_Color_CLEAR);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(902), cbgg_Color_CLEAR_WHITE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(903), cbgg_Color_BLACK);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(904), cbgg_Color_WHITE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(905), cbgg_Color_LIGHT_GRAY);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(906), cbgg_Color_GRAY);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(907), cbgg_Color_DARK_GRAY);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(908), cbgg_Color_BLUE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(909), cbgg_Color_NAVY);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(910), cbgg_Color_ROYAL);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(911), cbgg_Color_SLATE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(912), cbgg_Color_SKY);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(913), cbgg_Color_CYAN);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(914), cbgg_Color_TEAL);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(915), cbgg_Color_GREEN);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(916), cbgg_Color_CHARTREUSE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(917), cbgg_Color_LIME);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(918), cbgg_Color_FOREST);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(919), cbgg_Color_OLIVE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(920), cbgg_Color_YELLOW);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(921), cbgg_Color_GOLD);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(922), cbgg_Color_GOLDENROD);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(923), cbgg_Color_ORANGE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(924), cbgg_Color_BROWN);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(925), cbgg_Color_TAN);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(926), cbgg_Color_FIREBRICK);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(927), cbgg_Color_RED);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(928), cbgg_Color_SCARLET);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(929), cbgg_Color_CORAL);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(930), cbgg_Color_SALMON);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(931), cbgg_Color_PINK);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(932), cbgg_Color_MAGENTA);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(933), cbgg_Color_PURPLE);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(934), cbgg_Color_VIOLET);
    cbgu_ObjectMap_put(cbgg_Colors_map, $rt_s(935), cbgg_Color_MAROON);
},
cbgg_Colors__init_ = $this => {
    cbgg_Colors_$callClinit();
},
cbgg_Colors__init_0 = () => {
    let var_0 = new cbgg_Colors();
    cbgg_Colors__init_(var_0);
    return var_0;
},
cbgg_Colors__clinit_ = () => {
    cbgg_Colors_map = cbgu_ObjectMap__init_();
    cbgg_Colors_reset();
},
ju_HashMap$KeyIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator),
ju_HashMap$KeyIterator_next = $this => {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry.$key;
};
function cgxgbtf_FileDB$1() {
    let a = this; ji_OutputStream.call(a);
    a.$val$buffer = null;
    a.$val$file = null;
    a.$val$append = 0;
    a.$val$bufferSize = 0;
    a.$this$013 = null;
}
let cgxgbtf_FileDB$1_write = ($this, $b) => {
    let var$2, var$3, var$4;
    var$2 = $b.data;
    var$3 = $this.$val$buffer;
    var$4 = var$2.length;
    ji_ByteArrayOutputStream_write(var$3, $b, 0, var$4);
},
cgxgbtf_FileDB$1_close = $this => {
    let $data, var$2, var$3, var$4, var$5, var$6;
    $data = ji_ByteArrayOutputStream_toByteArray($this.$val$buffer);
    var$2 = $data.data;
    var$3 = $this.$this$013;
    var$4 = $this.$val$file;
    var$5 = $this.$val$append;
    var$6 = jl_Math_max(var$2.length, $this.$val$bufferSize);
    cgxgbtf_MemoryFileStorage_writeInternal(var$3, var$4, $data, var$5, var$6);
};
$rt_packages([-1, "com", 0, "github", 1, "xpenatan", 2, "gdx", 3, "backends", 4, "teavm", 5, "assetloader", 5, "dom", 5, "filesystem", 8, "types", 0, "badlogic", 10, "gdx", 11, "maps", 11, "utils", 13, "reflect", 11, "controllers", 11, "math", 11, "graphics", 17, "glutils", 17, "g2d", 17, "g3d", 20, "particles", 0, "crashinvaders", 22, "vfx", 23, "effects", 24, "util", 23, "gl", 23, "utils", 23, "framebuffer", -1, "java", 29, "util", 30, "regex", 29, "nio", 32, "charset", 29, "io", 29, "math", 29, "text", 29,
"lang", -1, "org", 38, "teavm", 39, "classlib", 40, "impl", 41, "unicode", -1, "space", 43, "earlygrey", 44, "shapedrawer"
]);
$rt_metadata([jl_Object, "Object", 37, 0, [], 0, 3, 0, 0, ["$hashCode", $rt_wrapFunction0(jl_Object_hashCode), "$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
cbgu_Pool$Poolable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_GlyphLayout, "GlyphLayout", 19, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, cbggg_GlyphLayout_$callClinit, ["$reset", $rt_wrapFunction0(cbggg_GlyphLayout_reset), "$toString", $rt_wrapFunction0(cbggg_GlyphLayout_toString)],
cbggg_TextureRegion, "TextureRegion", 19, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_Sprite, "Sprite", 19, cbggg_TextureRegion, [], 0, 3, 0, 0, 0,
cbgu_Disposable, "Disposable", 13, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_BitmapFont, "BitmapFont", 19, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cbggg_NinePatch, "NinePatch", 19, jl_Object, [], 0, 3, 0, 0, 0,
cbgg_Color, "Color", 17, jl_Object, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(cbgg_Color_equals), "$hashCode", $rt_wrapFunction0(cbgg_Color_hashCode), "$toString", $rt_wrapFunction0(cbgg_Color_toString)],
cbgg_GLTexture, 0, jl_Object, [cbgu_Disposable], 1, 3, 0, 0, 0,
cbgg_Texture, "Texture", 17, cbgg_GLTexture, [], 0, 3, 0, cbgg_Texture_$callClinit, ["$toString", $rt_wrapFunction0(cbgg_Texture_toString)],
jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgu_Array, "Array", 13, jl_Object, [jl_Iterable], 0, 3, 0, 0, ["$hashCode", $rt_wrapFunction0(cbgu_Array_hashCode), "$equals", $rt_wrapFunction1(cbgu_Array_equals), "$toString", $rt_wrapFunction0(cbgu_Array_toString)],
cbgu_Json, "Json", 13, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ObjectMap, "ObjectMap", 13, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_OrderedMap, "OrderedMap", 13, cbgu_ObjectMap, [], 0, 3, 0, 0, 0,
cbgu_Queue, "Queue", 13, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_Predicate, "Predicate", 13, jl_Object, [], 3, 3, 0, 0, 0,
cbgg_VertexAttribute, "VertexAttribute", 17, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Net, "Net", 11, jl_Object, [], 3, 3, 0, 0, 0,
cbgm_MapObject, "MapObject", 12, jl_Object, [], 0, 3, 0, 0, 0,
cbgggp_ResourceData$Configurable, "ResourceData$Configurable", 21, jl_Object, [], 3, 3, 0, 0, 0,
cbgggp_ParticleEffect, "ParticleEffect", 21, jl_Object, [cbgu_Disposable, cbgggp_ResourceData$Configurable], 0, 3, 0, 0, 0,
cbgu_Json$Serializable, "Json$Serializable", 13, jl_Object, [], 3, 3, 0, 0, 0,
cbgggp_ParticleController, "ParticleController", 21, jl_Object, [cbgu_Json$Serializable, cbgggp_ResourceData$Configurable], 0, 3, 0, 0, 0,
cbgggp_ResourceData, "ResourceData", 21, jl_Object, [cbgu_Json$Serializable], 0, 3, 0, 0, 0,
cbgggp_ParallelArray, "ParallelArray", 21, jl_Object, [], 0, 3, 0, 0, 0,
cbgm_Interpolation, "Interpolation", 16, jl_Object, [], 1, 3, 0, cbgm_Interpolation_$callClinit, 0,
jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Class, "Class", 37, jl_Object, [jlr_AnnotatedElement, jlr_Type], 4, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Class_toString)],
otji_JS, 0, jl_Object, [], 4, 3, 0, 0, 0,
otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage)],
jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
jl_RuntimeException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
jl_ClassCastException, "ClassCastException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_String, "String", 37, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, 0, ["$charAt", $rt_wrapFunction1(jl_String_charAt), "$length", $rt_wrapFunction0(jl_String_length), "$subSequence", $rt_wrapFunction2(jl_String_subSequence), "$toString", $rt_wrapFunction0(jl_String_toString), "$equals", $rt_wrapFunction1(jl_String_equals), "$hashCode", $rt_wrapFunction0(jl_String_hashCode)],
jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
jl_Integer, "Integer", 37, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Integer_toString0), "$hashCode", $rt_wrapFunction0(jl_Integer_hashCode), "$equals", $rt_wrapFunction1(jl_Integer_equals)],
jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_StringBuilder, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$substring0", $rt_wrapFunction2(jl_StringBuilder_substring), "$insert3", $rt_wrapFunction4(jl_StringBuilder_insert0), "$append6", $rt_wrapFunction3(jl_StringBuilder_append6), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert", $rt_wrapFunction2(jl_StringBuilder_insert2), "$insert2", $rt_wrapFunction2(jl_StringBuilder_insert1), "$insert0", $rt_wrapFunction2(jl_StringBuilder_insert)],
otcir_FieldInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
otcir_MethodInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
otcir_ClassList, 0, jl_Object, [], 0, 3, 0, 0, 0,
pst_TeaVMLauncher, 0, jl_Object, [], 0, 3, 0, pst_TeaVMLauncher_$callClinit, 0]);
$rt_metadata([otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbt_TeaApplicationConfiguration, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Application, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaApplication, "TeaApplication", 5, jl_Object, [cbg_Application, jl_Runnable], 0, 3, 0, 0, 0,
cbg_ApplicationListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbg_ApplicationAdapter, 0, jl_Object, [cbg_ApplicationListener], 1, 3, 0, 0, 0,
ps_Adapter, 0, cbg_ApplicationAdapter, [], 0, 3, 0, 0, 0,
cbgu_DefaultPool$PoolSupplier, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_GlyphLayout$_clinit_$lambda$_17_0, "GlyphLayout$<clinit>$lambda$_17_0", 19, jl_Object, [cbgu_DefaultPool$PoolSupplier], 0, 3, 0, 0, ["$get7", $rt_wrapFunction0(cbggg_GlyphLayout$_clinit_$lambda$_17_0_get)],
cbgu_Pools, 0, jl_Object, [], 0, 3, 0, cbgu_Pools_$callClinit, 0,
cbgu_IntArray, "IntArray", 13, jl_Object, [], 0, 3, 0, 0, ["$hashCode", $rt_wrapFunction0(cbgu_IntArray_hashCode), "$equals", $rt_wrapFunction1(cbgu_IntArray_equals), "$toString", $rt_wrapFunction0(cbgu_IntArray_toString)],
ju_Map, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
cbgm_Interpolation$1, "Interpolation$1", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$2, "Interpolation$2", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$3, "Interpolation$3", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$4, "Interpolation$4", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Pow, "Interpolation$Pow", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$PowIn, "Interpolation$PowIn", 16, cbgm_Interpolation$Pow, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$PowOut, "Interpolation$PowOut", 16, cbgm_Interpolation$Pow, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$5, "Interpolation$5", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$6, "Interpolation$6", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$7, "Interpolation$7", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$8, "Interpolation$8", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$9, "Interpolation$9", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$10, "Interpolation$10", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$11, "Interpolation$11", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Exp, "Interpolation$Exp", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ExpIn, "Interpolation$ExpIn", 16, cbgm_Interpolation$Exp, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ExpOut, "Interpolation$ExpOut", 16, cbgm_Interpolation$Exp, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$12, "Interpolation$12", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$13, "Interpolation$13", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$14, "Interpolation$14", 16, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Elastic, "Interpolation$Elastic", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ElasticIn, "Interpolation$ElasticIn", 16, cbgm_Interpolation$Elastic, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ElasticOut, "Interpolation$ElasticOut", 16, cbgm_Interpolation$Elastic, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$Swing, "Interpolation$Swing", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$SwingIn, "Interpolation$SwingIn", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$SwingOut, "Interpolation$SwingOut", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$BounceOut, "Interpolation$BounceOut", 16, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$Bounce, "Interpolation$Bounce", 16, cbgm_Interpolation$BounceOut, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$BounceIn, "Interpolation$BounceIn", 16, cbgm_Interpolation$BounceOut, [], 0, 3, 0, 0, 0,
ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_String$_clinit_$lambda$_115_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
cgxgbtu_TeaBaseUrlProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbtu_TeaDefaultBaseUrlProvider, 0, jl_Object, [cgxgbtu_TeaBaseUrlProvider], 0, 3, 0, 0, 0]);
$rt_metadata([jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Enum_toString), "$equals", $rt_wrapFunction1(jl_Enum_equals), "$hashCode", $rt_wrapFunction0(jl_Enum_hashCode)],
cgxgbt_TeaApplication$AppState, "TeaApplication$AppState", 5, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbtd_WindowWrapper, 0, jl_Object, [], 3, 3, 0, 0, 0,
otj_JSObject, 0, jl_Object, [], 3, 3, 0, 0, 0,
otjb_AnimationFrameCallback, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtdi_TeaWindow, 0, jl_Object, [cgxgbtd_WindowWrapper, otjb_AnimationFrameCallback], 0, 3, 0, cgxgbtdi_TeaWindow_$callClinit, 0,
jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_IllegalArgumentException, "IllegalArgumentException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbta_TeaWebAgent, 0, jl_Object, [], 0, 3, 0, 0, 0,
jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Graphics, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaGraphics, 0, jl_Object, [cbg_Graphics], 0, 3, 0, 0, 0,
cgxgbta_AssetDownloader, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl, 0, jl_Object, [cgxgbta_AssetDownloader], 0, 3, 0, 0, 0,
cgxgbta_AssetInstance, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbta_AssetLoader, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl, 0, jl_Object, [cgxgbta_AssetLoader], 0, 3, 0, 0, 0,
cgxjc_JMultiplatform, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxjc_JPlatformMap, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Input, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbg_AbstractInput, 0, jl_Object, [cbg_Input], 1, 3, 0, 0, 0,
cgxgbtd_EventListenerWrapper, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaInput, 0, cbg_AbstractInput, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cbg_Files, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaFiles, 0, jl_Object, [cbg_Files], 0, 3, 0, 0, 0,
cgxgbt_TeaNet, 0, jl_Object, [cbg_Net], 0, 3, 0, 0, 0,
cbg_ApplicationLogger, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaApplicationLogger, 0, jl_Object, [cbg_ApplicationLogger], 0, 3, 0, 0, 0,
cbgu_Clipboard, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaClipboard, 0, jl_Object, [cbgu_Clipboard], 0, 3, 0, 0, 0,
cbg_Gdx, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Audio, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaAudio, 0, jl_Object, [cbg_Audio], 3, 3, 0, 0, 0,
cgxgbt_DefaultTeaAudio, 0, jl_Object, [cgxgbt_TeaAudio], 0, 3, 0, 0, 0,
otjde_EventListener, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaApplication$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cgxgbt_TeaApplication$2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbt_TeaApplication$3, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cbgu_Pool, 0, jl_Object, [], 1, 3, 0, 0, 0,
cbgu_DefaultPool, "DefaultPool", 13, cbgu_Pool, [], 0, 3, 0, 0, ["$newObject", $rt_wrapFunction0(cbgu_DefaultPool_newObject)],
jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cbgu_ArraySupplier, "ArraySupplier", 13, jl_Object, [], 3, 3, 0, 0, 0,
cbgu_ObjectSet, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
jl_Long, "Long", 37, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$doubleValue", $rt_wrapFunction0(jl_Long_doubleValue), "$toString", $rt_wrapFunction0(jl_Long_toString), "$hashCode", $rt_wrapFunction0(jl_Long_hashCode), "$equals", $rt_wrapFunction1(jl_Long_equals)],
cgxgbtg_WebGLContextAttributesWrapper, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cbgg_GL20, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaGL20, "TeaGL20", 5, jl_Object, [cbgg_GL20], 0, 3, 0, 0, ["$glActiveTexture", $rt_wrapFunction1(cgxgbt_TeaGL20_glActiveTexture), "$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL20_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindBuffer), "$glBindFramebuffer", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindFramebuffer), "$glBindRenderbuffer", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindRenderbuffer), "$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindTexture), "$glBlendFunc", $rt_wrapFunction2(cgxgbt_TeaGL20_glBlendFunc),
"$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL20_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL20_glBufferData), "$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL20_glBufferSubData), "$glCheckFramebufferStatus", $rt_wrapFunction1(cgxgbt_TeaGL20_glCheckFramebufferStatus), "$glClear", $rt_wrapFunction1(cgxgbt_TeaGL20_glClear), "$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL20_glClearColor), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL20_glCompileShader), "$glCreateProgram",
$rt_wrapFunction0(cgxgbt_TeaGL20_glCreateProgram), "$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL20_glCreateShader), "$glDeleteProgram", $rt_wrapFunction1(cgxgbt_TeaGL20_glDeleteProgram), "$glDeleteShader", $rt_wrapFunction1(cgxgbt_TeaGL20_glDeleteShader), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL20_glDepthMask), "$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL20_glDisable), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20_glDisableVertexAttribArray), "$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL20_glDrawArrays),
"$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL20_glDrawElements), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL20_glDrawElements0), "$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL20_glEnable), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20_glEnableVertexAttribArray), "$glFramebufferRenderbuffer", $rt_wrapFunction4(cgxgbt_TeaGL20_glFramebufferRenderbuffer), "$glFramebufferTexture2D", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL20_glFramebufferTexture2D(this, var_1, var_2, var_3,
var_4, var_5); }, "$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL20_glGenerateMipmap), "$glGetActiveAttrib", $rt_wrapFunction4(cgxgbt_TeaGL20_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL20_glGetActiveUniform), "$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetAttribLocation), "$glGetBooleanv", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetBooleanv), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetFloatv), "$glGetIntegerv", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetIntegerv),
"$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetProgramInfoLog), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL20_glGetProgramiv), "$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetShaderInfoLog), "$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL20_glGetShaderiv), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetString), "$glGetUniformLocation", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetUniformLocation), "$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL20_glLinkProgram), "$glPixelStorei",
$rt_wrapFunction2(cgxgbt_TeaGL20_glPixelStorei), "$glRenderbufferStorage", $rt_wrapFunction4(cgxgbt_TeaGL20_glRenderbufferStorage), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL20_glShaderSource), "$glTexImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20_glTexImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL20_glTexParameterf), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL20_glTexParameteri),
"$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL20_glUniform1f), "$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL20_glUniform1i), "$glUniform2f", $rt_wrapFunction3(cgxgbt_TeaGL20_glUniform2f), "$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL20_glUseProgram), "$glVertexAttribPointer", function(var_1, var_2, var_3, var_4, var_5, var_6) { cgxgbt_TeaGL20_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL20_glViewport)],
cbgg_GL30, 0, jl_Object, [cbgg_GL20], 3, 3, 0, 0, 0]);
$rt_metadata([cgxgbt_TeaGL30, "TeaGL30", 5, cgxgbt_TeaGL20, [cbgg_GL30], 0, 3, 0, 0, ["$glBindVertexArray", $rt_wrapFunction1(cgxgbt_TeaGL30_glBindVertexArray), "$glDeleteVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30_glDeleteVertexArrays), "$glDrawArraysInstanced", $rt_wrapFunction4(cgxgbt_TeaGL30_glDrawArraysInstanced), "$glDrawBuffers", $rt_wrapFunction2(cgxgbt_TeaGL30_glDrawBuffers), "$glDrawElementsInstanced", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL30_glDrawElementsInstanced(this, var_1,
var_2, var_3, var_4, var_5); }, "$glGenVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30_glGenVertexArrays), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL30_glGetFloatv), "$glGetIntegerv", $rt_wrapFunction2(cgxgbt_TeaGL30_glGetIntegerv)],
cgxgbt_TeaGL30Debug, "TeaGL30Debug", 5, cgxgbt_TeaGL30, [], 0, 3, 0, 0, ["$glBindVertexArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glBindVertexArray), "$glDeleteVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glDeleteVertexArrays), "$glDrawArraysInstanced", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawArraysInstanced), "$glDrawBuffers", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glDrawBuffers), "$glDrawElementsInstanced", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL30Debug_glDrawElementsInstanced(this,
var_1, var_2, var_3, var_4, var_5); }, "$glGenVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGenVertexArrays), "$glActiveTexture", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glActiveTexture), "$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindTexture), "$glBlendFunc", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBlendFunc), "$glClear", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glClear), "$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glClearColor), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDepthMask),
"$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDisable), "$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glDrawArrays), "$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawElements0), "$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glEnable), "$glGetIntegerv", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetIntegerv), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetString), "$glPixelStorei", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glPixelStorei), "$glTexImage2D", function(var_1,
var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL30Debug_glTexImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glTexParameterf), "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glViewport), "$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindBuffer), "$glBindFramebuffer", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindFramebuffer),
"$glBindRenderbuffer", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindRenderbuffer), "$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBufferData), "$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBufferSubData), "$glCheckFramebufferStatus", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glCheckFramebufferStatus), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glCompileShader), "$glCreateProgram", $rt_wrapFunction0(cgxgbt_TeaGL30Debug_glCreateProgram),
"$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glCreateShader), "$glDeleteProgram", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDeleteProgram), "$glDeleteShader", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDeleteShader), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDisableVertexAttribArray), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawElements), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glEnableVertexAttribArray), "$glFramebufferRenderbuffer",
$rt_wrapFunction4(cgxgbt_TeaGL30Debug_glFramebufferRenderbuffer), "$glFramebufferTexture2D", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL30Debug_glFramebufferTexture2D(this, var_1, var_2, var_3, var_4, var_5); }, "$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGenerateMipmap), "$glGetActiveAttrib", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glGetActiveUniform), "$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetAttribLocation),
"$glGetBooleanv", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetBooleanv), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetFloatv), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glGetProgramiv), "$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetProgramInfoLog), "$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glGetShaderiv), "$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetShaderInfoLog), "$glGetUniformLocation", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetUniformLocation),
"$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glLinkProgram), "$glRenderbufferStorage", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glRenderbufferStorage), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glShaderSource), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glTexParameteri), "$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glUniform1f), "$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glUniform1i), "$glUniform2f", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glUniform2f),
"$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glUseProgram), "$glVertexAttribPointer", function(var_1, var_2, var_3, var_4, var_5, var_6) { cgxgbt_TeaGL30Debug_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
cbggg_GLVersion, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Application$ApplicationType, "Application$ApplicationType", 11, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbt_TeaGraphics$FullscreenChanged, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaGraphics$1, 0, jl_Object, [cgxgbt_TeaGraphics$FullscreenChanged], 0, 0, 0, 0, 0,
cgxgbt_TeaGL20Debug, "TeaGL20Debug", 5, cgxgbt_TeaGL20, [], 0, 3, 0, 0, ["$glActiveTexture", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glActiveTexture), "$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindTexture), "$glBlendFunc", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBlendFunc), "$glClear", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glClear), "$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glClearColor), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDepthMask), "$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDisable),
"$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glDrawArrays), "$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glDrawElements), "$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glEnable), "$glGetIntegerv", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetIntegerv), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetString), "$glPixelStorei", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glPixelStorei), "$glTexImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20Debug_glTexImage2D(this,
var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glTexParameterf), "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glViewport), "$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindBuffer), "$glBindFramebuffer", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindFramebuffer), "$glBindRenderbuffer", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindRenderbuffer),
"$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBufferData), "$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBufferSubData), "$glCheckFramebufferStatus", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glCheckFramebufferStatus), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glCompileShader), "$glCreateProgram", $rt_wrapFunction0(cgxgbt_TeaGL20Debug_glCreateProgram), "$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glCreateShader),
"$glDeleteProgram", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDeleteProgram), "$glDeleteShader", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDeleteShader), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDisableVertexAttribArray), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glDrawElements0), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glEnableVertexAttribArray), "$glFramebufferRenderbuffer", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glFramebufferRenderbuffer),
"$glFramebufferTexture2D", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL20Debug_glFramebufferTexture2D(this, var_1, var_2, var_3, var_4, var_5); }, "$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGenerateMipmap), "$glGetActiveAttrib", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glGetActiveUniform), "$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetAttribLocation), "$glGetBooleanv", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetBooleanv),
"$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetFloatv), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glGetProgramiv), "$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetProgramInfoLog), "$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glGetShaderiv), "$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetShaderInfoLog), "$glGetUniformLocation", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetUniformLocation), "$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glLinkProgram),
"$glRenderbufferStorage", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glRenderbufferStorage), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glShaderSource), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glTexParameteri), "$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glUniform1f), "$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glUniform1i), "$glUniform2f", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glUniform2f), "$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glUseProgram), "$glVertexAttribPointer",
function(var_1, var_2, var_3, var_4, var_5, var_6) { cgxgbt_TeaGL20Debug_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, 0, 0,
ju_Set, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, 0,
ju_HashSet, 0, ju_AbstractSet, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$iterator0", $rt_wrapFunction0(ju_HashSet_iterator)],
cbgu_IntMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_IntSet, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbtf_FileDB, 0, jl_Object, [], 1, 3, 0, 0, 0,
cgxgbtf_MemoryFileStorage, 0, cgxgbtf_FileDB, [], 0, 3, 0, 0, ["$putFile", $rt_wrapFunction2(cgxgbtf_MemoryFileStorage_putFile), "$removeFile", $rt_wrapFunction1(cgxgbtf_MemoryFileStorage_removeFile)],
cgxgbtft_InternalStorage, "InternalStorage", 9, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, 0,
cgxgbtft_ClasspathStorage, "ClasspathStorage", 9, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, 0,
cgxgbtft_LocalDBStorage, "LocalDBStorage", 9, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, ["$putFile", $rt_wrapFunction2(cgxgbtft_LocalDBStorage_putFile), "$removeFile", $rt_wrapFunction1(cgxgbtft_LocalDBStorage_removeFile)],
cgxgbt_TeaPermissions$TeaPermissionResult, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaClipboard$ClipboardWriteHandler, 0, jl_Object, [cgxgbt_TeaPermissions$TeaPermissionResult], 0, 0, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_0, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_1, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbta_AssetLoaderListener, 0, jl_Object, [], 3, 3, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cgxgbt_TeaApplication$4, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cgxgbt_TeaApplication$5, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cbg_LifecycleListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbtwh_HowlerAudioManager, 0, jl_Object, [cbg_LifecycleListener], 0, 3, 0, 0, 0,
cbgm_MathUtils, "MathUtils", 16, jl_Object, [], 4, 3, 0, 0, 0,
ju_Dictionary, 0, jl_Object, [], 1, 3, 0, 0, 0,
ju_Hashtable, 0, ju_Dictionary, [ju_Map, jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
ju_Properties, 0, ju_Hashtable, [], 0, 3, 0, 0, 0,
cgxgbt_TeaGL20$CustomIntMap, 0, jl_Object, [otj_JSObject], 0, 0, 0, 0, 0,
cbggg_GLVersion$Type, "GLVersion$Type", 18, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$1, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbta_AssetLoadImpl$2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbta_AssetLoadImpl$3, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cbgu_ArraySupplier$_clinit_$lambda$_3_0, "ArraySupplier$<clinit>$lambda$_3_0", 13, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbgu_ArraySupplier$_clinit_$lambda$_3_0_get)],
jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
otji_IDBFactory, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
otji_EventHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
jur_RandomGenerator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Random, 0, jl_Object, [jur_RandomGenerator, ji_Serializable], 0, 3, 0, 0, 0,
cbgm_RandomXS128, "RandomXS128", 16, ju_Random, [], 0, 3, 0, 0, 0]);
$rt_metadata([ju_Enumeration, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$1, 0, jl_Object, [ju_Enumeration], 0, 0, 0, 0, 0,
ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$2, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
jl_NumberFormatException, "NumberFormatException", 37, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jl_IllegalStateException, "IllegalStateException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jl_NullPointerException, "NullPointerException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType1", $rt_wrapFunction0(jur_AbstractSet_getType), "$toString", $rt_wrapFunction0(jur_AbstractSet_toString), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first1", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
ju_Hashtable$Entry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
jur_FSet, "FSet", 31, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches", $rt_wrapFunction3(jur_FSet_matches), "$getName", $rt_wrapFunction0(jur_FSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, 0,
jur_PatternSyntaxException, "PatternSyntaxException", 31, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_List, 0, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, 0,
ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_ArrayList, 0, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, 0,
jur_NonCapFSet, "NonCapFSet", 31, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
jur_AheadFSet, "AheadFSet", 31, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AheadFSet_matches), "$getName", $rt_wrapFunction0(jur_AheadFSet_getName)],
jur_BehindFSet, "BehindFSet", 31, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BehindFSet_matches), "$getName", $rt_wrapFunction0(jur_BehindFSet_getName)],
jur_AtomicFSet, "AtomicFSet", 31, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$getName", $rt_wrapFunction0(jur_AtomicFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
jur_FinalSet, "FinalSet", 31, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FinalSet_matches), "$getName", $rt_wrapFunction0(jur_FinalSet_getName)],
jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
jur_EmptySet, "EmptySet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$getName", $rt_wrapFunction0(jur_EmptySet_getName), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
jur_JointSet, "JointSet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$getName", $rt_wrapFunction0(jur_JointSet_getName), "$first1", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
jur_NonCapJointSet, "NonCapJointSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapJointSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
jur_AtomicJointSet, "AtomicJointSet", 31, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext), "$getName", $rt_wrapFunction0(jur_AtomicJointSet_getName)],
jur_PositiveLookAhead, "PositiveLookAhead", 31, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookAhead_getName)],
jur_NegativeLookAhead, "NegativeLookAhead", 31, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookAhead_getName)],
jur_PositiveLookBehind, "PositiveLookBehind", 31, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookBehind_getName)],
jur_NegativeLookBehind, "NegativeLookBehind", 31, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookBehind_getName)],
jur_SingleSet, "SingleSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first1", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_ArrayStoreException, "ArrayStoreException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, 0,
jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, 0, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
ju_MissingResourceException, "MissingResourceException", 30, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_CharClass, "CharClass", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$first1", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
jur_LeafQuantifierSet, "LeafQuantifierSet", 31, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_LeafQuantifierSet_getName)],
jur_CompositeQuantifierSet, "CompositeQuantifierSet", 31, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeQuantifierSet_getName)],
jur_GroupQuantifierSet, "GroupQuantifierSet", 31, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_GroupQuantifierSet_getName)],
jur_AltQuantifierSet, "AltQuantifierSet", 31, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 31, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, 0, 0,
jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, 0]);
$rt_metadata([jur_Quantifier, "Quantifier", 31, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$getName", $rt_wrapFunction0(jur_FSet$PossessiveFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
jur_LowHighSurrogateRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$getName", $rt_wrapFunction0(jur_LowHighSurrogateRangeSet_getName)],
jur_CompositeRangeSet, "CompositeRangeSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$getName", $rt_wrapFunction0(jur_CompositeRangeSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first1", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
jur_SupplRangeSet, "SupplRangeSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$getName", $rt_wrapFunction0(jur_SupplRangeSet_getName), "$contains", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first1", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
jur_UCISupplRangeSet, "UCISupplRangeSet", 31, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UCISupplRangeSet_contains), "$getName", $rt_wrapFunction0(jur_UCISupplRangeSet_getName)],
jur_UCIRangeSet, "UCIRangeSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts), "$getName", $rt_wrapFunction0(jur_UCIRangeSet_getName)],
jur_RangeSet, "RangeSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$getName", $rt_wrapFunction0(jur_RangeSet_getName), "$first1", $rt_wrapFunction1(jur_RangeSet_first)],
jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$getName", $rt_wrapFunction0(jur_HangulDecomposedCharSet_getName), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first1", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
jur_CharSet, "CharSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$getName", $rt_wrapFunction0(jur_CharSet_getName), "$first1", $rt_wrapFunction1(jur_CharSet_first)],
jur_UCICharSet, "UCICharSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCICharSet_getName)],
jur_CICharSet, "CICharSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts), "$getName", $rt_wrapFunction0(jur_CICharSet_getName)],
jur_DecomposedCharSet, "DecomposedCharSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$getName", $rt_wrapFunction0(jur_DecomposedCharSet_getName), "$first1", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 31, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_CIDecomposedCharSet, "CIDecomposedCharSet", 31, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 31, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 31, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 31, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 31, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 31, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeGroupQuantifierSet_getName)],
jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 31, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 31, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 31, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 31, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
jur_DotAllQuantifierSet, "DotAllQuantifierSet", 31, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotAllQuantifierSet_getName)],
jur_DotQuantifierSet, "DotQuantifierSet", 31, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotQuantifierSet_getName)],
jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0, 0,
jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 31, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 31, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 31, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 31, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 31, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 31, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
jur_SOLSet, "SOLSet", 31, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_SOLSet_getName)],
jur_WordBoundary, "WordBoundary", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed), "$getName", $rt_wrapFunction0(jur_WordBoundary_getName)],
jur_PreviousMatch, "PreviousMatch", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed), "$getName", $rt_wrapFunction0(jur_PreviousMatch_getName)],
jur_EOLSet, "EOLSet", 31, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOLSet_getName)],
jur_EOISet, "EOISet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOISet_getName)],
jur_MultiLineSOLSet, "MultiLineSOLSet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineSOLSet_getName)],
jur_DotAllSet, "DotAllSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$getName", $rt_wrapFunction0(jur_DotAllSet_getName), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
jur_DotSet, "DotSet", 31, jur_JointSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotSet_matches), "$getName", $rt_wrapFunction0(jur_DotSet_getName), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
jur_UEOLSet, "UEOLSet", 31, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UEOLSet_getName)],
jur_UMultiLineEOLSet, "UMultiLineEOLSet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UMultiLineEOLSet_getName)],
jur_MultiLineEOLSet, "MultiLineEOLSet", 31, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineEOLSet_getName)],
jur_CIBackReferenceSet, "CIBackReferenceSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$getName", $rt_wrapFunction0(jur_CIBackReferenceSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
jur_BackReferenceSet, "BackReferenceSet", 31, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first1", $rt_wrapFunction1(jur_BackReferenceSet_first), "$getName", $rt_wrapFunction0(jur_BackReferenceSet_getName)],
jur_UCIBackReferenceSet, "UCIBackReferenceSet", 31, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches), "$getName", $rt_wrapFunction0(jur_UCIBackReferenceSet_getName)],
jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$substring0", $rt_wrapFunction2(jl_StringBuffer_substring), "$subSequence", $rt_wrapFunction2(jl_StringBuffer_subSequence), "$insert3", $rt_wrapFunction4(jl_StringBuffer_insert0), "$append6", $rt_wrapFunction3(jl_StringBuffer_append0), "$charAt", $rt_wrapFunction1(jl_StringBuffer_charAt), "$length", $rt_wrapFunction0(jl_StringBuffer_length), "$toString", $rt_wrapFunction0(jl_StringBuffer_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity),
"$insert", $rt_wrapFunction2(jl_StringBuffer_insert3), "$insert2", $rt_wrapFunction2(jl_StringBuffer_insert2), "$insert0", $rt_wrapFunction2(jl_StringBuffer_insert1)],
jur_SequenceSet, "SequenceSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$getName", $rt_wrapFunction0(jur_SequenceSet_getName), "$first1", $rt_wrapFunction1(jur_SequenceSet_first)]]);
$rt_metadata([jur_UCISequenceSet, "UCISequenceSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISequenceSet_getName)],
jur_CISequenceSet, "CISequenceSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_CISequenceSet_getName)],
jur_UCISupplCharSet, "UCISupplCharSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISupplCharSet_getName)],
jur_LowSurrogateCharSet, "LowSurrogateCharSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_LowSurrogateCharSet_getName), "$first1", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
jur_HighSurrogateCharSet, "HighSurrogateCharSet", 31, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_HighSurrogateCharSet_getName), "$first1", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
jur_SupplCharSet, "SupplCharSet", 31, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$getName", $rt_wrapFunction0(jur_SupplCharSet_getName), "$first1", $rt_wrapFunction1(jur_SupplCharSet_first)],
jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)],
jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
jl_NegativeArraySizeException, "NegativeArraySizeException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0]);
$rt_metadata([otciu_CharMapping, 0, jl_Object, [], 0, 3, 0, 0, 0,
otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 42, jl_Object, [], 0, 3, 0, 0, 0,
otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, 0,
otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgu_NumberUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit, "StyleWrapper$Unit", 7, jl_Enum, [], 9, 3, 0, cgxgbtd_StyleWrapper$Unit_$callClinit, 0,
ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 37, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
jur_AbstractCharClass$1, "AbstractCharClass$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
jur_AbstractCharClass$2, "AbstractCharClass$2", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
jur_CharClass$18, "CharClass$18", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$1_contains)],
jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$3_contains)],
jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$2_contains)],
jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$5_contains)],
jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$4_contains)],
jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$7_contains)],
jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$6_contains)],
jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$9_contains)],
jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$8_contains)],
jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$11_contains)],
jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$10_contains)],
jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$13_contains)],
jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$12_contains)],
jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$15_contains)],
jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$14_contains)],
jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$17_contains)],
jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_CharClass$16_contains)],
jl_Thread, 0, jl_Object, [jl_Runnable], 0, 3, 0, 0, 0,
jl_Object$Monitor, 0, jl_Object, [], 0, 0, 0, 0, 0,
jl_IllegalMonitorStateException, "IllegalMonitorStateException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
otjf_JSMapping, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0, 0, jl_Object, [otjf_JSMapping], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1, 0, jl_Object, [otjf_JSMapping], 0, 3, 0, 0, 0,
otjf_JSSupplier, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2, 0, jl_Object, [otjf_JSSupplier], 0, 3, 0, 0, 0,
jl_Float, "Float", 37, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Float_toString), "$equals", $rt_wrapFunction1(jl_Float_equals), "$hashCode", $rt_wrapFunction0(jl_Float_hashCode)],
cbggg_GlyphLayout$GlyphRun, "GlyphLayout$GlyphRun", 19, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, 0, ["$reset", $rt_wrapFunction0(cbggg_GlyphLayout$GlyphRun_reset), "$toString", $rt_wrapFunction0(cbggg_GlyphLayout$GlyphRun_toString)],
cgxgbtu_KeyCodes, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_TimeUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
otp_PlatformQueue, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Object$monitorExit$lambda$_8_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
cgxgbt_TeaWindowListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
otjc_JSPromise$Executor, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$getFile$lambda$_2_0, 0, jl_Object, [otjc_JSPromise$Executor], 0, 3, 0, 0, 0,
otji_IDBObjectStoreParameters, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0]);
$rt_metadata([jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
ji_PrintStream, 0, ji_FilterOutputStream, [jl_Appendable], 0, 3, 0, 0, 0,
otcic_JsConsolePrintStream, 0, ji_PrintStream, [], 1, 3, 0, 0, 0,
otcic_JSStderrPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStderrPrintStream_print)],
cbgu_FloatArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$1, "StyleWrapper$Unit$1", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$2, "StyleWrapper$Unit$2", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$3, "StyleWrapper$Unit$3", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$4, "StyleWrapper$Unit$4", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$5, "StyleWrapper$Unit$5", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$6, "StyleWrapper$Unit$6", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$7, "StyleWrapper$Unit$7", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$8, "StyleWrapper$Unit$8", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$9, "StyleWrapper$Unit$9", 7, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
jl_Thread$UncaughtExceptionHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_DefaultUncaughtExceptionHandler, 0, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
oti_AsyncCallback, 0, jl_Object, [], 3, 3, 0, 0, 0,
otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error0", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
jl_Object$monitorEnterWait$lambda$_6_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
otjc_JSObjects, 0, jl_Object, [], 4, 3, 0, 0, 0,
otji_JSWrapper$Helper, 0, jl_Object, [], 0, 0, 0, otji_JSWrapper$Helper_$callClinit, 0,
otjc_JSUndefined, 0, jl_Object, [otj_JSObject], 0, 3, 0, 0, 0,
otjc_JSWeakRef, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otjc_JSFinalizationRegistryConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otji_JSWrapper$Helper$_clinit_$lambda$_3_0, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, 0,
otji_JSWrapper$Helper$_clinit_$lambda$_3_1, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, 0,
jur_BackReferencedSingleSet, "BackReferencedSingleSet", 31, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
cgxgbt_TeaApplication$6, 0, jl_Object, [], 32, 0, 0, cgxgbt_TeaApplication$6_$callClinit, 0,
jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
jur_UnicodeCategory, "UnicodeCategory", 31, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UnicodeCategory_contains)]]);
$rt_metadata([jur_UnicodeCategoryScope, "UnicodeCategoryScope", 31, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
cbgu_Collections, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_Array$ArrayIterator, "Array$ArrayIterator", 13, jl_Object, [ju_Iterator, jl_Iterable], 0, 3, 0, 0, 0,
cbgu_Array$ArrayIterable, "Array$ArrayIterable", 13, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
otcic_JSStdoutPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStdoutPrintStream_print)],
cgxgbtd_EventTargetWrapper, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtd_FileReaderWrapper, 0, jl_Object, [cgxgbtd_EventTargetWrapper, otj_JSObject], 1, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$4, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbtdt_TypedArrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
cgxgbtf_FileData, "FileData", 8, jl_Object, [], 0, 3, 0, 0, 0,
otjt_ArrayBufferView, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otjt_TypedArray, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
otjt_Int8Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
cbgu_GdxRuntimeException, "GdxRuntimeException", 13, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jl_CloneNotSupportedException, "CloneNotSupportedException", 37, jl_Exception, [], 0, 3, 0, 0, 0,
pss_Section, 0, jl_Object, [], 1, 3, 0, pss_Section_$callClinit, ["$render", $rt_wrapFunction0(pss_Section_render), "$renderEnter", $rt_wrapFunction1(pss_Section_renderEnter)],
ju_NoSuchElementException, "NoSuchElementException", 30, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$5, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress), "$onSuccess", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$5_onSuccess)],
cgxgbta_AssetType, "AssetType", 6, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbtfi_IndexedDBFileData, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$putFile$lambda$_2_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
ccv_VfxManager, 0, jl_Object, [cbgu_Disposable], 4, 3, 0, 0, 0,
ju_ConcurrentModificationException, "ConcurrentModificationException", 30, jl_RuntimeException, [], 0, 3, 0, 0, 0,
pss_Profile, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
pss_Audio, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cbgg_Cursor$SystemCursor, "Cursor$SystemCursor", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Pixmap$Format, "Pixmap$Format", 17, jl_Enum, [], 12, 3, 0, 0, 0,
ccve_VfxEffect, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
ccve_AbstractVfxEffect, 0, jl_Object, [ccve_VfxEffect], 1, 3, 0, 0, 0,
ccve_ShaderVfxEffect, 0, ccve_AbstractVfxEffect, [], 1, 3, 0, 0, ["$dispose", $rt_wrapFunction0(ccve_ShaderVfxEffect_dispose), "$resize3", $rt_wrapFunction2(ccve_ShaderVfxEffect_resize)],
ccve_ChainVfxEffect, 0, jl_Object, [ccve_VfxEffect], 3, 3, 0, 0, 0,
ccve_FxaaEffect, "FxaaEffect", 24, ccve_ShaderVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$resize3", $rt_wrapFunction2(ccve_FxaaEffect_resize), "$rebind", $rt_wrapFunction0(ccve_FxaaEffect_rebind), "$render0", $rt_wrapFunction2(ccve_FxaaEffect_render)],
ccve_CompositeVfxEffect, 0, ccve_AbstractVfxEffect, [], 1, 3, 0, 0, ["$resize3", $rt_wrapFunction2(ccve_CompositeVfxEffect_resize), "$rebind", $rt_wrapFunction0(ccve_CompositeVfxEffect_rebind), "$dispose", $rt_wrapFunction0(ccve_CompositeVfxEffect_dispose)],
ccve_BloomEffect, "BloomEffect", 24, ccve_CompositeVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$render0", $rt_wrapFunction2(ccve_BloomEffect_render)],
ccve_BloomEffect$Settings, 0, jl_Object, [], 0, 3, 0, 0, 0,
ccve_MotionBlurEffect, "MotionBlurEffect", 24, ccve_CompositeVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$dispose", $rt_wrapFunction0(ccve_MotionBlurEffect_dispose), "$resize3", $rt_wrapFunction2(ccve_MotionBlurEffect_resize), "$rebind", $rt_wrapFunction0(ccve_MotionBlurEffect_rebind), "$render0", $rt_wrapFunction2(ccve_MotionBlurEffect_render)],
ccveu_MixEffect$Method, "MixEffect$Method", 25, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_Batch, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_PolygonBatch, 0, jl_Object, [cbggg_Batch], 3, 3, 0, 0, 0,
cbggg_PolygonSpriteBatch, 0, jl_Object, [cbggg_PolygonBatch], 0, 3, 0, 0, 0,
cbggg_TextureAtlas, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
ses_AbstractShapeDrawer, 0, jl_Object, [], 1, 3, 0, ses_AbstractShapeDrawer_$callClinit, 0,
ses_ShapeDrawer, 0, ses_AbstractShapeDrawer, [], 0, 3, 0, 0, 0,
pss_Shape, 0, jl_Object, [], 1, 3, 0, 0, 0,
psm_Menu, 0, pss_Section, [], 1, 3, 0, psm_Menu_$callClinit, 0,
pse_Episode, 0, pss_Section, [], 1, 3, 0, 0, 0]);
$rt_metadata([pss_TitleSection, 0, pss_Section, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(pss_TitleSection_update), "$drawContent", $rt_wrapFunction0(pss_TitleSection_drawContent)],
cbg_InputProcessor, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgc_ControllerListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
pss_Control, 0, jl_Object, [cbg_InputProcessor, cbgc_ControllerListener], 0, 3, 0, 0, ["$process", $rt_wrapFunction0(pss_Control_process)],
cbgm_Vector, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgm_Vector2, 0, jl_Object, [ji_Serializable, cbgm_Vector], 0, 3, 0, 0, 0,
cbgm_Shape2D, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgm_Polygon, 0, jl_Object, [cbgm_Shape2D], 0, 3, 0, 0, 0,
cbgm_Matrix4, 0, jl_Object, [ji_Serializable], 0, 3, 0, cbgm_Matrix4_$callClinit, 0,
cbga_Sound, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbga_Music, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
ccvg_VfxGLUtils, "VfxGLUtils", 26, jl_Object, [], 0, 3, [0,0,0], ccvg_VfxGLUtils_$callClinit, 0,
ccve_GaussianBlurEffect$BlurType, "GaussianBlurEffect$BlurType", 24, jl_Enum, [], 12, 3, 0, ccve_GaussianBlurEffect$BlurType_$callClinit, 0,
ccveu_CopyEffect, "CopyEffect", 25, ccve_ShaderVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$rebind", $rt_wrapFunction0(ccveu_CopyEffect_rebind), "$render0", $rt_wrapFunction2(ccveu_CopyEffect_render0)],
ccve_GaussianBlurEffect, "GaussianBlurEffect", 24, ccve_AbstractVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$dispose", $rt_wrapFunction0(ccve_GaussianBlurEffect_dispose), "$resize3", $rt_wrapFunction2(ccve_GaussianBlurEffect_resize), "$rebind", $rt_wrapFunction0(ccve_GaussianBlurEffect_rebind), "$render0", $rt_wrapFunction2(ccve_GaussianBlurEffect_render)],
ccveu_GammaThresholdEffect, "GammaThresholdEffect", 25, ccve_ShaderVfxEffect, [ccve_ChainVfxEffect], 0, 3, 0, 0, ["$rebind", $rt_wrapFunction0(ccveu_GammaThresholdEffect_rebind), "$render0", $rt_wrapFunction2(ccveu_GammaThresholdEffect_render)],
ccveu_GammaThresholdEffect$Type, "GammaThresholdEffect$Type", 25, jl_Enum, [], 12, 3, 0, 0, 0,
ccveu_CombineEffect, "CombineEffect", 25, ccve_ShaderVfxEffect, [], 0, 3, 0, 0, ["$rebind", $rt_wrapFunction0(ccveu_CombineEffect_rebind)],
ccveu_MixEffect, "MixEffect", 25, ccve_ShaderVfxEffect, [], 0, 3, 0, 0, ["$rebind", $rt_wrapFunction0(ccveu_MixEffect_rebind)],
ccvf_VfxFrameBufferQueue, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
psm_MainMenu, 0, psm_Menu, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(psm_MainMenu_update), "$drawContent", $rt_wrapFunction0(psm_MainMenu_drawContent)],
psm_OverviewMenu, 0, psm_Menu, [], 0, 3, 0, 0, 0,
pse_S01E01Episode, 0, pse_Episode, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(pse_S01E01Episode_update), "$render", $rt_wrapFunction0(pse_S01E01Episode_render), "$renderEnter", $rt_wrapFunction1(pse_S01E01Episode_renderEnter), "$drawContent", $rt_wrapFunction0(pse_S01E01Episode_drawContent)],
cbgc_Controllers, 0, jl_Object, [], 0, 3, 0, cbgc_Controllers_$callClinit, 0,
ccvf_VfxPingPongWrapper, 0, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, 0, 0,
ccv_VfxRenderContext, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
ccvu_PrioritizedArray, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbggg_ShaderProgram, "ShaderProgram", 18, jl_Object, [cbgu_Disposable], 0, 3, 0, cbggg_ShaderProgram_$callClinit, 0,
cbgg_Texture$TextureWrap, "Texture$TextureWrap", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Texture$TextureFilter, "Texture$TextureFilter", 17, jl_Enum, [], 12, 3, 0, 0, 0,
ccvf_VfxFrameBuffer, "VfxFrameBuffer", 28, jl_Object, [cbgu_Disposable], 0, 3, 0, ccvf_VfxFrameBuffer_$callClinit, 0,
cbgf_FileHandle, 0, jl_Object, [], 0, 3, 0, 0, 0,
ses_BatchManager, 0, jl_Object, [], 0, 0, 0, ses_BatchManager_$callClinit, ["$pushQuad", $rt_wrapFunction0(ses_BatchManager_pushQuad), "$pushTriangle", $rt_wrapFunction0(ses_BatchManager_pushTriangle), "$ensureSpaceForTriangle", $rt_wrapFunction0(ses_BatchManager_ensureSpaceForTriangle), "$increaseCacheSize", $rt_wrapFunction1(ses_BatchManager_increaseCacheSize), "$pushToBatch", $rt_wrapFunction0(ses_BatchManager_pushToBatch)],
ses_DrawerTemplate, 0, jl_Object, [], 1, 0, 0, 0, 0,
ses_FilledPolygonDrawer, 0, ses_DrawerTemplate, [], 1, 0, 0, 0, 0,
ses_FilledPolygonDrawer$BatchFilledPolygonDrawer, 0, ses_FilledPolygonDrawer, [], 0, 0, 0, 0, ["$polygon3", $rt_wrapFunction3(ses_FilledPolygonDrawer$BatchFilledPolygonDrawer_polygon)],
ses_PolygonBatchManager, 0, ses_BatchManager, [], 0, 0, 0, 0, ["$pushQuad", $rt_wrapFunction0(ses_PolygonBatchManager_pushQuad), "$pushTriangle", $rt_wrapFunction0(ses_PolygonBatchManager_pushTriangle), "$ensureSpaceForTriangle", $rt_wrapFunction0(ses_PolygonBatchManager_ensureSpaceForTriangle), "$pushToBatch", $rt_wrapFunction0(ses_PolygonBatchManager_pushToBatch), "$increaseCacheSize", $rt_wrapFunction1(ses_PolygonBatchManager_increaseCacheSize)],
ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer, 0, ses_FilledPolygonDrawer, [], 0, 0, 0, 0, ["$polygon3", $rt_wrapFunction3(ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer_polygon)],
ses_LineDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
ses_PathDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
ses_PolygonDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
cbggg_BitmapFont$BitmapFontData, 0, jl_Object, [], 0, 3, 0, 0, 0,
psm_Menu$RepeatControl, 0, pss_Control, [], 0, 3, 0, 0, ["$process", $rt_wrapFunction0(psm_Menu$RepeatControl_process)],
psm_EpisodesMenu, 0, psm_Menu, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(psm_EpisodesMenu_update), "$drawContent", $rt_wrapFunction0(psm_EpisodesMenu_drawContent)],
psm_GuideMenu, 0, psm_Menu, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(psm_GuideMenu_update), "$drawContent", $rt_wrapFunction0(psm_GuideMenu_drawContent)],
psm_SettingsMenu, 0, psm_Menu, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction0(psm_SettingsMenu_update), "$drawContent", $rt_wrapFunction0(psm_SettingsMenu_drawContent)],
cbgu_I18NBundle, "I18NBundle", 13, jl_Object, [], 0, 3, 0, 0, 0,
psm_Menu$Box, 0, jl_Object, [], 0, 3, 0, 0, 0,
psm_Menu$CursorBox, 0, psm_Menu$Box, [], 0, 3, 0, 0, 0,
psm_Menu$LabelButton, 0, psm_Menu$CursorBox, [], 0, 3, 0, 0, 0]);
$rt_metadata([ju_Queue, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_Deque, 0, jl_Object, [ju_Queue, ju_SequencedCollection], 3, 3, 0, 0, 0,
ju_ArrayDeque, 0, ju_AbstractCollection, [ju_Deque, jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
psl_ChimeraLogic, 0, jl_Object, [], 0, 3, 0, 0, 0,
psm_Menu$IconButton, 0, psm_Menu$CursorBox, [], 0, 3, 0, 0, 0,
ccvf_VfxFrameBufferRenderer, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cbgm_Quaternion, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
cbgm_Vector3, 0, jl_Object, [ji_Serializable, cbgm_Vector], 0, 3, 0, cbgm_Vector3_$callClinit, 0,
ccvu_PrioritizedArray$WrapperComparator, 0, jl_Object, [ju_Comparator], 0, 0, 0, 0, ["$compare", $rt_wrapFunction2(ccvu_PrioritizedArray$WrapperComparator_compare)],
ccvu_ValueArrayMap, 0, jl_Object, [], 0, 3, 0, 0, 0,
ccvf_VfxFrameBufferPool, "VfxFrameBufferPool", 28, jl_Object, [cbgu_Disposable], 0, 3, [0,0,0], ccvf_VfxFrameBufferPool_$callClinit, 0,
jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0, 0,
jn_ByteBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jn_ByteBuffer_toString), "$hashCode", $rt_wrapFunction0(jn_ByteBuffer_hashCode), "$equals", $rt_wrapFunction1(jn_ByteBuffer_equals), "$limit", $rt_wrapFunction1(jn_ByteBuffer_limit), "$position", $rt_wrapFunction1(jn_ByteBuffer_position)],
jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgu_BufferUtils, 0, jl_Object, [], 4, 3, 0, cbgu_BufferUtils_$callClinit, 0,
ccvg_VfxGlViewport, 0, jl_Object, [], 0, 3, 0, 0, 0,
ccvg_VfxGlExtension, 0, jl_Object, [], 3, 3, 0, 0, 0,
ccvg_DefaultVfxGlExtension, 0, jl_Object, [ccvg_VfxGlExtension], 0, 3, 0, ccvg_DefaultVfxGlExtension_$callClinit, 0,
cbgur_ClassReflection, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgur_ReflectionException, "ReflectionException", 14, jl_Exception, [], 0, 3, 0, 0, 0,
cbgu_ObjectIntMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
ccve_GaussianBlurEffect$Tap, "GaussianBlurEffect$Tap", 24, jl_Enum, [], 12, 0, 0, 0, 0,
ccvf_VfxFrameBuffer$Renderer, 0, jl_Object, [], 3, 3, 0, 0, 0,
ccvf_VfxFrameBuffer$RendererManager, 0, jl_Object, [ccvf_VfxFrameBuffer$Renderer], 0, 0, 0, 0, 0,
cbgg_Mesh$VertexDataType, "Mesh$VertexDataType", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Mesh, "Mesh", 17, jl_Object, [cbgu_Disposable], 0, 3, 0, cbgg_Mesh_$callClinit, 0,
cbggg_SpriteBatch, 0, jl_Object, [cbggg_Batch], 0, 3, 0, cbggg_SpriteBatch_$callClinit, 0,
cbggg_TextureAtlas$TextureAtlasData, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_BitmapFont$Glyph, "BitmapFont$Glyph", 19, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(cbggg_BitmapFont$Glyph_toString)],
psm_Menu$PagesBox, 0, psm_Menu$CursorBox, [], 0, 3, 0, 0, 0,
psm_Menu$TextButton, 0, psm_Menu$CursorBox, [], 0, 3, 0, 0, 0,
psm_Menu$BarBox$Units, 0, jl_Object, [], 0, 3, 0, 0, 0,
psm_Menu$BarBox, 0, psm_Menu$CursorBox, [], 0, 3, 0, 0, 0,
ju_Locale, "Locale", 30, jl_Object, [jl_Cloneable, ji_Serializable], 4, 3, 0, ju_Locale_$callClinit, ["$equals", $rt_wrapFunction1(ju_Locale_equals), "$hashCode", $rt_wrapFunction0(ju_Locale_hashCode), "$toString", $rt_wrapFunction0(ju_Locale_toString)],
cbgc_Controllers$1, "Controllers$1", 15, jl_Object, [cbg_LifecycleListener], 0, 0, 0, 0, 0,
cbgc_ControllerManager, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgc_AbstractControllerManager, 0, jl_Object, [cbgc_ControllerManager], 1, 3, 0, 0, 0,
cbgc_ControllerManagerStub, "ControllerManagerStub", 15, cbgc_AbstractControllerManager, [], 0, 3, 0, 0, 0,
ccvu_ViewportQuadMesh, 0, jl_Object, [], 0, 3, 0, 0, 0,
jn_ArrayBufferViewProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
jn_ByteBufferJsImpl, "ByteBufferJsImpl", 32, jn_ByteBuffer, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$capacityImpl", $rt_wrapFunction0(jn_ByteBufferJsImpl_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ByteBufferJsImpl_getArrayBufferView)],
cgxgbt_TeaTool, 0, jl_Object, [], 0, 3, 0, 0, 0,
jl_ReflectiveOperationException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
jl_ClassNotFoundException, "ClassNotFoundException", 37, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
jl_InstantiationException, "InstantiationException", 37, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
jl_IllegalAccessException, 0, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
jn_IntBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
jn_FloatBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, ["$limit", $rt_wrapFunction1(jn_FloatBuffer_limit), "$position", $rt_wrapFunction1(jn_FloatBuffer_position)],
cbgg_Camera, 0, jl_Object, [], 1, 3, 0, 0, 0,
cbgg_OrthographicCamera, 0, cbgg_Camera, [], 0, 3, 0, 0, 0]);
$rt_metadata([cbgg_VertexAttributes, 0, jl_Object, [jl_Iterable, jl_Comparable], 4, 3, 0, 0, 0,
cbgm_GeometryUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgg_Mesh$1, 0, jl_Object, [], 32, 0, 0, cbgg_Mesh$1_$callClinit, 0,
cbggg_VertexData, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_VertexBufferObject, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, 0, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObject_setVertices), "$bind1", $rt_wrapFunction2(cbggg_VertexBufferObject_bind), "$unbind", $rt_wrapFunction2(cbggg_VertexBufferObject_unbind), "$dispose", $rt_wrapFunction0(cbggg_VertexBufferObject_dispose)],
cbggg_IndexData, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_IndexBufferObject, 0, jl_Object, [cbggg_IndexData], 0, 3, 0, 0, ["$getNumIndices", $rt_wrapFunction0(cbggg_IndexBufferObject_getNumIndices), "$getNumMaxIndices", $rt_wrapFunction0(cbggg_IndexBufferObject_getNumMaxIndices), "$setIndices", $rt_wrapFunction3(cbggg_IndexBufferObject_setIndices), "$getBuffer", $rt_wrapFunction1(cbggg_IndexBufferObject_getBuffer), "$bind", $rt_wrapFunction0(cbggg_IndexBufferObject_bind), "$unbind0", $rt_wrapFunction0(cbggg_IndexBufferObject_unbind), "$dispose", $rt_wrapFunction0(cbggg_IndexBufferObject_dispose)],
cbggg_VertexBufferObjectSubData, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, 0, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObjectSubData_setVertices), "$bind1", $rt_wrapFunction2(cbggg_VertexBufferObjectSubData_bind), "$unbind", $rt_wrapFunction2(cbggg_VertexBufferObjectSubData_unbind), "$dispose", $rt_wrapFunction0(cbggg_VertexBufferObjectSubData_dispose)],
cbggg_IndexBufferObjectSubData, 0, jl_Object, [cbggg_IndexData], 0, 3, 0, 0, ["$getNumIndices", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_getNumIndices), "$getNumMaxIndices", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_getNumMaxIndices), "$setIndices", $rt_wrapFunction3(cbggg_IndexBufferObjectSubData_setIndices), "$getBuffer", $rt_wrapFunction1(cbggg_IndexBufferObjectSubData_getBuffer), "$bind", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_bind), "$unbind0", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_unbind),
"$dispose", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_dispose)],
cbggg_VertexBufferObjectWithVAO, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, cbggg_VertexBufferObjectWithVAO_$callClinit, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObjectWithVAO_setVertices), "$bind1", $rt_wrapFunction2(cbggg_VertexBufferObjectWithVAO_bind), "$unbind", $rt_wrapFunction2(cbggg_VertexBufferObjectWithVAO_unbind), "$dispose", $rt_wrapFunction0(cbggg_VertexBufferObjectWithVAO_dispose)],
cbggg_VertexArray, 0, cbggg_VertexBufferObject, [], 0, 3, 0, 0, 0,
cbggg_IndexArray, 0, cbggg_IndexBufferObject, [], 0, 3, 0, 0, 0,
cbgm_EarClippingTriangulator, 0, jl_Object, [], 0, 3, 0, 0, 0,
otciu_CLDRHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
jn_IntBufferImpl, 0, jn_IntBuffer, [], 1, 0, 0, 0, 0,
jn_IntBufferOverTypedArray, 0, jn_IntBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_IntBufferOverTypedArray_readOnly), "$getElement", $rt_wrapFunction1(jn_IntBufferOverTypedArray_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverTypedArray_putElement), "$capacityImpl", $rt_wrapFunction0(jn_IntBufferOverTypedArray_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_IntBufferOverTypedArray_getArrayBufferView)],
otjt_Int32Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
jn_FloatBufferImpl, 0, jn_FloatBuffer, [], 1, 0, 0, 0, 0,
jn_FloatBufferOverTypedArray, "FloatBufferOverTypedArray", 32, jn_FloatBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_FloatBufferOverTypedArray_readOnly), "$getElement0", $rt_wrapFunction1(jn_FloatBufferOverTypedArray_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverTypedArray_putElement), "$capacityImpl", $rt_wrapFunction0(jn_FloatBufferOverTypedArray_capacityImpl), "$putImpl", $rt_wrapFunction4(jn_FloatBufferOverTypedArray_putImpl), "$getArrayBufferView0",
$rt_wrapFunction0(jn_FloatBufferOverTypedArray_getArrayBufferView)],
otjt_Float32Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
cbgm_Frustum, 0, jl_Object, [], 0, 3, 0, cbgm_Frustum_$callClinit, 0,
cbgmc_Ray, 0, jl_Object, [ji_Serializable], 0, 3, 0, cbgmc_Ray_$callClinit, 0,
jn_ShortBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
cbgu_ShortArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgg_TextureData$Factory, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_StreamUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
ji_IOException, "IOException", 34, jl_Exception, [], 0, 3, 0, 0, 0,
cbgm_Plane, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
cbgg_TextureData, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_FileTextureData, "FileTextureData", 18, jl_Object, [cbgg_TextureData], 0, 3, 0, 0, ["$isPrepared", $rt_wrapFunction0(cbggg_FileTextureData_isPrepared), "$prepare", $rt_wrapFunction0(cbggg_FileTextureData_prepare), "$consumePixmap", $rt_wrapFunction0(cbggg_FileTextureData_consumePixmap), "$disposePixmap", $rt_wrapFunction0(cbggg_FileTextureData_disposePixmap), "$getWidth", $rt_wrapFunction0(cbggg_FileTextureData_getWidth), "$getHeight", $rt_wrapFunction0(cbggg_FileTextureData_getHeight), "$getFormat", $rt_wrapFunction0(cbggg_FileTextureData_getFormat),
"$useMipMaps", $rt_wrapFunction0(cbggg_FileTextureData_useMipMaps), "$isManaged", $rt_wrapFunction0(cbggg_FileTextureData_isManaged), "$getType", $rt_wrapFunction0(cbggg_FileTextureData_getType), "$consumeCustomData", $rt_wrapFunction1(cbggg_FileTextureData_consumeCustomData)],
cbggg_PixmapNativeInterface, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgg_Pixmap, 0, jl_Object, [cbgu_Disposable, cbggg_PixmapNativeInterface], 0, 3, 0, 0, 0,
cbgu_TextFormatter, 0, jl_Object, [], 0, 0, 0, 0, 0,
cbgu_StringBuilder, 0, jl_Object, [jl_Appendable, jl_CharSequence], 0, 3, 0, 0, 0,
cbgg_Pixmap$Blending, "Pixmap$Blending", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Pixmap$Filter, "Pixmap$Filter", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_Gdx2DPixmap, 0, jl_Object, [cbgu_Disposable, cbggg_PixmapNativeInterface], 0, 3, 0, 0, 0,
jt_Format, 0, jl_Object, [ji_Serializable, jl_Cloneable], 1, 3, 0, 0, 0,
jt_MessageFormat, 0, jt_Format, [], 0, 3, 0, 0, ["$format1", $rt_wrapFunction3(jt_MessageFormat_format0)],
ji_InputStream, 0, jl_Object, [ji_Closeable], 1, 3, 0, 0, 0,
cbggg_Gdx2DPixmapNative, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
jn_ShortBufferImpl, 0, jn_ShortBuffer, [], 1, 0, 0, 0, 0,
jn_ShortBufferOverTypedArray, "ShortBufferOverTypedArray", 32, jn_ShortBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_readOnly), "$capacityImpl", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_capacityImpl), "$putImpl0", $rt_wrapFunction4(jn_ShortBufferOverTypedArray_putImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_getArrayBufferView)],
otjt_Int16Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
jn_JSBufferHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
jn_IntBufferOverDataView, 0, jn_IntBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_IntBufferOverDataView_readOnly), "$getElement", $rt_wrapFunction1(jn_IntBufferOverDataView_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverDataView_putElement), "$capacityImpl", $rt_wrapFunction0(jn_IntBufferOverDataView_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_IntBufferOverDataView_getArrayBufferView)],
jl_UnsupportedOperationException, "UnsupportedOperationException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jn_ReadOnlyBufferException, "ReadOnlyBufferException", 32, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0,
jn_BufferUnderflowException, "BufferUnderflowException", 32, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jn_FloatBufferOverDataView, "FloatBufferOverDataView", 32, jn_FloatBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_FloatBufferOverDataView_readOnly), "$getElement0", $rt_wrapFunction1(jn_FloatBufferOverDataView_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverDataView_putElement), "$putImpl", $rt_wrapFunction4(jn_FloatBufferOverDataView_putImpl), "$capacityImpl", $rt_wrapFunction0(jn_FloatBufferOverDataView_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_FloatBufferOverDataView_getArrayBufferView)]]);
$rt_metadata([jn_ShortBufferOverDataView, "ShortBufferOverDataView", 32, jn_ShortBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_ShortBufferOverDataView_readOnly), "$putImpl0", $rt_wrapFunction4(jn_ShortBufferOverDataView_putImpl), "$capacityImpl", $rt_wrapFunction0(jn_ShortBufferOverDataView_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ShortBufferOverDataView_getArrayBufferView)],
cgxgbta_AssetDownloadImpl$1, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$3, 0, jl_Object, [], 32, 0, 0, cgxgbta_AssetDownloadImpl$3_$callClinit, 0,
cbgg_Cursor, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cgxgbt_TeaCursor, 0, jl_Object, [cbgg_Cursor], 0, 3, 0, 0, 0,
cgxgbt_TeaFileHandle, "TeaFileHandle", 5, cbgf_FileHandle, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(cgxgbt_TeaFileHandle_toString)],
cbg_Files$FileType, "Files$FileType", 11, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_TextureAtlas$AtlasRegion, "TextureAtlas$AtlasRegion", 19, cbggg_TextureRegion, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(cbggg_TextureAtlas$AtlasRegion_toString)],
ses_JoinType, "JoinType", 45, jl_Enum, [], 12, 3, 0, 0, 0,
cbg_Preferences, 0, jl_Object, [], 3, 3, 0, 0, 0,
otjb_Storage, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbt_TeaPreferences, "TeaPreferences", 5, jl_Object, [cbg_Preferences], 0, 3, 0, 0, 0,
ju_HashMap$HashMapEntrySet, 0, ju_AbstractSet, [], 0, 0, 0, 0, 0,
ccvu_PrioritizedArray$Wrapper, "PrioritizedArray$Wrapper", 27, jl_Object, [cbgu_Pool$Poolable], 0, 0, 0, ccvu_PrioritizedArray$Wrapper_$callClinit, ["$reset", $rt_wrapFunction0(ccvu_PrioritizedArray$Wrapper_reset), "$toString", $rt_wrapFunction0(ccvu_PrioritizedArray$Wrapper_toString)],
ccve_GaussianBlurEffect$Convolve2DEffect, 0, ccve_CompositeVfxEffect, [ccve_ChainVfxEffect], 4, 3, 0, 0, 0,
jl_Readable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_Reader, 0, jl_Object, [ji_Closeable, jl_Readable], 1, 3, 0, 0, 0,
ji_BufferedReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_BufferedReader_close)],
ji_InputStreamReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_InputStreamReader_close)],
ju_StringTokenizer, 0, jl_Object, [ju_Enumeration], 0, 3, 0, 0, 0,
cbggg_TextureAtlas$TextureAtlasData$Field, 0, jl_Object, [], 3, 0, 0, 0, 0,
cbggg_TextureAtlas$TextureAtlasData$1, "TextureAtlas$TextureAtlasData$1", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$1_parse)],
cbggg_TextureAtlas$TextureAtlasData$2, "TextureAtlas$TextureAtlasData$2", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$2_parse)],
cbggg_TextureAtlas$TextureAtlasData$3, "TextureAtlas$TextureAtlasData$3", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$3_parse)],
cbggg_TextureAtlas$TextureAtlasData$4, "TextureAtlas$TextureAtlasData$4", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$4_parse)],
cbggg_TextureAtlas$TextureAtlasData$5, "TextureAtlas$TextureAtlasData$5", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$5_parse)],
cbggg_TextureAtlas$TextureAtlasData$6, "TextureAtlas$TextureAtlasData$6", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$6_parse)],
cbggg_TextureAtlas$TextureAtlasData$7, "TextureAtlas$TextureAtlasData$7", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$7_parse)],
cbggg_TextureAtlas$TextureAtlasData$8, "TextureAtlas$TextureAtlasData$8", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$8_parse)],
cbggg_TextureAtlas$TextureAtlasData$9, "TextureAtlas$TextureAtlasData$9", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$9_parse)],
cbggg_TextureAtlas$TextureAtlasData$10, "TextureAtlas$TextureAtlasData$10", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$10_parse)],
cbggg_TextureAtlas$TextureAtlasData$11, "TextureAtlas$TextureAtlasData$11", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$11_parse)],
cbggg_TextureAtlas$TextureAtlasData$12, "TextureAtlas$TextureAtlasData$12", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$12_parse)],
cbggg_TextureAtlas$TextureAtlasData$13, "TextureAtlas$TextureAtlasData$13", 19, jl_Object, [cbggg_TextureAtlas$TextureAtlasData$Field], 0, 0, 0, 0, ["$parse", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$13_parse)],
cbggg_TextureAtlas$TextureAtlasData$14, 0, jl_Object, [ju_Comparator], 0, 0, 0, 0, ["$compare", $rt_wrapFunction2(cbggg_TextureAtlas$TextureAtlasData$14_compare)],
cbggg_TextureAtlas$TextureAtlasData$Region, "TextureAtlas$TextureAtlasData$Region", 19, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_TextureAtlas$TextureAtlasData$Page, "TextureAtlas$TextureAtlasData$Page", 19, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0, 0, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_0_get)],
cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1, 0, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbggg_TextureAtlas$TextureAtlasData$load$lambda$_2_1_get)],
cbggg_BitmapFontCache, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_BaseJsonReader, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgu_JsonReader, 0, jl_Object, [cbgu_BaseJsonReader], 0, 3, 0, 0, 0,
cbgu_JsonWriter$OutputType, "JsonWriter$OutputType", 13, jl_Enum, [], 12, 3, 0, cbgu_JsonWriter$OutputType_$callClinit, 0,
cbgm_MapProperties, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgggp_ParticleEffect$_init_$lambda$_0_0, 0, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbgggp_ParticleEffect$_init_$lambda$_0_0_get)],
cbgggp_ParticleController$_init_$lambda$_0_0, 0, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbgggp_ParticleController$_init_$lambda$_0_0_get)],
cbgggp_ResourceData$_init_$lambda$_0_0, 0, jl_Object, [cbgu_ArraySupplier], 0, 3, 0, 0, ["$get1", $rt_wrapFunction1(cbgggp_ResourceData$_init_$lambda$_0_0_get)],
cbgu_PropertiesUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
jt_ParsePosition, 0, jl_Object, [], 0, 3, 0, 0, 0,
otcin_Buffers, 0, jl_Object, [], 4, 3, 0, 0, 0]);
$rt_metadata([otjb_TimerHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0, 0, jl_Object, [otjb_TimerHandler], 0, 3, 0, 0, 0,
jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0,
otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbtf_HEXCoder, 0, jl_Object, [], 0, 3, 0, 0, 0,
ccve_GaussianBlurEffect$Convolve1DEffect, "GaussianBlurEffect$Convolve1DEffect", 24, ccve_ShaderVfxEffect, [ccve_ChainVfxEffect], 4, 3, 0, 0, ["$rebind", $rt_wrapFunction0(ccve_GaussianBlurEffect$Convolve1DEffect_rebind), "$render0", $rt_wrapFunction2(ccve_GaussianBlurEffect$Convolve1DEffect_render)],
ccve_GaussianBlurEffect$1, 0, jl_Object, [], 32, 0, 0, ccve_GaussianBlurEffect$1_$callClinit, 0,
jnci_UTF8Charset, 0, jnc_Charset, [], 0, 3, 0, jnci_UTF8Charset_$callClinit, ["$newDecoder", $rt_wrapFunction0(jnci_UTF8Charset_newDecoder)],
otcit_FloatSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
jt_NumberFormat, 0, jt_Format, [], 1, 3, 0, 0, ["$format1", $rt_wrapFunction3(jt_NumberFormat_format)],
jt_ChoiceFormat, "ChoiceFormat", 36, jt_NumberFormat, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(jt_ChoiceFormat_equals), "$format3", $rt_wrapFunction3(jt_ChoiceFormat_format), "$format4", $rt_wrapFunction3(jt_ChoiceFormat_format0), "$hashCode", $rt_wrapFunction0(jt_ChoiceFormat_hashCode)],
jt_DecimalFormat, "DecimalFormat", 36, jt_NumberFormat, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(jt_DecimalFormat_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat_hashCode), "$format1", $rt_wrapFunction3(jt_DecimalFormat_format2), "$format4", $rt_wrapFunction3(jt_DecimalFormat_format1), "$format3", $rt_wrapFunction3(jt_DecimalFormat_format0)],
jt_DecimalFormatSymbols, 0, jl_Object, [jl_Cloneable], 0, 3, 0, 0, 0,
jt_DateFormat, 0, jt_Format, [], 1, 3, 0, 0, ["$format1", $rt_wrapFunction3(jt_DateFormat_format)],
jt_SimpleDateFormat, "SimpleDateFormat", 36, jt_DateFormat, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(jt_SimpleDateFormat_equals), "$hashCode", $rt_wrapFunction0(jt_SimpleDateFormat_hashCode)],
cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
jl_Boolean, "Boolean", 37, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Boolean_toString), "$hashCode", $rt_wrapFunction0(jl_Boolean_hashCode), "$equals", $rt_wrapFunction1(jl_Boolean_equals)],
ccvu_PrioritizedArray$Wrapper$1, 0, cbgu_Pool, [], 0, 0, 0, 0, ["$newObject", $rt_wrapFunction0(ccvu_PrioritizedArray$Wrapper$1_newObject)],
jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CharsetDecoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
cbgg_TextureData$TextureDataType, "TextureData$TextureDataType", 17, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_MipMapGenerator, 0, jl_Object, [], 0, 3, 0, 0, 0,
jt_DecimalFormat$FormatField, 0, jl_Object, [], 3, 0, 0, 0, 0,
jt_DecimalFormat$TextField, "DecimalFormat$TextField", 36, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, 0, ["$render4", $rt_wrapFunction2(jt_DecimalFormat$TextField_render), "$equals", $rt_wrapFunction1(jt_DecimalFormat$TextField_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat$TextField_hashCode)],
jt_DateFormatSymbols, 0, jl_Object, [ji_Serializable, jl_Cloneable], 0, 3, 0, 0, 0,
jn_NativeBuffer, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
otjde_EventTarget, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otja_XMLHttpRequest, 0, jl_Object, [otj_JSObject, otjde_EventTarget], 0, 3, 0, 0, 0,
otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_Matcher$1, "Matcher$1", 31, jl_Object, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Matcher$1_toString)],
jn_CharBuffer, 0, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
otjt_Uint8Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
otjt_Uint16Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
jm_RoundingMode, "RoundingMode", 35, jl_Enum, [], 12, 3, 0, 0, 0,
ju_Currency, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
jnc_CharacterCodingException, 0, ji_IOException, [], 0, 3, 0, 0, 0,
jl_Error, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
jl_AssertionError, "AssertionError", 37, jl_Error, [], 0, 3, 0, 0, 0,
otcic_CurrencyHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
ju_Calendar, 0, jl_Object, [ji_Serializable, jl_Cloneable, jl_Comparable], 1, 3, 0, 0, 0,
otjde_Registration, 0, jl_Object, [], 0, 3, 0, 0, 0,
jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, 0, 0,
jn_CharBufferOverTypedArray, 0, jn_CharBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$capacityImpl", $rt_wrapFunction0(jn_CharBufferOverTypedArray_capacityImpl)],
ju_GregorianCalendar, 0, ju_Calendar, [], 0, 3, 0, 0, 0,
jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CoderMalfunctionError, "CoderMalfunctionError", 33, jl_Error, [], 0, 3, 0, 0, 0,
jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 33, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
ju_TimeZone, 0, jl_Object, [ji_Serializable, jl_Cloneable], 1, 3, 0, ju_TimeZone_$callClinit, 0]);
$rt_metadata([ju_IANATimeZone, 0, ju_TimeZone, [], 0, 0, 0, 0, 0,
otcit_DateTimeZone, 0, jl_Object, [], 1, 3, 0, 0, 0,
otcit_StorableDateTimeZone, 0, otcit_DateTimeZone, [], 1, 3, 0, 0, 0,
otcit_FixedDateTimeZone, 0, otcit_StorableDateTimeZone, [], 4, 3, 0, 0, 0,
cgxgbt_TeaFileHandle$1, 0, jl_Object, [], 32, 0, 0, cgxgbt_TeaFileHandle$1_$callClinit, 0,
ju_HashMap$AbstractMapIterator, 0, jl_Object, [], 0, 0, 0, 0, 0,
ju_HashMap$EntryIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
jnci_BufferedDecoder, 0, jnc_CharsetDecoder, [], 1, 3, 0, 0, 0,
jnci_UTF8Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF8Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jn_BufferOverflowException, "BufferOverflowException", 32, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_BufferUnderflowException, "BufferUnderflowException", 33, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_BufferOverflowException, "BufferOverflowException", 33, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_MalformedInputException, "MalformedInputException", 33, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_MalformedInputException_getMessage)],
jnc_UnmappableCharacterException, "UnmappableCharacterException", 33, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_UnmappableCharacterException_getMessage)],
cbgu_ObjectSet$ObjectSetIterator, 0, jl_Object, [jl_Iterable, ju_Iterator], 0, 3, 0, 0, 0,
cgxgbta_TeaBlob, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbtwh_HowlMusic, 0, jl_Object, [cbga_Music], 0, 3, 0, 0, 0,
cgxgbtwh_HowlSound, 0, jl_Object, [cbga_Sound], 0, 3, 0, 0, 0,
cbgu_Sort, 0, jl_Object, [], 0, 3, 0, 0, 0,
jt_DecimalFormatParser, 0, jl_Object, [], 0, 0, 0, 0, 0,
ji_ByteArrayOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
cbgu_StreamUtils$OptimizedByteArrayOutputStream, 0, ji_ByteArrayOutputStream, [], 0, 3, 0, 0, 0,
cbgu_ObjectMap$MapIterator, 0, jl_Object, [jl_Iterable, ju_Iterator], 1, 0, 0, 0, 0,
cbgu_ObjectMap$Keys, 0, cbgu_ObjectMap$MapIterator, [], 0, 3, 0, 0, 0,
jt_FieldPosition, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgm_MathUtils$Sin, 0, jl_Object, [], 0, 0, 0, 0, 0,
cgxgbtwh_Howl, 0, jl_Object, [otj_JSObject], 0, 3, 0, 0, 0,
jl_Double, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$doubleValue", $rt_wrapFunction0(jl_Double_doubleValue)],
jt_SimpleDatePatternParser, 0, jl_Object, [], 0, 0, 0, 0, 0,
jt_DateFormatElement, 0, jl_Object, [], 1, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0, 0, jl_Object, [otjb_TimerHandler], 0, 3, 0, 0, 0,
cbgggp_ParticleControllerComponent, 0, jl_Object, [cbgu_Disposable, cbgu_Json$Serializable, cbgggp_ResourceData$Configurable], 1, 3, 0, cbgggp_ParticleControllerComponent_$callClinit, 0,
cbgggpi_Influencer, 0, cbgggp_ParticleControllerComponent, [], 1, 3, 0, 0, 0,
cbgggp_ResourceData$SaveData, 0, jl_Object, [cbgu_Json$Serializable], 0, 3, 0, 0, 0,
jnci_BufferedDecoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_TimSort, 0, jl_Object, [], 0, 0, 0, 0, 0,
cbggg_GLFrameBuffer, 0, jl_Object, [cbgu_Disposable], 1, 3, 0, cbggg_GLFrameBuffer_$callClinit, 0,
cbggg_FrameBuffer, "FrameBuffer", 18, cbggg_GLFrameBuffer, [], 0, 3, 0, 0, 0,
jt_DecimalFormat$MinusField, "DecimalFormat$MinusField", 36, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, 0, ["$render4", $rt_wrapFunction2(jt_DecimalFormat$MinusField_render), "$equals", $rt_wrapFunction1(jt_DecimalFormat$MinusField_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat$MinusField_hashCode)],
jt_DateFormatElement$Numeric, "DateFormatElement$Numeric", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$Numeric_format), "$processBeforeFormat", $rt_wrapFunction1(jt_DateFormatElement$Numeric_processBeforeFormat), "$equals", $rt_wrapFunction1(jt_DateFormatElement$Numeric_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$Numeric_hashCode)],
jt_DateFormatElement$WeekdayText, "DateFormatElement$WeekdayText", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$WeekdayText_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$WeekdayText_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$WeekdayText_hashCode)],
jt_DateFormatElement$EraText, "DateFormatElement$EraText", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$EraText_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$EraText_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$EraText_hashCode)],
jt_DateFormatElement$BaseTimezone, 0, jt_DateFormatElement, [], 1, 3, 0, 0, ["$equals", $rt_wrapFunction1(jt_DateFormatElement$BaseTimezone_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$BaseTimezone_hashCode)],
jt_DateFormatElement$Rfc822Timezone, "DateFormatElement$Rfc822Timezone", 36, jt_DateFormatElement$BaseTimezone, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$Rfc822Timezone_format)],
jt_DateFormatElement$AmPmText, "DateFormatElement$AmPmText", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$AmPmText_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$AmPmText_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$AmPmText_hashCode)],
jt_DateFormatElement$NumericHour, "DateFormatElement$NumericHour", 36, jt_DateFormatElement$Numeric, [], 0, 3, 0, 0, ["$processBeforeFormat", $rt_wrapFunction1(jt_DateFormatElement$NumericHour_processBeforeFormat), "$equals", $rt_wrapFunction1(jt_DateFormatElement$NumericHour_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$NumericHour_hashCode)],
jt_DateFormatElement$NumericWeekday, "DateFormatElement$NumericWeekday", 36, jt_DateFormatElement$Numeric, [], 0, 3, 0, 0, ["$processBeforeFormat", $rt_wrapFunction1(jt_DateFormatElement$NumericWeekday_processBeforeFormat)],
jt_DateFormatElement$GeneralTimezone, "DateFormatElement$GeneralTimezone", 36, jt_DateFormatElement$BaseTimezone, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$GeneralTimezone_format)],
jt_DateFormatElement$ConstantText, "DateFormatElement$ConstantText", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$ConstantText_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$ConstantText_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$ConstantText_hashCode)],
jt_DateFormatElement$Year, "DateFormatElement$Year", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$Year_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$Year_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$Year_hashCode)]]);
$rt_metadata([jt_DateFormatElement$Iso8601Timezone, "DateFormatElement$Iso8601Timezone", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$Iso8601Timezone_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$Iso8601Timezone_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$Iso8601Timezone_hashCode)],
jt_DateFormatElement$MonthText, "DateFormatElement$MonthText", 36, jt_DateFormatElement, [], 0, 3, 0, 0, ["$format7", $rt_wrapFunction2(jt_DateFormatElement$MonthText_format), "$equals", $rt_wrapFunction1(jt_DateFormatElement$MonthText_equals), "$hashCode", $rt_wrapFunction0(jt_DateFormatElement$MonthText_hashCode)],
jt_DateFormatElement$NumericMonth, "DateFormatElement$NumericMonth", 36, jt_DateFormatElement$Numeric, [], 0, 3, 0, 0, ["$processBeforeFormat", $rt_wrapFunction1(jt_DateFormatElement$NumericMonth_processBeforeFormat)],
cbgm_Matrix3, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
otcit_DoubleSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
jm_BigInteger, 0, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, 0, 0, 0,
jm_BigDecimal, 0, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, 0, jm_BigDecimal_$callClinit, ["$doubleValue", $rt_wrapFunction0(jm_BigDecimal_doubleValue)],
otcit_DoubleAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbggg_GLFrameBuffer$GLFrameBufferBuilder, 0, jl_Object, [], 1, 3, 0, 0, 0,
cbggg_GLFrameBuffer$FrameBufferBuilder, 0, cbggg_GLFrameBuffer$GLFrameBufferBuilder, [], 0, 3, 0, 0, 0,
ju_Date, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
jm_Multiplication, 0, jl_Object, [], 0, 0, 0, jm_Multiplication_$callClinit, 0,
jnc_UnsupportedCharsetException, "UnsupportedCharsetException", 33, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
ji_UnsupportedEncodingException, "UnsupportedEncodingException", 34, ji_IOException, [], 0, 3, 0, 0, 0,
jt_MessageFormat$FieldContainer, 0, jl_Object, [], 0, 0, 0, 0, 0,
jt_AttributedCharacterIterator$Attribute, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
jt_Format$Field, 0, jt_AttributedCharacterIterator$Attribute, [], 0, 3, 0, 0, 0,
jt_MessageFormat$Field, 0, jt_Format$Field, [], 0, 3, 0, 0, 0,
jnc_Charset$Charsets, 0, jl_Object, [], 0, 0, 0, jnc_Charset$Charsets_$callClinit, 0,
jnc_StandardCharsets, 0, jl_Object, [], 4, 3, 0, jnc_StandardCharsets_$callClinit, 0,
jnci_AsciiCharset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_AsciiCharset_newDecoder)],
jnci_Iso8859Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_Iso8859Charset_newDecoder)],
jnci_UTF16Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_UTF16Charset_newDecoder)],
ji_ByteArrayInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_ByteArrayInputStream_close)],
psl_BulletLogic, 0, jl_Object, [], 0, 3, 0, 0, 0,
pss_ChimeraShape, 0, pss_Shape, [], 0, 3, 0, pss_ChimeraShape_$callClinit, 0,
jm_BitLevel, 0, jl_Object, [], 0, 0, 0, 0, 0,
ses_ShapeUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
jt_DecimalFormat$PerMillField, "DecimalFormat$PerMillField", 36, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, 0, ["$render4", $rt_wrapFunction2(jt_DecimalFormat$PerMillField_render), "$equals", $rt_wrapFunction1(jt_DecimalFormat$PerMillField_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat$PerMillField_hashCode)],
jt_DecimalFormat$CurrencyField, "DecimalFormat$CurrencyField", 36, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, 0, ["$render4", $rt_wrapFunction2(jt_DecimalFormat$CurrencyField_render), "$equals", $rt_wrapFunction1(jt_DecimalFormat$CurrencyField_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat$CurrencyField_hashCode)],
jt_DecimalFormat$PercentField, "DecimalFormat$PercentField", 36, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, 0, ["$render4", $rt_wrapFunction2(jt_DecimalFormat$PercentField_render), "$equals", $rt_wrapFunction1(jt_DecimalFormat$PercentField_equals), "$hashCode", $rt_wrapFunction0(jt_DecimalFormat$PercentField_hashCode)],
jl_ArithmeticException, "ArithmeticException", 37, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cbggg_GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_GLFrameBuffer$FrameBufferTextureAttachmentSpec, "GLFrameBuffer$FrameBufferTextureAttachmentSpec", 18, jl_Object, [], 0, 3, 0, 0, 0,
jt_AttributedString, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnci_AsciiDecoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_AsciiDecoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_UTF16Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF16Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_Iso8859Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_Iso8859Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jl_ArrayIndexOutOfBoundsException, "ArrayIndexOutOfBoundsException", 37, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
pss_BulletShape, 0, pss_Shape, [], 0, 3, 0, pss_BulletShape_$callClinit, 0,
jnc_CharsetEncoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
jt_DecimalFormat$1, 0, jl_Object, [], 32, 0, 0, jt_DecimalFormat$1_$callClinit, 0,
jm_Elementary, 0, jl_Object, [], 0, 0, 0, 0, 0,
jm_Division, 0, jl_Object, [], 0, 0, 0, 0, 0,
ju_ArrayDeque$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
jt_DecimalFormat$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0,
cbggg_BitmapFontCache$addText$lambda$_31_0, "BitmapFontCache$addText$lambda$_31_0", 19, jl_Object, [cbgu_DefaultPool$PoolSupplier], 0, 3, 0, 0, ["$get7", $rt_wrapFunction0(cbggg_BitmapFontCache$addText$lambda$_31_0_get)],
ses_Joiner, 0, jl_Object, [], 0, 0, 0, 0, 0,
jt_CharacterIterator, 0, jl_Object, [jl_Cloneable], 3, 3, 0, 0, 0,
jt_AttributedCharacterIterator, 0, jl_Object, [jt_CharacterIterator], 3, 3, 0, 0, 0]);
$rt_metadata([jt_AttributedString$AttributedIterator, 0, jl_Object, [jt_AttributedCharacterIterator], 0, 0, 0, 0, 0,
jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0,
jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$6, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$6_onProgress), "$onSuccess", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$6_onSuccess)],
otc_PlatformDetector, 0, jl_Object, [], 4, 3, 0, 0, 0,
jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_GLOnlyTextureData, "GLOnlyTextureData", 18, jl_Object, [cbgg_TextureData], 0, 3, 0, 0, ["$getType", $rt_wrapFunction0(cbggg_GLOnlyTextureData_getType), "$isPrepared", $rt_wrapFunction0(cbggg_GLOnlyTextureData_isPrepared), "$prepare", $rt_wrapFunction0(cbggg_GLOnlyTextureData_prepare), "$consumeCustomData", $rt_wrapFunction1(cbggg_GLOnlyTextureData_consumeCustomData), "$consumePixmap", $rt_wrapFunction0(cbggg_GLOnlyTextureData_consumePixmap), "$disposePixmap", $rt_wrapFunction0(cbggg_GLOnlyTextureData_disposePixmap),
"$getWidth", $rt_wrapFunction0(cbggg_GLOnlyTextureData_getWidth), "$getHeight", $rt_wrapFunction0(cbggg_GLOnlyTextureData_getHeight), "$getFormat", $rt_wrapFunction0(cbggg_GLOnlyTextureData_getFormat), "$useMipMaps", $rt_wrapFunction0(cbggg_GLOnlyTextureData_useMipMaps), "$isManaged", $rt_wrapFunction0(cbggg_GLOnlyTextureData_isManaged)],
ccvu_CommonUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
jm_Conversion, 0, jl_Object, [], 0, 0, 0, 0, 0,
jt_AttributedString$Range, 0, jl_Object, [], 0, 0, 0, 0, 0,
ses_Drawing, 0, jl_Object, [], 0, 3, 0, 0, 0,
jt_Annotation, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_HashMap$1, 0, ju_AbstractSet, [], 0, 0, 0, 0, ["$iterator0", $rt_wrapFunction0(ju_HashMap$1_iterator)],
cbgg_Colors, 0, jl_Object, [], 4, 3, 0, cbgg_Colors_$callClinit, 0,
ju_HashMap$KeyIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
cgxgbtf_FileDB$1, 0, ji_OutputStream, [], 0, 0, 0, 0, ["$close", $rt_wrapFunction0(cgxgbtf_FileDB$1_close)]]);
let $rt_booleanArrayCls = $rt_arraycls($rt_booleancls),
$rt_charArrayCls = $rt_arraycls($rt_charcls),
$rt_byteArrayCls = $rt_arraycls($rt_bytecls),
$rt_shortArrayCls = $rt_arraycls($rt_shortcls),
$rt_intArrayCls = $rt_arraycls($rt_intcls),
$rt_longArrayCls = $rt_arraycls($rt_longcls),
$rt_floatArrayCls = $rt_arraycls($rt_floatcls),
$rt_doubleArrayCls = $rt_arraycls($rt_doublecls);
$rt_stringPool(["Can\'t enter monitor from another thread synchronously", "start + count must be <= size: ", " + ", " <= ", "end can\'t be >= size: ", " >= ", "start can\'t be > end: ", " > ", "objects cannot be null.", "", "texture cannot be null.", "com/badlogic/gdx/utils/lsans-15.fnt", "com/badlogic/gdx/utils/lsans-15.png", "If no regions are specified, the font data must have an images path.", "The specified font must contain at least one texture page.", "0", "GL_EXT_texture_filter_anisotropic", "New data must have the same managed status as the old data",
"GL_ARB_framebuffer_object", "GL_EXT_framebuffer_object", "com.badlogic.gdx.backends.lwjgl3.Lwjgl3GLES20", "index can\'t be >= size: ", "Array is empty.", "additionalCapacity must be >= 0: ", "fromIndex(", ") > toIndex(", ")", "newSize must be >= 0: ", "[]", ", ", "class", "loadFactor must be > 0 and < 1: ", "key cannot be null.", "interface ", "class ", ": ", "\n", "\tat ", "null", "Caused by: ", "Should never been thrown", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ",
"The value is too big for integer type", "The value is too big for int type: ", "Illegal radix: ", "false", "true", "app", "db/assets", "high-performance", "canvas", "java.runtime.name", "userAgent", "os.name", "Windows", "OS X", "no OS", "Linux", ".html", "index.html", "index-wasm.html", "index-debug.html", "gdx.wasm.js", "pagehide", "resize", "assets.txt", "Cannot clean up buffers when applying effects.", "Cannot clean up buffers when capturing a scene.", "Capture is not available when VfxManager is applying the effects.",
"PolygonSpriteBatch.end must be called before begin.", "PolygonSpriteBatch.begin must be called before end.", "The capturing is not started. Forgot to call #beginInputCapture()?", "pref:", "howler.js", "WEB_SCRIPT_PATH", "WEB_ASSET_PATH", "polygon_burst.survivor01_desktop.preferences", "version", "text_size", "sound_volume", "music_volume", "At the moment of disposal, the pool still has some managed buffers unfreed (", "). Someone\'s using them and hasn\'t freed?", "#iterator() cannot be used nested.", "bounces cannot be < 2 or > 5: ",
"Class does not represent enum", "Enum ", " does not have the ", " constant", "INIT", "PRELOAD_ASSETS", "DOWNLOAD_ASSETS", "APP_CREATE", "APP_LOOP", "object", "function", "string", "number", "undefined", "Either src or dest is null", "java.version", "1.8", "TeaVM", "file.separator", "/", "path.separator", ":", "line.separator", "java.io.tmpdir", "/tmp", "java.vm.version", "user.home", "GLVersion", "OpenGL ES (\\d(\\.\\d){0,2})", "WebGL (\\d(\\.\\d){0,2})", "(\\d(\\.\\d){0,2})", "px", "Loading asset: ", "Unsupported asset type ",
"assets/", "scripts/", "Loading script: ", "mousedown", "mouseup", "mousemove", "wheel", "touchstart", "touchmove", "touchcancel", "touchend", "keydown", "keypress", "keyup", "CSS1Compat", "IndexedDB is not supported in this browser", "Type ", " is not supported", "hidden", "visible", "object cannot be null.", "capacity must be >= 0: ", "The required capacity is too large: ", "The value is too big for long type", "The value is too big for long type: ", "glGetBoolean not supported by WebGL backend", "glGetFloat not supported by WebGL backend",
"glGetInteger not supported by WebGL backend", "GL error: ", "Invalid version string: ", "\\.", "Error parsing number: ", ", assuming: ", "libGDX GL", "Android", "Desktop", "HeadlessDesktop", "Applet", "WebGL", "iOS", " REMOVE FOLDER: ", " REMOVE FILE: ", " Path: ", " Error: ", " CONTAINS FOLDER: ", " CONTAINS FILE: ", ".", "./", " GET FOLDER: ", " GET FILE: ", " Size: ", " PUT FILE: ", " Bytes: ", "Cannot put an empty folder name", " PUT FOLDER: ", "PUT FOLDER DB: ", "PUT FILE DB: ", "REMOVE FILE DB: ", "n must be positive",
"OpenGL", "GLES", "NONE", "Patter is null", "IndexedDB Error opening database: ", "fSet", "Is", "In", "NonCapFSet", "AheadFSet", "BehindFSet", "AtomicFSet", "FinalSet", "<Empty set>", "JointSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "PosBehindJointSet", "NegBehindJointSet", "<Quant>", "<GroupQuant>", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined",
"javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "S", "d", "D", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement",
"Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional",
"GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B",
"SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols",
"CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM",
"Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "posFSet", " ", "^ ", "range:", "CompositeRangeSet:  <nonsurrogate> ", " <surrogate> ", "UCI range:", "decomposed Hangul syllable:", "UCI ", "CI ", "decomposed char:", "<DotAllQuant>", "<DotQuant>", "<SOL>", "WordBoundary", "PreviousMatch", "<EOL>", "EOI", "^", "DotAll", "<Unix MultiLine $>", "<MultiLine $>", "CI back reference: ", "back reference: ",
"UCI back reference: ", "sequence: ", "UCI sequence: ", "CI sequence: ", "PX", "PCT", "EM", "EX", "PT", "PC", "IN", "CM", "MM", "main", "success", "failure", "IndexedDB Error cursor", "offset + length must be <= size: ", "charsetName is null", "Script download success: ", "Script download failed: ", "No support for buffer ", "default", "crosshair", "pointer", "ew-resize", "ns-resize", "text", "nwse-resize", "nesw-resize", "move", "not-allowed", "Unknown system cursor ", "none", "Ping pong buffer cannot be initialized during capturing stage. It seems the instance is already initialized.",
"graphics/textures.atlas", "fill", "chakra_petch_", "graphics/", ".fnt", "graphics/alpha_prota_64.fnt", "alpha_prota_64", "Invalid assets description file. ", "1", "c", "l", "\\", "Binary", "b", "Directory", "IndexedDB Error putting file: ", "You should call VfxManager.endCapture() before applying the effects.", "You should call endCapture() before rendering the result.", "NA", "game_state", "music/escape_the_grid.ogg", "in_the_club", "sounds/confirmation_", ".ogg", "sounds/ah1z_gun_", "sounds/ka50_gun_", "option_select",
"ah1z_gun", "ka50_gun", "Arrow", "Ibeam", "Crosshair", "Hand", "HorizontalResize", "VerticalResize", "NWSEResize", "NESWResize", "AllResize", "NotAllowed", "None", "Unknown Format: ", "Intensity", "LuminanceAlpha", "RGB565", "RGBA4444", "RGB888", "RGBA8888", "gdxvfx/shaders/screenspace.vert", "gdxvfx/shaders/fxaa.frag", "#define SUPPORT_ALPHA", "u_viewportInverse", "u_texture0", "u_fxaaReduceMin", "u_fxaaReduceMul", "u_fxaaSpanMax", "gdxvfx/shaders/gamma-threshold.frag", "#define THRESHOLD_TYPE ", "u_threshold",
"u_thresholdInv", "u_src0Intensity", "u_src0Saturation", "u_src1Intensity", "u_src1Saturation", "Passes should be greater than 0.", "gdxvfx/shaders/mix.frag", "#define METHOD ", "u_mix", "FBO amount should be a positive number.", "MAX", "MIX", "Can\'t have more than 32767 vertices per batch: ", "a_position", "a_color", "a_texCoord0", "PolygonSpriteBatch.begin must be called before draw.", "u_projTrans", "u_texture", "POLYGON_BURST", "POLYGON GAME [ PROOF OF CONCEPT ]", "made with lib", "GDX", "polygons must contain at least 3 points.",
"A polygon must have 3 or more coordinate pairs.", "Vertex shader file cannot be null.", "Fragment shader file cannot be null.", "Defines cannot be null.", "Compiling \"", " w/ (", "...", "Shader compile error: ", "com.crashinvaders.vfx.gwt.GwtVfxGlExtension", "GWT GL Extension initialized.", "Cannot find GwtVfxGlExtension class.Are you sure you connected \"gdx-vfx-gwt\" library? \nPlease visit GWT setup wiki page for instructions: https://github.com/crashinvaders/gdx-vfx/wiki/GWT-HTML-Library-Integration",
"Gaussian3x3", "Gaussian3x3b", "Gaussian5x5", "Gaussian5x5b", "gdxvfx/shaders/copy.frag", "Blur type cannot be null.", "RGBA", "RGB", "ALPHA_PREMULTIPLIED", "gdxvfx/shaders/combine.frag", "u_texture1", "texts/main_menu", "continue_to_game", "guide_to_the_game", "go_to_settings", "exit_to_desktop", "logo", "gear", "HP1: ", "HP2: ", "HP3: ", "HP4: ", "CHI: ", "FPS: ", "Target Practice", "Bullets: ", "Deque:  ", "com.badlogic.gdx.controllers.android.AndroidControllers", "com.badlogic.gdx.controllers.desktop.JamepadControllerManager",
"com.badlogic.gdx.controllers.gwt.GwtControllers", "com.badlogic.gdx.controllers.IosControllerManager", "No controller manager is available for: ", "Controllers", "Error creating controller manager: ", "added manager for application, ", " managers active", "Ping pong buffer cannot be reset during capturing stage. Forgot to call end()?", "Ping pong buffer is already in capturing state.", "Ping pong is not in capturing state. You should call begin() before calling end().", "vertex shader must not be null", "fragment shader must not be null",
"Fragment shader:\n", "Vertex shader\n", "An attempted fetch uniform from uncompiled shader \n", "No uniform with name \'", "\' in shader", "MirroredRepeat", "ClampToEdge", "Repeat", "Nearest", "Linear", "MipMap", "MipMapNearestNearest", "MipMapLinearNearest", "MipMapNearestLinear", "MipMapLinearLinear", "VfxFrameBuffer must be initialized first", "Already drawing", "Is not drawing", "Current bound OpenGL FBO\'s handle doesn\'t match to wrapped one. It seems like begin/end order was violated.", "Error reading file: ",
"The texture region is null. Please set a texture region first (e.g. in the constructor or by calling setTextureRegion(TextureRegion region))", "Already loaded.", "File is empty.", "padding=", ",", "Invalid padding.", "Missing common header.", "Invalid common header.", "lineHeight=", "Missing: lineHeight", "base=", "Missing: base", "pages=", "Missing additional page definitions.", ".*id=(\\d+)", ".*file=\"?([^\"]+)\"?", "\\\\", "Missing: file", "Page IDs must be indices starting at 0: ", "Invalid page id: ",
"kernings ", "metrics ", "char ", " =", "kerning ", "Error loading font file: ", "No glyphs found.", "texts/episodes_pages", "pages", "page_", "Back to Main", "Start Episode", "texts/guide_pages", "0%", "25%", "50%", "75%", "100%", "Sound Volume", "Music Volume", "Small", "Medium", "Huge", "Text Font Size", "Return to Main", "UTF-8", "Can\'t find bundle for base file handle ", ", locale ", "_", ".properties", "???", "Can\'t find bundle key ", "\'\'", "#ifdef GL_ES\n    #define PRECISION mediump\n    precision PRECISION float;\n#else\n    #define PRECISION\n#endif\nattribute vec4 a_position;\nattribute vec2 a_texCoord0;\nvarying vec2 v_texCoords;\nvoid main() {\n    v_texCoords = a_texCoord0;\n    gl_Position = a_position;\n}",
"#ifdef GL_ES\n    #define PRECISION mediump\n    precision PRECISION float;\n#else\n    #define PRECISION\n#endif\nvarying vec2 v_texCoords;\nuniform sampler2D u_texture0;\nvoid main() {\n    gl_FragColor = texture2D(u_texture0, v_texCoords);\n}", "Instance is already disposed", "buffer cannot be null.", "New position ", " is outside of range [0;", "Capacity is negative: ", " is not set", " at ", "[ByteBuffer position=", ", limit=", ", capacity=", ", mark ", "BIG_ENDIAN", "LITTLE_ENDIAN", "data must be a ByteBuffer or FloatBuffer",
"buffer not allocated with newUnsafeByteBuffer or already disposed", "Tap3x3", "Tap5x5", "VertexArray", "VertexBufferObject", "VertexBufferObjectSubData", "VertexBufferObjectWithVAO", "Mesh attempting to access memory outside of the index buffer (count: ", ", offset: ", ", max: ", "Can\'t have more than 8191 sprites per batch: ", "attribute vec4 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord0;\nuniform mat4 u_projTrans;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\n\nvoid main()\n{\n   v_color = a_color;\n   v_color.a = v_color.a * (255.0/254.0);\n   v_texCoords = a_texCoord0;\n   gl_Position =  u_projTrans * a_position;\n}\n",
"#ifdef GL_ES\n#define LOWP lowp\nprecision mediump float;\n#else\n#define LOWP \n#endif\nvarying LOWP vec4 v_color;\nvarying vec2 v_texCoords;\nuniform sampler2D u_texture;\nvoid main()\n{\n  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n}", "Error compiling shader: ", "size", "format", "filter", "repeat", "pma", "xy", "bounds", "offset", "orig", "offsets", "rotate", "index", "Error reading texture atlas file: ", "\nLine: ", "# ", "__", "en", "CA", "fr", "zh", "CN", "FR", "de", "DE", "it", "IT",
"ja", "JP", "ko", "KR", "TW", "GB", "US", "attributes must be >= 1", "No buffer allocated!", "IndexBufferObject cannot be used after it has been disposed.", "Index ", "Already prepared", "Call prepare() before calling getPixmap()", "This TextureData implementation does not upload data itself", "File is null, it does not exist: ", "Pixmap already disposed!", "Unknown Gdx2DPixmap Format: ", "Unmatched braces in the pattern.", "Argument index out of bounds: ", "Missing argument index after a left curly brace",
"Unexpected \'", "\' while parsing argument index", "String index out of bounds: ", "-2147483648", "SourceOver", "NearestNeighbour", "BiLinear", "unknown format: ", "Unmatched braces in the pattern", "Invalid argument number", "Unknown style: ", "{0}", "{1}", "Missing element format", "time", "date", "choice", "Unknown element format", "full", "long", "medium", "short", "currency", "percent", "integer", "This buffer is not allocated in linear memory and does not wrap native JS buffer", "Asset download failed: ",
"Asset download success: ", "FileType \'", "\' Not supported in web backend", "File not found: ", " (", "Encoding \'", "\' not supported", "Error reading layout file: ", "Classpath", "Internal", "External", "Absolute", "Local", "POINTY", "SMOOTH", "i", "f", "Couldn\'t flush preferences", "[", "]", "json", "javascript", "minimal", "^[a-zA-Z_$][a-zA-Z_$0-9]*$", "^[^\":,}/ ][^:]*$", "^[^\":,{\\[\\]/ ][^}\\],]*$", "properties cannot be null", "reader cannot be null", "Invalid Unicode sequence: expected format \\uxxxx",
"\u0000", "Invalid Unicode sequence: illegal character", "Can only free direct buffer", "gdxvfx/shaders/convolve-1d.frag", "#define LENGTH ", "u_sampleOffsets", "u_sampleWeights", "Replacement preconditions do not hold", "Currency not found: ", "-", "This exception should not been thrown", "Positive number pattern not found in ", "Expected \';\' at ", " in ", "Division by zero", "Non-terminating decimal expansion; no exact representable decimal result.", "Can\'t avoid rounding", "IGNORE", "REPLACE", "REPORT",
"newAction must be non-null", "Pixmap", "Custom", "texture width and height must be square when using mipmapping.", "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", "UNNECESSARY", "ERA=", "YEAR=", "MONTH=", "WEEK_OF_YEAR=", "WEEK_OF_MONTH=", "DAY_OF_MONTH=", "DAY_OF_YEAR=", "DAY_OF_WEEK=", "DAY_OF_WEEK_IN_MONTH=", "AM_PM=", "HOUR=", "HOUR_OF_DAY", "MINUTE=", "SECOND=", "MILLISECOND=", "ZONE_OFFSET=", "DST_OFFSET=", "001", "GMT", "�", "averageCharsPerByte must be positive. Actual value is ",
"maxCharsPerByte must be positive. Actual value is ", "Malformed input of length ", "Unmappable characters of length ", "Prefix contains special character at ", "Quote opened at ", " was not closed in ", "Group separator found at fractional part at ", "Unexpected second decimal separator at ", "Unexpected \'0\' at optional digit part at ", "Unexpected char at exponent at ", "Pattern does not specify exponent digits at ", "Unexpected \'#\' at non-optional digit part at ", "Two group separators at ", "Pattern does not specify integer digits at ",
"Group separator at the end of number at ", "Wrong number of repetitions of X pattern at ", "Comparison method violates its general contract!", "GL_OES_packed_depth_stencil", "GL_EXT_packed_depth_stencil", "Frame buffer couldn\'t be constructed: incomplete attachment", "Frame buffer couldn\'t be constructed: incomplete dimensions", "Frame buffer couldn\'t be constructed: missing attachment", "Frame buffer couldn\'t be constructed: unsupported combination of formats", "Frame buffer couldn\'t be constructed: multisample mismatch",
"Frame buffer couldn\'t be constructed: unknown error ", "Framebuffer multisample requires GLES 3.1+", "Framebuffer multisample with texture attachments not yet supported", "Packed Stencil/Render render buffers are not available on GLES 2.0", "Multiple render targets not available on GLES 2.0", "Depth texture FrameBuffer Attachment not available on GLES 2.0", "Stencil texture FrameBuffer Attachment not available on GLES 2.0", "OES_texture_float", "Float texture FrameBuffer Attachment not available on GLES 2.0",
"Frame buffer couldn\'t be constructed: packed stencil depth buffer cannot be specified together with separated depth or stencil buffer", "Negative bit address", "Negative exponent", "BigInteger divide by zero", "Overflow", "Underflow", "power of ten too big", "input_method_segment", "language", "reading", "message argument field", "UTF-16", "UTF-16BE", "UTF-16LE", "US-ASCII", "ISO-8859-1", "Action must be non-null", "IndexedDB Error removing file: ", "Error writing file: ", "This TextureData implementation does not return a Pixmap",
"CLEAR", "CLEAR_WHITE", "BLACK", "WHITE", "LIGHT_GRAY", "GRAY", "DARK_GRAY", "BLUE", "NAVY", "ROYAL", "SLATE", "SKY", "CYAN", "TEAL", "GREEN", "CHARTREUSE", "LIME", "FOREST", "OLIVE", "YELLOW", "GOLD", "GOLDENROD", "ORANGE", "BROWN", "TAN", "FIREBRICK", "RED", "SCARLET", "CORAL", "SALMON", "PINK", "MAGENTA", "PURPLE", "VIOLET", "MAROON"]);
jl_String.prototype.toString = function() {
    return $rt_ustr(this);
};
jl_String.prototype.valueOf = jl_String.prototype.toString;
jl_Object.prototype.toString = function() {
    return $rt_ustr(jl_Object_toString(this));
};
jl_Object.prototype.__teavm_class__ = function() {
    return $dbg_class(this);
};
let $rt_export_main = $rt_mainStarter(pst_TeaVMLauncher_main);
$rt_export_main.javaException = $rt_javaException;
let $rt_jso_marker = Symbol('jsoClass');
(() => {
    let c;
    c = cgxgbtdi_TeaWindow.prototype;
    c.onAnimationFrame = $rt_callWithReceiver(cgxgbtdi_TeaWindow_onAnimationFrame$exported$0);
    c = cgxgbt_TeaInput.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaInput_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$1_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$2_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$3.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$3_handleEvent$exported$0);
    c = cgxgbt_TeaGraphics$1.prototype;
    c.fullscreenChanged = $rt_callWithReceiver(cgxgbt_TeaGraphics$1_fullscreenChanged$exported$0);
    c = cgxgbt_TeaClipboard$ClipboardWriteHandler.prototype;
    c.denied = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_denied$exported$2);
    c.prompt = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_prompt$exported$1);
    c.granted = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_granted$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_0_handleEvent$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_1_handleEvent$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$1_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$3.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$3_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0.prototype;
    c.apply = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0_apply$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1.prototype;
    c.apply = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1_apply$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2.prototype;
    c.get = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2_get$exported$0);
    c = cgxgbta_AssetLoadImpl$getFile$lambda$_2_0.prototype;
    c.onExecute = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$getFile$lambda$_2_0_onExecute$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2_handleEvent$exported$0);
    c = otji_JSWrapper$Helper$_clinit_$lambda$_3_0.prototype;
    c.accept = $rt_callWithReceiver(otji_JSWrapper$Helper$_clinit_$lambda$_3_0_accept$exported$0);
    c = otji_JSWrapper$Helper$_clinit_$lambda$_3_1.prototype;
    c.accept = $rt_callWithReceiver(otji_JSWrapper$Helper$_clinit_$lambda$_3_1_accept$exported$0);
    c = cgxgbta_AssetDownloadImpl$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$2_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$4.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$4_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$putFile$lambda$_2_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$putFile$lambda$_2_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0.prototype;
    c.onTimer = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0_onTimer$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0.prototype;
    c.onTimer = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0_onTimer$exported$0);
    c = cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0_handleEvent$exported$0);
})();
$rt_exports.main = $rt_export_main;
}));

//# sourceMappingURL=app.js.map